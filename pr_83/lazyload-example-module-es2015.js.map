{"version":3,"sources":["./apps/demo/src/app/examples/lazyload-example/lazyload-example.component.html","./apps/demo/src/app/examples/lazyload-example/lazyload-example.component.css","./apps/demo/src/app/examples/lazyload-example/lazyload-example.module.ts","./apps/demo/src/app/examples/lazyload-example/lazyload-example.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAe,uaAAwW,6CAA6C,+cAA+c,uCAAuC,ggBAAggB,kBAAkB,mDAAmD,E;;;;;;;;;;;;ACA/9C;AAAe,6GAA8C,uIAAuI,E;;;;;;;;;;;;;;;;;;;;;;;;;;ACA3J;AACM;AACyB;AACjB;AACE;AACW;AAE9B;AACoB;AACL;AACA;AAErD,MAAM,cAAc,GAAG,IAAI,qDAAI,CAC7B,GAAG,EAAE,CAAC,gKAAoF;KACvF,IAAI,CAAC,CAAC,EAAC,UAAU,EAAC,EAAE,EAAE,CAAC,UAAU,CAAC,CACtC,CAAC;IAoBW,qBAAqB,SAArB,qBAAqB;IAChC,aAAa;QACX,OAAO;YACL;gBACE,IAAI,EAAE,iBAAiB;gBACvB,aAAa,EAAE,oFAAwB;aACxC;SACF,CAAC;IACJ,CAAC;CACF;AATY,qBAAqB;IAlBjC,8DAAQ,CAAC;QACR,YAAY,EAAE,CAAC,oFAAwB,CAAC;QACxC,OAAO,EAAE;YACP,4DAAY;YACZ,sEAAoB,CAAC,QAAQ,CAAC;gBAC5B;oBACE,UAAU,EAAE,aAAa;oBACzB,YAAY,EAAE;wBACZ,IAAI,EAAE,cAAc;qBACrB;iBACF;aACF,CAAC;YACF,wEAAe;YACf,mFAAoB;YACpB,oEAAa;YACb,qEAAc;SACf;KACF,CAAC;GACW,qBAAqB,CASjC;AATiC;AAWlC,yEAAqB,CAAC,qBAAqB,CAAC,WAAW,EACrD,IAAI,qDAAI,CAAM,GAAG,EAAE,CAAC,qKAAkC,CAAC,CACxD,CAAC;;;;;;;;;;;;;;;;;;;;;;;AChDwC;AAEM;IAOnC,wBAAwB,SAAxB,wBAAwB;IAWnC,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAT7B,cAAS,GAAG,EAAE,CAAC;QACf,kBAAa,GAAG;YACrB,UAAU,EAAE,CAAC,CAAC,EAAS,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;SAC9C,CAAC;QAEF,sBAAiB,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,gCAAgC,EAAE;YAClE,YAAY,EAAE,MAAM;SACrB,CAAC,CAAC;IAEqC,CAAC;IAEzC,WAAW,CAAE,aAA4B;QACvC,aAAa,CAAC,SAAS,GAAG,WAAW,CAAC;QACtC,aAAa,CAAC,YAAY,EAAE,CAAC;QAC7B,0BAA0B;IAC5B,CAAC;IAED,iBAAiB,CAAE,mBAAwC;QACzD,mBAAmB,CAAC,WAAW,GAAG,aAAa,CAAC;QAChD,mBAAmB,CAAC,SAAS,GAAG,cAAc,CAAC;QAC/C,mBAAmB,CAAC,YAAY,EAAE,CAAC;IACrC,CAAC;IAED,WAAW,CAAE,CAAC;QACZ,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACzB,CAAC;CAEF;;YApCO,+DAAU;;AAOL,wBAAwB;IALpC,+DAAS,CAAC;QACT,QAAQ,EAAE,uBAAuB;QACjC,6FAAgD;;KAEjD,CAAC;mFAY0B,+DAAU;GAXzB,wBAAwB,CA6BpC;AA7BoC","file":"lazyload-example-module-es2015.js","sourcesContent":["export default \"<mat-tab-group>\\n  <mat-tab label=\\\"README.MD\\\" #readmeTab>\\n    <gewd-markdown *ngIf=\\\"readmeTab.isActive\\\"\\n                   [markdown]=\\\"lazyLoadReadmeMD$ | async\\\"></gewd-markdown>\\n  </mat-tab>\\n  <mat-tab label=\\\"Try out\\\">\\n\\n<h2><code>gewd-lazy-component</code></h2>\\n\\n<gewd-lazy-component #lazyComponent\\n                     [componentInputs]=\\\"{ testProp: 'Component Binding from outside' }\\\">\\n  <button mat-raised-button color=\\\"primary\\\"\\n          (click)=\\\"setLazyComp(lazyComponent)\\\">\\n    Load Lazy Component: Test-Comp <br/> (this button as content will be replaced)\\n  </button>\\n\\n  <mat-progress-bar isLoading mode=\\\"indeterminate\\\" color=\\\"accent\\\"></mat-progress-bar>\\n</gewd-lazy-component>\\n\\n<br/>\\n<br/>\\n\\n<h2><code>gewd-lazy-module-component</code></h2>\\n\\n<gewd-lazy-module-component\\n  #lazyModuleComponent\\n  [componentInputs]=\\\"{ testProp: 'Module Component Example' }\\\"\\n  [componentOutputs]=\\\"outputBinding\\\">\\n  <button mat-raised-button color=\\\"primary\\\"\\n          (click)=\\\"setLazyModuleComp(lazyModuleComponent)\\\">\\n    Load Lazy Module-Component: Test Module-Comp <br/> (this button as content will be replaced)\\n  </button>\\n\\n\\n  <mat-progress-bar isLoading mode=\\\"indeterminate\\\" color=\\\"accent\\\"></mat-progress-bar>\\n</gewd-lazy-module-component>\\n\\n<br/>\\n<br/>\\n\\n<div>\\n  This Container outside of the lazy loaded component will list the Output-Events:\\n\\n  <pre>{{outputLog | json}}</pre>\\n</div>\\n\\n  </mat-tab>\\n</mat-tab-group>\\n\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJsYXp5bG9hZC1leGFtcGxlLmNvbXBvbmVudC5jc3MifQ== */\";","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LazyloadExampleComponent } from './lazyload-example.component';\nimport {GewdLazyLoaderModule} from \"@gewd/lazy/loader\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {MatProgressBarModule} from \"@angular/material/progress-bar\";\nimport {LazyModule, LazyModuleComponentInfo} from \"@gewd/lazy/contracts\";\nimport {Lazy} from \"@gewd/lazy/utils\";\nimport {DynamicLoaderRegistry} from \"@gewd/lazy/registry\";\nimport {MatTabsModule} from \"@angular/material/tabs\";\nimport {MarkdownModule} from \"@gewd/markdown/module\";\n\nconst testModuleLazy = new Lazy<any>(\n  () => import(/* webpackChunkName: \"lazy-test-module\" */ './lazy-wrapper/test-module-comp')\n    .then(({TestModule}) => TestModule)\n);\n\n@NgModule({\n  declarations: [LazyloadExampleComponent],\n  imports: [\n    CommonModule,\n    GewdLazyLoaderModule.withLazy([\n      {\n        moduleName: 'test-module',\n        moduleConfig: {\n          load: testModuleLazy\n        }\n      }\n    ]),\n    MatButtonModule,\n    MatProgressBarModule,\n    MatTabsModule,\n    MarkdownModule\n  ]\n})\nexport class LazyloadExampleModule  implements LazyModule {\n  getComponents(): LazyModuleComponentInfo[] {\n    return [\n      {\n        name: 'LazyLoadExample',\n        componentType: LazyloadExampleComponent\n      }\n    ];\n  }\n}\n\nDynamicLoaderRegistry.RegisterLazyComponent('test-comp',\n  new Lazy<any>(() => import('./lazy-wrapper/test-comp'))\n);\n\n","import { Component } from '@angular/core';\nimport {LazyComponent, LazyModuleComponent} from \"@gewd/lazy/loader\";\nimport {HttpClient} from \"@angular/common/http\";\n\n@Component({\n  selector: 'gewd-lazyload-example',\n  templateUrl: './lazyload-example.component.html',\n  styleUrls: ['./lazyload-example.component.css']\n})\nexport class LazyloadExampleComponent {\n\n  public outputLog = [];\n  public outputBinding = {\n    outputTest: (e): void  => this.addLogEntry(e)\n  };\n\n  lazyLoadReadmeMD$ = this.http.get('./assets/readme/lazy/README.md', {\n    responseType: 'text'\n  });\n\n  constructor(private http: HttpClient) { }\n\n  setLazyComp (lazyComponent: LazyComponent): void  {\n    lazyComponent.component = 'test-comp';\n    lazyComponent.setComponent();\n    // this.cd.markForCheck();\n  }\n\n  setLazyModuleComp (lazyModuleComponent: LazyModuleComponent): void  {\n    lazyModuleComponent.moduleAlias = 'test-module';\n    lazyModuleComponent.component = 'MyModuleComp';\n    lazyModuleComponent.setComponent();\n  }\n\n  addLogEntry (e): void  {\n    this.outputLog.push(e);\n  }\n\n}\n"],"sourceRoot":"webpack:///"}