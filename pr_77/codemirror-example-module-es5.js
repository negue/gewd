(function () {
  function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

  function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

  function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e3) { throw _e3; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e4) { didErr = true; err = _e4; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

  (window["webpackJsonp"] = window["webpackJsonp"] || []).push([["codemirror-example-module"], {
    /***/
    "1FcE":
    /*!*************************************************************!*\
      !*** ./node_modules/@codemirror/autocomplete/dist/index.js ***!
      \*************************************************************/

    /*! exports provided: CompletionContext, acceptCompletion, autocompletion, clearSnippet, closeCompletion, completeAnyWord, completeFromList, completionKeymap, completionStatus, currentCompletions, ifIn, ifNotIn, moveCompletionSelection, nextSnippetField, prevSnippetField, snippet, snippetCompletion, snippetKeymap, startCompletion */

    /***/
    function FcE(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CompletionContext", function () {
        return CompletionContext;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "acceptCompletion", function () {
        return acceptCompletion;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "autocompletion", function () {
        return autocompletion;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "clearSnippet", function () {
        return clearSnippet;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "closeCompletion", function () {
        return closeCompletion;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "completeAnyWord", function () {
        return completeAnyWord;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "completeFromList", function () {
        return completeFromList;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "completionKeymap", function () {
        return completionKeymap;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "completionStatus", function () {
        return completionStatus;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "currentCompletions", function () {
        return currentCompletions;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ifIn", function () {
        return ifIn;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ifNotIn", function () {
        return ifNotIn;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "moveCompletionSelection", function () {
        return moveCompletionSelection;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "nextSnippetField", function () {
        return nextSnippetField;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "prevSnippetField", function () {
        return prevSnippetField;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "snippet", function () {
        return snippet;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "snippetCompletion", function () {
        return snippetCompletion;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "snippetKeymap", function () {
        return snippetKeymap;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "startCompletion", function () {
        return startCompletion;
      });
      /* harmony import */


      var _codemirror_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @codemirror/state */
      "4eob");
      /* harmony import */


      var _codemirror_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @codemirror/view */
      "AtEE");
      /* harmony import */


      var _codemirror_tooltip__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @codemirror/tooltip */
      "fK0Z");
      /* harmony import */


      var _codemirror_language__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @codemirror/language */
      "yqQ+");
      /* harmony import */


      var _codemirror_text__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @codemirror/text */
      "uZp5");
      /**
      An instance of this is passed to completion source functions.
      */


      var CompletionContext = /*#__PURE__*/function () {
        /**
        Create a new completion context. (Mostly useful for testing
        completion sources—in the editor, the extension will create
        these for you.)
        */
        function CompletionContext(
        /**
        The editor state that the completion happens in.
        */
        state,
        /**
        The position at which the completion is happening.
        */
        pos,
        /**
        Indicates whether completion was activated explicitly, or
        implicitly by typing. The usual way to respond to this is to
        only return completions when either there is part of a
        completable entity before the cursor, or `explicit` is true.
        */
        explicit) {
          _classCallCheck(this, CompletionContext);

          this.state = state;
          this.pos = pos;
          this.explicit = explicit;
          /**
          @internal
          */

          this.abortListeners = [];
        }
        /**
        Get the extent, content, and (if there is a token) type of the
        token before `this.pos`.
        */


        _createClass(CompletionContext, [{
          key: "tokenBefore",
          value: function tokenBefore(types) {
            var token = Object(_codemirror_language__WEBPACK_IMPORTED_MODULE_3__["syntaxTree"])(this.state).resolveInner(this.pos, -1);

            while (token && types.indexOf(token.name) < 0) {
              token = token.parent;
            }

            return token ? {
              from: token.from,
              to: this.pos,
              text: this.state.sliceDoc(token.from, this.pos),
              type: token.type
            } : null;
          }
          /**
          Get the match of the given expression directly before the
          cursor.
          */

        }, {
          key: "matchBefore",
          value: function matchBefore(expr) {
            var line = this.state.doc.lineAt(this.pos);
            var start = Math.max(line.from, this.pos - 250);
            var str = line.text.slice(start - line.from, this.pos - line.from);
            var found = str.search(ensureAnchor(expr, false));
            return found < 0 ? null : {
              from: start + found,
              to: this.pos,
              text: str.slice(found)
            };
          }
          /**
          Yields true when the query has been aborted. Can be useful in
          asynchronous queries to avoid doing work that will be ignored.
          */

        }, {
          key: "aborted",
          get: function get() {
            return this.abortListeners == null;
          }
          /**
          Allows you to register abort handlers, which will be called when
          the query is
          [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).
          */

        }, {
          key: "addEventListener",
          value: function addEventListener(type, listener) {
            if (type == "abort" && this.abortListeners) this.abortListeners.push(listener);
          }
        }]);

        return CompletionContext;
      }();

      function toSet(chars) {
        var flat = Object.keys(chars).join("");
        var words = /\w/.test(flat);
        if (words) flat = flat.replace(/\w/g, "");
        return "[".concat(words ? "\\w" : "").concat(flat.replace(/[^\w\s]/g, "\\$&"), "]");
      }

      function prefixMatch(options) {
        var first = Object.create(null),
            rest = Object.create(null);

        var _iterator = _createForOfIteratorHelper(options),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var label = _step.value.label;
            first[label[0]] = true;

            for (var i = 1; i < label.length; i++) {
              rest[label[i]] = true;
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        var source = toSet(first) + toSet(rest) + "*$";
        return [new RegExp("^" + source), new RegExp(source)];
      }
      /**
      Given a a fixed array of options, return an autocompleter that
      completes them.
      */


      function completeFromList(list) {
        var options = list.map(function (o) {
          return typeof o == "string" ? {
            label: o
          } : o;
        });

        var _ref = options.every(function (o) {
          return /^\w+$/.test(o.label);
        }) ? [/\w*$/, /\w+$/] : prefixMatch(options),
            _ref2 = _slicedToArray(_ref, 2),
            span = _ref2[0],
            match = _ref2[1];

        return function (context) {
          var token = context.matchBefore(match);
          return token || context.explicit ? {
            from: token ? token.from : context.pos,
            options: options,
            span: span
          } : null;
        };
      }
      /**
      Wrap the given completion source so that it will only fire when the
      cursor is in a syntax node with one of the given names.
      */


      function ifIn(nodes, source) {
        return function (context) {
          for (var pos = Object(_codemirror_language__WEBPACK_IMPORTED_MODULE_3__["syntaxTree"])(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent) {
            if (nodes.indexOf(pos.name) > -1) return source(context);
          }

          return null;
        };
      }
      /**
      Wrap the given completion source so that it will not fire when the
      cursor is in a syntax node with one of the given names.
      */


      function ifNotIn(nodes, source) {
        return function (context) {
          for (var pos = Object(_codemirror_language__WEBPACK_IMPORTED_MODULE_3__["syntaxTree"])(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent) {
            if (nodes.indexOf(pos.name) > -1) return null;
          }

          return source(context);
        };
      }

      var Option = /*#__PURE__*/_createClass(function Option(completion, source, match) {
        _classCallCheck(this, Option);

        this.completion = completion;
        this.source = source;
        this.match = match;
      });

      function cur(state) {
        return state.selection.main.head;
      } // Make sure the given regexp has a $ at its end and, if `start` is
      // true, a ^ at its start.


      function ensureAnchor(expr, start) {
        var _a;

        var source = expr.source;
        var addStart = start && source[0] != "^",
            addEnd = source[source.length - 1] != "$";
        if (!addStart && !addEnd) return expr;
        return new RegExp("".concat(addStart ? "^" : "", "(?:").concat(source, ")").concat(addEnd ? "$" : ""), (_a = expr.flags) !== null && _a !== void 0 ? _a : expr.ignoreCase ? "i" : "");
      }

      function applyCompletion(view, option) {
        var apply = option.completion.apply || option.completion.label;
        var result = option.source;

        if (typeof apply == "string") {
          view.dispatch({
            changes: {
              from: result.from,
              to: result.to,
              insert: apply
            },
            selection: {
              anchor: result.from + apply.length
            },
            userEvent: "input.complete"
          });
        } else {
          apply(view, option.completion, result.from, result.to);
        }
      }

      var SourceCache = /*@__PURE__*/new WeakMap();

      function asSource(source) {
        if (!Array.isArray(source)) return source;
        var known = SourceCache.get(source);
        if (!known) SourceCache.set(source, known = completeFromList(source));
        return known;
      } // A pattern matcher for fuzzy completion matching. Create an instance
      // once for a pattern, and then use that to match any number of
      // completions.


      var FuzzyMatcher = /*#__PURE__*/function () {
        function FuzzyMatcher(pattern) {
          _classCallCheck(this, FuzzyMatcher);

          this.pattern = pattern;
          this.chars = [];
          this.folded = []; // Buffers reused by calls to `match` to track matched character
          // positions.

          this.any = [];
          this.precise = [];
          this.byWord = [];

          for (var p = 0; p < pattern.length;) {
            var _char = Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_4__["codePointAt"])(pattern, p),
                size = Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_4__["codePointSize"])(_char);

            this.chars.push(_char);
            var part = pattern.slice(p, p + size),
                upper = part.toUpperCase();
            this.folded.push(Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_4__["codePointAt"])(upper == part ? part.toLowerCase() : upper, 0));
            p += size;
          }

          this.astral = pattern.length != this.chars.length;
        } // Matches a given word (completion) against the pattern (input).
        // Will return null for no match, and otherwise an array that starts
        // with the match score, followed by any number of `from, to` pairs
        // indicating the matched parts of `word`.
        //
        // The score is a number that is more negative the worse the match
        // is. See `Penalty` above.


        _createClass(FuzzyMatcher, [{
          key: "match",
          value: function match(word) {
            if (this.pattern.length == 0) return [0];
            if (word.length < this.pattern.length) return null;
            var chars = this.chars,
                folded = this.folded,
                any = this.any,
                precise = this.precise,
                byWord = this.byWord; // For single-character queries, only match when they occur right
            // at the start

            if (chars.length == 1) {
              var first = Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_4__["codePointAt"])(word, 0);
              return first == chars[0] ? [0, 0, Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_4__["codePointSize"])(first)] : first == folded[0] ? [-200
              /* CaseFold */
              , 0, Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_4__["codePointSize"])(first)] : null;
            }

            var direct = word.indexOf(this.pattern);
            if (direct == 0) return [0, 0, this.pattern.length];
            var len = chars.length,
                anyTo = 0;

            if (direct < 0) {
              for (var i = 0, e = Math.min(word.length, 200); i < e && anyTo < len;) {
                var next = Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_4__["codePointAt"])(word, i);
                if (next == chars[anyTo] || next == folded[anyTo]) any[anyTo++] = i;
                i += Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_4__["codePointSize"])(next);
              } // No match, exit immediately


              if (anyTo < len) return null;
            } // This tracks the extent of the precise (non-folded, not
            // necessarily adjacent) match


            var preciseTo = 0; // Tracks whether there is a match that hits only characters that
            // appear to be starting words. `byWordFolded` is set to true when
            // a case folded character is encountered in such a match

            var byWordTo = 0,
                byWordFolded = false; // If we've found a partial adjacent match, these track its state

            var adjacentTo = 0,
                adjacentStart = -1,
                adjacentEnd = -1;
            var hasLower = /[a-z]/.test(word); // Go over the option's text, scanning for the various kinds of matches

            for (var _i2 = 0, _e2 = Math.min(word.length, 200), prevType = 0
            /* NonWord */
            ; _i2 < _e2 && byWordTo < len;) {
              var _next = Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_4__["codePointAt"])(word, _i2);

              if (direct < 0) {
                if (preciseTo < len && _next == chars[preciseTo]) precise[preciseTo++] = _i2;

                if (adjacentTo < len) {
                  if (_next == chars[adjacentTo] || _next == folded[adjacentTo]) {
                    if (adjacentTo == 0) adjacentStart = _i2;
                    adjacentEnd = _i2;
                    adjacentTo++;
                  } else {
                    adjacentTo = 0;
                  }
                }
              }

              var ch = void 0,
                  type = _next < 0xff ? _next >= 48 && _next <= 57 || _next >= 97 && _next <= 122 ? 2
              /* Lower */
              : _next >= 65 && _next <= 90 ? 1
              /* Upper */
              : 0
              /* NonWord */
              : (ch = Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_4__["fromCodePoint"])(_next)) != ch.toLowerCase() ? 1
              /* Upper */
              : ch != ch.toUpperCase() ? 2
              /* Lower */
              : 0
              /* NonWord */
              ;
              if ((type == 1
              /* Upper */
              && hasLower || prevType == 0
              /* NonWord */
              && type != 0
              /* NonWord */
              ) && (chars[byWordTo] == _next || folded[byWordTo] == _next && (byWordFolded = true))) byWord[byWordTo++] = _i2;
              prevType = type;
              _i2 += Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_4__["codePointSize"])(_next);
            }

            if (byWordTo == len && byWord[0] == 0) return this.result(-100
            /* ByWord */
            + (byWordFolded ? -200
            /* CaseFold */
            : 0), byWord, word);
            if (adjacentTo == len && adjacentStart == 0) return [-200
            /* CaseFold */
            , 0, adjacentEnd];
            if (direct > -1) return [-700
            /* NotStart */
            , direct, direct + this.pattern.length];
            if (adjacentTo == len) return [-200
            /* CaseFold */
            + -700
            /* NotStart */
            , adjacentStart, adjacentEnd];
            if (byWordTo == len) return this.result(-100
            /* ByWord */
            + (byWordFolded ? -200
            /* CaseFold */
            : 0) + -700
            /* NotStart */
            , byWord, word);
            return chars.length == 2 ? null : this.result((any[0] ? -700
            /* NotStart */
            : 0) + -200
            /* CaseFold */
            + -1100
            /* Gap */
            , any, word);
          }
        }, {
          key: "result",
          value: function result(score, positions, word) {
            var result = [score],
                i = 1;

            var _iterator2 = _createForOfIteratorHelper(positions),
                _step2;

            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var pos = _step2.value;
                var to = pos + (this.astral ? Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_4__["codePointSize"])(Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_4__["codePointAt"])(word, pos)) : 1);
                if (i > 1 && result[i - 1] == pos) result[i - 1] = to;else {
                  result[i++] = pos;
                  result[i++] = to;
                }
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }

            return result;
          }
        }]);

        return FuzzyMatcher;
      }();

      var completionConfig = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Facet"].define({
        combine: function combine(configs) {
          return Object(_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["combineConfig"])(configs, {
            activateOnTyping: true,
            override: null,
            maxRenderedOptions: 100,
            defaultKeymap: true,
            optionClass: function optionClass() {
              return "";
            },
            icons: true,
            addToOptions: []
          }, {
            defaultKeymap: function defaultKeymap(a, b) {
              return a && b;
            },
            icons: function icons(a, b) {
              return a && b;
            },
            optionClass: function optionClass(a, b) {
              return function (c) {
                return joinClass(a(c), b(c));
              };
            },
            addToOptions: function addToOptions(a, b) {
              return a.concat(b);
            }
          });
        }
      });

      function joinClass(a, b) {
        return a ? b ? a + " " + b : a : b;
      }

      var MaxInfoWidth = 300;

      var baseTheme = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_1__["EditorView"].baseTheme({
        ".cm-tooltip.cm-tooltip-autocomplete": {
          "& > ul": {
            fontFamily: "monospace",
            whiteSpace: "nowrap",
            overflow: "auto",
            maxWidth_fallback: "700px",
            maxWidth: "min(700px, 95vw)",
            maxHeight: "10em",
            listStyle: "none",
            margin: 0,
            padding: 0,
            "& > li": {
              cursor: "pointer",
              padding: "1px 1em 1px 3px",
              lineHeight: 1.2
            },
            "& > li[aria-selected]": {
              background_fallback: "#bdf",
              backgroundColor: "Highlight",
              color_fallback: "white",
              color: "HighlightText"
            }
          }
        },
        ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
          content: '"···"',
          opacity: 0.5,
          display: "block",
          textAlign: "center"
        },
        ".cm-tooltip.cm-completionInfo": {
          position: "absolute",
          padding: "3px 9px",
          width: "max-content",
          maxWidth: MaxInfoWidth + "px"
        },
        ".cm-completionInfo.cm-completionInfo-left": {
          right: "100%"
        },
        ".cm-completionInfo.cm-completionInfo-right": {
          left: "100%"
        },
        "&light .cm-snippetField": {
          backgroundColor: "#00000022"
        },
        "&dark .cm-snippetField": {
          backgroundColor: "#ffffff22"
        },
        ".cm-snippetFieldPosition": {
          verticalAlign: "text-top",
          width: 0,
          height: "1.15em",
          margin: "0 -0.7px -.7em",
          borderLeft: "1.4px dotted #888"
        },
        ".cm-completionMatchedText": {
          textDecoration: "underline"
        },
        ".cm-completionDetail": {
          marginLeft: "0.5em",
          fontStyle: "italic"
        },
        ".cm-completionIcon": {
          fontSize: "90%",
          width: ".8em",
          display: "inline-block",
          textAlign: "center",
          paddingRight: ".6em",
          opacity: "0.6"
        },
        ".cm-completionIcon-function, .cm-completionIcon-method": {
          "&:after": {
            content: "'ƒ'"
          }
        },
        ".cm-completionIcon-class": {
          "&:after": {
            content: "'○'"
          }
        },
        ".cm-completionIcon-interface": {
          "&:after": {
            content: "'◌'"
          }
        },
        ".cm-completionIcon-variable": {
          "&:after": {
            content: "'𝑥'"
          }
        },
        ".cm-completionIcon-constant": {
          "&:after": {
            content: "'𝐶'"
          }
        },
        ".cm-completionIcon-type": {
          "&:after": {
            content: "'𝑡'"
          }
        },
        ".cm-completionIcon-enum": {
          "&:after": {
            content: "'∪'"
          }
        },
        ".cm-completionIcon-property": {
          "&:after": {
            content: "'□'"
          }
        },
        ".cm-completionIcon-keyword": {
          "&:after": {
            content: "'\uD83D\uDD11\uFE0E'"
          } // Disable emoji rendering

        },
        ".cm-completionIcon-namespace": {
          "&:after": {
            content: "'▢'"
          }
        },
        ".cm-completionIcon-text": {
          "&:after": {
            content: "'abc'",
            fontSize: "50%",
            verticalAlign: "middle"
          }
        }
      });

      function optionContent(config) {
        var content = config.addToOptions.slice();
        if (config.icons) content.push({
          render: function render(completion) {
            var _icon$classList;

            var icon = document.createElement("div");
            icon.classList.add("cm-completionIcon");
            if (completion.type) (_icon$classList = icon.classList).add.apply(_icon$classList, _toConsumableArray(completion.type.split(/\s+/g).map(function (cls) {
              return "cm-completionIcon-" + cls;
            })));
            icon.setAttribute("aria-hidden", "true");
            return icon;
          },
          position: 20
        });
        content.push({
          render: function render(completion, _s, match) {
            var labelElt = document.createElement("span");
            labelElt.className = "cm-completionLabel";
            var label = completion.label,
                off = 0;

            for (var j = 1; j < match.length;) {
              var from = match[j++],
                  to = match[j++];
              if (from > off) labelElt.appendChild(document.createTextNode(label.slice(off, from)));
              var span = labelElt.appendChild(document.createElement("span"));
              span.appendChild(document.createTextNode(label.slice(from, to)));
              span.className = "cm-completionMatchedText";
              off = to;
            }

            if (off < label.length) labelElt.appendChild(document.createTextNode(label.slice(off)));
            return labelElt;
          },
          position: 50
        }, {
          render: function render(completion) {
            if (!completion.detail) return null;
            var detailElt = document.createElement("span");
            detailElt.className = "cm-completionDetail";
            detailElt.textContent = completion.detail;
            return detailElt;
          },
          position: 80
        });
        return content.sort(function (a, b) {
          return a.position - b.position;
        }).map(function (a) {
          return a.render;
        });
      }

      function createInfoDialog(option, view) {
        var dom = document.createElement("div");
        dom.className = "cm-tooltip cm-completionInfo";
        var info = option.completion.info;

        if (typeof info == "string") {
          dom.textContent = info;
        } else {
          var content = info(option.completion);
          if (content.then) content.then(function (node) {
            return dom.appendChild(node);
          }, function (e) {
            return Object(_codemirror_view__WEBPACK_IMPORTED_MODULE_1__["logException"])(view.state, e, "completion info");
          });else dom.appendChild(content);
        }

        return dom;
      }

      function rangeAroundSelected(total, selected, max) {
        if (total <= max) return {
          from: 0,
          to: total
        };

        if (selected <= total >> 1) {
          var _off = Math.floor(selected / max);

          return {
            from: _off * max,
            to: (_off + 1) * max
          };
        }

        var off = Math.floor((total - selected) / max);
        return {
          from: total - (off + 1) * max,
          to: total - off * max
        };
      }

      var CompletionTooltip = /*#__PURE__*/function () {
        function CompletionTooltip(view, stateField) {
          var _this = this;

          _classCallCheck(this, CompletionTooltip);

          this.view = view;
          this.stateField = stateField;
          this.info = null;
          this.placeInfo = {
            read: function read() {
              return _this.measureInfo();
            },
            write: function write(pos) {
              return _this.positionInfo(pos);
            },
            key: this
          };
          var cState = view.state.field(stateField);
          var _cState$open = cState.open,
              options = _cState$open.options,
              selected = _cState$open.selected;
          var config = view.state.facet(completionConfig);
          this.optionContent = optionContent(config);
          this.optionClass = config.optionClass;
          this.range = rangeAroundSelected(options.length, selected, config.maxRenderedOptions);
          this.dom = document.createElement("div");
          this.dom.className = "cm-tooltip-autocomplete";
          this.dom.addEventListener("mousedown", function (e) {
            for (var dom = e.target, match; dom && dom != _this.dom; dom = dom.parentNode) {
              if (dom.nodeName == "LI" && (match = /-(\d+)$/.exec(dom.id)) && +match[1] < options.length) {
                applyCompletion(view, options[+match[1]]);
                e.preventDefault();
                return;
              }
            }
          });
          this.list = this.dom.appendChild(this.createListBox(options, cState.id, this.range));
          this.list.addEventListener("scroll", function () {
            if (_this.info) _this.view.requestMeasure(_this.placeInfo);
          });
        }

        _createClass(CompletionTooltip, [{
          key: "mount",
          value: function mount() {
            this.updateSel();
          }
        }, {
          key: "update",
          value: function update(_update) {
            if (_update.state.field(this.stateField) != _update.startState.field(this.stateField)) this.updateSel();
          }
        }, {
          key: "positioned",
          value: function positioned() {
            if (this.info) this.view.requestMeasure(this.placeInfo);
          }
        }, {
          key: "updateSel",
          value: function updateSel() {
            var _this2 = this;

            var cState = this.view.state.field(this.stateField),
                open = cState.open;

            if (open.selected < this.range.from || open.selected >= this.range.to) {
              this.range = rangeAroundSelected(open.options.length, open.selected, this.view.state.facet(completionConfig).maxRenderedOptions);
              this.list.remove();
              this.list = this.dom.appendChild(this.createListBox(open.options, cState.id, this.range));
              this.list.addEventListener("scroll", function () {
                if (_this2.info) _this2.view.requestMeasure(_this2.placeInfo);
              });
            }

            if (this.updateSelectedOption(open.selected)) {
              if (this.info) {
                this.info.remove();
                this.info = null;
              }

              var option = open.options[open.selected];

              if (option.completion.info) {
                this.info = this.dom.appendChild(createInfoDialog(option, this.view));
                this.view.requestMeasure(this.placeInfo);
              }
            }
          }
        }, {
          key: "updateSelectedOption",
          value: function updateSelectedOption(selected) {
            var set = null;

            for (var opt = this.list.firstChild, i = this.range.from; opt; opt = opt.nextSibling, i++) {
              if (i == selected) {
                if (!opt.hasAttribute("aria-selected")) {
                  opt.setAttribute("aria-selected", "true");
                  set = opt;
                }
              } else {
                if (opt.hasAttribute("aria-selected")) opt.removeAttribute("aria-selected");
              }
            }

            if (set) scrollIntoView(this.list, set);
            return set;
          }
        }, {
          key: "measureInfo",
          value: function measureInfo() {
            var sel = this.dom.querySelector("[aria-selected]");
            if (!sel) return null;
            var rect = this.dom.getBoundingClientRect();
            var top = sel.getBoundingClientRect().top - rect.top;
            if (top < 0 || top > this.list.clientHeight - 10) return null;
            var left = this.view.textDirection == _codemirror_view__WEBPACK_IMPORTED_MODULE_1__["Direction"].RTL;
            var spaceLeft = rect.left,
                spaceRight = innerWidth - rect.right;
            if (left && spaceLeft < Math.min(MaxInfoWidth, spaceRight)) left = false;else if (!left && spaceRight < Math.min(MaxInfoWidth, spaceLeft)) left = true;
            return {
              top: top,
              left: left
            };
          }
        }, {
          key: "positionInfo",
          value: function positionInfo(pos) {
            if (this.info && pos) {
              this.info.style.top = pos.top + "px";
              this.info.classList.toggle("cm-completionInfo-left", pos.left);
              this.info.classList.toggle("cm-completionInfo-right", !pos.left);
            }
          }
        }, {
          key: "createListBox",
          value: function createListBox(options, id, range) {
            var ul = document.createElement("ul");
            ul.id = id;
            ul.setAttribute("role", "listbox");

            for (var i = range.from; i < range.to; i++) {
              var _options$i = options[i],
                  completion = _options$i.completion,
                  match = _options$i.match;
              var li = ul.appendChild(document.createElement("li"));
              li.id = id + "-" + i;
              li.setAttribute("role", "option");
              var cls = this.optionClass(completion);
              if (cls) li.className = cls;

              var _iterator3 = _createForOfIteratorHelper(this.optionContent),
                  _step3;

              try {
                for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                  var source = _step3.value;
                  var node = source(completion, this.view.state, match);
                  if (node) li.appendChild(node);
                }
              } catch (err) {
                _iterator3.e(err);
              } finally {
                _iterator3.f();
              }
            }

            if (range.from) ul.classList.add("cm-completionListIncompleteTop");
            if (range.to < options.length) ul.classList.add("cm-completionListIncompleteBottom");
            return ul;
          }
        }]);

        return CompletionTooltip;
      }(); // We allocate a new function instance every time the completion
      // changes to force redrawing/repositioning of the tooltip


      function completionTooltip(stateField) {
        return function (view) {
          return new CompletionTooltip(view, stateField);
        };
      }

      function scrollIntoView(container, element) {
        var parent = container.getBoundingClientRect();
        var self = element.getBoundingClientRect();
        if (self.top < parent.top) container.scrollTop -= parent.top - self.top;else if (self.bottom > parent.bottom) container.scrollTop += self.bottom - parent.bottom;
      }

      var MaxOptions = 300; // Used to pick a preferred option when two options with the same
      // label occur in the result.

      function score(option) {
        return (option.boost || 0) * 100 + (option.apply ? 10 : 0) + (option.info ? 5 : 0) + (option.type ? 1 : 0);
      }

      function sortOptions(active, state) {
        var options = [],
            i = 0;

        var _iterator4 = _createForOfIteratorHelper(active),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var a = _step4.value;

            if (a.hasResult()) {
              if (a.result.filter === false) {
                var _iterator6 = _createForOfIteratorHelper(a.result.options),
                    _step6;

                try {
                  for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                    var option = _step6.value;
                    options.push(new Option(option, a, [1e9 - i++]));
                  }
                } catch (err) {
                  _iterator6.e(err);
                } finally {
                  _iterator6.f();
                }
              } else {
                var matcher = new FuzzyMatcher(state.sliceDoc(a.from, a.to)),
                    match = void 0;

                var _iterator7 = _createForOfIteratorHelper(a.result.options),
                    _step7;

                try {
                  for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
                    var _option = _step7.value;

                    if (match = matcher.match(_option.label)) {
                      if (_option.boost != null) match[0] += _option.boost;
                      options.push(new Option(_option, a, match));
                    }
                  }
                } catch (err) {
                  _iterator7.e(err);
                } finally {
                  _iterator7.f();
                }
              }
            }
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }

        options.sort(cmpOption);
        var result = [],
            prev = null;

        var _iterator5 = _createForOfIteratorHelper(options.sort(cmpOption)),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var opt = _step5.value;
            if (result.length == MaxOptions) break;
            if (!prev || prev.label != opt.completion.label || prev.detail != opt.completion.detail) result.push(opt);else if (score(opt.completion) > score(prev)) result[result.length - 1] = opt;
            prev = opt.completion;
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }

        return result;
      }

      var CompletionDialog = /*#__PURE__*/function () {
        function CompletionDialog(options, attrs, tooltip, timestamp, selected) {
          _classCallCheck(this, CompletionDialog);

          this.options = options;
          this.attrs = attrs;
          this.tooltip = tooltip;
          this.timestamp = timestamp;
          this.selected = selected;
        }

        _createClass(CompletionDialog, [{
          key: "setSelected",
          value: function setSelected(selected, id) {
            return selected == this.selected || selected >= this.options.length ? this : new CompletionDialog(this.options, makeAttrs(id, selected), this.tooltip, this.timestamp, selected);
          }
        }, {
          key: "map",
          value: function map(changes) {
            return new CompletionDialog(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), {
              pos: changes.mapPos(this.tooltip.pos)
            }), this.timestamp, this.selected);
          }
        }], [{
          key: "build",
          value: function build(active, state, id, prev) {
            var options = sortOptions(active, state);
            if (!options.length) return null;
            var selected = 0;

            if (prev && prev.selected) {
              var selectedValue = prev.options[prev.selected].completion;

              for (var i = 0; i < options.length && !selected; i++) {
                if (options[i].completion == selectedValue) selected = i;
              }
            }

            return new CompletionDialog(options, makeAttrs(id, selected), {
              pos: active.reduce(function (a, b) {
                return b.hasResult() ? Math.min(a, b.from) : a;
              }, 1e8),
              create: completionTooltip(completionState)
            }, prev ? prev.timestamp : Date.now(), selected);
          }
        }]);

        return CompletionDialog;
      }();

      var CompletionState = /*#__PURE__*/function () {
        function CompletionState(active, id, open) {
          _classCallCheck(this, CompletionState);

          this.active = active;
          this.id = id;
          this.open = open;
        }

        _createClass(CompletionState, [{
          key: "update",
          value: function update(tr) {
            var _this3 = this;

            var state = tr.state,
                conf = state.facet(completionConfig);
            var sources = conf.override || state.languageDataAt("autocomplete", cur(state)).map(asSource);
            var active = sources.map(function (source) {
              var value = _this3.active.find(function (s) {
                return s.source == source;
              }) || new ActiveSource(source, _this3.active.some(function (a) {
                return a.state != 0;
              }
              /* Inactive */
              ) ? 1
              /* Pending */
              : 0
              /* Inactive */
              );
              return value.update(tr, conf);
            });
            if (active.length == this.active.length && active.every(function (a, i) {
              return a == _this3.active[i];
            })) active = this.active;
            var open = tr.selection || active.some(function (a) {
              return a.hasResult() && tr.changes.touchesRange(a.from, a.to);
            }) || !sameResults(active, this.active) ? CompletionDialog.build(active, state, this.id, this.open) : this.open && tr.docChanged ? this.open.map(tr.changes) : this.open;
            if (!open && active.every(function (a) {
              return a.state != 1;
            }
            /* Pending */
            ) && active.some(function (a) {
              return a.hasResult();
            })) active = active.map(function (a) {
              return a.hasResult() ? new ActiveSource(a.source, 0
              /* Inactive */
              ) : a;
            });

            var _iterator8 = _createForOfIteratorHelper(tr.effects),
                _step8;

            try {
              for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
                var effect = _step8.value;
                if (effect.is(setSelectedEffect)) open = open && open.setSelected(effect.value, this.id);
              }
            } catch (err) {
              _iterator8.e(err);
            } finally {
              _iterator8.f();
            }

            return active == this.active && open == this.open ? this : new CompletionState(active, this.id, open);
          }
        }, {
          key: "tooltip",
          get: function get() {
            return this.open ? this.open.tooltip : null;
          }
        }, {
          key: "attrs",
          get: function get() {
            return this.open ? this.open.attrs : baseAttrs;
          }
        }], [{
          key: "start",
          value: function start() {
            return new CompletionState(none, "cm-ac-" + Math.floor(Math.random() * 2e6).toString(36), null);
          }
        }]);

        return CompletionState;
      }();

      function sameResults(a, b) {
        if (a == b) return true;

        for (var iA = 0, iB = 0;;) {
          while (iA < a.length && !a[iA].hasResult) {
            iA++;
          }

          while (iB < b.length && !b[iB].hasResult) {
            iB++;
          }

          var endA = iA == a.length,
              endB = iB == b.length;
          if (endA || endB) return endA == endB;
          if (a[iA++].result != b[iB++].result) return false;
        }
      }

      var baseAttrs = {
        "aria-autocomplete": "list",
        "aria-expanded": "false"
      };

      function makeAttrs(id, selected) {
        return {
          "aria-autocomplete": "list",
          "aria-expanded": "true",
          "aria-activedescendant": id + "-" + selected,
          "aria-controls": id
        };
      }

      var none = [];

      function cmpOption(a, b) {
        var dScore = b.match[0] - a.match[0];
        if (dScore) return dScore;
        return a.completion.label.localeCompare(b.completion.label);
      }

      function getUserEvent(tr) {
        return tr.isUserEvent("input.type") ? "input" : tr.isUserEvent("delete.backward") ? "delete" : null;
      }

      var ActiveSource = /*#__PURE__*/function () {
        function ActiveSource(source, state) {
          var explicitPos = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;

          _classCallCheck(this, ActiveSource);

          this.source = source;
          this.state = state;
          this.explicitPos = explicitPos;
        }

        _createClass(ActiveSource, [{
          key: "hasResult",
          value: function hasResult() {
            return false;
          }
        }, {
          key: "update",
          value: function update(tr, conf) {
            var event = getUserEvent(tr),
                value = this;
            if (event) value = value.handleUserEvent(tr, event, conf);else if (tr.docChanged) value = value.handleChange(tr);else if (tr.selection && value.state != 0
            /* Inactive */
            ) value = new ActiveSource(value.source, 0
            /* Inactive */
            );

            var _iterator9 = _createForOfIteratorHelper(tr.effects),
                _step9;

            try {
              for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
                var effect = _step9.value;
                if (effect.is(startCompletionEffect)) value = new ActiveSource(value.source, 1
                /* Pending */
                , effect.value ? cur(tr.state) : -1);else if (effect.is(closeCompletionEffect)) value = new ActiveSource(value.source, 0
                /* Inactive */
                );else if (effect.is(setActiveEffect)) {
                  var _iterator10 = _createForOfIteratorHelper(effect.value),
                      _step10;

                  try {
                    for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
                      var active = _step10.value;
                      if (active.source == value.source) value = active;
                    }
                  } catch (err) {
                    _iterator10.e(err);
                  } finally {
                    _iterator10.f();
                  }
                }
              }
            } catch (err) {
              _iterator9.e(err);
            } finally {
              _iterator9.f();
            }

            return value;
          }
        }, {
          key: "handleUserEvent",
          value: function handleUserEvent(tr, type, conf) {
            return type == "delete" || !conf.activateOnTyping ? this.map(tr.changes) : new ActiveSource(this.source, 1
            /* Pending */
            );
          }
        }, {
          key: "handleChange",
          value: function handleChange(tr) {
            return tr.changes.touchesRange(cur(tr.startState)) ? new ActiveSource(this.source, 0
            /* Inactive */
            ) : this.map(tr.changes);
          }
        }, {
          key: "map",
          value: function map(changes) {
            return changes.empty || this.explicitPos < 0 ? this : new ActiveSource(this.source, this.state, changes.mapPos(this.explicitPos));
          }
        }]);

        return ActiveSource;
      }();

      var ActiveResult = /*#__PURE__*/function (_ActiveSource) {
        _inherits(ActiveResult, _ActiveSource);

        var _super = _createSuper(ActiveResult);

        function ActiveResult(source, explicitPos, result, from, to, span) {
          var _this4;

          _classCallCheck(this, ActiveResult);

          _this4 = _super.call(this, source, 2
          /* Result */
          , explicitPos);
          _this4.result = result;
          _this4.from = from;
          _this4.to = to;
          _this4.span = span;
          return _this4;
        }

        _createClass(ActiveResult, [{
          key: "hasResult",
          value: function hasResult() {
            return true;
          }
        }, {
          key: "handleUserEvent",
          value: function handleUserEvent(tr, type, conf) {
            var from = tr.changes.mapPos(this.from),
                to = tr.changes.mapPos(this.to, 1);
            var pos = cur(tr.state);
            if ((this.explicitPos > -1 ? pos < from : pos <= from) || pos > to) return new ActiveSource(this.source, type == "input" && conf.activateOnTyping ? 1
            /* Pending */
            : 0
            /* Inactive */
            );
            var explicitPos = this.explicitPos < 0 ? -1 : tr.changes.mapPos(this.explicitPos);
            if (this.span && (from == to || this.span.test(tr.state.sliceDoc(from, to)))) return new ActiveResult(this.source, explicitPos, this.result, from, to, this.span);
            return new ActiveSource(this.source, 1
            /* Pending */
            , explicitPos);
          }
        }, {
          key: "handleChange",
          value: function handleChange(tr) {
            return tr.changes.touchesRange(this.from, this.to) ? new ActiveSource(this.source, 0
            /* Inactive */
            ) : this.map(tr.changes);
          }
        }, {
          key: "map",
          value: function map(mapping) {
            return mapping.empty ? this : new ActiveResult(this.source, this.explicitPos < 0 ? -1 : mapping.mapPos(this.explicitPos), this.result, mapping.mapPos(this.from), mapping.mapPos(this.to, 1), this.span);
          }
        }]);

        return ActiveResult;
      }(ActiveSource);

      var startCompletionEffect = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["StateEffect"].define();

      var closeCompletionEffect = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["StateEffect"].define();

      var setActiveEffect = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["StateEffect"].define({
        map: function map(sources, mapping) {
          return sources.map(function (s) {
            return s.map(mapping);
          });
        }
      });

      var setSelectedEffect = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["StateEffect"].define();

      var completionState = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["StateField"].define({
        create: function create() {
          return CompletionState.start();
        },
        update: function update(value, tr) {
          return value.update(tr);
        },
        provide: function provide(f) {
          return [_codemirror_tooltip__WEBPACK_IMPORTED_MODULE_2__["showTooltip"].from(f, function (val) {
            return val.tooltip;
          }), _codemirror_view__WEBPACK_IMPORTED_MODULE_1__["EditorView"].contentAttributes.from(f, function (state) {
            return state.attrs;
          })];
        }
      });

      var CompletionInteractMargin = 75;
      /**
      Returns a command that moves the completion selection forward or
      backward by the given amount.
      */

      function moveCompletionSelection(forward) {
        var by = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "option";
        return function (view) {
          var cState = view.state.field(completionState, false);
          if (!cState || !cState.open || Date.now() - cState.open.timestamp < CompletionInteractMargin) return false;
          var step = 1,
              tooltip;
          if (by == "page" && (tooltip = view.dom.querySelector(".cm-tooltip-autocomplete"))) step = Math.max(2, Math.floor(tooltip.offsetHeight / tooltip.firstChild.offsetHeight));
          var selected = cState.open.selected + step * (forward ? 1 : -1),
              length = cState.open.options.length;
          if (selected < 0) selected = by == "page" ? 0 : length - 1;else if (selected >= length) selected = by == "page" ? length - 1 : 0;
          view.dispatch({
            effects: setSelectedEffect.of(selected)
          });
          return true;
        };
      }
      /**
      Accept the current completion.
      */


      var acceptCompletion = function acceptCompletion(view) {
        var cState = view.state.field(completionState, false);
        if (!cState || !cState.open || Date.now() - cState.open.timestamp < CompletionInteractMargin) return false;
        applyCompletion(view, cState.open.options[cState.open.selected]);
        return true;
      };
      /**
      Explicitly start autocompletion.
      */


      var startCompletion = function startCompletion(view) {
        var cState = view.state.field(completionState, false);
        if (!cState) return false;
        view.dispatch({
          effects: startCompletionEffect.of(true)
        });
        return true;
      };
      /**
      Close the currently active completion.
      */


      var closeCompletion = function closeCompletion(view) {
        var cState = view.state.field(completionState, false);
        if (!cState || !cState.active.some(function (a) {
          return a.state != 0;
        }
        /* Inactive */
        )) return false;
        view.dispatch({
          effects: closeCompletionEffect.of(null)
        });
        return true;
      };

      var RunningQuery = /*#__PURE__*/_createClass(function RunningQuery(active, context) {
        _classCallCheck(this, RunningQuery);

        this.active = active;
        this.context = context;
        this.time = Date.now();
        this.updates = []; // Note that 'undefined' means 'not done yet', whereas 'null' means
        // 'query returned null'.

        this.done = undefined;
      });

      var DebounceTime = 50,
          MaxUpdateCount = 50,
          MinAbortTime = 1000;

      var completionPlugin = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_1__["ViewPlugin"].fromClass( /*#__PURE__*/function () {
        function _class(view) {
          _classCallCheck(this, _class);

          this.view = view;
          this.debounceUpdate = -1;
          this.running = [];
          this.debounceAccept = -1;
          this.composing = 0
          /* None */
          ;

          var _iterator11 = _createForOfIteratorHelper(view.state.field(completionState).active),
              _step11;

          try {
            for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
              var active = _step11.value;
              if (active.state == 1
              /* Pending */
              ) this.startQuery(active);
            }
          } catch (err) {
            _iterator11.e(err);
          } finally {
            _iterator11.f();
          }
        }

        _createClass(_class, [{
          key: "update",
          value: function update(_update2) {
            var _this5 = this;

            var cState = _update2.state.field(completionState);

            if (!_update2.selectionSet && !_update2.docChanged && _update2.startState.field(completionState) == cState) return;

            var doesReset = _update2.transactions.some(function (tr) {
              return (tr.selection || tr.docChanged) && !getUserEvent(tr);
            });

            for (var i = 0; i < this.running.length; i++) {
              var query = this.running[i];

              if (doesReset || query.updates.length + _update2.transactions.length > MaxUpdateCount && query.time - Date.now() > MinAbortTime) {
                var _iterator12 = _createForOfIteratorHelper(query.context.abortListeners),
                    _step12;

                try {
                  for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
                    var handler = _step12.value;

                    try {
                      handler();
                    } catch (e) {
                      Object(_codemirror_view__WEBPACK_IMPORTED_MODULE_1__["logException"])(this.view.state, e);
                    }
                  }
                } catch (err) {
                  _iterator12.e(err);
                } finally {
                  _iterator12.f();
                }

                query.context.abortListeners = null;
                this.running.splice(i--, 1);
              } else {
                var _query$updates;

                (_query$updates = query.updates).push.apply(_query$updates, _toConsumableArray(_update2.transactions));
              }
            }

            if (this.debounceUpdate > -1) clearTimeout(this.debounceUpdate);
            this.debounceUpdate = cState.active.some(function (a) {
              return a.state == 1
              /* Pending */
              && !_this5.running.some(function (q) {
                return q.active.source == a.source;
              });
            }) ? setTimeout(function () {
              return _this5.startUpdate();
            }, DebounceTime) : -1;

            if (this.composing != 0
            /* None */
            ) {
              var _iterator13 = _createForOfIteratorHelper(_update2.transactions),
                  _step13;

              try {
                for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
                  var tr = _step13.value;
                  if (getUserEvent(tr) == "input") this.composing = 2
                  /* Changed */
                  ;else if (this.composing == 2
                  /* Changed */
                  && tr.selection) this.composing = 3
                  /* ChangedAndMoved */
                  ;
                }
              } catch (err) {
                _iterator13.e(err);
              } finally {
                _iterator13.f();
              }
            }
          }
        }, {
          key: "startUpdate",
          value: function startUpdate() {
            var _this6 = this;

            this.debounceUpdate = -1;
            var state = this.view.state,
                cState = state.field(completionState);

            var _iterator14 = _createForOfIteratorHelper(cState.active),
                _step14;

            try {
              var _loop = function _loop() {
                var active = _step14.value;
                if (active.state == 1
                /* Pending */
                && !_this6.running.some(function (r) {
                  return r.active.source == active.source;
                })) _this6.startQuery(active);
              };

              for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
                _loop();
              }
            } catch (err) {
              _iterator14.e(err);
            } finally {
              _iterator14.f();
            }
          }
        }, {
          key: "startQuery",
          value: function startQuery(active) {
            var _this7 = this;

            var state = this.view.state,
                pos = cur(state);
            var context = new CompletionContext(state, pos, active.explicitPos == pos);
            var pending = new RunningQuery(active, context);
            this.running.push(pending);
            Promise.resolve(active.source(context)).then(function (result) {
              if (!pending.context.aborted) {
                pending.done = result || null;

                _this7.scheduleAccept();
              }
            }, function (err) {
              _this7.view.dispatch({
                effects: closeCompletionEffect.of(null)
              });

              Object(_codemirror_view__WEBPACK_IMPORTED_MODULE_1__["logException"])(_this7.view.state, err);
            });
          }
        }, {
          key: "scheduleAccept",
          value: function scheduleAccept() {
            var _this8 = this;

            if (this.running.every(function (q) {
              return q.done !== undefined;
            })) this.accept();else if (this.debounceAccept < 0) this.debounceAccept = setTimeout(function () {
              return _this8.accept();
            }, DebounceTime);
          } // For each finished query in this.running, try to create a result
          // or, if appropriate, restart the query.

        }, {
          key: "accept",
          value: function accept() {
            var _this9 = this;

            var _a;

            if (this.debounceAccept > -1) clearTimeout(this.debounceAccept);
            this.debounceAccept = -1;
            var updated = [];
            var conf = this.view.state.facet(completionConfig);

            var _loop2 = function _loop2(_i3) {
              var query = _this9.running[_i3];

              if (query.done === undefined) {
                i = _i3;
                return "continue";
              }

              _this9.running.splice(_i3--, 1);

              if (query.done) {
                var active = new ActiveResult(query.active.source, query.active.explicitPos, query.done, query.done.from, (_a = query.done.to) !== null && _a !== void 0 ? _a : cur(query.updates.length ? query.updates[0].startState : _this9.view.state), query.done.span && query.done.filter !== false ? ensureAnchor(query.done.span, true) : null); // Replay the transactions that happened since the start of
                // the request and see if that preserves the result

                var _iterator15 = _createForOfIteratorHelper(query.updates),
                    _step15;

                try {
                  for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
                    var tr = _step15.value;
                    active = active.update(tr, conf);
                  }
                } catch (err) {
                  _iterator15.e(err);
                } finally {
                  _iterator15.f();
                }

                if (active.hasResult()) {
                  updated.push(active);
                  i = _i3;
                  return "continue";
                }
              }

              var current = _this9.view.state.field(completionState).active.find(function (a) {
                return a.source == query.active.source;
              });

              if (current && current.state == 1
              /* Pending */
              ) {
                if (query.done == null) {
                  // Explicitly failed. Should clear the pending status if it
                  // hasn't been re-set in the meantime.
                  var _active = new ActiveSource(query.active.source, 0
                  /* Inactive */
                  );

                  var _iterator16 = _createForOfIteratorHelper(query.updates),
                      _step16;

                  try {
                    for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
                      var _tr = _step16.value;
                      _active = _active.update(_tr, conf);
                    }
                  } catch (err) {
                    _iterator16.e(err);
                  } finally {
                    _iterator16.f();
                  }

                  if (_active.state != 1
                  /* Pending */
                  ) updated.push(_active);
                } else {
                  // Cleared by subsequent transactions. Restart.
                  _this9.startQuery(current);
                }
              }

              i = _i3;
            };

            for (var i = 0; i < this.running.length; i++) {
              var _ret = _loop2(i);

              if (_ret === "continue") continue;
            }

            if (updated.length) this.view.dispatch({
              effects: setActiveEffect.of(updated)
            });
          }
        }]);

        return _class;
      }(), {
        eventHandlers: {
          compositionstart: function compositionstart() {
            this.composing = 1
            /* Started */
            ;
          },
          compositionend: function compositionend() {
            var _this10 = this;

            if (this.composing == 3
            /* ChangedAndMoved */
            ) {
              // Safari fires compositionend events synchronously, possibly
              // from inside an update, so dispatch asynchronously to avoid reentrancy
              setTimeout(function () {
                return _this10.view.dispatch({
                  effects: startCompletionEffect.of(false)
                });
              }, 20);
            }

            this.composing = 0
            /* None */
            ;
          }
        }
      });

      var FieldPos = /*#__PURE__*/_createClass(function FieldPos(field, line, from, to) {
        _classCallCheck(this, FieldPos);

        this.field = field;
        this.line = line;
        this.from = from;
        this.to = to;
      });

      var FieldRange = /*#__PURE__*/function () {
        function FieldRange(field, from, to) {
          _classCallCheck(this, FieldRange);

          this.field = field;
          this.from = from;
          this.to = to;
        }

        _createClass(FieldRange, [{
          key: "map",
          value: function map(changes) {
            return new FieldRange(this.field, changes.mapPos(this.from, -1), changes.mapPos(this.to, 1));
          }
        }]);

        return FieldRange;
      }();

      var Snippet = /*#__PURE__*/function () {
        function Snippet(lines, fieldPositions) {
          _classCallCheck(this, Snippet);

          this.lines = lines;
          this.fieldPositions = fieldPositions;
        }

        _createClass(Snippet, [{
          key: "instantiate",
          value: function instantiate(state, pos) {
            var text = [],
                lineStart = [pos];
            var lineObj = state.doc.lineAt(pos),
                baseIndent = /^\s*/.exec(lineObj.text)[0];

            var _iterator17 = _createForOfIteratorHelper(this.lines),
                _step17;

            try {
              for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
                var line = _step17.value;

                if (text.length) {
                  var indent = baseIndent,
                      tabs = /^\t*/.exec(line)[0].length;

                  for (var _i4 = 0; _i4 < tabs; _i4++) {
                    indent += state.facet(_codemirror_language__WEBPACK_IMPORTED_MODULE_3__["indentUnit"]);
                  }

                  lineStart.push(pos + indent.length - tabs);
                  line = indent + line.slice(tabs);
                }

                text.push(line);
                pos += line.length + 1;
              }
            } catch (err) {
              _iterator17.e(err);
            } finally {
              _iterator17.f();
            }

            var ranges = this.fieldPositions.map(function (pos) {
              return new FieldRange(pos.field, lineStart[pos.line] + pos.from, lineStart[pos.line] + pos.to);
            });
            return {
              text: text,
              ranges: ranges
            };
          }
        }], [{
          key: "parse",
          value: function parse(template) {
            var fields = [];
            var lines = [],
                positions = [],
                m;

            var _iterator18 = _createForOfIteratorHelper(template.split(/\r\n?|\n/)),
                _step18;

            try {
              for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
                var line = _step18.value;

                while (m = /[#$]\{(?:(\d+)(?::([^}]*))?|([^}]*))\}/.exec(line)) {
                  var seq = m[1] ? +m[1] : null,
                      name = m[2] || m[3],
                      found = -1;

                  for (var _i5 = 0; _i5 < fields.length; _i5++) {
                    if (seq != null ? fields[_i5].seq == seq : name ? fields[_i5].name == name : false) found = _i5;
                  }

                  if (found < 0) {
                    var _i6 = 0;

                    while (_i6 < fields.length && (seq == null || fields[_i6].seq != null && fields[_i6].seq < seq)) {
                      _i6++;
                    }

                    fields.splice(_i6, 0, {
                      seq: seq,
                      name: name || null
                    });
                    found = _i6;

                    var _iterator19 = _createForOfIteratorHelper(positions),
                        _step19;

                    try {
                      for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
                        var pos = _step19.value;
                        if (pos.field >= found) pos.field++;
                      }
                    } catch (err) {
                      _iterator19.e(err);
                    } finally {
                      _iterator19.f();
                    }
                  }

                  positions.push(new FieldPos(found, lines.length, m.index, m.index + name.length));
                  line = line.slice(0, m.index) + name + line.slice(m.index + m[0].length);
                }

                lines.push(line);
              }
            } catch (err) {
              _iterator18.e(err);
            } finally {
              _iterator18.f();
            }

            return new Snippet(lines, positions);
          }
        }]);

        return Snippet;
      }();

      var fieldMarker = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_1__["Decoration"].widget({
        widget: /*@__PURE__*/new ( /*#__PURE__*/function (_codemirror_view__WEB) {
          _inherits(_class2, _codemirror_view__WEB);

          var _super2 = _createSuper(_class2);

          function _class2() {
            _classCallCheck(this, _class2);

            return _super2.apply(this, arguments);
          }

          _createClass(_class2, [{
            key: "toDOM",
            value: function toDOM() {
              var span = document.createElement("span");
              span.className = "cm-snippetFieldPosition";
              return span;
            }
          }, {
            key: "ignoreEvent",
            value: function ignoreEvent() {
              return false;
            }
          }]);

          return _class2;
        }(_codemirror_view__WEBPACK_IMPORTED_MODULE_1__["WidgetType"]))()
      });

      var fieldRange = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_1__["Decoration"].mark({
        "class": "cm-snippetField"
      });

      var ActiveSnippet = /*#__PURE__*/function () {
        function ActiveSnippet(ranges, active) {
          _classCallCheck(this, ActiveSnippet);

          this.ranges = ranges;
          this.active = active;
          this.deco = _codemirror_view__WEBPACK_IMPORTED_MODULE_1__["Decoration"].set(ranges.map(function (r) {
            return (r.from == r.to ? fieldMarker : fieldRange).range(r.from, r.to);
          }));
        }

        _createClass(ActiveSnippet, [{
          key: "map",
          value: function map(changes) {
            return new ActiveSnippet(this.ranges.map(function (r) {
              return r.map(changes);
            }), this.active);
          }
        }, {
          key: "selectionInsideField",
          value: function selectionInsideField(sel) {
            var _this11 = this;

            return sel.ranges.every(function (range) {
              return _this11.ranges.some(function (r) {
                return r.field == _this11.active && r.from <= range.from && r.to >= range.to;
              });
            });
          }
        }]);

        return ActiveSnippet;
      }();

      var setActive = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["StateEffect"].define({
        map: function map(value, changes) {
          return value && value.map(changes);
        }
      });

      var moveToField = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["StateEffect"].define();

      var snippetState = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["StateField"].define({
        create: function create() {
          return null;
        },
        update: function update(value, tr) {
          var _iterator20 = _createForOfIteratorHelper(tr.effects),
              _step20;

          try {
            for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
              var effect = _step20.value;
              if (effect.is(setActive)) return effect.value;
              if (effect.is(moveToField) && value) return new ActiveSnippet(value.ranges, effect.value);
            }
          } catch (err) {
            _iterator20.e(err);
          } finally {
            _iterator20.f();
          }

          if (value && tr.docChanged) value = value.map(tr.changes);
          if (value && tr.selection && !value.selectionInsideField(tr.selection)) value = null;
          return value;
        },
        provide: function provide(f) {
          return _codemirror_view__WEBPACK_IMPORTED_MODULE_1__["EditorView"].decorations.from(f, function (val) {
            return val ? val.deco : _codemirror_view__WEBPACK_IMPORTED_MODULE_1__["Decoration"].none;
          });
        }
      });

      function fieldSelection(ranges, field) {
        return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].create(ranges.filter(function (r) {
          return r.field == field;
        }).map(function (r) {
          return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].range(r.from, r.to);
        }));
      }
      /**
      Convert a snippet template to a function that can apply it.
      Snippets are written using syntax like this:
      
          "for (let ${index} = 0; ${index} < ${end}; ${index}++) {\n\t${}\n}"
      
      Each `${}` placeholder (you may also use `#{}`) indicates a field
      that the user can fill in. Its name, if any, will be the default
      content for the field.
      
      When the snippet is activated by calling the returned function,
      the code is inserted at the given position. Newlines in the
      template are indented by the indentation of the start line, plus
      one [indent unit](https://codemirror.net/6/docs/ref/#language.indentUnit) per tab character after
      the newline.
      
      On activation, (all instances of) the first field are selected.
      The user can move between fields with Tab and Shift-Tab as long as
      the fields are active. Moving to the last field or moving the
      cursor out of the current field deactivates the fields.
      
      The order of fields defaults to textual order, but you can add
      numbers to placeholders (`${1}` or `${1:defaultText}`) to provide
      a custom order.
      */


      function snippet(template) {
        var snippet = Snippet.parse(template);
        return function (editor, _completion, from, to) {
          var _snippet$instantiate = snippet.instantiate(editor.state, from),
              text = _snippet$instantiate.text,
              ranges = _snippet$instantiate.ranges;

          var spec = {
            changes: {
              from: from,
              to: to,
              insert: _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Text"].of(text)
            }
          };
          if (ranges.length) spec.selection = fieldSelection(ranges, 0);

          if (ranges.length > 1) {
            var active = new ActiveSnippet(ranges, 0);
            var effects = spec.effects = [setActive.of(active)];
            if (editor.state.field(snippetState, false) === undefined) effects.push(_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["StateEffect"].appendConfig.of([snippetState.init(function () {
              return active;
            }), addSnippetKeymap, snippetPointerHandler, baseTheme]));
          }

          editor.dispatch(editor.state.update(spec));
        };
      }

      function moveField(dir) {
        return function (_ref3) {
          var state = _ref3.state,
              dispatch = _ref3.dispatch;
          var active = state.field(snippetState, false);
          if (!active || dir < 0 && active.active == 0) return false;
          var next = active.active + dir,
              last = dir > 0 && !active.ranges.some(function (r) {
            return r.field == next + dir;
          });
          dispatch(state.update({
            selection: fieldSelection(active.ranges, next),
            effects: setActive.of(last ? null : new ActiveSnippet(active.ranges, next))
          }));
          return true;
        };
      }
      /**
      A command that clears the active snippet, if any.
      */


      var clearSnippet = function clearSnippet(_ref4) {
        var state = _ref4.state,
            dispatch = _ref4.dispatch;
        var active = state.field(snippetState, false);
        if (!active) return false;
        dispatch(state.update({
          effects: setActive.of(null)
        }));
        return true;
      };
      /**
      Move to the next snippet field, if available.
      */


      var nextSnippetField = /*@__PURE__*/moveField(1);
      /**
      Move to the previous snippet field, if available.
      */

      var prevSnippetField = /*@__PURE__*/moveField(-1);
      var defaultSnippetKeymap = [{
        key: "Tab",
        run: nextSnippetField,
        shift: prevSnippetField
      }, {
        key: "Escape",
        run: clearSnippet
      }];
      /**
      A facet that can be used to configure the key bindings used by
      snippets. The default binds Tab to
      [`nextSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.nextSnippetField), Shift-Tab to
      [`prevSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.prevSnippetField), and Escape
      to [`clearSnippet`](https://codemirror.net/6/docs/ref/#autocomplete.clearSnippet).
      */

      var snippetKeymap = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Facet"].define({
        combine: function combine(maps) {
          return maps.length ? maps[0] : defaultSnippetKeymap;
        }
      });

      var addSnippetKeymap = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Prec"].override( /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_1__["keymap"].compute([snippetKeymap], function (state) {
        return state.facet(snippetKeymap);
      }));
      /**
      Create a completion from a snippet. Returns an object with the
      properties from `completion`, plus an `apply` function that
      applies the snippet.
      */


      function snippetCompletion(template, completion) {
        return Object.assign(Object.assign({}, completion), {
          apply: snippet(template)
        });
      }

      var snippetPointerHandler = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_1__["EditorView"].domEventHandlers({
        mousedown: function mousedown(event, view) {
          var active = view.state.field(snippetState, false),
              pos;
          if (!active || (pos = view.posAtCoords({
            x: event.clientX,
            y: event.clientY
          })) == null) return false;
          var match = active.ranges.find(function (r) {
            return r.from <= pos && r.to >= pos;
          });
          if (!match || match.field == active.active) return false;
          view.dispatch({
            selection: fieldSelection(active.ranges, match.field),
            effects: setActive.of(active.ranges.some(function (r) {
              return r.field > match.field;
            }) ? new ActiveSnippet(active.ranges, match.field) : null)
          });
          return true;
        }
      });

      function wordRE(wordChars) {
        var escaped = wordChars.replace(/[\\[.+*?(){|^$]/g, "\\$&");

        try {
          return new RegExp("[\\p{Alphabetic}\\p{Number}_".concat(escaped, "]+"), "ug");
        } catch (_a) {
          return new RegExp("[w".concat(escaped, "]"), "g");
        }
      }

      function mapRE(re, f) {
        return new RegExp(f(re.source), re.unicode ? "u" : "");
      }

      var wordCaches = /*@__PURE__*/Object.create(null);

      function wordCache(wordChars) {
        return wordCaches[wordChars] || (wordCaches[wordChars] = new WeakMap());
      }

      function storeWords(doc, wordRE, result, seen, ignoreAt) {
        for (var lines = doc.iterLines(), pos = 0; !lines.next().done;) {
          var value = lines.value,
              m = void 0;
          wordRE.lastIndex = 0;

          while (m = wordRE.exec(value)) {
            if (!seen[m[0]] && pos + m.index != ignoreAt) {
              result.push({
                type: "text",
                label: m[0]
              });
              seen[m[0]] = true;
              if (result.length >= 2000
              /* MaxList */
              ) return;
            }
          }

          pos += value.length + 1;
        }
      }

      function collectWords(doc, cache, wordRE, to, ignoreAt) {
        var big = doc.length >= 1000
        /* MinCacheLen */
        ;
        var cached = big && cache.get(doc);
        if (cached) return cached;
        var result = [],
            seen = Object.create(null);

        if (doc.children) {
          var pos = 0;

          var _iterator21 = _createForOfIteratorHelper(doc.children),
              _step21;

          try {
            for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
              var ch = _step21.value;

              if (ch.length >= 1000
              /* MinCacheLen */
              ) {
                var _iterator22 = _createForOfIteratorHelper(collectWords(ch, cache, wordRE, to - pos, ignoreAt - pos)),
                    _step22;

                try {
                  for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
                    var c = _step22.value;

                    if (!seen[c.label]) {
                      seen[c.label] = true;
                      result.push(c);
                    }
                  }
                } catch (err) {
                  _iterator22.e(err);
                } finally {
                  _iterator22.f();
                }
              } else {
                storeWords(ch, wordRE, result, seen, ignoreAt - pos);
              }

              pos += ch.length + 1;
            }
          } catch (err) {
            _iterator21.e(err);
          } finally {
            _iterator21.f();
          }
        } else {
          storeWords(doc, wordRE, result, seen, ignoreAt);
        }

        if (big && result.length < 2000
        /* MaxList */
        ) cache.set(doc, result);
        return result;
      }
      /**
      A completion source that will scan the document for words (using a
      [character categorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer)), and
      return those as completions.
      */


      var completeAnyWord = function completeAnyWord(context) {
        var wordChars = context.state.languageDataAt("wordChars", context.pos).join("");
        var re = wordRE(wordChars);
        var token = context.matchBefore(mapRE(re, function (s) {
          return s + "$";
        }));
        if (!token && !context.explicit) return null;
        var from = token ? token.from : context.pos;
        var options = collectWords(context.state.doc, wordCache(wordChars), re, 50000
        /* Range */
        , from);
        return {
          from: from,
          options: options,
          span: mapRE(re, function (s) {
            return "^" + s;
          })
        };
      };
      /**
      Returns an extension that enables autocompletion.
      */


      function autocompletion() {
        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return [completionState, completionConfig.of(config), completionPlugin, completionKeymapExt, baseTheme];
      }
      /**
      Basic keybindings for autocompletion.
      
       - Ctrl-Space: [`startCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.startCompletion)
       - Escape: [`closeCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.closeCompletion)
       - ArrowDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true)`
       - ArrowUp: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(false)`
       - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, "page")`
       - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, "page")`
       - Enter: [`acceptCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.acceptCompletion)
      */


      var completionKeymap = [{
        key: "Ctrl-Space",
        run: startCompletion
      }, {
        key: "Escape",
        run: closeCompletion
      }, {
        key: "ArrowDown",
        run: /*@__PURE__*/moveCompletionSelection(true)
      }, {
        key: "ArrowUp",
        run: /*@__PURE__*/moveCompletionSelection(false)
      }, {
        key: "PageDown",
        run: /*@__PURE__*/moveCompletionSelection(true, "page")
      }, {
        key: "PageUp",
        run: /*@__PURE__*/moveCompletionSelection(false, "page")
      }, {
        key: "Enter",
        run: acceptCompletion
      }];

      var completionKeymapExt = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Prec"].override( /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_1__["keymap"].computeN([completionConfig], function (state) {
        return state.facet(completionConfig).defaultKeymap ? [completionKeymap] : [];
      }));
      /**
      Get the current completion status. When completions are available,
      this will return `"active"`. When completions are pending (in the
      process of being queried), this returns `"pending"`. Otherwise, it
      returns `null`.
      */


      function completionStatus(state) {
        var cState = state.field(completionState, false);
        return cState && cState.active.some(function (a) {
          return a.state == 1;
        }
        /* Pending */
        ) ? "pending" : cState && cState.active.some(function (a) {
          return a.state != 0;
        }
        /* Inactive */
        ) ? "active" : null;
      }
      /**
      Returns the available completions as an array.
      */


      function currentCompletions(state) {
        var _a;

        var open = (_a = state.field(completionState, false)) === null || _a === void 0 ? void 0 : _a.open;
        return open ? open.options.map(function (o) {
          return o.completion;
        }) : [];
      }
      /***/

    },

    /***/
    "4eob":
    /*!******************************************************!*\
      !*** ./node_modules/@codemirror/state/dist/index.js ***!
      \******************************************************/

    /*! exports provided: Text, Annotation, AnnotationType, ChangeDesc, ChangeSet, CharCategory, Compartment, EditorSelection, EditorState, Facet, MapMode, Prec, SelectionRange, StateEffect, StateEffectType, StateField, Transaction, combineConfig */

    /***/
    function eob(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Annotation", function () {
        return Annotation;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AnnotationType", function () {
        return AnnotationType;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ChangeDesc", function () {
        return ChangeDesc;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ChangeSet", function () {
        return ChangeSet;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CharCategory", function () {
        return CharCategory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Compartment", function () {
        return Compartment;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EditorSelection", function () {
        return EditorSelection;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EditorState", function () {
        return EditorState;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Facet", function () {
        return Facet;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MapMode", function () {
        return MapMode;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Prec", function () {
        return Prec;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SelectionRange", function () {
        return SelectionRange;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "StateEffect", function () {
        return StateEffect;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "StateEffectType", function () {
        return StateEffectType;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "StateField", function () {
        return StateField;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Transaction", function () {
        return Transaction;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "combineConfig", function () {
        return combineConfig;
      });
      /* harmony import */


      var _codemirror_text__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @codemirror/text */
      "uZp5");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "Text", function () {
        return _codemirror_text__WEBPACK_IMPORTED_MODULE_0__["Text"];
      });

      var DefaultSplit = /\r\n?|\n/;
      /**
      Distinguishes different ways in which positions can be mapped.
      */

      var MapMode = /*@__PURE__*/function (MapMode) {
        /**
        Map a position to a valid new position, even when its context
        was deleted.
        */
        MapMode[MapMode["Simple"] = 0] = "Simple";
        /**
        Return null if deletion happens across the position.
        */

        MapMode[MapMode["TrackDel"] = 1] = "TrackDel";
        /**
        Return null if the character _before_ the position is deleted.
        */

        MapMode[MapMode["TrackBefore"] = 2] = "TrackBefore";
        /**
        Return null if the character _after_ the position is deleted.
        */

        MapMode[MapMode["TrackAfter"] = 3] = "TrackAfter";
        return MapMode;
      }(MapMode || (MapMode = {}));
      /**
      A change description is a variant of [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet)
      that doesn't store the inserted text. As such, it can't be
      applied, but is cheaper to store and manipulate.
      */


      var ChangeDesc = /*#__PURE__*/function () {
        // Sections are encoded as pairs of integers. The first is the
        // length in the current document, and the second is -1 for
        // unaffected sections, and the length of the replacement content
        // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
        // 0), and a replacement two positive numbers.

        /**
        @internal
        */
        function ChangeDesc(
        /**
        @internal
        */
        sections) {
          _classCallCheck(this, ChangeDesc);

          this.sections = sections;
        }
        /**
        The length of the document before the change.
        */


        _createClass(ChangeDesc, [{
          key: "length",
          get: function get() {
            var result = 0;

            for (var _i7 = 0; _i7 < this.sections.length; _i7 += 2) {
              result += this.sections[_i7];
            }

            return result;
          }
          /**
          The length of the document after the change.
          */

        }, {
          key: "newLength",
          get: function get() {
            var result = 0;

            for (var _i8 = 0; _i8 < this.sections.length; _i8 += 2) {
              var ins = this.sections[_i8 + 1];
              result += ins < 0 ? this.sections[_i8] : ins;
            }

            return result;
          }
          /**
          False when there are actual changes in this set.
          */

        }, {
          key: "empty",
          get: function get() {
            return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0;
          }
          /**
          Iterate over the unchanged parts left by these changes.
          */

        }, {
          key: "iterGaps",
          value: function iterGaps(f) {
            for (var _i9 = 0, posA = 0, posB = 0; _i9 < this.sections.length;) {
              var len = this.sections[_i9++],
                  ins = this.sections[_i9++];

              if (ins < 0) {
                f(posA, posB, len);
                posB += len;
              } else {
                posB += ins;
              }

              posA += len;
            }
          }
          /**
          Iterate over the ranges changed by these changes. (See
          [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
          variant that also provides you with the inserted text.)
          
          When `individual` is true, adjacent changes (which are kept
          separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
          reported separately.
          */

        }, {
          key: "iterChangedRanges",
          value: function iterChangedRanges(f) {
            var individual = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            _iterChanges(this, f, individual);
          }
          /**
          Get a description of the inverted form of these changes.
          */

        }, {
          key: "invertedDesc",
          get: function get() {
            var sections = [];

            for (var _i10 = 0; _i10 < this.sections.length;) {
              var len = this.sections[_i10++],
                  ins = this.sections[_i10++];
              if (ins < 0) sections.push(len, ins);else sections.push(ins, len);
            }

            return new ChangeDesc(sections);
          }
          /**
          Compute the combined effect of applying another set of changes
          after this one. The length of the document after this set should
          match the length before `other`.
          */

        }, {
          key: "composeDesc",
          value: function composeDesc(other) {
            return this.empty ? other : other.empty ? this : composeSets(this, other);
          }
          /**
          Map this description, which should start with the same document
          as `other`, over another set of changes, so that it can be
          applied after it. When `before` is true, map as if the changes
          in `other` happened before the ones in `this`.
          */

        }, {
          key: "mapDesc",
          value: function mapDesc(other) {
            var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            return other.empty ? this : mapSet(this, other, before);
          }
        }, {
          key: "mapPos",
          value: function mapPos(pos) {
            var assoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
            var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : MapMode.Simple;
            var posA = 0,
                posB = 0;

            for (var _i11 = 0; _i11 < this.sections.length;) {
              var len = this.sections[_i11++],
                  ins = this.sections[_i11++],
                  endA = posA + len;

              if (ins < 0) {
                if (endA > pos) return posB + (pos - posA);
                posB += len;
              } else {
                if (mode != MapMode.Simple && endA >= pos && (mode == MapMode.TrackDel && posA < pos && endA > pos || mode == MapMode.TrackBefore && posA < pos || mode == MapMode.TrackAfter && endA > pos)) return null;
                if (endA > pos || endA == pos && assoc < 0 && !len) return pos == posA || assoc < 0 ? posB : posB + ins;
                posB += ins;
              }

              posA = endA;
            }

            if (pos > posA) throw new RangeError("Position ".concat(pos, " is out of range for changeset of length ").concat(posA));
            return posB;
          }
          /**
          Check whether these changes touch a given range. When one of the
          changes entirely covers the range, the string `"cover"` is
          returned.
          */

        }, {
          key: "touchesRange",
          value: function touchesRange(from) {
            var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;

            for (var _i12 = 0, pos = 0; _i12 < this.sections.length && pos <= to;) {
              var len = this.sections[_i12++],
                  ins = this.sections[_i12++],
                  end = pos + len;
              if (ins >= 0 && pos <= to && end >= from) return pos < from && end > to ? "cover" : true;
              pos = end;
            }

            return false;
          }
          /**
          @internal
          */

        }, {
          key: "toString",
          value: function toString() {
            var result = "";

            for (var _i13 = 0; _i13 < this.sections.length;) {
              var len = this.sections[_i13++],
                  ins = this.sections[_i13++];
              result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
            }

            return result;
          }
          /**
          Serialize this change desc to a JSON-representable value.
          */

        }, {
          key: "toJSON",
          value: function toJSON() {
            return this.sections;
          }
          /**
          Create a change desc from its JSON representation (as produced
          by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
          */

        }], [{
          key: "fromJSON",
          value: function fromJSON(json) {
            if (!Array.isArray(json) || json.length % 2 || json.some(function (a) {
              return typeof a != "number";
            })) throw new RangeError("Invalid JSON representation of ChangeDesc");
            return new ChangeDesc(json);
          }
        }]);

        return ChangeDesc;
      }();
      /**
      A change set represents a group of modifications to a document. It
      stores the document length, and can only be applied to documents
      with exactly that length.
      */


      var ChangeSet = /*#__PURE__*/function (_ChangeDesc) {
        _inherits(ChangeSet, _ChangeDesc);

        var _super3 = _createSuper(ChangeSet);

        /**
        @internal
        */
        function ChangeSet(sections,
        /**
        @internal
        */
        inserted) {
          var _this12;

          _classCallCheck(this, ChangeSet);

          _this12 = _super3.call(this, sections);
          _this12.inserted = inserted;
          return _this12;
        }
        /**
        Apply the changes to a document, returning the modified
        document.
        */


        _createClass(ChangeSet, [{
          key: "apply",
          value: function apply(doc) {
            if (this.length != doc.length) throw new RangeError("Applying change set to a document with the wrong length");

            _iterChanges(this, function (fromA, toA, fromB, _toB, text) {
              return doc = doc.replace(fromB, fromB + (toA - fromA), text);
            }, false);

            return doc;
          }
        }, {
          key: "mapDesc",
          value: function mapDesc(other) {
            var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            return mapSet(this, other, before, true);
          }
          /**
          Given the document as it existed _before_ the changes, return a
          change set that represents the inverse of this set, which could
          be used to go from the document created by the changes back to
          the document as it existed before the changes.
          */

        }, {
          key: "invert",
          value: function invert(doc) {
            var sections = this.sections.slice(),
                inserted = [];

            for (var _i14 = 0, pos = 0; _i14 < sections.length; _i14 += 2) {
              var len = sections[_i14],
                  ins = sections[_i14 + 1];

              if (ins >= 0) {
                sections[_i14] = ins;
                sections[_i14 + 1] = len;
                var index = _i14 >> 1;

                while (inserted.length < index) {
                  inserted.push(_codemirror_text__WEBPACK_IMPORTED_MODULE_0__["Text"].empty);
                }

                inserted.push(len ? doc.slice(pos, pos + len) : _codemirror_text__WEBPACK_IMPORTED_MODULE_0__["Text"].empty);
              }

              pos += len;
            }

            return new ChangeSet(sections, inserted);
          }
          /**
          Combine two subsequent change sets into a single set. `other`
          must start in the document produced by `this`. If `this` goes
          `docA` → `docB` and `other` represents `docB` → `docC`, the
          returned value will represent the change `docA` → `docC`.
          */

        }, {
          key: "compose",
          value: function compose(other) {
            return this.empty ? other : other.empty ? this : composeSets(this, other, true);
          }
          /**
          Given another change set starting in the same document, maps this
          change set over the other, producing a new change set that can be
          applied to the document produced by applying `other`. When
          `before` is `true`, order changes as if `this` comes before
          `other`, otherwise (the default) treat `other` as coming first.
          
          Given two changes `A` and `B`, `A.compose(B.map(A))` and
          `B.compose(A.map(B, true))` will produce the same document. This
          provides a basic form of [operational
          transformation](https://en.wikipedia.org/wiki/Operational_transformation),
          and can be used for collaborative editing.
          */

        }, {
          key: "map",
          value: function map(other) {
            var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            return other.empty ? this : mapSet(this, other, before, true);
          }
          /**
          Iterate over the changed ranges in the document, calling `f` for
          each.
          
          When `individual` is true, adjacent changes are reported
          separately.
          */

        }, {
          key: "iterChanges",
          value: function iterChanges(f) {
            var individual = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            _iterChanges(this, f, individual);
          }
          /**
          Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
          set.
          */

        }, {
          key: "desc",
          get: function get() {
            return new ChangeDesc(this.sections);
          }
          /**
          @internal
          */

        }, {
          key: "filter",
          value: function filter(ranges) {
            var resultSections = [],
                resultInserted = [],
                filteredSections = [];
            var iter = new SectionIter(this);

            done: for (var _i15 = 0, pos = 0;;) {
              var next = _i15 == ranges.length ? 1e9 : ranges[_i15++];

              while (pos < next || pos == next && iter.len == 0) {
                if (iter.done) break done;
                var len = Math.min(iter.len, next - pos);
                addSection(filteredSections, len, -1);
                var ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
                addSection(resultSections, len, ins);
                if (ins > 0) addInsert(resultInserted, resultSections, iter.text);
                iter.forward(len);
                pos += len;
              }

              var end = ranges[_i15++];

              while (pos < end) {
                if (iter.done) break done;

                var _len = Math.min(iter.len, end - pos);

                addSection(resultSections, _len, -1);
                addSection(filteredSections, _len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
                iter.forward(_len);
                pos += _len;
              }
            }

            return {
              changes: new ChangeSet(resultSections, resultInserted),
              filtered: new ChangeDesc(filteredSections)
            };
          }
          /**
          Serialize this change set to a JSON-representable value.
          */

        }, {
          key: "toJSON",
          value: function toJSON() {
            var parts = [];

            for (var _i16 = 0; _i16 < this.sections.length; _i16 += 2) {
              var len = this.sections[_i16],
                  ins = this.sections[_i16 + 1];
              if (ins < 0) parts.push(len);else if (ins == 0) parts.push([len]);else parts.push([len].concat(this.inserted[_i16 >> 1].toJSON()));
            }

            return parts;
          }
          /**
          Create a change set for the given changes, for a document of the
          given length, using `lineSep` as line separator.
          */

        }], [{
          key: "of",
          value: function of(changes, length, lineSep) {
            var sections = [],
                inserted = [],
                pos = 0;
            var total = null;

            function flush() {
              var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
              if (!force && !sections.length) return;
              if (pos < length) addSection(sections, length - pos, -1);
              var set = new ChangeSet(sections, inserted);
              total = total ? total.compose(set.map(total)) : set;
              sections = [];
              inserted = [];
              pos = 0;
            }

            function process(spec) {
              if (Array.isArray(spec)) {
                var _iterator23 = _createForOfIteratorHelper(spec),
                    _step23;

                try {
                  for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {
                    var sub = _step23.value;
                    process(sub);
                  }
                } catch (err) {
                  _iterator23.e(err);
                } finally {
                  _iterator23.f();
                }
              } else if (spec instanceof ChangeSet) {
                if (spec.length != length) throw new RangeError("Mismatched change set length (got ".concat(spec.length, ", expected ").concat(length, ")"));
                flush();
                total = total ? total.compose(spec.map(total)) : spec;
              } else {
                var from = spec.from,
                    _spec$to = spec.to,
                    to = _spec$to === void 0 ? from : _spec$to,
                    insert = spec.insert;
                if (from > to || from < 0 || to > length) throw new RangeError("Invalid change range ".concat(from, " to ").concat(to, " (in doc of length ").concat(length, ")"));
                var insText = !insert ? _codemirror_text__WEBPACK_IMPORTED_MODULE_0__["Text"].empty : typeof insert == "string" ? _codemirror_text__WEBPACK_IMPORTED_MODULE_0__["Text"].of(insert.split(lineSep || DefaultSplit)) : insert;
                var insLen = insText.length;
                if (from == to && insLen == 0) return;
                if (from < pos) flush();
                if (from > pos) addSection(sections, from - pos, -1);
                addSection(sections, to - from, insLen);
                addInsert(inserted, sections, insText);
                pos = to;
              }
            }

            process(changes);
            flush(!total);
            return total;
          }
          /**
          Create an empty changeset of the given length.
          */

        }, {
          key: "empty",
          value: function empty(length) {
            return new ChangeSet(length ? [length, -1] : [], []);
          }
          /**
          Create a changeset from its JSON representation (as produced by
          [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
          */

        }, {
          key: "fromJSON",
          value: function fromJSON(json) {
            if (!Array.isArray(json)) throw new RangeError("Invalid JSON representation of ChangeSet");
            var sections = [],
                inserted = [];

            for (var _i17 = 0; _i17 < json.length; _i17++) {
              var part = json[_i17];

              if (typeof part == "number") {
                sections.push(part, -1);
              } else if (!Array.isArray(part) || typeof part[0] != "number" || part.some(function (e, i) {
                return i && typeof e != "string";
              })) {
                throw new RangeError("Invalid JSON representation of ChangeSet");
              } else if (part.length == 1) {
                sections.push(part[0], 0);
              } else {
                while (inserted.length < _i17) {
                  inserted.push(_codemirror_text__WEBPACK_IMPORTED_MODULE_0__["Text"].empty);
                }

                inserted[_i17] = _codemirror_text__WEBPACK_IMPORTED_MODULE_0__["Text"].of(part.slice(1));
                sections.push(part[0], inserted[_i17].length);
              }
            }

            return new ChangeSet(sections, inserted);
          }
        }]);

        return ChangeSet;
      }(ChangeDesc);

      function addSection(sections, len, ins) {
        var forceJoin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
        if (len == 0 && ins <= 0) return;
        var last = sections.length - 2;
        if (last >= 0 && ins <= 0 && ins == sections[last + 1]) sections[last] += len;else if (len == 0 && sections[last] == 0) sections[last + 1] += ins;else if (forceJoin) {
          sections[last] += len;
          sections[last + 1] += ins;
        } else sections.push(len, ins);
      }

      function addInsert(values, sections, value) {
        if (value.length == 0) return;
        var index = sections.length - 2 >> 1;

        if (index < values.length) {
          values[values.length - 1] = values[values.length - 1].append(value);
        } else {
          while (values.length < index) {
            values.push(_codemirror_text__WEBPACK_IMPORTED_MODULE_0__["Text"].empty);
          }

          values.push(value);
        }
      }

      function _iterChanges(desc, f, individual) {
        var inserted = desc.inserted;

        for (var posA = 0, posB = 0, _i18 = 0; _i18 < desc.sections.length;) {
          var len = desc.sections[_i18++],
              ins = desc.sections[_i18++];

          if (ins < 0) {
            posA += len;
            posB += len;
          } else {
            var endA = posA,
                endB = posB,
                text = _codemirror_text__WEBPACK_IMPORTED_MODULE_0__["Text"].empty;

            for (;;) {
              endA += len;
              endB += ins;
              if (ins && inserted) text = text.append(inserted[_i18 - 2 >> 1]);
              if (individual || _i18 == desc.sections.length || desc.sections[_i18 + 1] < 0) break;
              len = desc.sections[_i18++];
              ins = desc.sections[_i18++];
            }

            f(posA, endA, posB, endB, text);
            posA = endA;
            posB = endB;
          }
        }
      }

      function mapSet(setA, setB, before) {
        var mkSet = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
        var sections = [],
            insert = mkSet ? [] : null;
        var a = new SectionIter(setA),
            b = new SectionIter(setB);

        for (var posA = 0, posB = 0;;) {
          if (a.ins == -1) {
            posA += a.len;
            a.next();
          } else if (b.ins == -1 && posB < posA) {
            var skip = Math.min(b.len, posA - posB);
            b.forward(skip);
            addSection(sections, skip, -1);
            posB += skip;
          } else if (b.ins >= 0 && (a.done || posB < posA || posB == posA && (b.len < a.len || b.len == a.len && !before))) {
            addSection(sections, b.ins, -1);

            while (posA > posB && !a.done && posA + a.len < posB + b.len) {
              posA += a.len;
              a.next();
            }

            posB += b.len;
            b.next();
          } else if (a.ins >= 0) {
            var len = 0,
                end = posA + a.len;

            for (;;) {
              if (b.ins >= 0 && posB > posA && posB + b.len < end) {
                len += b.ins;
                posB += b.len;
                b.next();
              } else if (b.ins == -1 && posB < end) {
                var _skip = Math.min(b.len, end - posB);

                len += _skip;
                b.forward(_skip);
                posB += _skip;
              } else {
                break;
              }
            }

            addSection(sections, len, a.ins);
            if (insert) addInsert(insert, sections, a.text);
            posA = end;
            a.next();
          } else if (a.done && b.done) {
            return insert ? new ChangeSet(sections, insert) : new ChangeDesc(sections);
          } else {
            throw new Error("Mismatched change set lengths");
          }
        }
      }

      function composeSets(setA, setB) {
        var mkSet = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var sections = [];
        var insert = mkSet ? [] : null;
        var a = new SectionIter(setA),
            b = new SectionIter(setB);

        for (var open = false;;) {
          if (a.done && b.done) {
            return insert ? new ChangeSet(sections, insert) : new ChangeDesc(sections);
          } else if (a.ins == 0) {
            // Deletion in A
            addSection(sections, a.len, 0, open);
            a.next();
          } else if (b.len == 0 && !b.done) {
            // Insertion in B
            addSection(sections, 0, b.ins, open);
            if (insert) addInsert(insert, sections, b.text);
            b.next();
          } else if (a.done || b.done) {
            throw new Error("Mismatched change set lengths");
          } else {
            var len = Math.min(a.len2, b.len),
                sectionLen = sections.length;

            if (a.ins == -1) {
              var insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;
              addSection(sections, len, insB, open);
              if (insert && insB) addInsert(insert, sections, b.text);
            } else if (b.ins == -1) {
              addSection(sections, a.off ? 0 : a.len, len, open);
              if (insert) addInsert(insert, sections, a.textBit(len));
            } else {
              addSection(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);
              if (insert && !b.off) addInsert(insert, sections, b.text);
            }

            open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);
            a.forward2(len);
            b.forward(len);
          }
        }
      }

      var SectionIter = /*#__PURE__*/function () {
        function SectionIter(set) {
          _classCallCheck(this, SectionIter);

          this.set = set;
          this.i = 0;
          this.next();
        }

        _createClass(SectionIter, [{
          key: "next",
          value: function next() {
            var sections = this.set.sections;

            if (this.i < sections.length) {
              this.len = sections[this.i++];
              this.ins = sections[this.i++];
            } else {
              this.len = 0;
              this.ins = -2;
            }

            this.off = 0;
          }
        }, {
          key: "done",
          get: function get() {
            return this.ins == -2;
          }
        }, {
          key: "len2",
          get: function get() {
            return this.ins < 0 ? this.len : this.ins;
          }
        }, {
          key: "text",
          get: function get() {
            var inserted = this.set.inserted,
                index = this.i - 2 >> 1;
            return index >= inserted.length ? _codemirror_text__WEBPACK_IMPORTED_MODULE_0__["Text"].empty : inserted[index];
          }
        }, {
          key: "textBit",
          value: function textBit(len) {
            var inserted = this.set.inserted,
                index = this.i - 2 >> 1;
            return index >= inserted.length && !len ? _codemirror_text__WEBPACK_IMPORTED_MODULE_0__["Text"].empty : inserted[index].slice(this.off, len == null ? undefined : this.off + len);
          }
        }, {
          key: "forward",
          value: function forward(len) {
            if (len == this.len) this.next();else {
              this.len -= len;
              this.off += len;
            }
          }
        }, {
          key: "forward2",
          value: function forward2(len) {
            if (this.ins == -1) this.forward(len);else if (len == this.ins) this.next();else {
              this.ins -= len;
              this.off += len;
            }
          }
        }]);

        return SectionIter;
      }();
      /**
      A single selection range. When
      [`allowMultipleSelections`](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)
      is enabled, a [selection](https://codemirror.net/6/docs/ref/#state.EditorSelection) may hold
      multiple ranges. By default, selections hold exactly one range.
      */


      var SelectionRange = /*#__PURE__*/function () {
        /**
        @internal
        */
        function SelectionRange(
        /**
        The lower boundary of the range.
        */
        from,
        /**
        The upper boundary of the range.
        */
        to, flags) {
          _classCallCheck(this, SelectionRange);

          this.from = from;
          this.to = to;
          this.flags = flags;
        }
        /**
        The anchor of the range—the side that doesn't move when you
        extend it.
        */


        _createClass(SelectionRange, [{
          key: "anchor",
          get: function get() {
            return this.flags & 16
            /* Inverted */
            ? this.to : this.from;
          }
          /**
          The head of the range, which is moved when the range is
          [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
          */

        }, {
          key: "head",
          get: function get() {
            return this.flags & 16
            /* Inverted */
            ? this.from : this.to;
          }
          /**
          True when `anchor` and `head` are at the same position.
          */

        }, {
          key: "empty",
          get: function get() {
            return this.from == this.to;
          }
          /**
          If this is a cursor that is explicitly associated with the
          character on one of its sides, this returns the side. -1 means
          the character before its position, 1 the character after, and 0
          means no association.
          */

        }, {
          key: "assoc",
          get: function get() {
            return this.flags & 4
            /* AssocBefore */
            ? -1 : this.flags & 8
            /* AssocAfter */
            ? 1 : 0;
          }
          /**
          The bidirectional text level associated with this cursor, if
          any.
          */

        }, {
          key: "bidiLevel",
          get: function get() {
            var level = this.flags & 3
            /* BidiLevelMask */
            ;
            return level == 3 ? null : level;
          }
          /**
          The goal column (stored vertical offset) associated with a
          cursor. This is used to preserve the vertical position when
          [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
          lines of different length.
          */

        }, {
          key: "goalColumn",
          get: function get() {
            var value = this.flags >> 5
            /* GoalColumnOffset */
            ;
            return value == 33554431
            /* NoGoalColumn */
            ? undefined : value;
          }
          /**
          Map this range through a change, producing a valid range in the
          updated document.
          */

        }, {
          key: "map",
          value: function map(change) {
            var assoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
            var from = change.mapPos(this.from, assoc),
                to = change.mapPos(this.to, assoc);
            return from == this.from && to == this.to ? this : new SelectionRange(from, to, this.flags);
          }
          /**
          Extend this range to cover at least `from` to `to`.
          */

        }, {
          key: "extend",
          value: function extend(from) {
            var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;
            if (from <= this.anchor && to >= this.anchor) return EditorSelection.range(from, to);
            var head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;
            return EditorSelection.range(this.anchor, head);
          }
          /**
          Compare this range to another range.
          */

        }, {
          key: "eq",
          value: function eq(other) {
            return this.anchor == other.anchor && this.head == other.head;
          }
          /**
          Return a JSON-serializable object representing the range.
          */

        }, {
          key: "toJSON",
          value: function toJSON() {
            return {
              anchor: this.anchor,
              head: this.head
            };
          }
          /**
          Convert a JSON representation of a range to a `SelectionRange`
          instance.
          */

        }], [{
          key: "fromJSON",
          value: function fromJSON(json) {
            if (!json || typeof json.anchor != "number" || typeof json.head != "number") throw new RangeError("Invalid JSON representation for SelectionRange");
            return EditorSelection.range(json.anchor, json.head);
          }
        }]);

        return SelectionRange;
      }();
      /**
      An editor selection holds one or more selection ranges.
      */


      var EditorSelection = /*#__PURE__*/function () {
        /**
        @internal
        */
        function EditorSelection(
        /**
        The ranges in the selection, sorted by position. Ranges cannot
        overlap (but they may touch, if they aren't empty).
        */
        ranges) {
          var mainIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

          _classCallCheck(this, EditorSelection);

          this.ranges = ranges;
          this.mainIndex = mainIndex;
        }
        /**
        Map a selection through a change. Used to adjust the selection
        position for changes.
        */


        _createClass(EditorSelection, [{
          key: "map",
          value: function map(change) {
            var assoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
            if (change.empty) return this;
            return EditorSelection.create(this.ranges.map(function (r) {
              return r.map(change, assoc);
            }), this.mainIndex);
          }
          /**
          Compare this selection to another selection.
          */

        }, {
          key: "eq",
          value: function eq(other) {
            if (this.ranges.length != other.ranges.length || this.mainIndex != other.mainIndex) return false;

            for (var _i19 = 0; _i19 < this.ranges.length; _i19++) {
              if (!this.ranges[_i19].eq(other.ranges[_i19])) return false;
            }

            return true;
          }
          /**
          Get the primary selection range. Usually, you should make sure
          your code applies to _all_ ranges, by using methods like
          [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
          */

        }, {
          key: "main",
          get: function get() {
            return this.ranges[this.mainIndex];
          }
          /**
          Make sure the selection only has one range. Returns a selection
          holding only the main range from this selection.
          */

        }, {
          key: "asSingle",
          value: function asSingle() {
            return this.ranges.length == 1 ? this : new EditorSelection([this.main]);
          }
          /**
          Extend this selection with an extra range.
          */

        }, {
          key: "addRange",
          value: function addRange(range) {
            var main = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            return EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);
          }
          /**
          Replace a given range with another range, and then normalize the
          selection to merge and sort ranges if necessary.
          */

        }, {
          key: "replaceRange",
          value: function replaceRange(range) {
            var which = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.mainIndex;
            var ranges = this.ranges.slice();
            ranges[which] = range;
            return EditorSelection.create(ranges, this.mainIndex);
          }
          /**
          Convert this selection to an object that can be serialized to
          JSON.
          */

        }, {
          key: "toJSON",
          value: function toJSON() {
            return {
              ranges: this.ranges.map(function (r) {
                return r.toJSON();
              }),
              main: this.mainIndex
            };
          }
          /**
          Create a selection from a JSON representation.
          */

        }], [{
          key: "fromJSON",
          value: function fromJSON(json) {
            if (!json || !Array.isArray(json.ranges) || typeof json.main != "number" || json.main >= json.ranges.length) throw new RangeError("Invalid JSON representation for EditorSelection");
            return new EditorSelection(json.ranges.map(function (r) {
              return SelectionRange.fromJSON(r);
            }), json.main);
          }
          /**
          Create a selection holding a single range.
          */

        }, {
          key: "single",
          value: function single(anchor) {
            var head = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : anchor;
            return new EditorSelection([EditorSelection.range(anchor, head)], 0);
          }
          /**
          Sort and merge the given set of ranges, creating a valid
          selection.
          */

        }, {
          key: "create",
          value: function create(ranges) {
            var mainIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            if (ranges.length == 0) throw new RangeError("A selection needs at least one range");

            for (var pos = 0, _i20 = 0; _i20 < ranges.length; _i20++) {
              var range = ranges[_i20];
              if (range.empty ? range.from <= pos : range.from < pos) return normalized(ranges.slice(), mainIndex);
              pos = range.to;
            }

            return new EditorSelection(ranges, mainIndex);
          }
          /**
          Create a cursor selection range at the given position. You can
          safely ignore the optional arguments in most situations.
          */

        }, {
          key: "cursor",
          value: function cursor(pos) {
            var assoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var bidiLevel = arguments.length > 2 ? arguments[2] : undefined;
            var goalColumn = arguments.length > 3 ? arguments[3] : undefined;
            return new SelectionRange(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 4
            /* AssocBefore */
            : 8
            /* AssocAfter */
            ) | (bidiLevel == null ? 3 : Math.min(2, bidiLevel)) | (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431
            /* NoGoalColumn */
            ) << 5
            /* GoalColumnOffset */
            );
          }
          /**
          Create a selection range.
          */

        }, {
          key: "range",
          value: function range(anchor, head, goalColumn) {
            var goal = (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431
            /* NoGoalColumn */
            ) << 5
            /* GoalColumnOffset */
            ;
            return head < anchor ? new SelectionRange(head, anchor, 16
            /* Inverted */
            | goal) : new SelectionRange(anchor, head, goal);
          }
        }]);

        return EditorSelection;
      }();

      function normalized(ranges) {
        var mainIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var main = ranges[mainIndex];
        ranges.sort(function (a, b) {
          return a.from - b.from;
        });
        mainIndex = ranges.indexOf(main);

        for (var _i21 = 1; _i21 < ranges.length; _i21++) {
          var range = ranges[_i21],
              prev = ranges[_i21 - 1];

          if (range.empty ? range.from <= prev.to : range.from < prev.to) {
            var from = prev.from,
                to = Math.max(range.to, prev.to);
            if (_i21 <= mainIndex) mainIndex--;
            ranges.splice(--_i21, 2, range.anchor > range.head ? EditorSelection.range(to, from) : EditorSelection.range(from, to));
          }
        }

        return new EditorSelection(ranges, mainIndex);
      }

      function checkSelection(selection, docLength) {
        var _iterator24 = _createForOfIteratorHelper(selection.ranges),
            _step24;

        try {
          for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {
            var range = _step24.value;
            if (range.to > docLength) throw new RangeError("Selection points outside of document");
          }
        } catch (err) {
          _iterator24.e(err);
        } finally {
          _iterator24.f();
        }
      }

      var nextID = 0;
      /**
      A facet is a labeled value that is associated with an editor
      state. It takes inputs from any number of extensions, and combines
      those into a single output value.
      
      Examples of facets are the [theme](https://codemirror.net/6/docs/ref/#view.EditorView^theme) styles
      associated with an editor or the [tab
      size](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) (which is reduced to a single
      value, using the input with the hightest precedence).
      */

      var Facet = /*#__PURE__*/function () {
        function Facet(
        /**
        @internal
        */
        combine,
        /**
        @internal
        */
        compareInput,
        /**
        @internal
        */
        compare, isStatic,
        /**
        @internal
        */
        extensions) {
          _classCallCheck(this, Facet);

          this.combine = combine;
          this.compareInput = compareInput;
          this.compare = compare;
          this.isStatic = isStatic;
          this.extensions = extensions;
          /**
          @internal
          */

          this.id = nextID++;
          this["default"] = combine([]);
        }
        /**
        Define a new facet.
        */


        _createClass(Facet, [{
          key: "of",
          value:
          /**
          Returns an extension that adds the given value for this facet.
          */
          function of(value) {
            return new FacetProvider([], this, 0
            /* Static */
            , value);
          }
          /**
          Create an extension that computes a value for the facet from a
          state. You must take care to declare the parts of the state that
          this value depends on, since your function is only called again
          for a new state when one of those parts changed.
          
          In most cases, you'll want to use the
          [`provide`](https://codemirror.net/6/docs/ref/#state.StateField^define^config.provide) option when
          defining a field instead.
          */

        }, {
          key: "compute",
          value: function compute(deps, get) {
            if (this.isStatic) throw new Error("Can't compute a static facet");
            return new FacetProvider(deps, this, 1
            /* Single */
            , get);
          }
          /**
          Create an extension that computes zero or more values for this
          facet from a state.
          */

        }, {
          key: "computeN",
          value: function computeN(deps, get) {
            if (this.isStatic) throw new Error("Can't compute a static facet");
            return new FacetProvider(deps, this, 2
            /* Multi */
            , get);
          }
        }, {
          key: "from",
          value: function from(field, get) {
            if (!get) get = function get(x) {
              return x;
            };
            return this.compute([field], function (state) {
              return get(state.field(field));
            });
          }
        }], [{
          key: "define",
          value: function define() {
            var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            return new Facet(config.combine || function (a) {
              return a;
            }, config.compareInput || function (a, b) {
              return a === b;
            }, config.compare || (!config.combine ? sameArray : function (a, b) {
              return a === b;
            }), !!config["static"], config.enables);
          }
        }]);

        return Facet;
      }();

      function sameArray(a, b) {
        return a == b || a.length == b.length && a.every(function (e, i) {
          return e === b[i];
        });
      }

      var FacetProvider = /*#__PURE__*/function () {
        function FacetProvider(dependencies, facet, type, value) {
          _classCallCheck(this, FacetProvider);

          this.dependencies = dependencies;
          this.facet = facet;
          this.type = type;
          this.value = value;
          this.id = nextID++;
        }

        _createClass(FacetProvider, [{
          key: "dynamicSlot",
          value: function dynamicSlot(addresses) {
            var _a;

            var getter = this.value;
            var compare = this.facet.compareInput;
            var idx = addresses[this.id] >> 1,
                multi = this.type == 2
            /* Multi */
            ;
            var depDoc = false,
                depSel = false,
                depAddrs = [];

            var _iterator25 = _createForOfIteratorHelper(this.dependencies),
                _step25;

            try {
              for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {
                var dep = _step25.value;
                if (dep == "doc") depDoc = true;else if (dep == "selection") depSel = true;else if ((((_a = addresses[dep.id]) !== null && _a !== void 0 ? _a : 1) & 1) == 0) depAddrs.push(addresses[dep.id]);
              }
            } catch (err) {
              _iterator25.e(err);
            } finally {
              _iterator25.f();
            }

            return function (state, tr) {
              if (!tr || tr.reconfigured) {
                state.values[idx] = getter(state);
                return 1
                /* Changed */
                ;
              } else {
                var depChanged = depDoc && tr.docChanged || depSel && (tr.docChanged || tr.selection) || depAddrs.some(function (addr) {
                  return (ensureAddr(state, addr) & 1
                  /* Changed */
                  ) > 0;
                });
                if (!depChanged) return 0;
                var newVal = getter(state),
                    oldVal = tr.startState.values[idx];
                if (multi ? compareArray(newVal, oldVal, compare) : compare(newVal, oldVal)) return 0;
                state.values[idx] = newVal;
                return 1
                /* Changed */
                ;
              }
            };
          }
        }]);

        return FacetProvider;
      }();

      function compareArray(a, b, compare) {
        if (a.length != b.length) return false;

        for (var _i22 = 0; _i22 < a.length; _i22++) {
          if (!compare(a[_i22], b[_i22])) return false;
        }

        return true;
      }

      function dynamicFacetSlot(addresses, facet, providers) {
        var providerAddrs = providers.map(function (p) {
          return addresses[p.id];
        });
        var providerTypes = providers.map(function (p) {
          return p.type;
        });
        var dynamic = providerAddrs.filter(function (p) {
          return !(p & 1);
        });
        var idx = addresses[facet.id] >> 1;
        return function (state, tr) {
          var oldAddr = !tr ? null : tr.reconfigured ? tr.startState.config.address[facet.id] : idx << 1;
          var changed = oldAddr == null;

          var _iterator26 = _createForOfIteratorHelper(dynamic),
              _step26;

          try {
            for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {
              var dynAddr = _step26.value;
              if (ensureAddr(state, dynAddr) & 1
              /* Changed */
              ) changed = true;
            }
          } catch (err) {
            _iterator26.e(err);
          } finally {
            _iterator26.f();
          }

          if (!changed) return 0;
          var values = [];

          for (var _i23 = 0; _i23 < providerAddrs.length; _i23++) {
            var value = getAddr(state, providerAddrs[_i23]);

            if (providerTypes[_i23] == 2
            /* Multi */
            ) {
              var _iterator27 = _createForOfIteratorHelper(value),
                  _step27;

              try {
                for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {
                  var val = _step27.value;
                  values.push(val);
                }
              } catch (err) {
                _iterator27.e(err);
              } finally {
                _iterator27.f();
              }
            } else values.push(value);
          }

          var newVal = facet.combine(values);
          if (oldAddr != null && facet.compare(newVal, getAddr(tr.startState, oldAddr))) return 0;
          state.values[idx] = newVal;
          return 1
          /* Changed */
          ;
        };
      }

      function maybeIndex(state, id) {
        var found = state.config.address[id];
        return found == null ? null : found >> 1;
      }

      var initField = /*@__PURE__*/Facet.define({
        "static": true
      });
      /**
      Fields can store additional information in an editor state, and
      keep it in sync with the rest of the state.
      */

      var StateField = /*#__PURE__*/function () {
        function StateField(
        /**
        @internal
        */
        id, createF, updateF, compareF,
        /**
        @internal
        */
        spec) {
          _classCallCheck(this, StateField);

          this.id = id;
          this.createF = createF;
          this.updateF = updateF;
          this.compareF = compareF;
          this.spec = spec;
          /**
          @internal
          */

          this.provides = undefined;
        }
        /**
        Define a state field.
        */


        _createClass(StateField, [{
          key: "create",
          value: function create(state) {
            var _this13 = this;

            var init = state.facet(initField).find(function (i) {
              return i.field == _this13;
            });
            return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);
          }
          /**
          @internal
          */

        }, {
          key: "slot",
          value: function slot(addresses) {
            var _this14 = this;

            var idx = addresses[this.id] >> 1;
            return function (state, tr) {
              if (!tr || tr.reconfigured && maybeIndex(tr.startState, _this14.id) == null) {
                state.values[idx] = _this14.create(state);
                return 1
                /* Changed */
                ;
              }

              var oldVal,
                  changed = 0;

              if (tr.reconfigured) {
                oldVal = tr.startState.values[maybeIndex(tr.startState, _this14.id)];
                changed = 1
                /* Changed */
                ;
              } else {
                oldVal = tr.startState.values[idx];
              }

              var value = _this14.updateF(oldVal, tr);

              if (!changed && !_this14.compareF(oldVal, value)) changed = 1
              /* Changed */
              ;
              if (changed) state.values[idx] = value;
              return changed;
            };
          }
          /**
          Returns an extension that enables this field and overrides the
          way it is initialized. Can be useful when you need to provide a
          non-default starting value for the field.
          */

        }, {
          key: "init",
          value: function init(create) {
            return [this, initField.of({
              field: this,
              create: create
            })];
          }
          /**
          State field instances can be used as
          [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
          given state.
          */

        }, {
          key: "extension",
          get: function get() {
            return this;
          }
        }], [{
          key: "define",
          value: function define(config) {
            var field = new StateField(nextID++, config.create, config.update, config.compare || function (a, b) {
              return a === b;
            }, config);
            if (config.provide) field.provides = config.provide(field);
            return field;
          }
        }]);

        return StateField;
      }();

      var Prec_ = {
        fallback: 3,
        "default": 2,
        extend: 1,
        override: 0
      };

      function prec(value) {
        return function (ext) {
          return new PrecExtension(ext, value);
        };
      }
      /**
      By default extensions are registered in the order they are found
      in the flattened form of nested array that was provided.
      Individual extension values can be assigned a precedence to
      override this. Extensions that do not have a precedence set get
      the precedence of the nearest parent with a precedence, or
      [`default`](https://codemirror.net/6/docs/ref/#state.Prec.default) if there is no such parent. The
      final ordering of extensions is determined by first sorting by
      precedence and then by order within each precedence.
      */


      var Prec = {
        /**
        A precedence below the default precedence, which will cause
        default-precedence extensions to override it even if they are
        specified later in the extension ordering.
        */
        fallback: /*@__PURE__*/prec(Prec_.fallback),

        /**
        The regular default precedence.
        */
        "default": /*@__PURE__*/prec(Prec_["default"]),

        /**
        A higher-than-default precedence.
        */
        extend: /*@__PURE__*/prec(Prec_.extend),

        /**
        Precedence above the `default` and `extend` precedences.
        */
        override: /*@__PURE__*/prec(Prec_.override)
      };

      var PrecExtension = /*#__PURE__*/_createClass(function PrecExtension(inner, prec) {
        _classCallCheck(this, PrecExtension);

        this.inner = inner;
        this.prec = prec;
      });
      /**
      Extension compartments can be used to make a configuration
      dynamic. By [wrapping](https://codemirror.net/6/docs/ref/#state.Compartment.of) part of your
      configuration in a compartment, you can later
      [replace](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure) that part through a
      transaction.
      */


      var Compartment = /*#__PURE__*/function () {
        function Compartment() {
          _classCallCheck(this, Compartment);
        }

        _createClass(Compartment, [{
          key: "of",
          value:
          /**
          Create an instance of this compartment to add to your [state
          configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
          */
          function of(ext) {
            return new CompartmentInstance(this, ext);
          }
          /**
          Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
          reconfigures this compartment.
          */

        }, {
          key: "reconfigure",
          value: function reconfigure(content) {
            return Compartment.reconfigure.of({
              compartment: this,
              extension: content
            });
          }
          /**
          Get the current content of the compartment in the state, or
          `undefined` if it isn't present.
          */

        }, {
          key: "get",
          value: function get(state) {
            return state.config.compartments.get(this);
          }
        }]);

        return Compartment;
      }();

      var CompartmentInstance = /*#__PURE__*/_createClass(function CompartmentInstance(compartment, inner) {
        _classCallCheck(this, CompartmentInstance);

        this.compartment = compartment;
        this.inner = inner;
      });

      var Configuration = /*#__PURE__*/function () {
        function Configuration(base, compartments, dynamicSlots, address, staticValues) {
          _classCallCheck(this, Configuration);

          this.base = base;
          this.compartments = compartments;
          this.dynamicSlots = dynamicSlots;
          this.address = address;
          this.staticValues = staticValues;
          this.statusTemplate = [];

          while (this.statusTemplate.length < dynamicSlots.length) {
            this.statusTemplate.push(0
            /* Uninitialized */
            );
          }
        }

        _createClass(Configuration, [{
          key: "staticFacet",
          value: function staticFacet(facet) {
            var addr = this.address[facet.id];
            return addr == null ? facet["default"] : this.staticValues[addr >> 1];
          }
        }], [{
          key: "resolve",
          value: function resolve(base, compartments, oldState) {
            var fields = [];
            var facets = Object.create(null);
            var newCompartments = new Map();

            var _iterator28 = _createForOfIteratorHelper(flatten(base, compartments, newCompartments)),
                _step28;

            try {
              for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {
                var ext = _step28.value;
                if (ext instanceof StateField) fields.push(ext);else (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
              }
            } catch (err) {
              _iterator28.e(err);
            } finally {
              _iterator28.f();
            }

            var address = Object.create(null);
            var staticValues = [];
            var dynamicSlots = [];

            var _loop3 = function _loop3() {
              var field = _fields[_i24];
              address[field.id] = dynamicSlots.length << 1;
              dynamicSlots.push(function (a) {
                return field.slot(a);
              });
            };

            for (var _i24 = 0, _fields = fields; _i24 < _fields.length; _i24++) {
              _loop3();
            }

            var _loop4 = function _loop4(id) {
              var providers = facets[id],
                  facet = providers[0].facet;

              if (providers.every(function (p) {
                return p.type == 0;
              }
              /* Static */
              )) {
                address[facet.id] = staticValues.length << 1 | 1;
                var value = facet.combine(providers.map(function (p) {
                  return p.value;
                }));
                var oldAddr = oldState ? oldState.config.address[facet.id] : null;

                if (oldAddr != null) {
                  var oldVal = getAddr(oldState, oldAddr);
                  if (facet.compare(value, oldVal)) value = oldVal;
                }

                staticValues.push(value);
              } else {
                var _iterator29 = _createForOfIteratorHelper(providers),
                    _step29;

                try {
                  var _loop5 = function _loop5() {
                    var p = _step29.value;

                    if (p.type == 0
                    /* Static */
                    ) {
                      address[p.id] = staticValues.length << 1 | 1;
                      staticValues.push(p.value);
                    } else {
                      address[p.id] = dynamicSlots.length << 1;
                      dynamicSlots.push(function (a) {
                        return p.dynamicSlot(a);
                      });
                    }
                  };

                  for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {
                    _loop5();
                  }
                } catch (err) {
                  _iterator29.e(err);
                } finally {
                  _iterator29.f();
                }

                address[facet.id] = dynamicSlots.length << 1;
                dynamicSlots.push(function (a) {
                  return dynamicFacetSlot(a, facet, providers);
                });
              }
            };

            for (var id in facets) {
              _loop4(id);
            }

            return new Configuration(base, newCompartments, dynamicSlots.map(function (f) {
              return f(address);
            }), address, staticValues);
          }
        }]);

        return Configuration;
      }();

      function flatten(extension, compartments, newCompartments) {
        var result = [[], [], [], []];
        var seen = new Map();

        function inner(ext, prec) {
          var known = seen.get(ext);

          if (known != null) {
            if (known >= prec) return;
            var found = result[known].indexOf(ext);
            if (found > -1) result[known].splice(found, 1);
            if (ext instanceof CompartmentInstance) newCompartments["delete"](ext.compartment);
          }

          seen.set(ext, prec);

          if (Array.isArray(ext)) {
            var _iterator30 = _createForOfIteratorHelper(ext),
                _step30;

            try {
              for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {
                var e = _step30.value;
                inner(e, prec);
              }
            } catch (err) {
              _iterator30.e(err);
            } finally {
              _iterator30.f();
            }
          } else if (ext instanceof CompartmentInstance) {
            if (newCompartments.has(ext.compartment)) throw new RangeError("Duplicate use of compartment in extensions");
            var content = compartments.get(ext.compartment) || ext.inner;
            newCompartments.set(ext.compartment, content);
            inner(content, prec);
          } else if (ext instanceof PrecExtension) {
            inner(ext.inner, ext.prec);
          } else if (ext instanceof StateField) {
            result[prec].push(ext);
            if (ext.provides) inner(ext.provides, prec);
          } else if (ext instanceof FacetProvider) {
            result[prec].push(ext);
            if (ext.facet.extensions) inner(ext.facet.extensions, prec);
          } else {
            var _content = ext.extension;
            if (!_content) throw new Error("Unrecognized extension value in extension set (".concat(ext, "). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks."));
            inner(_content, prec);
          }
        }

        inner(extension, Prec_["default"]);
        return result.reduce(function (a, b) {
          return a.concat(b);
        });
      }

      function ensureAddr(state, addr) {
        if (addr & 1) return 2
        /* Computed */
        ;
        var idx = addr >> 1;
        var status = state.status[idx];
        if (status == 4
        /* Computing */
        ) throw new Error("Cyclic dependency between fields and/or facets");
        if (status & 2
        /* Computed */
        ) return status;
        state.status[idx] = 4
        /* Computing */
        ;
        var changed = state.config.dynamicSlots[idx](state, state.applying);
        return state.status[idx] = 2
        /* Computed */
        | changed;
      }

      function getAddr(state, addr) {
        return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
      }

      var languageData = /*@__PURE__*/Facet.define();
      var allowMultipleSelections = /*@__PURE__*/Facet.define({
        combine: function combine(values) {
          return values.some(function (v) {
            return v;
          });
        },
        "static": true
      });
      var lineSeparator = /*@__PURE__*/Facet.define({
        combine: function combine(values) {
          return values.length ? values[0] : undefined;
        },
        "static": true
      });
      var changeFilter = /*@__PURE__*/Facet.define();
      var transactionFilter = /*@__PURE__*/Facet.define();
      var transactionExtender = /*@__PURE__*/Facet.define();
      var readOnly = /*@__PURE__*/Facet.define({
        combine: function combine(values) {
          return values.length ? values[0] : false;
        }
      });
      /**
      Annotations are tagged values that are used to add metadata to
      transactions in an extensible way. They should be used to model
      things that effect the entire transaction (such as its [time
      stamp](https://codemirror.net/6/docs/ref/#state.Transaction^time) or information about its
      [origin](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent)). For effects that happen
      _alongside_ the other changes made by the transaction, [state
      effects](https://codemirror.net/6/docs/ref/#state.StateEffect) are more appropriate.
      */

      var Annotation = /*#__PURE__*/function () {
        /**
        @internal
        */
        function Annotation(
        /**
        The annotation type.
        */
        type,
        /**
        The value of this annotation.
        */
        value) {
          _classCallCheck(this, Annotation);

          this.type = type;
          this.value = value;
        }
        /**
        Define a new type of annotation.
        */


        _createClass(Annotation, null, [{
          key: "define",
          value: function define() {
            return new AnnotationType();
          }
        }]);

        return Annotation;
      }();
      /**
      Marker that identifies a type of [annotation](https://codemirror.net/6/docs/ref/#state.Annotation).
      */


      var AnnotationType = /*#__PURE__*/function () {
        function AnnotationType() {
          _classCallCheck(this, AnnotationType);
        }

        _createClass(AnnotationType, [{
          key: "of",
          value:
          /**
          Create an instance of this annotation.
          */
          function of(value) {
            return new Annotation(this, value);
          }
        }]);

        return AnnotationType;
      }();
      /**
      Representation of a type of state effect. Defined with
      [`StateEffect.define`](https://codemirror.net/6/docs/ref/#state.StateEffect^define).
      */


      var StateEffectType = /*#__PURE__*/function () {
        /**
        @internal
        */
        function StateEffectType( // The `any` types in these function types are there to work
        // around TypeScript issue #37631, where the type guard on
        // `StateEffect.is` mysteriously stops working when these properly
        // have type `Value`.

        /**
        @internal
        */
        map) {
          _classCallCheck(this, StateEffectType);

          this.map = map;
        }
        /**
        Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
        type.
        */


        _createClass(StateEffectType, [{
          key: "of",
          value: function of(value) {
            return new StateEffect(this, value);
          }
        }]);

        return StateEffectType;
      }();
      /**
      State effects can be used to represent additional effects
      associated with a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction.effects). They
      are often useful to model changes to custom [state
      fields](https://codemirror.net/6/docs/ref/#state.StateField), when those changes aren't implicit in
      document or selection changes.
      */


      var StateEffect = /*#__PURE__*/function () {
        /**
        @internal
        */
        function StateEffect(
        /**
        @internal
        */
        type,
        /**
        The value of this effect.
        */
        value) {
          _classCallCheck(this, StateEffect);

          this.type = type;
          this.value = value;
        }
        /**
        Map this effect through a position mapping. Will return
        `undefined` when that ends up deleting the effect.
        */


        _createClass(StateEffect, [{
          key: "map",
          value: function map(mapping) {
            var mapped = this.type.map(this.value, mapping);
            return mapped === undefined ? undefined : mapped == this.value ? this : new StateEffect(this.type, mapped);
          }
          /**
          Tells you whether this effect object is of a given
          [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
          */

        }, {
          key: "is",
          value: function is(type) {
            return this.type == type;
          }
          /**
          Define a new effect type. The type parameter indicates the type
          of values that his effect holds.
          */

        }], [{
          key: "define",
          value: function define() {
            var spec = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            return new StateEffectType(spec.map || function (v) {
              return v;
            });
          }
          /**
          Map an array of effects through a change set.
          */

        }, {
          key: "mapEffects",
          value: function mapEffects(effects, mapping) {
            if (!effects.length) return effects;
            var result = [];

            var _iterator31 = _createForOfIteratorHelper(effects),
                _step31;

            try {
              for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {
                var effect = _step31.value;
                var mapped = effect.map(mapping);
                if (mapped) result.push(mapped);
              }
            } catch (err) {
              _iterator31.e(err);
            } finally {
              _iterator31.f();
            }

            return result;
          }
        }]);

        return StateEffect;
      }();
      /**
      This effect can be used to reconfigure the root extensions of
      the editor. Doing this will discard any extensions
      [appended](https://codemirror.net/6/docs/ref/#state.StateEffect^appendConfig), but does not reset
      the content of [reconfigured](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure)
      compartments.
      */


      StateEffect.reconfigure = /*@__PURE__*/StateEffect.define();
      /**
      Append extensions to the top-level configuration of the editor.
      */

      StateEffect.appendConfig = /*@__PURE__*/StateEffect.define();
      /**
      Changes to the editor state are grouped into transactions.
      Typically, a user action creates a single transaction, which may
      contain any number of document changes, may change the selection,
      or have other effects. Create a transaction by calling
      [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
      */

      var Transaction = /*#__PURE__*/function () {
        /**
        @internal
        */
        function Transaction(
        /**
        The state from which the transaction starts.
        */
        startState,
        /**
        The document changes made by this transaction.
        */
        changes,
        /**
        The selection set by this transaction, or undefined if it
        doesn't explicitly set a selection.
        */
        selection,
        /**
        The effects added to the transaction.
        */
        effects,
        /**
        @internal
        */
        annotations,
        /**
        Whether the selection should be scrolled into view after this
        transaction is dispatched.
        */
        scrollIntoView) {
          _classCallCheck(this, Transaction);

          this.startState = startState;
          this.changes = changes;
          this.selection = selection;
          this.effects = effects;
          this.annotations = annotations;
          this.scrollIntoView = scrollIntoView;
          /**
          @internal
          */

          this._doc = null;
          /**
          @internal
          */

          this._state = null;
          if (selection) checkSelection(selection, changes.newLength);
          if (!annotations.some(function (a) {
            return a.type == Transaction.time;
          })) this.annotations = annotations.concat(Transaction.time.of(Date.now()));
        }
        /**
        The new document produced by the transaction. Contrary to
        [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
        force the entire new state to be computed right away, so it is
        recommended that [transaction
        filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
        when they need to look at the new document.
        */


        _createClass(Transaction, [{
          key: "newDoc",
          get: function get() {
            return this._doc || (this._doc = this.changes.apply(this.startState.doc));
          }
          /**
          The new selection produced by the transaction. If
          [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
          this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
          current selection through the changes made by the transaction.
          */

        }, {
          key: "newSelection",
          get: function get() {
            return this.selection || this.startState.selection.map(this.changes);
          }
          /**
          The new state created by the transaction. Computed on demand
          (but retained for subsequent access), so itis recommended not to
          access it in [transaction
          filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
          */

        }, {
          key: "state",
          get: function get() {
            if (!this._state) this.startState.applyTransaction(this);
            return this._state;
          }
          /**
          Get the value of the given annotation type, if any.
          */

        }, {
          key: "annotation",
          value: function annotation(type) {
            var _iterator32 = _createForOfIteratorHelper(this.annotations),
                _step32;

            try {
              for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {
                var ann = _step32.value;
                if (ann.type == type) return ann.value;
              }
            } catch (err) {
              _iterator32.e(err);
            } finally {
              _iterator32.f();
            }

            return undefined;
          }
          /**
          Indicates whether the transaction changed the document.
          */

        }, {
          key: "docChanged",
          get: function get() {
            return !this.changes.empty;
          }
          /**
          Indicates whether this transaction reconfigures the state
          (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
          with a top-level configuration
          [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
          */

        }, {
          key: "reconfigured",
          get: function get() {
            return this.startState.config != this.state.config;
          }
          /**
          Returns true if the transaction has a [user
          event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
          or more specific than `event`. For example, if the transaction
          has `"select.pointer"` as user event, `"select"` and
          `"select.pointer"` will match it.
          */

        }, {
          key: "isUserEvent",
          value: function isUserEvent(event) {
            var e = this.annotation(Transaction.userEvent);
            return e && (e == event || e.length > event.length && e.slice(0, event.length) == event && e[event.length] == ".");
          }
        }]);

        return Transaction;
      }();
      /**
      Annotation used to store transaction timestamps.
      */


      Transaction.time = /*@__PURE__*/Annotation.define();
      /**
      Annotation used to associate a transaction with a user interface
      event. Holds a string identifying the event, using a
      dot-separated format to support attaching more specific
      information. The events used by the core libraries are:
      
       - `"input"` when content is entered
         - `"input.type"` for typed input
           - `"input.type.compose"` for composition
         - `"input.paste"` for pasted input
         - `"input.drop"` when adding content with drag-and-drop
         - `"input.complete"` when autocompleting
       - `"delete"` when the user deletes content
         - `"delete.selection"` when deleting the selection
         - `"delete.forward"` when deleting forward from the selection
         - `"delete.backward"` when deleting backward from the selection
         - `"delete.cut"` when cutting to the clipboard
       - `"move"` when content is moved
         - `"move.drop"` when content is moved within the editor through drag-and-drop
       - `"select"` when explicitly changing the selection
         - `"select.pointer"` when selecting with a mouse or other pointing device
       - `"undo"` and `"redo"` for history actions
      
      Use [`isUserEvent`](https://codemirror.net/6/docs/ref/#state.Transaction.isUserEvent) to check
      whether the annotation matches a given event.
      */

      Transaction.userEvent = /*@__PURE__*/Annotation.define();
      /**
      Annotation indicating whether a transaction should be added to
      the undo history or not.
      */

      Transaction.addToHistory = /*@__PURE__*/Annotation.define();
      /**
      Annotation indicating (when present and true) that a transaction
      represents a change made by some other actor, not the user. This
      is used, for example, to tag other people's changes in
      collaborative editing.
      */

      Transaction.remote = /*@__PURE__*/Annotation.define();

      function joinRanges(a, b) {
        var result = [];

        for (var iA = 0, iB = 0;;) {
          var from = void 0,
              to = void 0;

          if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {
            from = a[iA++];
            to = a[iA++];
          } else if (iB < b.length) {
            from = b[iB++];
            to = b[iB++];
          } else return result;

          if (!result.length || result[result.length - 1] < from) result.push(from, to);else if (result[result.length - 1] < to) result[result.length - 1] = to;
        }
      }

      function mergeTransaction(a, b, sequential) {
        var _a;

        var mapForA, mapForB, changes;

        if (sequential) {
          mapForA = b.changes;
          mapForB = ChangeSet.empty(b.changes.length);
          changes = a.changes.compose(b.changes);
        } else {
          mapForA = b.changes.map(a.changes);
          mapForB = a.changes.mapDesc(b.changes, true);
          changes = a.changes.compose(mapForA);
        }

        return {
          changes: changes,
          selection: b.selection ? b.selection.map(mapForB) : (_a = a.selection) === null || _a === void 0 ? void 0 : _a.map(mapForA),
          effects: StateEffect.mapEffects(a.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),
          annotations: a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations,
          scrollIntoView: a.scrollIntoView || b.scrollIntoView
        };
      }

      function resolveTransactionInner(state, spec, docSize) {
        var sel = spec.selection,
            annotations = asArray(spec.annotations);
        if (spec.userEvent) annotations = annotations.concat(Transaction.userEvent.of(spec.userEvent));
        return {
          changes: spec.changes instanceof ChangeSet ? spec.changes : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),
          selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),
          effects: asArray(spec.effects),
          annotations: annotations,
          scrollIntoView: !!spec.scrollIntoView
        };
      }

      function resolveTransaction(state, specs, filter) {
        var s = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);
        if (specs.length && specs[0].filter === false) filter = false;

        for (var _i25 = 1; _i25 < specs.length; _i25++) {
          if (specs[_i25].filter === false) filter = false;
          var seq = !!specs[_i25].sequential;
          s = mergeTransaction(s, resolveTransactionInner(state, specs[_i25], seq ? s.changes.newLength : state.doc.length), seq);
        }

        var tr = new Transaction(state, s.changes, s.selection, s.effects, s.annotations, s.scrollIntoView);
        return extendTransaction(filter ? filterTransaction(tr) : tr);
      } // Finish a transaction by applying filters if necessary.


      function filterTransaction(tr) {
        var state = tr.startState; // Change filters

        var result = true;

        var _iterator33 = _createForOfIteratorHelper(state.facet(changeFilter)),
            _step33;

        try {
          for (_iterator33.s(); !(_step33 = _iterator33.n()).done;) {
            var filter = _step33.value;
            var value = filter(tr);

            if (value === false) {
              result = false;
              break;
            }

            if (Array.isArray(value)) result = result === true ? value : joinRanges(result, value);
          }
        } catch (err) {
          _iterator33.e(err);
        } finally {
          _iterator33.f();
        }

        if (result !== true) {
          var changes, back;

          if (result === false) {
            back = tr.changes.invertedDesc;
            changes = ChangeSet.empty(state.doc.length);
          } else {
            var filtered = tr.changes.filter(result);
            changes = filtered.changes;
            back = filtered.filtered.invertedDesc;
          }

          tr = new Transaction(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);
        } // Transaction filters


        var filters = state.facet(transactionFilter);

        for (var _i26 = filters.length - 1; _i26 >= 0; _i26--) {
          var _filtered = filters[_i26](tr);

          if (_filtered instanceof Transaction) tr = _filtered;else if (Array.isArray(_filtered) && _filtered.length == 1 && _filtered[0] instanceof Transaction) tr = _filtered[0];else tr = resolveTransaction(state, asArray(_filtered), false);
        }

        return tr;
      }

      function extendTransaction(tr) {
        var state = tr.startState,
            extenders = state.facet(transactionExtender),
            spec = tr;

        for (var _i27 = extenders.length - 1; _i27 >= 0; _i27--) {
          var extension = extenders[_i27](tr);

          if (extension && Object.keys(extension).length) spec = mergeTransaction(tr, resolveTransactionInner(state, extension, tr.changes.newLength), true);
        }

        return spec == tr ? tr : new Transaction(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);
      }

      var none = [];

      function asArray(value) {
        return value == null ? none : Array.isArray(value) ? value : [value];
      }
      /**
      The categories produced by a [character
      categorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer). These are used
      do things like selecting by word.
      */


      var CharCategory = /*@__PURE__*/function (CharCategory) {
        /**
        Word characters.
        */
        CharCategory[CharCategory["Word"] = 0] = "Word";
        /**
        Whitespace.
        */

        CharCategory[CharCategory["Space"] = 1] = "Space";
        /**
        Anything else.
        */

        CharCategory[CharCategory["Other"] = 2] = "Other";
        return CharCategory;
      }(CharCategory || (CharCategory = {}));

      var nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
      var wordChar;

      try {
        wordChar = /*@__PURE__*/new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
      } catch (_) {}

      function hasWordChar(str) {
        if (wordChar) return wordChar.test(str);

        for (var _i28 = 0; _i28 < str.length; _i28++) {
          var ch = str[_i28];
          if (/\w/.test(ch) || ch > "\x80" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch))) return true;
        }

        return false;
      }

      function makeCategorizer(wordChars) {
        return function (_char2) {
          if (!/\S/.test(_char2)) return CharCategory.Space;
          if (hasWordChar(_char2)) return CharCategory.Word;

          for (var _i29 = 0; _i29 < wordChars.length; _i29++) {
            if (_char2.indexOf(wordChars[_i29]) > -1) return CharCategory.Word;
          }

          return CharCategory.Other;
        };
      }
      /**
      The editor state class is a persistent (immutable) data structure.
      To update a state, you [create](https://codemirror.net/6/docs/ref/#state.EditorState.update) a
      [transaction](https://codemirror.net/6/docs/ref/#state.Transaction), which produces a _new_ state
      instance, without modifying the original object.
      
      As such, _never_ mutate properties of a state directly. That'll
      just break things.
      */


      var EditorState = /*#__PURE__*/function () {
        /**
        @internal
        */
        function EditorState(
        /**
        @internal
        */
        config,
        /**
        The current document.
        */
        doc,
        /**
        The current selection.
        */
        selection) {
          var tr = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

          _classCallCheck(this, EditorState);

          this.config = config;
          this.doc = doc;
          this.selection = selection;
          /**
          @internal
          */

          this.applying = null;
          this.status = config.statusTemplate.slice();

          if (tr && tr.startState.config == config) {
            this.values = tr.startState.values.slice();
          } else {
            this.values = config.dynamicSlots.map(function (_) {
              return null;
            }); // Copy over old values for shared facets/fields if this is a reconfigure

            if (tr) for (var id in config.address) {
              var cur = config.address[id],
                  prev = tr.startState.config.address[id];
              if (prev != null && (cur & 1) == 0) this.values[cur >> 1] = getAddr(tr.startState, prev);
            }
          }

          this.applying = tr; // Fill in the computed state immediately, so that further queries
          // for it made during the update return this state

          if (tr) tr._state = this;

          for (var _i30 = 0; _i30 < this.config.dynamicSlots.length; _i30++) {
            ensureAddr(this, _i30 << 1);
          }

          this.applying = null;
        }

        _createClass(EditorState, [{
          key: "field",
          value: function field(_field) {
            var require = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            var addr = this.config.address[_field.id];

            if (addr == null) {
              if (require) throw new RangeError("Field is not present in this state");
              return undefined;
            }

            ensureAddr(this, addr);
            return getAddr(this, addr);
          }
          /**
          Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
          state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
          can be passed. Unless
          [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
          [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
          are assumed to start in the _current_ document (not the document
          produced by previous specs), and its
          [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
          [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
          to the document created by its _own_ changes. The resulting
          transaction contains the combined effect of all the different
          specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
          specs take precedence over earlier ones.
          */

        }, {
          key: "update",
          value: function update() {
            for (var _len2 = arguments.length, specs = new Array(_len2), _key = 0; _key < _len2; _key++) {
              specs[_key] = arguments[_key];
            }

            return resolveTransaction(this, specs, true);
          }
          /**
          @internal
          */

        }, {
          key: "applyTransaction",
          value: function applyTransaction(tr) {
            var conf = this.config,
                _conf = conf,
                base = _conf.base,
                compartments = _conf.compartments;

            var _iterator34 = _createForOfIteratorHelper(tr.effects),
                _step34;

            try {
              for (_iterator34.s(); !(_step34 = _iterator34.n()).done;) {
                var effect = _step34.value;

                if (effect.is(Compartment.reconfigure)) {
                  if (conf) {
                    compartments = new Map();
                    conf.compartments.forEach(function (val, key) {
                      return compartments.set(key, val);
                    });
                    conf = null;
                  }

                  compartments.set(effect.value.compartment, effect.value.extension);
                } else if (effect.is(StateEffect.reconfigure)) {
                  conf = null;
                  base = effect.value;
                } else if (effect.is(StateEffect.appendConfig)) {
                  conf = null;
                  base = asArray(base).concat(effect.value);
                }
              }
            } catch (err) {
              _iterator34.e(err);
            } finally {
              _iterator34.f();
            }

            new EditorState(conf || Configuration.resolve(base, compartments, this), tr.newDoc, tr.newSelection, tr);
          }
          /**
          Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
          replaces every selection range with the given content.
          */

        }, {
          key: "replaceSelection",
          value: function replaceSelection(text) {
            if (typeof text == "string") text = this.toText(text);
            return this.changeByRange(function (range) {
              return {
                changes: {
                  from: range.from,
                  to: range.to,
                  insert: text
                },
                range: EditorSelection.cursor(range.from + text.length)
              };
            });
          }
          /**
          Create a set of changes and a new selection by running the given
          function for each range in the active selection. The function
          can return an optional set of changes (in the coordinate space
          of the start document), plus an updated range (in the coordinate
          space of the document produced by the call's own changes). This
          method will merge all the changes and ranges into a single
          changeset and selection, and return it as a [transaction
          spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
          [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
          */

        }, {
          key: "changeByRange",
          value: function changeByRange(f) {
            var sel = this.selection;
            var result1 = f(sel.ranges[0]);
            var changes = this.changes(result1.changes),
                ranges = [result1.range];
            var effects = asArray(result1.effects);

            for (var _i31 = 1; _i31 < sel.ranges.length; _i31++) {
              var result = f(sel.ranges[_i31]);
              var newChanges = this.changes(result.changes),
                  newMapped = newChanges.map(changes);

              for (var j = 0; j < _i31; j++) {
                ranges[j] = ranges[j].map(newMapped);
              }

              var mapBy = changes.mapDesc(newChanges, true);
              ranges.push(result.range.map(mapBy));
              changes = changes.compose(newMapped);
              effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray(result.effects), mapBy));
            }

            return {
              changes: changes,
              selection: EditorSelection.create(ranges, sel.mainIndex),
              effects: effects
            };
          }
          /**
          Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
          description, taking the state's document length and line
          separator into account.
          */

        }, {
          key: "changes",
          value: function changes() {
            var spec = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
            if (spec instanceof ChangeSet) return spec;
            return ChangeSet.of(spec, this.doc.length, this.facet(EditorState.lineSeparator));
          }
          /**
          Using the state's [line
          separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
          [`Text`](https://codemirror.net/6/docs/ref/#text.Text) instance from the given string.
          */

        }, {
          key: "toText",
          value: function toText(string) {
            return _codemirror_text__WEBPACK_IMPORTED_MODULE_0__["Text"].of(string.split(this.facet(EditorState.lineSeparator) || DefaultSplit));
          }
          /**
          Return the given range of the document as a string.
          */

        }, {
          key: "sliceDoc",
          value: function sliceDoc() {
            var from = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
            var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.doc.length;
            return this.doc.sliceString(from, to, this.lineBreak);
          }
          /**
          Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
          */

        }, {
          key: "facet",
          value: function facet(_facet) {
            var addr = this.config.address[_facet.id];
            if (addr == null) return _facet["default"];
            ensureAddr(this, addr);
            return getAddr(this, addr);
          }
          /**
          Convert this state to a JSON-serializable object. When custom
          fields should be serialized, you can pass them in as an object
          mapping property names (in the resulting object, which should
          not use `doc` or `selection`) to fields.
          */

        }, {
          key: "toJSON",
          value: function toJSON(fields) {
            var result = {
              doc: this.sliceDoc(),
              selection: this.selection.toJSON()
            };
            if (fields) for (var prop in fields) {
              var value = fields[prop];
              if (value instanceof StateField) result[prop] = value.spec.toJSON(this.field(fields[prop]), this);
            }
            return result;
          }
          /**
          Deserialize a state from its JSON representation. When custom
          fields should be deserialized, pass the same object you passed
          to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
          third argument.
          */

        }, {
          key: "tabSize",
          get:
          /**
          The size (in columns) of a tab in the document, determined by
          the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
          */
          function get() {
            return this.facet(EditorState.tabSize);
          }
          /**
          Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
          string for this state.
          */

        }, {
          key: "lineBreak",
          get: function get() {
            return this.facet(EditorState.lineSeparator) || "\n";
          }
          /**
          Returns true when the editor is
          [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
          */

        }, {
          key: "readOnly",
          get: function get() {
            return this.facet(readOnly);
          }
          /**
          Look up a translation for the given phrase (via the
          [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
          original string if no translation is found.
          */

        }, {
          key: "phrase",
          value: function phrase(_phrase) {
            var _iterator35 = _createForOfIteratorHelper(this.facet(EditorState.phrases)),
                _step35;

            try {
              for (_iterator35.s(); !(_step35 = _iterator35.n()).done;) {
                var map = _step35.value;
                if (Object.prototype.hasOwnProperty.call(map, _phrase)) return map[_phrase];
              }
            } catch (err) {
              _iterator35.e(err);
            } finally {
              _iterator35.f();
            }

            return _phrase;
          }
          /**
          Find the values for a given language data field, provided by the
          the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
          */

        }, {
          key: "languageDataAt",
          value: function languageDataAt(name, pos) {
            var side = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
            var values = [];

            var _iterator36 = _createForOfIteratorHelper(this.facet(languageData)),
                _step36;

            try {
              for (_iterator36.s(); !(_step36 = _iterator36.n()).done;) {
                var provider = _step36.value;

                var _iterator37 = _createForOfIteratorHelper(provider(this, pos, side)),
                    _step37;

                try {
                  for (_iterator37.s(); !(_step37 = _iterator37.n()).done;) {
                    var result = _step37.value;
                    if (Object.prototype.hasOwnProperty.call(result, name)) values.push(result[name]);
                  }
                } catch (err) {
                  _iterator37.e(err);
                } finally {
                  _iterator37.f();
                }
              }
            } catch (err) {
              _iterator36.e(err);
            } finally {
              _iterator36.f();
            }

            return values;
          }
          /**
          Return a function that can categorize strings (expected to
          represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#text.findClusterBreak))
          into one of:
          
           - Word (contains an alphanumeric character or a character
             explicitly listed in the local language's `"wordChars"`
             language data, which should be a string)
           - Space (contains only whitespace)
           - Other (anything else)
          */

        }, {
          key: "charCategorizer",
          value: function charCategorizer(at) {
            return makeCategorizer(this.languageDataAt("wordChars", at).join(""));
          }
          /**
          Find the word at the given position, meaning the range
          containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
          around it. If no word characters are adjacent to the position,
          this returns null.
          */

        }, {
          key: "wordAt",
          value: function wordAt(pos) {
            var _this$doc$lineAt = this.doc.lineAt(pos),
                text = _this$doc$lineAt.text,
                from = _this$doc$lineAt.from,
                length = _this$doc$lineAt.length;

            var cat = this.charCategorizer(pos);
            var start = pos - from,
                end = pos - from;

            while (start > 0) {
              var prev = Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_0__["findClusterBreak"])(text, start, false);
              if (cat(text.slice(prev, start)) != CharCategory.Word) break;
              start = prev;
            }

            while (end < length) {
              var next = Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_0__["findClusterBreak"])(text, end);
              if (cat(text.slice(end, next)) != CharCategory.Word) break;
              end = next;
            }

            return start == end ? null : EditorSelection.range(start + from, end + from);
          }
        }], [{
          key: "fromJSON",
          value: function fromJSON(json) {
            var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var fields = arguments.length > 2 ? arguments[2] : undefined;
            if (!json || typeof json.doc != "string") throw new RangeError("Invalid JSON representation for EditorState");
            var fieldInit = [];

            if (fields) {
              var _loop6 = function _loop6(prop) {
                var field = fields[prop],
                    value = json[prop];
                fieldInit.push(field.init(function (state) {
                  return field.spec.fromJSON(value, state);
                }));
              };

              for (var prop in fields) {
                _loop6(prop);
              }
            }

            return EditorState.create({
              doc: json.doc,
              selection: EditorSelection.fromJSON(json.selection),
              extensions: config.extensions ? fieldInit.concat([config.extensions]) : fieldInit
            });
          }
          /**
          Create a new state. You'll usually only need this when
          initializing an editor—updated states are created by applying
          transactions.
          */

        }, {
          key: "create",
          value: function create() {
            var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var configuration = Configuration.resolve(config.extensions || [], new Map());
            var doc = config.doc instanceof _codemirror_text__WEBPACK_IMPORTED_MODULE_0__["Text"] ? config.doc : _codemirror_text__WEBPACK_IMPORTED_MODULE_0__["Text"].of((config.doc || "").split(configuration.staticFacet(EditorState.lineSeparator) || DefaultSplit));
            var selection = !config.selection ? EditorSelection.single(0) : config.selection instanceof EditorSelection ? config.selection : EditorSelection.single(config.selection.anchor, config.selection.head);
            checkSelection(selection, doc.length);
            if (!configuration.staticFacet(allowMultipleSelections)) selection = selection.asSingle();
            return new EditorState(configuration, doc, selection);
          }
        }]);

        return EditorState;
      }();
      /**
      A facet that, when enabled, causes the editor to allow multiple
      ranges to be selected. Be careful though, because by default the
      editor relies on the native DOM selection, which cannot handle
      multiple selections. An extension like
      [`drawSelection`](https://codemirror.net/6/docs/ref/#view.drawSelection) can be used to make
      secondary selections visible to the user.
      */


      EditorState.allowMultipleSelections = allowMultipleSelections;
      /**
      Configures the tab size to use in this state. The first
      (highest-precedence) value of the facet is used. If no value is
      given, this defaults to 4.
      */

      EditorState.tabSize = /*@__PURE__*/Facet.define({
        combine: function combine(values) {
          return values.length ? values[0] : 4;
        }
      });
      /**
      The line separator to use. By default, any of `"\n"`, `"\r\n"`
      and `"\r"` is treated as a separator when splitting lines, and
      lines are joined with `"\n"`.
      
      When you configure a value here, only that precise separator
      will be used, allowing you to round-trip documents through the
      editor without normalizing line separators.
      */

      EditorState.lineSeparator = lineSeparator;
      /**
      This facet controls the value of the
      [`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) getter, which is
      consulted by commands and extensions that implement editing
      functionality to determine whether they should apply. It
      defaults to false, but when its highest-precedence value is
      `true`, such functionality disables itself.
      
      Not to be confused with
      [`EditorView.editable`](https://codemirror.net/6/docs/ref/#view.EditorView^editable), which
      controls whether the editor's DOM is set to be editable (and
      thus focusable).
      */

      EditorState.readOnly = readOnly;
      /**
      Registers translation phrases. The
      [`phrase`](https://codemirror.net/6/docs/ref/#state.EditorState.phrase) method will look through
      all objects registered with this facet to find translations for
      its argument.
      */

      EditorState.phrases = /*@__PURE__*/Facet.define();
      /**
      A facet used to register [language
      data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) providers.
      */

      EditorState.languageData = languageData;
      /**
      Facet used to register change filters, which are called for each
      transaction (unless explicitly
      [disabled](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter)), and can suppress
      part of the transaction's changes.
      
      Such a function can return `true` to indicate that it doesn't
      want to do anything, `false` to completely stop the changes in
      the transaction, or a set of ranges in which changes should be
      suppressed. Such ranges are represented as an array of numbers,
      with each pair of two number indicating the start and end of a
      range. So for example `[10, 20, 100, 110]` suppresses changes
      between 10 and 20, and between 100 and 110.
      */

      EditorState.changeFilter = changeFilter;
      /**
      Facet used to register a hook that gets a chance to update or
      replace transaction specs before they are applied. This will
      only be applied for transactions that don't have
      [`filter`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter) set to `false`. You
      can either return a single transaction spec (possibly the input
      transaction), or an array of specs (which will be combined in
      the same way as the arguments to
      [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update)).
      
      When possible, it is recommended to avoid accessing
      [`Transaction.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state) in a filter,
      since it will force creation of a state that will then be
      discarded again, if the transaction is actually filtered.
      
      (This functionality should be used with care. Indiscriminately
      modifying transaction is likely to break something or degrade
      the user experience.)
      */

      EditorState.transactionFilter = transactionFilter;
      /**
      This is a more limited form of
      [`transactionFilter`](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter),
      which can only add
      [annotations](https://codemirror.net/6/docs/ref/#state.TransactionSpec.annotations) and
      [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects). _But_, this type
      of filter runs even the transaction has disabled regular
      [filtering](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter), making it suitable
      for effects that don't need to touch the changes or selection,
      but do want to process every transaction.
      
      Extenders run _after_ filters, when both are applied.
      */

      EditorState.transactionExtender = transactionExtender;
      Compartment.reconfigure = /*@__PURE__*/StateEffect.define();
      /**
      Utility function for combining behaviors to fill in a config
      object from an array of provided configs. Will, by default, error
      when a field gets two values that aren't `===`-equal, but you can
      provide combine functions per field to do something else.
      */

      function combineConfig(configs, defaults) {
        var combine = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var result = {};

        var _iterator38 = _createForOfIteratorHelper(configs),
            _step38;

        try {
          for (_iterator38.s(); !(_step38 = _iterator38.n()).done;) {
            var config = _step38.value;

            for (var _i32 = 0, _Object$keys = Object.keys(config); _i32 < _Object$keys.length; _i32++) {
              var _key2 = _Object$keys[_i32];
              var value = config[_key2],
                  current = result[_key2];
              if (current === undefined) result[_key2] = value;else if (current === value || value === undefined) ; // No conflict
              else if (Object.hasOwnProperty.call(combine, _key2)) result[_key2] = combine[_key2](current, value);else throw new Error("Config merge conflict for field " + _key2);
            }
          }
        } catch (err) {
          _iterator38.e(err);
        } finally {
          _iterator38.f();
        }

        for (var key in defaults) {
          if (result[key] === undefined) result[key] = defaults[key];
        }

        return result;
      }
      /***/

    },

    /***/
    "6O8Z":
    /*!*********************************************!*\
      !*** ./libs/components/codemirror/index.ts ***!
      \*********************************************/

    /*! exports provided: CodemirrorComponent, CodemirrorModule */

    /***/
    function O8Z(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony import */


      var _public_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./public_api */
      "L6lZ");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "CodemirrorComponent", function () {
        return _public_api__WEBPACK_IMPORTED_MODULE_0__["CodemirrorComponent"];
      });
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "CodemirrorModule", function () {
        return _public_api__WEBPACK_IMPORTED_MODULE_0__["CodemirrorModule"];
      });
      /***/

    },

    /***/
    "8DFY":
    /*!**********************************************************************!*\
      !*** ./node_modules/@codemirror/rectangular-selection/dist/index.js ***!
      \**********************************************************************/

    /*! exports provided: rectangularSelection */

    /***/
    function DFY(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "rectangularSelection", function () {
        return rectangularSelection;
      });
      /* harmony import */


      var _codemirror_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @codemirror/state */
      "4eob");
      /* harmony import */


      var _codemirror_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @codemirror/view */
      "AtEE");
      /* harmony import */


      var _codemirror_text__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @codemirror/text */
      "uZp5"); // Don't compute precise column positions for line offsets above this
      // (since it could get expensive). Assume offset==column for them.


      var MaxOff = 2000;

      function rectangleFor(state, a, b) {
        var startLine = Math.min(a.line, b.line),
            endLine = Math.max(a.line, b.line);
        var ranges = [];

        if (a.off > MaxOff || b.off > MaxOff || a.col < 0 || b.col < 0) {
          var startOff = Math.min(a.off, b.off),
              endOff = Math.max(a.off, b.off);

          for (var _i33 = startLine; _i33 <= endLine; _i33++) {
            var line = state.doc.line(_i33);
            if (line.length <= endOff) ranges.push(_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].range(line.from + startOff, line.to + endOff));
          }
        } else {
          var startCol = Math.min(a.col, b.col),
              endCol = Math.max(a.col, b.col);

          for (var _i34 = startLine; _i34 <= endLine; _i34++) {
            var _line = state.doc.line(_i34);

            var start = Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_2__["findColumn"])(_line.text, startCol, state.tabSize, true);

            if (start > -1) {
              var end = Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_2__["findColumn"])(_line.text, endCol, state.tabSize);
              ranges.push(_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].range(_line.from + start, _line.from + end));
            }
          }
        }

        return ranges;
      }

      function absoluteColumn(view, x) {
        var ref = view.coordsAtPos(view.viewport.from);
        return ref ? Math.round(Math.abs((ref.left - x) / view.defaultCharacterWidth)) : -1;
      }

      function getPos(view, event) {
        var offset = view.posAtCoords({
          x: event.clientX,
          y: event.clientY
        }, false);
        var line = view.state.doc.lineAt(offset),
            off = offset - line.from;
        var col = off > MaxOff ? -1 : off == line.length ? absoluteColumn(view, event.clientX) : Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_2__["countColumn"])(line.text, view.state.tabSize, offset - line.from);
        return {
          line: line.number,
          col: col,
          off: off
        };
      }

      function rectangleSelectionStyle(view, event) {
        var start = getPos(view, event),
            startSel = view.state.selection;
        if (!start) return null;
        return {
          update: function update(_update3) {
            if (_update3.docChanged) {
              var newStart = _update3.changes.mapPos(_update3.startState.doc.line(start.line).from);

              var newLine = _update3.state.doc.lineAt(newStart);

              start = {
                line: newLine.number,
                col: start.col,
                off: Math.min(start.off, newLine.length)
              };
              startSel = startSel.map(_update3.changes);
            }
          },
          get: function get(event, _extend, multiple) {
            var cur = getPos(view, event);
            if (!cur) return startSel;
            var ranges = rectangleFor(view.state, start, cur);
            if (!ranges.length) return startSel;
            if (multiple) return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].create(ranges.concat(startSel.ranges));else return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].create(ranges);
          }
        };
      }
      /**
      Create an extension that enables rectangular selections. By
      default, it will react to left mouse drag with the Alt key held
      down. When such a selection occurs, the text within the rectangle
      that was dragged over will be selected, as one selection
      [range](https://codemirror.net/6/docs/ref/#state.SelectionRange) per line.
      */


      function rectangularSelection(options) {
        var filter = (options === null || options === void 0 ? void 0 : options.eventFilter) || function (e) {
          return e.altKey && e.button == 0;
        };

        return _codemirror_view__WEBPACK_IMPORTED_MODULE_1__["EditorView"].mouseSelectionStyle.of(function (view, event) {
          return filter(event) ? rectangleSelectionStyle(view, event) : null;
        });
      }
      /***/

    },

    /***/
    "AtEE":
    /*!*****************************************************!*\
      !*** ./node_modules/@codemirror/view/dist/index.js ***!
      \*****************************************************/

    /*! exports provided: Range, BidiSpan, BlockInfo, BlockType, Decoration, Direction, EditorView, MatchDecorator, PluginField, PluginFieldProvider, ViewPlugin, ViewUpdate, WidgetType, __test, drawSelection, highlightActiveLine, highlightSpecialChars, keymap, logException, placeholder, runScopeHandlers, scrollPastEnd */

    /***/
    function AtEE(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "BidiSpan", function () {
        return BidiSpan;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "BlockInfo", function () {
        return BlockInfo;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "BlockType", function () {
        return BlockType;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Decoration", function () {
        return Decoration;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Direction", function () {
        return Direction;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EditorView", function () {
        return EditorView;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatchDecorator", function () {
        return MatchDecorator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PluginField", function () {
        return PluginField;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PluginFieldProvider", function () {
        return PluginFieldProvider;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ViewPlugin", function () {
        return ViewPlugin;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ViewUpdate", function () {
        return ViewUpdate;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "WidgetType", function () {
        return WidgetType;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "__test", function () {
        return __test;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "drawSelection", function () {
        return drawSelection;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "highlightActiveLine", function () {
        return highlightActiveLine;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "highlightSpecialChars", function () {
        return highlightSpecialChars;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "keymap", function () {
        return keymap;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "logException", function () {
        return logException;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "placeholder", function () {
        return placeholder;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "runScopeHandlers", function () {
        return runScopeHandlers;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "scrollPastEnd", function () {
        return scrollPastEnd;
      });
      /* harmony import */


      var _codemirror_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @codemirror/state */
      "4eob");
      /* harmony import */


      var style_mod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! style-mod */
      "rknV");
      /* harmony import */


      var _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @codemirror/rangeset */
      "wG49");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "Range", function () {
        return _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_2__["Range"];
      });
      /* harmony import */


      var _codemirror_text__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @codemirror/text */
      "uZp5");
      /* harmony import */


      var w3c_keyname__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! w3c-keyname */
      "nqdA");

      function getSelection(root) {
        return root.getSelection ? root.getSelection() : document.getSelection();
      }

      function contains(dom, node) {
        return node ? dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;
      }

      function deepActiveElement() {
        var elt = document.activeElement;

        while (elt && elt.shadowRoot) {
          elt = elt.shadowRoot.activeElement;
        }

        return elt;
      }

      function hasSelection(dom, selection) {
        if (!selection.anchorNode) return false;

        try {
          // Firefox will raise 'permission denied' errors when accessing
          // properties of `sel.anchorNode` when it's in a generated CSS
          // element.
          return contains(dom, selection.anchorNode);
        } catch (_) {
          return false;
        }
      }

      function clientRectsFor(dom) {
        if (dom.nodeType == 3) return textRange(dom, 0, dom.nodeValue.length).getClientRects();else if (dom.nodeType == 1) return dom.getClientRects();else return [];
      } // Scans forward and backward through DOM positions equivalent to the
      // given one to see if the two are in the same place (i.e. after a
      // text node vs at the end of that text node)


      function isEquivalentPosition(node, off, targetNode, targetOff) {
        return targetNode ? scanFor(node, off, targetNode, targetOff, -1) || scanFor(node, off, targetNode, targetOff, 1) : false;
      }

      function domIndex(node) {
        for (var index = 0;; index++) {
          node = node.previousSibling;
          if (!node) return index;
        }
      }

      function scanFor(node, off, targetNode, targetOff, dir) {
        for (;;) {
          if (node == targetNode && off == targetOff) return true;

          if (off == (dir < 0 ? 0 : maxOffset(node))) {
            if (node.nodeName == "DIV") return false;
            var parent = node.parentNode;
            if (!parent || parent.nodeType != 1) return false;
            off = domIndex(node) + (dir < 0 ? 0 : 1);
            node = parent;
          } else if (node.nodeType == 1) {
            node = node.childNodes[off + (dir < 0 ? -1 : 0)];
            if (node.nodeType == 1 && node.contentEditable == "false") return false;
            off = dir < 0 ? maxOffset(node) : 0;
          } else {
            return false;
          }
        }
      }

      function maxOffset(node) {
        return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
      }

      var Rect0 = {
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      };

      function flattenRect(rect, left) {
        var x = left ? rect.left : rect.right;
        return {
          left: x,
          right: x,
          top: rect.top,
          bottom: rect.bottom
        };
      }

      function windowRect(win) {
        return {
          left: 0,
          right: win.innerWidth,
          top: 0,
          bottom: win.innerHeight
        };
      }

      var ScrollSpace = 5;

      function scrollRectIntoView(dom, rect, side) {
        var doc = dom.ownerDocument,
            win = doc.defaultView;

        for (var cur = dom.parentNode; cur;) {
          if (cur.nodeType == 1) {
            // Element
            var bounding = void 0,
                top = cur == doc.body;

            if (top) {
              bounding = windowRect(win);
            } else {
              if (cur.scrollHeight <= cur.clientHeight && cur.scrollWidth <= cur.clientWidth) {
                cur = cur.parentNode;
                continue;
              }

              var _rect = cur.getBoundingClientRect(); // Make sure scrollbar width isn't included in the rectangle


              bounding = {
                left: _rect.left,
                right: _rect.left + cur.clientWidth,
                top: _rect.top,
                bottom: _rect.top + cur.clientHeight
              };
            }

            var moveX = 0,
                moveY = 0;

            if (rect.top < bounding.top) {
              moveY = -(bounding.top - rect.top + ScrollSpace);
              if (side > 0 && rect.bottom > bounding.bottom + moveY) moveY = rect.bottom - bounding.bottom + moveY + ScrollSpace;
            } else if (rect.bottom > bounding.bottom) {
              moveY = rect.bottom - bounding.bottom + ScrollSpace;
              if (side < 0 && rect.top - moveY < bounding.top) moveY = -(bounding.top + moveY - rect.top + ScrollSpace);
            }

            if (rect.left < bounding.left) {
              moveX = -(bounding.left - rect.left + ScrollSpace);
              if (side > 0 && rect.right > bounding.right + moveX) moveX = rect.right - bounding.right + moveX + ScrollSpace;
            } else if (rect.right > bounding.right) {
              moveX = rect.right - bounding.right + ScrollSpace;
              if (side < 0 && rect.left < bounding.left + moveX) moveX = -(bounding.left + moveX - rect.left + ScrollSpace);
            }

            if (moveX || moveY) {
              if (top) {
                win.scrollBy(moveX, moveY);
              } else {
                if (moveY) {
                  var start = cur.scrollTop;
                  cur.scrollTop += moveY;
                  moveY = cur.scrollTop - start;
                }

                if (moveX) {
                  var _start2 = cur.scrollLeft;
                  cur.scrollLeft += moveX;
                  moveX = cur.scrollLeft - _start2;
                }

                rect = {
                  left: rect.left - moveX,
                  top: rect.top - moveY,
                  right: rect.right - moveX,
                  bottom: rect.bottom - moveY
                };
              }
            }

            if (top) break;
            cur = cur.assignedSlot || cur.parentNode;
          } else if (cur.nodeType == 11) {
            // A shadow root
            cur = cur.host;
          } else {
            break;
          }
        }
      }

      var DOMSelection = /*#__PURE__*/function () {
        function DOMSelection() {
          _classCallCheck(this, DOMSelection);

          this.anchorNode = null;
          this.anchorOffset = 0;
          this.focusNode = null;
          this.focusOffset = 0;
        }

        _createClass(DOMSelection, [{
          key: "eq",
          value: function eq(domSel) {
            return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset && this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
          }
        }, {
          key: "set",
          value: function set(domSel) {
            this.anchorNode = domSel.anchorNode;
            this.anchorOffset = domSel.anchorOffset;
            this.focusNode = domSel.focusNode;
            this.focusOffset = domSel.focusOffset;
          }
        }]);

        return DOMSelection;
      }();

      var preventScrollSupported = null; // Feature-detects support for .focus({preventScroll: true}), and uses
      // a fallback kludge when not supported.

      function focusPreventScroll(dom) {
        if (dom.setActive) return dom.setActive(); // in IE

        if (preventScrollSupported) return dom.focus(preventScrollSupported);
        var stack = [];

        for (var cur = dom; cur; cur = cur.parentNode) {
          stack.push(cur, cur.scrollTop, cur.scrollLeft);
          if (cur == cur.ownerDocument) break;
        }

        dom.focus(preventScrollSupported == null ? {
          get preventScroll() {
            preventScrollSupported = {
              preventScroll: true
            };
            return true;
          }

        } : undefined);

        if (!preventScrollSupported) {
          preventScrollSupported = false;

          for (var _i35 = 0; _i35 < stack.length;) {
            var elt = stack[_i35++],
                top = stack[_i35++],
                left = stack[_i35++];
            if (elt.scrollTop != top) elt.scrollTop = top;
            if (elt.scrollLeft != left) elt.scrollLeft = left;
          }
        }
      }

      var scratchRange;

      function textRange(node, from) {
        var to = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : from;
        var range = scratchRange || (scratchRange = document.createRange());
        range.setEnd(node, to);
        range.setStart(node, from);
        return range;
      }

      function dispatchKey(elt, name, code) {
        var options = {
          key: name,
          code: name,
          keyCode: code,
          which: code,
          cancelable: true
        };
        var down = new KeyboardEvent("keydown", options);
        down.synthetic = true;
        elt.dispatchEvent(down);
        var up = new KeyboardEvent("keyup", options);
        up.synthetic = true;
        elt.dispatchEvent(up);
        return down.defaultPrevented || up.defaultPrevented;
      }

      var _plainTextSupported = null;

      function contentEditablePlainTextSupported() {
        if (_plainTextSupported == null) {
          _plainTextSupported = false;
          var dummy = document.createElement("div");

          try {
            dummy.contentEditable = "plaintext-only";
            _plainTextSupported = dummy.contentEditable == "plaintext-only";
          } catch (_) {}
        }

        return _plainTextSupported;
      }

      var DOMPos = /*#__PURE__*/function () {
        function DOMPos(node, offset) {
          var precise = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

          _classCallCheck(this, DOMPos);

          this.node = node;
          this.offset = offset;
          this.precise = precise;
        }

        _createClass(DOMPos, null, [{
          key: "before",
          value: function before(dom, precise) {
            return new DOMPos(dom.parentNode, domIndex(dom), precise);
          }
        }, {
          key: "after",
          value: function after(dom, precise) {
            return new DOMPos(dom.parentNode, domIndex(dom) + 1, precise);
          }
        }]);

        return DOMPos;
      }();

      var none$3 = [];

      var ContentView = /*#__PURE__*/function () {
        function ContentView() {
          _classCallCheck(this, ContentView);

          this.parent = null;
          this.dom = null;
          this.dirty = 2
          /* Node */
          ;
        }

        _createClass(ContentView, [{
          key: "editorView",
          get: function get() {
            if (!this.parent) throw new Error("Accessing view in orphan content view");
            return this.parent.editorView;
          }
        }, {
          key: "overrideDOMText",
          get: function get() {
            return null;
          }
        }, {
          key: "posAtStart",
          get: function get() {
            return this.parent ? this.parent.posBefore(this) : 0;
          }
        }, {
          key: "posAtEnd",
          get: function get() {
            return this.posAtStart + this.length;
          }
        }, {
          key: "posBefore",
          value: function posBefore(view) {
            var pos = this.posAtStart;

            var _iterator39 = _createForOfIteratorHelper(this.children),
                _step39;

            try {
              for (_iterator39.s(); !(_step39 = _iterator39.n()).done;) {
                var child = _step39.value;
                if (child == view) return pos;
                pos += child.length + child.breakAfter;
              }
            } catch (err) {
              _iterator39.e(err);
            } finally {
              _iterator39.f();
            }

            throw new RangeError("Invalid child in posBefore");
          }
        }, {
          key: "posAfter",
          value: function posAfter(view) {
            return this.posBefore(view) + view.length;
          } // Will return a rectangle directly before (when side < 0), after
          // (side > 0) or directly on (when the browser supports it) the
          // given position.

        }, {
          key: "coordsAt",
          value: function coordsAt(_pos, _side) {
            return null;
          }
        }, {
          key: "sync",
          value: function sync(track) {
            var _a;

            if (this.dirty & 2
            /* Node */
            ) {
              var parent = this.dom,
                  pos = null;

              var _iterator40 = _createForOfIteratorHelper(this.children),
                  _step40;

              try {
                for (_iterator40.s(); !(_step40 = _iterator40.n()).done;) {
                  var child = _step40.value;

                  if (child.dirty) {
                    var _next2 = pos ? pos.nextSibling : parent.firstChild;

                    if (!child.dom && _next2 && !((_a = ContentView.get(_next2)) === null || _a === void 0 ? void 0 : _a.parent)) child.reuseDOM(_next2);
                    child.sync(track);
                    child.dirty = 0
                    /* Not */
                    ;
                  }

                  if (track && track.node == parent && pos != child.dom) track.written = true;
                  syncNodeInto(parent, pos, child.dom);
                  pos = child.dom;
                }
              } catch (err) {
                _iterator40.e(err);
              } finally {
                _iterator40.f();
              }

              var next = pos ? pos.nextSibling : parent.firstChild;
              if (next && track && track.node == parent) track.written = true;

              while (next) {
                next = rm(next);
              }
            } else if (this.dirty & 1
            /* Child */
            ) {
              var _iterator41 = _createForOfIteratorHelper(this.children),
                  _step41;

              try {
                for (_iterator41.s(); !(_step41 = _iterator41.n()).done;) {
                  var _child = _step41.value;

                  if (_child.dirty) {
                    _child.sync(track);

                    _child.dirty = 0
                    /* Not */
                    ;
                  }
                }
              } catch (err) {
                _iterator41.e(err);
              } finally {
                _iterator41.f();
              }
            }
          }
        }, {
          key: "reuseDOM",
          value: function reuseDOM(_dom) {
            return false;
          }
        }, {
          key: "localPosFromDOM",
          value: function localPosFromDOM(node, offset) {
            var after;

            if (node == this.dom) {
              after = this.dom.childNodes[offset];
            } else {
              var bias = maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;

              for (;;) {
                var parent = node.parentNode;
                if (parent == this.dom) break;

                if (bias == 0 && parent.firstChild != parent.lastChild) {
                  if (node == parent.firstChild) bias = -1;else bias = 1;
                }

                node = parent;
              }

              if (bias < 0) after = node;else after = node.nextSibling;
            }

            if (after == this.dom.firstChild) return 0;

            while (after && !ContentView.get(after)) {
              after = after.nextSibling;
            }

            if (!after) return this.length;

            for (var _i36 = 0, pos = 0;; _i36++) {
              var child = this.children[_i36];
              if (child.dom == after) return pos;
              pos += child.length + child.breakAfter;
            }
          }
        }, {
          key: "domBoundsAround",
          value: function domBoundsAround(from, to) {
            var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
            var fromI = -1,
                fromStart = -1,
                toI = -1,
                toEnd = -1;

            for (var _i37 = 0, pos = offset, prevEnd = offset; _i37 < this.children.length; _i37++) {
              var child = this.children[_i37],
                  end = pos + child.length;
              if (pos < from && end > to) return child.domBoundsAround(from, to, pos);

              if (end >= from && fromI == -1) {
                fromI = _i37;
                fromStart = pos;
              }

              if (pos > to && child.dom.parentNode == this.dom) {
                toI = _i37;
                toEnd = prevEnd;
                break;
              }

              prevEnd = end;
              pos = end + child.breakAfter;
            }

            return {
              from: fromStart,
              to: toEnd < 0 ? offset + this.length : toEnd,
              startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,
              endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null
            };
          }
        }, {
          key: "markDirty",
          value: function markDirty() {
            var andParent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
            this.dirty |= 2
            /* Node */
            ;
            this.markParentsDirty(andParent);
          }
        }, {
          key: "markParentsDirty",
          value: function markParentsDirty(childList) {
            for (var parent = this.parent; parent; parent = parent.parent) {
              if (childList) parent.dirty |= 2
              /* Node */
              ;
              if (parent.dirty & 1
              /* Child */
              ) return;
              parent.dirty |= 1
              /* Child */
              ;
              childList = false;
            }
          }
        }, {
          key: "setParent",
          value: function setParent(parent) {
            if (this.parent != parent) {
              this.parent = parent;
              if (this.dirty) this.markParentsDirty(true);
            }
          }
        }, {
          key: "setDOM",
          value: function setDOM(dom) {
            if (this.dom) this.dom.cmView = null;
            this.dom = dom;
            dom.cmView = this;
          }
        }, {
          key: "rootView",
          get: function get() {
            for (var v = this;;) {
              var parent = v.parent;
              if (!parent) return v;
              v = parent;
            }
          }
        }, {
          key: "replaceChildren",
          value: function replaceChildren(from, to) {
            var _this$children;

            var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : none$3;
            this.markDirty();

            for (var _i38 = from; _i38 < to; _i38++) {
              var child = this.children[_i38];
              if (child.parent == this) child.parent = null;
            }

            (_this$children = this.children).splice.apply(_this$children, [from, to - from].concat(_toConsumableArray(children)));

            for (var _i39 = 0; _i39 < children.length; _i39++) {
              children[_i39].setParent(this);
            }
          }
        }, {
          key: "ignoreMutation",
          value: function ignoreMutation(_rec) {
            return false;
          }
        }, {
          key: "ignoreEvent",
          value: function ignoreEvent(_event) {
            return false;
          }
        }, {
          key: "childCursor",
          value: function childCursor() {
            var pos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.length;
            return new ChildCursor(this.children, pos, this.children.length);
          }
        }, {
          key: "childPos",
          value: function childPos(pos) {
            var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
            return this.childCursor().findPos(pos, bias);
          }
        }, {
          key: "toString",
          value: function toString() {
            var name = this.constructor.name.replace("View", "");
            return name + (this.children.length ? "(" + this.children.join() + ")" : this.length ? "[" + (name == "Text" ? this.text : this.length) + "]" : "") + (this.breakAfter ? "#" : "");
          }
        }], [{
          key: "get",
          value: function get(node) {
            return node.cmView;
          }
        }]);

        return ContentView;
      }();

      ContentView.prototype.breakAfter = 0; // Remove a DOM node and return its next sibling.

      function rm(dom) {
        var next = dom.nextSibling;
        dom.parentNode.removeChild(dom);
        return next;
      }

      function syncNodeInto(parent, after, dom) {
        var next = after ? after.nextSibling : parent.firstChild;
        if (dom.parentNode == parent) while (next != dom) {
          next = rm(next);
        } else parent.insertBefore(dom, next);
      }

      var ChildCursor = /*#__PURE__*/function () {
        function ChildCursor(children, pos, i) {
          _classCallCheck(this, ChildCursor);

          this.children = children;
          this.pos = pos;
          this.i = i;
          this.off = 0;
        }

        _createClass(ChildCursor, [{
          key: "findPos",
          value: function findPos(pos) {
            var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

            for (;;) {
              if (pos > this.pos || pos == this.pos && (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
                this.off = pos - this.pos;
                return this;
              }

              var next = this.children[--this.i];
              this.pos -= next.length + next.breakAfter;
            }
          }
        }]);

        return ChildCursor;
      }();

      var _ref5 = typeof navigator != "undefined" ? [navigator, document] : [{
        userAgent: "",
        vendor: "",
        platform: ""
      }, {
        documentElement: {
          style: {}
        }
      }],
          _ref6 = _slicedToArray(_ref5, 2),
          nav = _ref6[0],
          doc = _ref6[1];

      var ie_edge = /*@__PURE__*/ /Edge\/(\d+)/.exec(nav.userAgent);
      var ie_upto10 = /*@__PURE__*/ /MSIE \d/.test(nav.userAgent);
      var ie_11up = /*@__PURE__*/ /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav.userAgent);
      var ie = !!(ie_upto10 || ie_11up || ie_edge);
      var gecko = !ie && /*@__PURE__*/ /gecko\/(\d+)/i.test(nav.userAgent);
      var chrome = !ie && /*@__PURE__*/ /Chrome\/(\d+)/.exec(nav.userAgent);
      var webkit = ("webkitFontSmoothing" in doc.documentElement.style);
      var safari = !ie && /*@__PURE__*/ /Apple Computer/.test(nav.vendor);
      var browser = {
        mac: /*@__PURE__*/ /Mac/.test(nav.platform),
        ie: ie,
        ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,
        gecko: gecko,
        gecko_version: gecko ? +( /*@__PURE__*/ /Firefox\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
        chrome: !!chrome,
        chrome_version: chrome ? +chrome[1] : 0,
        ios: safari && ( /*@__PURE__*/ /Mobile\/\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2),
        android: /*@__PURE__*/ /Android\b/.test(nav.userAgent),
        webkit: webkit,
        safari: safari,
        webkit_version: webkit ? +( /*@__PURE__*/ /\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0,
        tabSize: doc.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
      };
      var none$2 = [];

      var InlineView = /*#__PURE__*/function (_ContentView) {
        _inherits(InlineView, _ContentView);

        var _super4 = _createSuper(InlineView);

        function InlineView() {
          _classCallCheck(this, InlineView);

          return _super4.apply(this, arguments);
        }

        _createClass(InlineView, [{
          key: "become",
          value:
          /**
          Return true when this view is equivalent to `other` and can take
          on its role.
          */
          function become(_other) {
            return false;
          } // When this is a zero-length view with a side, this should return a
          // negative number to indicate it is before its position, or a
          // positive number when after its position.

        }, {
          key: "getSide",
          value: function getSide() {
            return 0;
          }
        }]);

        return InlineView;
      }(ContentView);

      InlineView.prototype.children = none$2;
      var MaxJoinLen = 256;

      var TextView = /*#__PURE__*/function (_InlineView) {
        _inherits(TextView, _InlineView);

        var _super5 = _createSuper(TextView);

        function TextView(text) {
          var _this15;

          _classCallCheck(this, TextView);

          _this15 = _super5.call(this);
          _this15.text = text;
          return _this15;
        }

        _createClass(TextView, [{
          key: "length",
          get: function get() {
            return this.text.length;
          }
        }, {
          key: "createDOM",
          value: function createDOM(textDOM) {
            this.setDOM(textDOM || document.createTextNode(this.text));
          }
        }, {
          key: "sync",
          value: function sync(track) {
            if (!this.dom) this.createDOM();

            if (this.dom.nodeValue != this.text) {
              if (track && track.node == this.dom) track.written = true;
              this.dom.nodeValue = this.text;
            }
          }
        }, {
          key: "reuseDOM",
          value: function reuseDOM(dom) {
            if (dom.nodeType != 3) return false;
            this.createDOM(dom);
            return true;
          }
        }, {
          key: "merge",
          value: function merge(from, to, source) {
            if (source && (!(source instanceof TextView) || this.length - (to - from) + source.length > MaxJoinLen)) return false;
            this.text = this.text.slice(0, from) + (source ? source.text : "") + this.text.slice(to);
            this.markDirty();
            return true;
          }
        }, {
          key: "slice",
          value: function slice(from) {
            var result = new TextView(this.text.slice(from));
            this.text = this.text.slice(0, from);
            return result;
          }
        }, {
          key: "localPosFromDOM",
          value: function localPosFromDOM(node, offset) {
            return node == this.dom ? offset : offset ? this.text.length : 0;
          }
        }, {
          key: "domAtPos",
          value: function domAtPos(pos) {
            return new DOMPos(this.dom, pos);
          }
        }, {
          key: "domBoundsAround",
          value: function domBoundsAround(_from, _to, offset) {
            return {
              from: offset,
              to: offset + this.length,
              startDOM: this.dom,
              endDOM: this.dom.nextSibling
            };
          }
        }, {
          key: "coordsAt",
          value: function coordsAt(pos, side) {
            return textCoords(this.dom, pos, side);
          }
        }]);

        return TextView;
      }(InlineView);

      var MarkView = /*#__PURE__*/function (_InlineView2) {
        _inherits(MarkView, _InlineView2);

        var _super6 = _createSuper(MarkView);

        function MarkView(mark) {
          var _this16;

          var children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
          var length = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

          _classCallCheck(this, MarkView);

          _this16 = _super6.call(this);
          _this16.mark = mark;
          _this16.children = children;
          _this16.length = length;

          var _iterator42 = _createForOfIteratorHelper(children),
              _step42;

          try {
            for (_iterator42.s(); !(_step42 = _iterator42.n()).done;) {
              var ch = _step42.value;
              ch.setParent(_assertThisInitialized(_this16));
            }
          } catch (err) {
            _iterator42.e(err);
          } finally {
            _iterator42.f();
          }

          return _this16;
        }

        _createClass(MarkView, [{
          key: "createDOM",
          value: function createDOM() {
            var dom = document.createElement(this.mark.tagName);
            if (this.mark["class"]) dom.className = this.mark["class"];
            if (this.mark.attrs) for (var name in this.mark.attrs) {
              dom.setAttribute(name, this.mark.attrs[name]);
            }
            this.setDOM(dom);
          }
        }, {
          key: "sync",
          value: function sync(track) {
            if (!this.dom || this.dirty & 4
            /* Attrs */
            ) this.createDOM();

            _get(_getPrototypeOf(MarkView.prototype), "sync", this).call(this, track);
          }
        }, {
          key: "merge",
          value: function merge(from, to, source, openStart, openEnd) {
            if (source && (!(source instanceof MarkView && source.mark.eq(this.mark)) || from && openStart <= 0 || to < this.length && openEnd <= 0)) return false;
            mergeInlineChildren(this, from, to, source ? source.children : none$2, openStart - 1, openEnd - 1);
            this.markDirty();
            return true;
          }
        }, {
          key: "slice",
          value: function slice(from) {
            var result = [],
                off = 0,
                detachFrom = -1,
                i = 0;

            var _iterator43 = _createForOfIteratorHelper(this.children),
                _step43;

            try {
              for (_iterator43.s(); !(_step43 = _iterator43.n()).done;) {
                var elt = _step43.value;
                var end = off + elt.length;
                if (end > from) result.push(off < from ? elt.slice(from - off) : elt);
                if (detachFrom < 0 && off >= from) detachFrom = i;
                off = end;
                i++;
              }
            } catch (err) {
              _iterator43.e(err);
            } finally {
              _iterator43.f();
            }

            var length = this.length - from;
            this.length = from;
            if (detachFrom > -1) this.replaceChildren(detachFrom, this.children.length);
            return new MarkView(this.mark, result, length);
          }
        }, {
          key: "domAtPos",
          value: function domAtPos(pos) {
            return inlineDOMAtPos(this.dom, this.children, pos);
          }
        }, {
          key: "coordsAt",
          value: function coordsAt(pos, side) {
            return coordsInChildren(this, pos, side);
          }
        }]);

        return MarkView;
      }(InlineView);

      function textCoords(text, pos, side) {
        var length = text.nodeValue.length;
        if (pos > length) pos = length;
        var from = pos,
            to = pos,
            flatten = 0;

        if (pos == 0 && side < 0 || pos == length && side >= 0) {
          if (!(browser.chrome || browser.gecko)) {
            // These browsers reliably return valid rectangles for empty ranges
            if (pos) {
              from--;
              flatten = 1;
            } // FIXME this is wrong in RTL text
            else {
              to++;
              flatten = -1;
            }
          }
        } else {
          if (side < 0) from--;else to++;
        }

        var rects = textRange(text, from, to).getClientRects();
        if (!rects.length) return Rect0;
        var rect = rects[(flatten ? flatten < 0 : side >= 0) ? 0 : rects.length - 1];
        if (browser.safari && !flatten && rect.width == 0) rect = Array.prototype.find.call(rects, function (r) {
          return r.width;
        }) || rect;
        return flatten ? flattenRect(rect, flatten < 0) : rect;
      } // Also used for collapsed ranges that don't have a placeholder widget!


      var WidgetView = /*#__PURE__*/function (_InlineView3) {
        _inherits(WidgetView, _InlineView3);

        var _super7 = _createSuper(WidgetView);

        function WidgetView(widget, length, side) {
          var _this17;

          _classCallCheck(this, WidgetView);

          _this17 = _super7.call(this);
          _this17.widget = widget;
          _this17.length = length;
          _this17.side = side;
          return _this17;
        }

        _createClass(WidgetView, [{
          key: "slice",
          value: function slice(from) {
            var result = WidgetView.create(this.widget, this.length - from, this.side);
            this.length -= from;
            return result;
          }
        }, {
          key: "sync",
          value: function sync() {
            if (!this.dom || !this.widget.updateDOM(this.dom)) {
              this.setDOM(this.widget.toDOM(this.editorView));
              this.dom.contentEditable = "false";
            }
          }
        }, {
          key: "getSide",
          value: function getSide() {
            return this.side;
          }
        }, {
          key: "merge",
          value: function merge(from, to, source, openStart, openEnd) {
            if (source && (!(source instanceof WidgetView) || !this.widget.compare(source.widget) || from > 0 && openStart <= 0 || to < this.length && openEnd <= 0)) return false;
            this.length = from + (source ? source.length : 0) + (this.length - to);
            return true;
          }
        }, {
          key: "become",
          value: function become(other) {
            if (other.length == this.length && other instanceof WidgetView && other.side == this.side) {
              if (this.widget.constructor == other.widget.constructor) {
                if (!this.widget.eq(other.widget)) this.markDirty(true);
                this.widget = other.widget;
                return true;
              }
            }

            return false;
          }
        }, {
          key: "ignoreMutation",
          value: function ignoreMutation() {
            return true;
          }
        }, {
          key: "ignoreEvent",
          value: function ignoreEvent(event) {
            return this.widget.ignoreEvent(event);
          }
        }, {
          key: "overrideDOMText",
          get: function get() {
            if (this.length == 0) return _codemirror_text__WEBPACK_IMPORTED_MODULE_3__["Text"].empty;
            var top = this;

            while (top.parent) {
              top = top.parent;
            }

            var view = top.editorView,
                text = view && view.state.doc,
                start = this.posAtStart;
            return text ? text.slice(start, start + this.length) : _codemirror_text__WEBPACK_IMPORTED_MODULE_3__["Text"].empty;
          }
        }, {
          key: "domAtPos",
          value: function domAtPos(pos) {
            return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
          }
        }, {
          key: "domBoundsAround",
          value: function domBoundsAround() {
            return null;
          }
        }, {
          key: "coordsAt",
          value: function coordsAt(pos, side) {
            var rects = this.dom.getClientRects(),
                rect = null;
            if (!rects.length) return Rect0;

            for (var _i40 = pos > 0 ? rects.length - 1 : 0;; _i40 += pos > 0 ? -1 : 1) {
              rect = rects[_i40];
              if (pos > 0 ? _i40 == 0 : _i40 == rects.length - 1 || rect.top < rect.bottom) break;
            }

            return pos == 0 && side > 0 || pos == this.length && side <= 0 ? rect : flattenRect(rect, pos == 0);
          }
        }], [{
          key: "create",
          value: function create(widget, length, side) {
            return new (widget.customView || WidgetView)(widget, length, side);
          }
        }]);

        return WidgetView;
      }(InlineView);

      var CompositionView = /*#__PURE__*/function (_WidgetView) {
        _inherits(CompositionView, _WidgetView);

        var _super8 = _createSuper(CompositionView);

        function CompositionView() {
          _classCallCheck(this, CompositionView);

          return _super8.apply(this, arguments);
        }

        _createClass(CompositionView, [{
          key: "domAtPos",
          value: function domAtPos(pos) {
            return new DOMPos(this.widget.text, pos);
          }
        }, {
          key: "sync",
          value: function sync() {
            if (!this.dom) this.setDOM(this.widget.toDOM());
          }
        }, {
          key: "localPosFromDOM",
          value: function localPosFromDOM(node, offset) {
            return !offset ? 0 : node.nodeType == 3 ? Math.min(offset, this.length) : this.length;
          }
        }, {
          key: "ignoreMutation",
          value: function ignoreMutation() {
            return false;
          }
        }, {
          key: "overrideDOMText",
          get: function get() {
            return null;
          }
        }, {
          key: "coordsAt",
          value: function coordsAt(pos, side) {
            return textCoords(this.widget.text, pos, side);
          }
        }]);

        return CompositionView;
      }(WidgetView);

      function mergeInlineChildren(parent, from, to, elts, openStart, openEnd) {
        var cur = parent.childCursor();

        var _cur$findPos = cur.findPos(to, 1),
            toI = _cur$findPos.i,
            toOff = _cur$findPos.off;

        var _cur$findPos2 = cur.findPos(from, -1),
            fromI = _cur$findPos2.i,
            fromOff = _cur$findPos2.off;

        var dLen = from - to;

        var _iterator44 = _createForOfIteratorHelper(elts),
            _step44;

        try {
          for (_iterator44.s(); !(_step44 = _iterator44.n()).done;) {
            var view = _step44.value;
            dLen += view.length;
          }
        } catch (err) {
          _iterator44.e(err);
        } finally {
          _iterator44.f();
        }

        parent.length += dLen;
        var children = parent.children; // Both from and to point into the same child view

        if (fromI == toI && fromOff) {
          var start = children[fromI]; // Maybe just update that view and be done

          if (elts.length == 1 && start.merge(fromOff, toOff, elts[0], openStart, openEnd)) return;

          if (elts.length == 0) {
            start.merge(fromOff, toOff, null, openStart, openEnd);
            return;
          } // Otherwise split it, so that we don't have to worry about aliasing front/end afterwards


          var after = start.slice(toOff);
          if (after.merge(0, 0, elts[elts.length - 1], 0, openEnd)) elts[elts.length - 1] = after;else elts.push(after);
          toI++;
          openEnd = toOff = 0;
        } // Make sure start and end positions fall on node boundaries
        // (fromOff/toOff are no longer used after this), and that if the
        // start or end of the elts can be merged with adjacent nodes,
        // this is done


        if (toOff) {
          var end = children[toI];

          if (elts.length && end.merge(0, toOff, elts[elts.length - 1], 0, openEnd)) {
            elts.pop();
            openEnd = elts.length ? 0 : openStart;
          } else {
            end.merge(0, toOff, null, 0, 0);
          }
        } else if (toI < children.length && elts.length && children[toI].merge(0, 0, elts[elts.length - 1], 0, openEnd)) {
          elts.pop();
          openEnd = elts.length ? 0 : openStart;
        }

        if (fromOff) {
          var _start3 = children[fromI];

          if (elts.length && _start3.merge(fromOff, _start3.length, elts[0], openStart, 0)) {
            elts.shift();
            openStart = elts.length ? 0 : openEnd;
          } else {
            _start3.merge(fromOff, _start3.length, null, 0, 0);
          }

          fromI++;
        } else if (fromI && elts.length) {
          var _end2 = children[fromI - 1];

          if (_end2.merge(_end2.length, _end2.length, elts[0], openStart, 0)) {
            elts.shift();
            openStart = elts.length ? 0 : openEnd;
          }
        } // Then try to merge any mergeable nodes at the start and end of
        // the changed range


        while (fromI < toI && elts.length && children[toI - 1].become(elts[elts.length - 1])) {
          elts.pop();
          toI--;
          openEnd = elts.length ? 0 : openStart;
        }

        while (fromI < toI && elts.length && children[fromI].become(elts[0])) {
          elts.shift();
          fromI++;
          openStart = elts.length ? 0 : openEnd;
        }

        if (!elts.length && fromI && toI < children.length && children[toI].merge(0, 0, children[fromI - 1], openStart, openEnd)) fromI--; // And if anything remains, splice the child array to insert the new elts

        if (elts.length || fromI != toI) parent.replaceChildren(fromI, toI, elts);
      }

      function inlineDOMAtPos(dom, children, pos) {
        var i = 0;

        for (var off = 0; i < children.length; i++) {
          var child = children[i],
              end = off + child.length;
          if (end == off && child.getSide() <= 0) continue;
          if (pos > off && pos < end && child.dom.parentNode == dom) return child.domAtPos(pos - off);
          if (pos <= off) break;
          off = end;
        }

        for (; i > 0; i--) {
          var before = children[i - 1].dom;
          if (before.parentNode == dom) return DOMPos.after(before);
        }

        return new DOMPos(dom, 0);
      } // Assumes `view`, if a mark view, has precisely 1 child.


      function joinInlineInto(parent, view, open) {
        var last,
            children = parent.children;

        if (open > 0 && view instanceof MarkView && children.length && (last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {
          joinInlineInto(last, view.children[0], open - 1);
        } else {
          children.push(view);
          view.setParent(parent);
        }

        parent.length += view.length;
      }

      function coordsInChildren(view, pos, side) {
        for (var off = 0, _i41 = 0; _i41 < view.children.length; _i41++) {
          var child = view.children[_i41],
              end = off + child.length,
              next = void 0;

          if ((side <= 0 || end == view.length || child.getSide() > 0 ? end >= pos : end > pos) && (pos < end || _i41 + 1 == view.children.length || (next = view.children[_i41 + 1]).length || next.getSide() > 0)) {
            var flatten = 0;

            if (end == off) {
              if (child.getSide() <= 0) continue;
              flatten = side = -child.getSide();
            }

            var rect = child.coordsAt(pos - off, side);
            return flatten && rect ? flattenRect(rect, side < 0) : rect;
          }

          off = end;
        }

        var last = view.dom.lastChild;
        if (!last) return view.dom.getBoundingClientRect();
        var rects = clientRectsFor(last);
        return rects[rects.length - 1];
      }

      function combineAttrs(source, target) {
        for (var name in source) {
          if (name == "class" && target["class"]) target["class"] += " " + source["class"];else if (name == "style" && target.style) target.style += ";" + source.style;else target[name] = source[name];
        }

        return target;
      }

      function attrsEq(a, b) {
        if (a == b) return true;
        if (!a || !b) return false;
        var keysA = Object.keys(a),
            keysB = Object.keys(b);
        if (keysA.length != keysB.length) return false;

        for (var _i42 = 0, _keysA = keysA; _i42 < _keysA.length; _i42++) {
          var key = _keysA[_i42];
          if (keysB.indexOf(key) == -1 || a[key] !== b[key]) return false;
        }

        return true;
      }

      function _updateAttrs(dom, prev, attrs) {
        if (prev) for (var name in prev) {
          if (!(attrs && name in attrs)) dom.removeAttribute(name);
        }
        if (attrs) for (var _name in attrs) {
          if (!(prev && prev[_name] == attrs[_name])) dom.setAttribute(_name, attrs[_name]);
        }
      }
      /**
      Widgets added to the content are described by subclasses of this
      class. Using a description object like that makes it possible to
      delay creating of the DOM structure for a widget until it is
      needed, and to avoid redrawing widgets even when the decorations
      that define them are recreated.
      */


      var WidgetType = /*#__PURE__*/function () {
        function WidgetType() {
          _classCallCheck(this, WidgetType);
        }

        _createClass(WidgetType, [{
          key: "eq",
          value:
          /**
          Compare this instance to another instance of the same type.
          (TypeScript can't express this, but only instances of the same
          specific class will be passed to this method.) This is used to
          avoid redrawing widgets when they are replaced by a new
          decoration of the same type. The default implementation just
          returns `false`, which will cause new instances of the widget to
          always be redrawn.
          */
          function eq(_widget) {
            return false;
          }
          /**
          Update a DOM element created by a widget of the same type (but
          different, non-`eq` content) to reflect this widget. May return
          true to indicate that it could update, false to indicate it
          couldn't (in which case the widget will be redrawn). The default
          implementation just returns false.
          */

        }, {
          key: "updateDOM",
          value: function updateDOM(_dom) {
            return false;
          }
          /**
          @internal
          */

        }, {
          key: "compare",
          value: function compare(other) {
            return this == other || this.constructor == other.constructor && this.eq(other);
          }
          /**
          The estimated height this widget will have, to be used when
          estimating the height of content that hasn't been drawn. May
          return -1 to indicate you don't know. The default implementation
          returns -1.
          */

        }, {
          key: "estimatedHeight",
          get: function get() {
            return -1;
          }
          /**
          Can be used to configure which kinds of events inside the widget
          should be ignored by the editor. The default is to ignore all
          events.
          */

        }, {
          key: "ignoreEvent",
          value: function ignoreEvent(_event) {
            return true;
          }
          /**
          @internal
          */

        }, {
          key: "customView",
          get: function get() {
            return null;
          }
        }]);

        return WidgetType;
      }();
      /**
      The different types of blocks that can occur in an editor view.
      */


      var BlockType = /*@__PURE__*/function (BlockType) {
        /**
        A line of text.
        */
        BlockType[BlockType["Text"] = 0] = "Text";
        /**
        A block widget associated with the position after it.
        */

        BlockType[BlockType["WidgetBefore"] = 1] = "WidgetBefore";
        /**
        A block widget associated with the position before it.
        */

        BlockType[BlockType["WidgetAfter"] = 2] = "WidgetAfter";
        /**
        A block widget [replacing](https://codemirror.net/6/docs/ref/#view.Decoration^replace) a range of content.
        */

        BlockType[BlockType["WidgetRange"] = 3] = "WidgetRange";
        return BlockType;
      }(BlockType || (BlockType = {}));
      /**
      A decoration provides information on how to draw or style a piece
      of content. You'll usually use it wrapped in a
      [`Range`](https://codemirror.net/6/docs/ref/#rangeset.Range), which adds a start and end position.
      */


      var Decoration = /*#__PURE__*/function (_codemirror_rangeset_) {
        _inherits(Decoration, _codemirror_rangeset_);

        var _super9 = _createSuper(Decoration);

        /**
        @internal
        */
        function Decoration(
        /**
        @internal
        */
        startSide,
        /**
        @internal
        */
        endSide,
        /**
        @internal
        */
        widget,
        /**
        The config object used to create this decoration. You can
        include additional properties in there to store metadata about
        your decoration.
        */
        spec) {
          var _this18;

          _classCallCheck(this, Decoration);

          _this18 = _super9.call(this);
          _this18.startSide = startSide;
          _this18.endSide = endSide;
          _this18.widget = widget;
          _this18.spec = spec;
          return _this18;
        }
        /**
        @internal
        */


        _createClass(Decoration, [{
          key: "heightRelevant",
          get: function get() {
            return false;
          }
          /**
          Create a mark decoration, which influences the styling of the
          content in its range. Nested mark decorations will cause nested
          DOM elements to be created. Nesting order is determined by
          precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations) or
          (below the facet-provided decorations) [view
          plugin](https://codemirror.net/6/docs/ref/#view.PluginSpec.decorations). Such elements are split
          on line boundaries and on the boundaries of higher-precedence
          decorations.
          */

        }, {
          key: "hasHeight",
          value:
          /**
          @internal
          */
          function hasHeight() {
            return this.widget ? this.widget.estimatedHeight > -1 : false;
          }
        }], [{
          key: "mark",
          value: function mark(spec) {
            return new MarkDecoration(spec);
          }
          /**
          Create a widget decoration, which adds an element at the given
          position.
          */

        }, {
          key: "widget",
          value: function widget(spec) {
            var side = spec.side || 0;
            if (spec.block) side += (200000000
            /* BigBlock */
            + 1) * (side > 0 ? 1 : -1);
            return new PointDecoration(spec, side, side, !!spec.block, spec.widget || null, false);
          }
          /**
          Create a replace decoration which replaces the given range with
          a widget, or simply hides it.
          */

        }, {
          key: "replace",
          value: function replace(spec) {
            var block = !!spec.block;

            var _getInclusive = getInclusive(spec),
                start = _getInclusive.start,
                end = _getInclusive.end;

            var startSide = block ? -200000000
            /* BigBlock */
            * (start ? 2 : 1) : 100000000
            /* BigInline */
            * (start ? -1 : 1);
            var endSide = block ? 200000000
            /* BigBlock */
            * (end ? 2 : 1) : 100000000
            /* BigInline */
            * (end ? 1 : -1);
            return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);
          }
          /**
          Create a line decoration, which can add DOM attributes to the
          line starting at the given position.
          */

        }, {
          key: "line",
          value: function line(spec) {
            return new LineDecoration(spec);
          }
          /**
          Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
          decorated range or ranges. If the ranges aren't already sorted,
          pass `true` for `sort` to make the library sort them for you.
          */

        }, {
          key: "set",
          value: function set(of) {
            var sort = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            return _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_2__["RangeSet"].of(of, sort);
          }
        }]);

        return Decoration;
      }(_codemirror_rangeset__WEBPACK_IMPORTED_MODULE_2__["RangeValue"]);
      /**
      The empty set of decorations.
      */


      Decoration.none = _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_2__["RangeSet"].empty;

      var MarkDecoration = /*#__PURE__*/function (_Decoration) {
        _inherits(MarkDecoration, _Decoration);

        var _super10 = _createSuper(MarkDecoration);

        function MarkDecoration(spec) {
          var _this19;

          _classCallCheck(this, MarkDecoration);

          var _getInclusive2 = getInclusive(spec),
              start = _getInclusive2.start,
              end = _getInclusive2.end;

          _this19 = _super10.call(this, 100000000
          /* BigInline */
          * (start ? -1 : 1), 100000000
          /* BigInline */
          * (end ? 1 : -1), null, spec);
          _this19.tagName = spec.tagName || "span";
          _this19["class"] = spec["class"] || "";
          _this19.attrs = spec.attributes || null;
          return _this19;
        }

        _createClass(MarkDecoration, [{
          key: "eq",
          value: function eq(other) {
            return this == other || other instanceof MarkDecoration && this.tagName == other.tagName && this["class"] == other["class"] && attrsEq(this.attrs, other.attrs);
          }
        }, {
          key: "range",
          value: function range(from) {
            var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;
            if (from >= to) throw new RangeError("Mark decorations may not be empty");
            return _get(_getPrototypeOf(MarkDecoration.prototype), "range", this).call(this, from, to);
          }
        }]);

        return MarkDecoration;
      }(Decoration);

      MarkDecoration.prototype.point = false;

      var LineDecoration = /*#__PURE__*/function (_Decoration2) {
        _inherits(LineDecoration, _Decoration2);

        var _super11 = _createSuper(LineDecoration);

        function LineDecoration(spec) {
          _classCallCheck(this, LineDecoration);

          return _super11.call(this, -100000000
          /* BigInline */
          , -100000000
          /* BigInline */
          , null, spec);
        }

        _createClass(LineDecoration, [{
          key: "eq",
          value: function eq(other) {
            return other instanceof LineDecoration && attrsEq(this.spec.attributes, other.spec.attributes);
          }
        }, {
          key: "range",
          value: function range(from) {
            var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;
            if (to != from) throw new RangeError("Line decoration ranges must be zero-length");
            return _get(_getPrototypeOf(LineDecoration.prototype), "range", this).call(this, from, to);
          }
        }]);

        return LineDecoration;
      }(Decoration);

      LineDecoration.prototype.mapMode = _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["MapMode"].TrackBefore;
      LineDecoration.prototype.point = true;

      var PointDecoration = /*#__PURE__*/function (_Decoration3) {
        _inherits(PointDecoration, _Decoration3);

        var _super12 = _createSuper(PointDecoration);

        function PointDecoration(spec, startSide, endSide, block, widget, isReplace) {
          var _this20;

          _classCallCheck(this, PointDecoration);

          _this20 = _super12.call(this, startSide, endSide, widget, spec);
          _this20.block = block;
          _this20.isReplace = isReplace;
          _this20.mapMode = !block ? _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["MapMode"].TrackDel : startSide < 0 ? _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["MapMode"].TrackBefore : _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["MapMode"].TrackAfter;
          return _this20;
        } // Only relevant when this.block == true


        _createClass(PointDecoration, [{
          key: "type",
          get: function get() {
            return this.startSide < this.endSide ? BlockType.WidgetRange : this.startSide < 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;
          }
        }, {
          key: "heightRelevant",
          get: function get() {
            return this.block || !!this.widget && this.widget.estimatedHeight >= 5;
          }
        }, {
          key: "eq",
          value: function eq(other) {
            return other instanceof PointDecoration && widgetsEq(this.widget, other.widget) && this.block == other.block && this.startSide == other.startSide && this.endSide == other.endSide;
          }
        }, {
          key: "range",
          value: function range(from) {
            var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;
            if (this.isReplace && (from > to || from == to && this.startSide > 0 && this.endSide < 0)) throw new RangeError("Invalid range for replacement decoration");
            if (!this.isReplace && to != from) throw new RangeError("Widget decorations can only have zero-length ranges");
            return _get(_getPrototypeOf(PointDecoration.prototype), "range", this).call(this, from, to);
          }
        }]);

        return PointDecoration;
      }(Decoration);

      PointDecoration.prototype.point = true;

      function getInclusive(spec) {
        var start = spec.inclusiveStart,
            end = spec.inclusiveEnd;
        if (start == null) start = spec.inclusive;
        if (end == null) end = spec.inclusive;
        return {
          start: start || false,
          end: end || false
        };
      }

      function widgetsEq(a, b) {
        return a == b || !!(a && b && a.compare(b));
      }

      function addRange(from, to, ranges) {
        var margin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
        var last = ranges.length - 1;
        if (last >= 0 && ranges[last] + margin > from) ranges[last] = Math.max(ranges[last], to);else ranges.push(from, to);
      }

      var LineView = /*#__PURE__*/function (_ContentView2) {
        _inherits(LineView, _ContentView2);

        var _super13 = _createSuper(LineView);

        function LineView() {
          var _this21;

          _classCallCheck(this, LineView);

          _this21 = _super13.apply(this, arguments);
          _this21.children = [];
          _this21.length = 0;
          _this21.prevAttrs = undefined;
          _this21.attrs = null;
          _this21.breakAfter = 0;
          return _this21;
        } // Consumes source


        _createClass(LineView, [{
          key: "merge",
          value: function merge(from, to, source, takeDeco, openStart, openEnd) {
            if (source) {
              if (!(source instanceof LineView)) return false;
              if (!this.dom) source.transferDOM(this); // Reuse source.dom when appropriate
            }

            if (takeDeco) this.setDeco(source ? source.attrs : null);
            mergeInlineChildren(this, from, to, source ? source.children : none$1, openStart, openEnd);
            return true;
          }
        }, {
          key: "split",
          value: function split(at) {
            var end = new LineView();
            end.breakAfter = this.breakAfter;
            if (this.length == 0) return end;

            var _this$childPos = this.childPos(at),
                i = _this$childPos.i,
                off = _this$childPos.off;

            if (off) {
              end.append(this.children[i].slice(off), 0);
              this.children[i].merge(off, this.children[i].length, null, 0, 0);
              i++;
            }

            for (var j = i; j < this.children.length; j++) {
              end.append(this.children[j], 0);
            }

            while (i > 0 && this.children[i - 1].length == 0) {
              this.children[i - 1].parent = null;
              i--;
            }

            this.children.length = i;
            this.markDirty();
            this.length = at;
            return end;
          }
        }, {
          key: "transferDOM",
          value: function transferDOM(other) {
            if (!this.dom) return;
            other.setDOM(this.dom);
            other.prevAttrs = this.prevAttrs === undefined ? this.attrs : this.prevAttrs;
            this.prevAttrs = undefined;
            this.dom = null;
          }
        }, {
          key: "setDeco",
          value: function setDeco(attrs) {
            if (!attrsEq(this.attrs, attrs)) {
              if (this.dom) {
                this.prevAttrs = this.attrs;
                this.markDirty();
              }

              this.attrs = attrs;
            }
          } // Only called when building a line view in ContentBuilder

        }, {
          key: "append",
          value: function append(child, openStart) {
            joinInlineInto(this, child, openStart);
          } // Only called when building a line view in ContentBuilder

        }, {
          key: "addLineDeco",
          value: function addLineDeco(deco) {
            var attrs = deco.spec.attributes;
            if (attrs) this.attrs = combineAttrs(attrs, this.attrs || {});
          }
        }, {
          key: "domAtPos",
          value: function domAtPos(pos) {
            return inlineDOMAtPos(this.dom, this.children, pos);
          }
        }, {
          key: "sync",
          value: function sync(track) {
            if (!this.dom || this.dirty & 4
            /* Attrs */
            ) {
              this.setDOM(document.createElement("div"));
              this.dom.className = "cm-line";
              this.prevAttrs = this.attrs ? null : undefined;
            }

            if (this.prevAttrs !== undefined) {
              _updateAttrs(this.dom, this.prevAttrs, this.attrs);

              this.dom.classList.add("cm-line");
              this.prevAttrs = undefined;
            }

            _get(_getPrototypeOf(LineView.prototype), "sync", this).call(this, track);

            var last = this.dom.lastChild;

            while (last && ContentView.get(last) instanceof MarkView) {
              last = last.lastChild;
            }

            if (!last || last.nodeName != "BR" && ContentView.get(last) instanceof WidgetView && (!browser.ios || !this.children.some(function (ch) {
              return ch instanceof TextView;
            }))) {
              var hack = document.createElement("BR");
              hack.cmIgnore = true;
              this.dom.appendChild(hack);
            }
          }
        }, {
          key: "measureTextSize",
          value: function measureTextSize() {
            if (this.children.length == 0 || this.length > 20) return null;
            var totalWidth = 0;

            var _iterator45 = _createForOfIteratorHelper(this.children),
                _step45;

            try {
              for (_iterator45.s(); !(_step45 = _iterator45.n()).done;) {
                var child = _step45.value;
                if (!(child instanceof TextView)) return null;
                var rects = clientRectsFor(child.dom);
                if (rects.length != 1) return null;
                totalWidth += rects[0].width;
              }
            } catch (err) {
              _iterator45.e(err);
            } finally {
              _iterator45.f();
            }

            return {
              lineHeight: this.dom.getBoundingClientRect().height,
              charWidth: totalWidth / this.length
            };
          }
        }, {
          key: "coordsAt",
          value: function coordsAt(pos, side) {
            return coordsInChildren(this, pos, side);
          }
        }, {
          key: "match",
          value: function match(_other) {
            return false;
          }
        }, {
          key: "type",
          get: function get() {
            return BlockType.Text;
          }
        }], [{
          key: "find",
          value: function find(docView, pos) {
            for (var _i43 = 0, off = 0;; _i43++) {
              var block = docView.children[_i43],
                  end = off + block.length;

              if (end >= pos) {
                if (block instanceof LineView) return block;
                if (block.length) return null;
              }

              off = end + block.breakAfter;
            }
          }
        }]);

        return LineView;
      }(ContentView);

      var none$1 = [];

      var BlockWidgetView = /*#__PURE__*/function (_ContentView3) {
        _inherits(BlockWidgetView, _ContentView3);

        var _super14 = _createSuper(BlockWidgetView);

        function BlockWidgetView(widget, length, type) {
          var _this22;

          _classCallCheck(this, BlockWidgetView);

          _this22 = _super14.call(this);
          _this22.widget = widget;
          _this22.length = length;
          _this22.type = type;
          _this22.breakAfter = 0;
          return _this22;
        }

        _createClass(BlockWidgetView, [{
          key: "merge",
          value: function merge(from, to, source, _takeDeco, openStart, openEnd) {
            if (source && (!(source instanceof BlockWidgetView) || !this.widget.compare(source.widget) || from > 0 && openStart <= 0 || to < this.length && openEnd <= 0)) return false;
            this.length = from + (source ? source.length : 0) + (this.length - to);
            return true;
          }
        }, {
          key: "domAtPos",
          value: function domAtPos(pos) {
            return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
          }
        }, {
          key: "split",
          value: function split(at) {
            var len = this.length - at;
            this.length = at;
            return new BlockWidgetView(this.widget, len, this.type);
          }
        }, {
          key: "children",
          get: function get() {
            return none$1;
          }
        }, {
          key: "sync",
          value: function sync() {
            if (!this.dom || !this.widget.updateDOM(this.dom)) {
              this.setDOM(this.widget.toDOM(this.editorView));
              this.dom.contentEditable = "false";
            }
          }
        }, {
          key: "overrideDOMText",
          get: function get() {
            return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Text"].empty;
          }
        }, {
          key: "domBoundsAround",
          value: function domBoundsAround() {
            return null;
          }
        }, {
          key: "match",
          value: function match(other) {
            if (other instanceof BlockWidgetView && other.type == this.type && other.widget.constructor == this.widget.constructor) {
              if (!other.widget.eq(this.widget)) this.markDirty(true);
              this.widget = other.widget;
              this.length = other.length;
              this.breakAfter = other.breakAfter;
              return true;
            }

            return false;
          }
        }, {
          key: "ignoreMutation",
          value: function ignoreMutation() {
            return true;
          }
        }, {
          key: "ignoreEvent",
          value: function ignoreEvent(event) {
            return this.widget.ignoreEvent(event);
          }
        }]);

        return BlockWidgetView;
      }(ContentView);

      var ContentBuilder = /*#__PURE__*/function () {
        function ContentBuilder(doc, pos, end) {
          _classCallCheck(this, ContentBuilder);

          this.doc = doc;
          this.pos = pos;
          this.end = end;
          this.content = [];
          this.curLine = null;
          this.breakAtStart = 0;
          this.openStart = -1;
          this.openEnd = -1;
          this.text = "";
          this.textOff = 0;
          this.cursor = doc.iter();
          this.skip = pos;
        }

        _createClass(ContentBuilder, [{
          key: "posCovered",
          value: function posCovered() {
            if (this.content.length == 0) return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
            var last = this.content[this.content.length - 1];
            return !last.breakAfter && !(last instanceof BlockWidgetView && last.type == BlockType.WidgetBefore);
          }
        }, {
          key: "getLine",
          value: function getLine() {
            if (!this.curLine) this.content.push(this.curLine = new LineView());
            return this.curLine;
          }
        }, {
          key: "addWidget",
          value: function addWidget(view) {
            this.curLine = null;
            this.content.push(view);
          }
        }, {
          key: "finish",
          value: function finish() {
            if (!this.posCovered()) this.getLine();
          }
        }, {
          key: "wrapMarks",
          value: function wrapMarks(view, active) {
            var _iterator46 = _createForOfIteratorHelper(active),
                _step46;

            try {
              for (_iterator46.s(); !(_step46 = _iterator46.n()).done;) {
                var mark = _step46.value;
                view = new MarkView(mark, [view], view.length);
              }
            } catch (err) {
              _iterator46.e(err);
            } finally {
              _iterator46.f();
            }

            return view;
          }
        }, {
          key: "buildText",
          value: function buildText(length, active, openStart) {
            while (length > 0) {
              if (this.textOff == this.text.length) {
                var _this$cursor$next = this.cursor.next(this.skip),
                    value = _this$cursor$next.value,
                    lineBreak = _this$cursor$next.lineBreak,
                    done = _this$cursor$next.done;

                this.skip = 0;
                if (done) throw new Error("Ran out of text content when drawing inline views");

                if (lineBreak) {
                  if (!this.posCovered()) this.getLine();
                  if (this.content.length) this.content[this.content.length - 1].breakAfter = 1;else this.breakAtStart = 1;
                  this.curLine = null;
                  length--;
                  continue;
                } else {
                  this.text = value;
                  this.textOff = 0;
                }
              }

              var take = Math.min(this.text.length - this.textOff, length, 512
              /* Chunk */
              );
              this.getLine().append(this.wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);
              this.textOff += take;
              length -= take;
              openStart = 0;
            }
          }
        }, {
          key: "span",
          value: function span(from, to, active, openStart) {
            this.buildText(to - from, active, openStart);
            this.pos = to;
            if (this.openStart < 0) this.openStart = openStart;
          }
        }, {
          key: "point",
          value: function point(from, to, deco, active, openStart) {
            var len = to - from;

            if (deco instanceof PointDecoration) {
              if (deco.block) {
                var type = deco.type;
                if (type == BlockType.WidgetAfter && !this.posCovered()) this.getLine();
                this.addWidget(new BlockWidgetView(deco.widget || new NullWidget("div"), len, type));
              } else {
                var widget = this.wrapMarks(WidgetView.create(deco.widget || new NullWidget("span"), len, deco.startSide), active);
                this.getLine().append(widget, openStart);
              }
            } else if (this.doc.lineAt(this.pos).from == this.pos) {
              // Line decoration
              this.getLine().addLineDeco(deco);
            }

            if (len) {
              // Advance the iterator past the replaced content
              if (this.textOff + len <= this.text.length) {
                this.textOff += len;
              } else {
                this.skip += len - (this.text.length - this.textOff);
                this.text = "";
                this.textOff = 0;
              }

              this.pos = to;
            }

            if (this.openStart < 0) this.openStart = openStart;
          }
        }], [{
          key: "build",
          value: function build(text, from, to, decorations) {
            var builder = new ContentBuilder(text, from, to);
            builder.openEnd = _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_2__["RangeSet"].spans(decorations, from, to, builder);
            if (builder.openStart < 0) builder.openStart = builder.openEnd;
            builder.finish();
            return builder;
          }
        }]);

        return ContentBuilder;
      }();

      var NullWidget = /*#__PURE__*/function (_WidgetType) {
        _inherits(NullWidget, _WidgetType);

        var _super15 = _createSuper(NullWidget);

        function NullWidget(tag) {
          var _this23;

          _classCallCheck(this, NullWidget);

          _this23 = _super15.call(this);
          _this23.tag = tag;
          return _this23;
        }

        _createClass(NullWidget, [{
          key: "eq",
          value: function eq(other) {
            return other.tag == this.tag;
          }
        }, {
          key: "toDOM",
          value: function toDOM() {
            return document.createElement(this.tag);
          }
        }, {
          key: "updateDOM",
          value: function updateDOM(elt) {
            return elt.nodeName.toLowerCase() == this.tag;
          }
        }]);

        return NullWidget;
      }(WidgetType);

      var none = [];

      var clickAddsSelectionRange = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Facet"].define();

      var dragMovesSelection$1 = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Facet"].define();

      var mouseSelectionStyle = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Facet"].define();

      var exceptionSink = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Facet"].define();

      var updateListener = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Facet"].define();

      var inputHandler = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Facet"].define();

      var scrollTo = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["StateEffect"].define({
        map: function map(range, changes) {
          return range.map(changes);
        }
      });
      /**
      Log or report an unhandled exception in client code. Should
      probably only be used by extension code that allows client code to
      provide functions, and calls those functions in a context where an
      exception can't be propagated to calling code in a reasonable way
      (for example when in an event handler).
      
      Either calls a handler registered with
      [`EditorView.exceptionSink`](https://codemirror.net/6/docs/ref/#view.EditorView^exceptionSink),
      `window.onerror`, if defined, or `console.error` (in which case
      it'll pass `context`, when given, as first argument).
      */


      function logException(state, exception, context) {
        var handler = state.facet(exceptionSink);
        if (handler.length) handler[0](exception);else if (window.onerror) window.onerror(String(exception), context, undefined, undefined, exception);else if (context) console.error(context + ":", exception);else console.error(exception);
      }

      var editable = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Facet"].define({
        combine: function combine(values) {
          return values.length ? values[0] : true;
        }
      });
      /**
      Used to [declare](https://codemirror.net/6/docs/ref/#view.PluginSpec.provide) which
      [fields](https://codemirror.net/6/docs/ref/#view.PluginValue) a [view plugin](https://codemirror.net/6/docs/ref/#view.ViewPlugin)
      provides.
      */


      var PluginFieldProvider = /*#__PURE__*/_createClass(
      /**
      @internal
      */
      function PluginFieldProvider(
      /**
      @internal
      */
      field,
      /**
      @internal
      */
      get) {
        _classCallCheck(this, PluginFieldProvider);

        this.field = field;
        this.get = get;
      });
      /**
      Plugin fields are a mechanism for allowing plugins to provide
      values that can be retrieved through the
      [`pluginField`](https://codemirror.net/6/docs/ref/#view.EditorView.pluginField) view method.
      */


      var PluginField = /*#__PURE__*/function () {
        function PluginField() {
          _classCallCheck(this, PluginField);
        }

        _createClass(PluginField, [{
          key: "from",
          value:
          /**
          Create a [provider](https://codemirror.net/6/docs/ref/#view.PluginFieldProvider) for this field,
          to use with a plugin's [provide](https://codemirror.net/6/docs/ref/#view.PluginSpec.provide)
          option.
          */
          function from(get) {
            return new PluginFieldProvider(this, get);
          }
          /**
          Define a new plugin field.
          */

        }], [{
          key: "define",
          value: function define() {
            return new PluginField();
          }
        }]);

        return PluginField;
      }();
      /**
      This field can be used by plugins to provide
      [decorations](https://codemirror.net/6/docs/ref/#view.Decoration).
      
      **Note**: For reasons of data flow (plugins are only updated
      after the viewport is computed), decorations produced by plugins
      are _not_ taken into account when predicting the vertical layout
      structure of the editor. Thus, things like large widgets or big
      replacements (i.e. code folding) should be provided through the
      state-level [`decorations` facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations),
      not this plugin field. Specifically, replacing decorations that
      cross line boundaries will break if provided through a plugin.
      */


      PluginField.decorations = /*@__PURE__*/PluginField.define();
      /**
      Used to provide ranges that should be treated as atoms as far as
      cursor motion is concerned. This causes methods like
      [`moveByChar`](https://codemirror.net/6/docs/ref/#view.EditorView.moveByChar) and
      [`moveVertically`](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) (and the
      commands built on top of them) to skip across such regions when
      a selection endpoint would enter them. This does _not_ prevent
      direct programmatic [selection
      updates](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) from moving into such
      regions.
      */

      PluginField.atomicRanges = /*@__PURE__*/PluginField.define();
      /**
      Plugins can provide additional scroll margins (space around the
      sides of the scrolling element that should be considered
      invisible) through this field. This can be useful when the
      plugin introduces elements that cover part of that element (for
      example a horizontally fixed gutter).
      */

      PluginField.scrollMargins = /*@__PURE__*/PluginField.define();
      var nextPluginID = 0;

      var viewPlugin = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Facet"].define();
      /**
      View plugins associate stateful values with a view. They can
      influence the way the content is drawn, and are notified of things
      that happen in the view.
      */


      var ViewPlugin = /*#__PURE__*/function () {
        function ViewPlugin(
        /**
        @internal
        */
        id,
        /**
        @internal
        */
        create,
        /**
        @internal
        */
        fields) {
          _classCallCheck(this, ViewPlugin);

          this.id = id;
          this.create = create;
          this.fields = fields;
          this.extension = viewPlugin.of(this);
        }
        /**
        Define a plugin from a constructor function that creates the
        plugin's value, given an editor view.
        */


        _createClass(ViewPlugin, null, [{
          key: "define",
          value: function define(create, spec) {
            var _ref7 = spec || {},
                eventHandlers = _ref7.eventHandlers,
                provide = _ref7.provide,
                decorations = _ref7.decorations;

            var fields = [];

            if (provide) {
              var _iterator47 = _createForOfIteratorHelper(Array.isArray(provide) ? provide : [provide]),
                  _step47;

              try {
                for (_iterator47.s(); !(_step47 = _iterator47.n()).done;) {
                  var provider = _step47.value;
                  fields.push(provider);
                }
              } catch (err) {
                _iterator47.e(err);
              } finally {
                _iterator47.f();
              }
            }

            if (eventHandlers) fields.push(domEventHandlers.from(function (value) {
              return {
                plugin: value,
                handlers: eventHandlers
              };
            }));
            if (decorations) fields.push(PluginField.decorations.from(decorations));
            return new ViewPlugin(nextPluginID++, create, fields);
          }
          /**
          Create a plugin for a class whose constructor takes a single
          editor view as argument.
          */

        }, {
          key: "fromClass",
          value: function fromClass(cls, spec) {
            return ViewPlugin.define(function (view) {
              return new cls(view);
            }, spec);
          }
        }]);

        return ViewPlugin;
      }();

      var domEventHandlers = /*@__PURE__*/PluginField.define();

      var PluginInstance = /*#__PURE__*/function () {
        function PluginInstance(spec) {
          _classCallCheck(this, PluginInstance);

          this.spec = spec; // When starting an update, all plugins have this field set to the
          // update object, indicating they need to be updated. When finished
          // updating, it is set to `false`. Retrieving a plugin that needs to
          // be updated with `view.plugin` forces an eager update.

          this.mustUpdate = null; // This is null when the plugin is initially created, but
          // initialized on the first update.

          this.value = null;
        }

        _createClass(PluginInstance, [{
          key: "takeField",
          value: function takeField(type, target) {
            var _iterator48 = _createForOfIteratorHelper(this.spec.fields),
                _step48;

            try {
              for (_iterator48.s(); !(_step48 = _iterator48.n()).done;) {
                var _step48$value = _step48.value,
                    field = _step48$value.field,
                    get = _step48$value.get;
                if (field == type) target.push(get(this.value));
              }
            } catch (err) {
              _iterator48.e(err);
            } finally {
              _iterator48.f();
            }
          }
        }, {
          key: "update",
          value: function update(view) {
            if (!this.value) {
              try {
                this.value = this.spec.create(view);
              } catch (e) {
                logException(view.state, e, "CodeMirror plugin crashed");
                return PluginInstance.dummy;
              }
            } else if (this.mustUpdate) {
              var update = this.mustUpdate;
              this.mustUpdate = null;
              if (!this.value.update) return this;

              try {
                this.value.update(update);
              } catch (e) {
                logException(update.state, e, "CodeMirror plugin crashed");
                if (this.value.destroy) try {
                  this.value.destroy();
                } catch (_) {}
                return PluginInstance.dummy;
              }
            }

            return this;
          }
        }, {
          key: "destroy",
          value: function destroy(view) {
            var _a;

            if ((_a = this.value) === null || _a === void 0 ? void 0 : _a.destroy) {
              try {
                this.value.destroy();
              } catch (e) {
                logException(view.state, e, "CodeMirror plugin crashed");
              }
            }
          }
        }]);

        return PluginInstance;
      }();

      PluginInstance.dummy = /*@__PURE__*/new PluginInstance( /*@__PURE__*/ViewPlugin.define(function () {
        return {};
      }));

      var editorAttributes = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Facet"].define({
        combine: function combine(values) {
          return values.reduce(function (a, b) {
            return combineAttrs(b, a);
          }, {});
        }
      });

      var contentAttributes = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Facet"].define({
        combine: function combine(values) {
          return values.reduce(function (a, b) {
            return combineAttrs(b, a);
          }, {});
        }
      }); // Provide decorations


      var decorations = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Facet"].define();

      var styleModule = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Facet"].define();

      var ChangedRange = /*#__PURE__*/function () {
        function ChangedRange(fromA, toA, fromB, toB) {
          _classCallCheck(this, ChangedRange);

          this.fromA = fromA;
          this.toA = toA;
          this.fromB = fromB;
          this.toB = toB;
        }

        _createClass(ChangedRange, [{
          key: "join",
          value: function join(other) {
            return new ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
          }
        }, {
          key: "addToSet",
          value: function addToSet(set) {
            var i = set.length,
                me = this;

            for (; i > 0; i--) {
              var range = set[i - 1];
              if (range.fromA > me.toA) continue;
              if (range.toA < me.fromA) break;
              me = me.join(range);
              set.splice(i - 1, 1);
            }

            set.splice(i, 0, me);
            return set;
          }
        }], [{
          key: "extendWithRanges",
          value: function extendWithRanges(diff, ranges) {
            if (ranges.length == 0) return diff;
            var result = [];

            for (var dI = 0, rI = 0, posA = 0, posB = 0;; dI++) {
              var next = dI == diff.length ? null : diff[dI],
                  off = posA - posB;
              var end = next ? next.fromB : 1e9;

              while (rI < ranges.length && ranges[rI] < end) {
                var from = ranges[rI],
                    to = ranges[rI + 1];
                var fromB = Math.max(posB, from),
                    toB = Math.min(end, to);
                if (fromB <= toB) new ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);
                if (to > end) break;else rI += 2;
              }

              if (!next) return result;
              new ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);
              posA = next.toA;
              posB = next.toB;
            }
          }
        }]);

        return ChangedRange;
      }();
      /**
      View [plugins](https://codemirror.net/6/docs/ref/#view.ViewPlugin) are given instances of this
      class, which describe what happened, whenever the view is updated.
      */


      var ViewUpdate = /*#__PURE__*/function () {
        /**
        @internal
        */
        function ViewUpdate(
        /**
        The editor view that the update is associated with.
        */
        view,
        /**
        The new editor state.
        */
        state) {
          var transactions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : none;

          _classCallCheck(this, ViewUpdate);

          this.view = view;
          this.state = state;
          this.transactions = transactions;
          /**
          @internal
          */

          this.flags = 0;
          this.startState = view.state;
          this.changes = _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["ChangeSet"].empty(this.startState.doc.length);

          var _iterator49 = _createForOfIteratorHelper(transactions),
              _step49;

          try {
            for (_iterator49.s(); !(_step49 = _iterator49.n()).done;) {
              var tr = _step49.value;
              this.changes = this.changes.compose(tr.changes);
            }
          } catch (err) {
            _iterator49.e(err);
          } finally {
            _iterator49.f();
          }

          var changedRanges = [];
          this.changes.iterChangedRanges(function (fromA, toA, fromB, toB) {
            return changedRanges.push(new ChangedRange(fromA, toA, fromB, toB));
          });
          this.changedRanges = changedRanges;
          var focus = view.hasFocus;

          if (focus != view.inputState.notifiedFocused) {
            view.inputState.notifiedFocused = focus;
            this.flags |= 1
            /* Focus */
            ;
          }

          if (this.docChanged) this.flags |= 2
          /* Height */
          ;
        }
        /**
        Tells you whether the viewport changed in this update.
        */


        _createClass(ViewUpdate, [{
          key: "viewportChanged",
          get: function get() {
            return (this.flags & 4
            /* Viewport */
            ) > 0;
          }
          /**
          Indicates whether the line height in the editor changed in this update.
          */

        }, {
          key: "heightChanged",
          get: function get() {
            return (this.flags & 2
            /* Height */
            ) > 0;
          }
          /**
          Returns true when the document changed or the size of the editor
          or the lines or characters within it has changed.
          */

        }, {
          key: "geometryChanged",
          get: function get() {
            return this.docChanged || (this.flags & (16
            /* Geometry */
            | 2
            /* Height */
            )) > 0;
          }
          /**
          True when this update indicates a focus change.
          */

        }, {
          key: "focusChanged",
          get: function get() {
            return (this.flags & 1
            /* Focus */
            ) > 0;
          }
          /**
          Whether the document changed in this update.
          */

        }, {
          key: "docChanged",
          get: function get() {
            return this.transactions.some(function (tr) {
              return tr.docChanged;
            });
          }
          /**
          Whether the selection was explicitly set in this update.
          */

        }, {
          key: "selectionSet",
          get: function get() {
            return this.transactions.some(function (tr) {
              return tr.selection;
            });
          }
          /**
          @internal
          */

        }, {
          key: "empty",
          get: function get() {
            return this.flags == 0 && this.transactions.length == 0;
          }
        }]);

        return ViewUpdate;
      }();

      var DocView = /*#__PURE__*/function (_ContentView4) {
        _inherits(DocView, _ContentView4);

        var _super16 = _createSuper(DocView);

        function DocView(view) {
          var _this24;

          _classCallCheck(this, DocView);

          _this24 = _super16.call(this);
          _this24.view = view;
          _this24.compositionDeco = Decoration.none;
          _this24.decorations = []; // Track a minimum width for the editor. When measuring sizes in
          // checkLayout, this is updated to point at the width of a given
          // element and its extent in the document. When a change happens in
          // that range, these are reset. That way, once we've seen a
          // line/element of a given length, we keep the editor wide enough to
          // fit at least that element, until it is changed, at which point we
          // forget it again.

          _this24.minWidth = 0;
          _this24.minWidthFrom = 0;
          _this24.minWidthTo = 0; // Track whether the DOM selection was set in a lossy way, so that
          // we don't mess it up when reading it back it

          _this24.impreciseAnchor = null;
          _this24.impreciseHead = null;

          _this24.setDOM(view.contentDOM);

          _this24.children = [new LineView()];

          _this24.children[0].setParent(_assertThisInitialized(_this24));

          _this24.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], _this24.updateDeco(), 0);

          return _this24;
        }

        _createClass(DocView, [{
          key: "root",
          get: function get() {
            return this.view.root;
          }
        }, {
          key: "editorView",
          get: function get() {
            return this.view;
          }
        }, {
          key: "length",
          get: function get() {
            return this.view.state.doc.length;
          } // Update the document view to a given state. scrollIntoView can be
          // used as a hint to compute a new viewport that includes that
          // position, if we know the editor is going to scroll that position
          // into view.

        }, {
          key: "update",
          value: function update(_update4) {
            var _this25 = this;

            var changedRanges = _update4.changedRanges;

            if (this.minWidth > 0 && changedRanges.length) {
              if (!changedRanges.every(function (_ref8) {
                var fromA = _ref8.fromA,
                    toA = _ref8.toA;
                return toA < _this25.minWidthFrom || fromA > _this25.minWidthTo;
              })) {
                this.minWidth = 0;
              } else {
                this.minWidthFrom = _update4.changes.mapPos(this.minWidthFrom, 1);
                this.minWidthTo = _update4.changes.mapPos(this.minWidthTo, 1);
              }
            }

            if (this.view.inputState.composing < 0) this.compositionDeco = Decoration.none;else if (_update4.transactions.length) this.compositionDeco = computeCompositionDeco(this.view, _update4.changes); // When the DOM nodes around the selection are moved to another
            // parent, Chrome sometimes reports a different selection through
            // getSelection than the one that it actually shows to the user.
            // This forces a selection update when lines are joined to work
            // around that. Issue #54

            var forceSelection = (browser.ie || browser.chrome) && !this.compositionDeco.size && _update4 && _update4.state.doc.lines != _update4.startState.doc.lines;
            var prevDeco = this.decorations,
                deco = this.updateDeco();
            var decoDiff = findChangedDeco(prevDeco, deco, _update4.changes);
            changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);

            var pointerSel = _update4.transactions.some(function (tr) {
              return tr.isUserEvent("select.pointer");
            });

            if (this.dirty == 0
            /* Not */
            && changedRanges.length == 0 && !(_update4.flags & (4
            /* Viewport */
            | 8
            /* LineGaps */
            )) && _update4.state.selection.main.from >= this.view.viewport.from && _update4.state.selection.main.to <= this.view.viewport.to) {
              this.updateSelection(forceSelection, pointerSel);
              return false;
            } else {
              this.updateInner(changedRanges, deco, _update4.startState.doc.length, forceSelection, pointerSel);
              return true;
            }
          } // Used both by update and checkLayout do perform the actual DOM
          // update

        }, {
          key: "updateInner",
          value: function updateInner(changes, deco, oldLength) {
            var _this26 = this;

            var forceSelection = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
            var pointerSel = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
            this.updateChildren(changes, deco, oldLength);
            var observer = this.view.observer;
            observer.ignore(function () {
              // Lock the height during redrawing, since Chrome sometimes
              // messes with the scroll position during DOM mutation (though
              // no relayout is triggered and I cannot imagine how it can
              // recompute the scroll position without a layout)
              _this26.dom.style.height = _this26.view.viewState.domHeight + "px";
              _this26.dom.style.minWidth = _this26.minWidth ? _this26.minWidth + "px" : ""; // Chrome will sometimes, when DOM mutations occur directly
              // around the selection, get confused and report a different
              // selection from the one it displays (issue #218). This tries
              // to detect that situation.

              var track = browser.chrome || browser.ios ? {
                node: observer.selectionRange.focusNode,
                written: false
              } : undefined;

              _this26.sync(track);

              _this26.dirty = 0
              /* Not */
              ;
              if (track && (track.written || observer.selectionRange.focusNode != track.node)) forceSelection = true;

              _this26.updateSelection(forceSelection, pointerSel);

              _this26.dom.style.height = "";
            });
          }
        }, {
          key: "updateChildren",
          value: function updateChildren(changes, deco, oldLength) {
            var cursor = this.childCursor(oldLength);

            for (var _i44 = changes.length - 1;; _i44--) {
              var next = _i44 >= 0 ? changes[_i44] : null;
              if (!next) break;
              var fromA = next.fromA,
                  toA = next.toA,
                  fromB = next.fromB,
                  toB = next.toB;

              var _ContentBuilder$build = ContentBuilder.build(this.view.state.doc, fromB, toB, deco),
                  content = _ContentBuilder$build.content,
                  breakAtStart = _ContentBuilder$build.breakAtStart,
                  openStart = _ContentBuilder$build.openStart,
                  openEnd = _ContentBuilder$build.openEnd;

              var _cursor$findPos = cursor.findPos(toA, 1),
                  toI = _cursor$findPos.i,
                  toOff = _cursor$findPos.off;

              var _cursor$findPos2 = cursor.findPos(fromA, -1),
                  fromI = _cursor$findPos2.i,
                  fromOff = _cursor$findPos2.off;

              this.replaceRange(fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd);
            }
          }
        }, {
          key: "replaceRange",
          value: function replaceRange(fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd) {
            var before = this.children[fromI],
                last = content.length ? content[content.length - 1] : null;
            var breakAtEnd = last ? last.breakAfter : breakAtStart; // Change within a single line

            if (fromI == toI && !breakAtStart && !breakAtEnd && content.length < 2 && before.merge(fromOff, toOff, content.length ? last : null, fromOff == 0, openStart, openEnd)) return;
            var after = this.children[toI]; // Make sure the end of the line after the update is preserved in `after`

            if (toOff < after.length) {
              // If we're splitting a line, separate part of the start line to
              // avoid that being mangled when updating the start line.
              if (fromI == toI) {
                after = after.split(toOff);
                toOff = 0;
              } // If the element after the replacement should be merged with
              // the last replacing element, update `content`


              if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {
                content[content.length - 1] = after;
              } else {
                // Remove the start of the after element, if necessary, and
                // add it to `content`.
                if (toOff) after.merge(0, toOff, null, false, 0, openEnd);
                content.push(after);
              }
            } else if (after.breakAfter) {
              // The element at `toI` is entirely covered by this range.
              // Preserve its line break, if any.
              if (last) last.breakAfter = 1;else breakAtStart = 1;
            } // Since we've handled the next element from the current elements
            // now, make sure `toI` points after that.


            toI++;
            before.breakAfter = breakAtStart;

            if (fromOff > 0) {
              if (!breakAtStart && content.length && before.merge(fromOff, before.length, content[0], false, openStart, 0)) {
                before.breakAfter = content.shift().breakAfter;
              } else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
                before.merge(fromOff, before.length, null, false, openStart, 0);
              }

              fromI++;
            } // Try to merge widgets on the boundaries of the replacement


            while (fromI < toI && content.length) {
              if (this.children[toI - 1].match(content[content.length - 1])) toI--, content.pop();else if (this.children[fromI].match(content[0])) fromI++, content.shift();else break;
            }

            if (fromI < toI || content.length) this.replaceChildren(fromI, toI, content);
          } // Sync the DOM selection to this.state.selection

        }, {
          key: "updateSelection",
          value: function updateSelection() {
            var _this27 = this;

            var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
            var fromPointer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            if (!(fromPointer || this.mayControlSelection()) || browser.ios && this.view.inputState.rapidCompositionStart) return;
            var main = this.view.state.selection.main; // FIXME need to handle the case where the selection falls inside a block range

            var anchor = this.domAtPos(main.anchor);
            var head = main.empty ? anchor : this.domAtPos(main.head); // Always reset on Firefox when next to an uneditable node to
            // avoid invisible cursor bugs (#111)

            if (browser.gecko && main.empty && betweenUneditable(anchor)) {
              var dummy = document.createTextNode("");
              this.view.observer.ignore(function () {
                return anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null);
              });
              anchor = head = new DOMPos(dummy, 0);
              force = true;
            }

            var domSel = this.view.observer.selectionRange; // If the selection is already here, or in an equivalent position, don't touch it

            if (force || !domSel.focusNode || !isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) || !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) {
              this.view.observer.ignore(function () {
                var rawSel = getSelection(_this27.root);

                if (main.empty) {
                  // Work around https://bugzilla.mozilla.org/show_bug.cgi?id=1612076
                  if (browser.gecko) {
                    var nextTo = nextToUneditable(anchor.node, anchor.offset);

                    if (nextTo && nextTo != (1
                    /* Before */
                    | 2
                    /* After */
                    )) {
                      var text = nearbyTextNode(anchor.node, anchor.offset, nextTo == 1
                      /* Before */
                      ? 1 : -1);
                      if (text) anchor = new DOMPos(text, nextTo == 1
                      /* Before */
                      ? 0 : text.nodeValue.length);
                    }
                  }

                  rawSel.collapse(anchor.node, anchor.offset);
                  if (main.bidiLevel != null && domSel.cursorBidiLevel != null) domSel.cursorBidiLevel = main.bidiLevel;
                } else if (rawSel.extend) {
                  // Selection.extend can be used to create an 'inverted' selection
                  // (one where the focus is before the anchor), but not all
                  // browsers support it yet.
                  rawSel.collapse(anchor.node, anchor.offset);
                  rawSel.extend(head.node, head.offset);
                } else {
                  // Primitive (IE) way
                  var range = document.createRange();

                  if (main.anchor > main.head) {
                    var _ref9 = [head, anchor];
                    anchor = _ref9[0];
                    head = _ref9[1];
                  }

                  range.setEnd(head.node, head.offset);
                  range.setStart(anchor.node, anchor.offset);
                  rawSel.removeAllRanges();
                  rawSel.addRange(range);
                }
              });
              this.view.observer.setSelectionRange(anchor, head);
            }

            this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
            this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
          }
        }, {
          key: "enforceCursorAssoc",
          value: function enforceCursorAssoc() {
            if (this.view.composing) return;
            var cursor = this.view.state.selection.main;
            var sel = getSelection(this.root);
            if (!cursor.empty || !cursor.assoc || !sel.modify) return;
            var line = LineView.find(this, cursor.head);
            if (!line) return;
            var lineStart = line.posAtStart;
            if (cursor.head == lineStart || cursor.head == lineStart + line.length) return;
            var before = this.coordsAt(cursor.head, -1),
                after = this.coordsAt(cursor.head, 1);
            if (!before || !after || before.bottom > after.top) return;
            var dom = this.domAtPos(cursor.head + cursor.assoc);
            sel.collapse(dom.node, dom.offset);
            sel.modify("move", cursor.assoc < 0 ? "forward" : "backward", "lineboundary");
          }
        }, {
          key: "mayControlSelection",
          value: function mayControlSelection() {
            return this.view.state.facet(editable) ? this.root.activeElement == this.dom : hasSelection(this.dom, this.view.observer.selectionRange);
          }
        }, {
          key: "nearest",
          value: function nearest(dom) {
            for (var cur = dom; cur;) {
              var domView = ContentView.get(cur);
              if (domView && domView.rootView == this) return domView;
              cur = cur.parentNode;
            }

            return null;
          }
        }, {
          key: "posFromDOM",
          value: function posFromDOM(node, offset) {
            var view = this.nearest(node);
            if (!view) throw new RangeError("Trying to find position for a DOM position outside of the document");
            return view.localPosFromDOM(node, offset) + view.posAtStart;
          }
        }, {
          key: "domAtPos",
          value: function domAtPos(pos) {
            var _this$childCursor$fin = this.childCursor().findPos(pos, -1),
                i = _this$childCursor$fin.i,
                off = _this$childCursor$fin.off;

            for (; i < this.children.length - 1;) {
              var child = this.children[i];
              if (off < child.length || child instanceof LineView) break;
              i++;
              off = 0;
            }

            return this.children[i].domAtPos(off);
          }
        }, {
          key: "coordsAt",
          value: function coordsAt(pos, side) {
            for (var off = this.length, _i45 = this.children.length - 1;; _i45--) {
              var child = this.children[_i45],
                  start = off - child.breakAfter - child.length;
              if (pos > start || pos == start && child.type != BlockType.WidgetBefore && child.type != BlockType.WidgetAfter && (!_i45 || side == 2 || this.children[_i45 - 1].breakAfter || this.children[_i45 - 1].type == BlockType.WidgetBefore && side > -2)) return child.coordsAt(pos - start, side);
              off = start;
            }
          }
        }, {
          key: "measureVisibleLineHeights",
          value: function measureVisibleLineHeights() {
            var result = [],
                _this$view$viewState$ = this.view.viewState.viewport,
                from = _this$view$viewState$.from,
                to = _this$view$viewState$.to;
            var minWidth = Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;

            for (var pos = 0, _i46 = 0; _i46 < this.children.length; _i46++) {
              var child = this.children[_i46],
                  end = pos + child.length;
              if (end > to) break;

              if (pos >= from) {
                result.push(child.dom.getBoundingClientRect().height);
                var width = child.dom.scrollWidth;

                if (width > minWidth) {
                  this.minWidth = minWidth = width;
                  this.minWidthFrom = pos;
                  this.minWidthTo = end;
                }
              }

              pos = end + child.breakAfter;
            }

            return result;
          }
        }, {
          key: "measureTextSize",
          value: function measureTextSize() {
            var _this28 = this;

            var _iterator50 = _createForOfIteratorHelper(this.children),
                _step50;

            try {
              for (_iterator50.s(); !(_step50 = _iterator50.n()).done;) {
                var child = _step50.value;

                if (child instanceof LineView) {
                  var measure = child.measureTextSize();
                  if (measure) return measure;
                }
              } // If no workable line exists, force a layout of a measurable element

            } catch (err) {
              _iterator50.e(err);
            } finally {
              _iterator50.f();
            }

            var dummy = document.createElement("div"),
                lineHeight,
                charWidth;
            dummy.className = "cm-line";
            dummy.textContent = "abc def ghi jkl mno pqr stu";
            this.view.observer.ignore(function () {
              _this28.dom.appendChild(dummy);

              var rect = clientRectsFor(dummy.firstChild)[0];
              lineHeight = dummy.getBoundingClientRect().height;
              charWidth = rect ? rect.width / 27 : 7;
              dummy.remove();
            });
            return {
              lineHeight: lineHeight,
              charWidth: charWidth
            };
          }
        }, {
          key: "childCursor",
          value: function childCursor() {
            var pos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.length;
            // Move back to start of last element when possible, so that
            // `ChildCursor.findPos` doesn't have to deal with the edge case
            // of being after the last element.
            var i = this.children.length;
            if (i) pos -= this.children[--i].length;
            return new ChildCursor(this.children, pos, i);
          }
        }, {
          key: "computeBlockGapDeco",
          value: function computeBlockGapDeco() {
            var deco = [],
                vs = this.view.viewState;

            for (var pos = 0, _i47 = 0;; _i47++) {
              var next = _i47 == vs.viewports.length ? null : vs.viewports[_i47];
              var end = next ? next.from - 1 : this.length;

              if (end > pos) {
                var height = vs.lineAt(end, 0).bottom - vs.lineAt(pos, 0).top;
                deco.push(Decoration.replace({
                  widget: new BlockGapWidget(height),
                  block: true,
                  inclusive: true
                }).range(pos, end));
              }

              if (!next) break;
              pos = next.to + 1;
            }

            return Decoration.set(deco);
          }
        }, {
          key: "updateDeco",
          value: function updateDeco() {
            return this.decorations = [].concat(_toConsumableArray(this.view.pluginField(PluginField.decorations)), _toConsumableArray(this.view.state.facet(decorations)), [this.compositionDeco, this.computeBlockGapDeco(), this.view.viewState.lineGapDeco]);
          }
        }, {
          key: "scrollRangeIntoView",
          value: function scrollRangeIntoView(range) {
            var rect = this.coordsAt(range.head, range.empty ? range.assoc : range.head > range.anchor ? -1 : 1),
                other;
            if (!rect) return;
            if (!range.empty && (other = this.coordsAt(range.anchor, range.anchor > range.head ? -1 : 1))) rect = {
              left: Math.min(rect.left, other.left),
              top: Math.min(rect.top, other.top),
              right: Math.max(rect.right, other.right),
              bottom: Math.max(rect.bottom, other.bottom)
            };
            var mLeft = 0,
                mRight = 0,
                mTop = 0,
                mBottom = 0;

            var _iterator51 = _createForOfIteratorHelper(this.view.pluginField(PluginField.scrollMargins)),
                _step51;

            try {
              for (_iterator51.s(); !(_step51 = _iterator51.n()).done;) {
                var margins = _step51.value;

                if (margins) {
                  var left = margins.left,
                      right = margins.right,
                      top = margins.top,
                      bottom = margins.bottom;
                  if (left != null) mLeft = Math.max(mLeft, left);
                  if (right != null) mRight = Math.max(mRight, right);
                  if (top != null) mTop = Math.max(mTop, top);
                  if (bottom != null) mBottom = Math.max(mBottom, bottom);
                }
              }
            } catch (err) {
              _iterator51.e(err);
            } finally {
              _iterator51.f();
            }

            scrollRectIntoView(this.dom, {
              left: rect.left - mLeft,
              top: rect.top - mTop,
              right: rect.right + mRight,
              bottom: rect.bottom + mBottom
            }, range.head < range.anchor ? -1 : 1);
          }
        }]);

        return DocView;
      }(ContentView);

      function betweenUneditable(pos) {
        return pos.node.nodeType == 1 && pos.node.firstChild && (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == "false") && (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == "false");
      }

      var BlockGapWidget = /*#__PURE__*/function (_WidgetType2) {
        _inherits(BlockGapWidget, _WidgetType2);

        var _super17 = _createSuper(BlockGapWidget);

        function BlockGapWidget(height) {
          var _this29;

          _classCallCheck(this, BlockGapWidget);

          _this29 = _super17.call(this);
          _this29.height = height;
          return _this29;
        }

        _createClass(BlockGapWidget, [{
          key: "toDOM",
          value: function toDOM() {
            var elt = document.createElement("div");
            this.updateDOM(elt);
            return elt;
          }
        }, {
          key: "eq",
          value: function eq(other) {
            return other.height == this.height;
          }
        }, {
          key: "updateDOM",
          value: function updateDOM(elt) {
            elt.style.height = this.height + "px";
            return true;
          }
        }, {
          key: "estimatedHeight",
          get: function get() {
            return this.height;
          }
        }]);

        return BlockGapWidget;
      }(WidgetType);

      function computeCompositionDeco(view, changes) {
        var sel = view.observer.selectionRange;
        var textNode = sel.focusNode && nearbyTextNode(sel.focusNode, sel.focusOffset, 0);
        if (!textNode) return Decoration.none;
        var cView = view.docView.nearest(textNode);
        var from,
            to,
            topNode = textNode;

        if (cView instanceof InlineView) {
          while (cView.parent instanceof InlineView) {
            cView = cView.parent;
          }

          from = cView.posAtStart;
          to = from + cView.length;
          topNode = cView.dom;
        } else if (cView instanceof LineView) {
          while (topNode.parentNode != cView.dom) {
            topNode = topNode.parentNode;
          }

          var prev = topNode.previousSibling;

          while (prev && !ContentView.get(prev)) {
            prev = prev.previousSibling;
          }

          from = to = prev ? ContentView.get(prev).posAtEnd : cView.posAtStart;
        } else {
          return Decoration.none;
        }

        var newFrom = changes.mapPos(from, 1),
            newTo = Math.max(newFrom, changes.mapPos(to, -1));
        var text = textNode.nodeValue,
            state = view.state;

        if (newTo - newFrom < text.length) {
          if (state.sliceDoc(newFrom, Math.min(state.doc.length, newFrom + text.length)) == text) newTo = newFrom + text.length;else if (state.sliceDoc(Math.max(0, newTo - text.length), newTo) == text) newFrom = newTo - text.length;else return Decoration.none;
        } else if (state.sliceDoc(newFrom, newTo) != text) {
          return Decoration.none;
        }

        return Decoration.set(Decoration.replace({
          widget: new CompositionWidget(topNode, textNode)
        }).range(newFrom, newTo));
      }

      var CompositionWidget = /*#__PURE__*/function (_WidgetType3) {
        _inherits(CompositionWidget, _WidgetType3);

        var _super18 = _createSuper(CompositionWidget);

        function CompositionWidget(top, text) {
          var _this30;

          _classCallCheck(this, CompositionWidget);

          _this30 = _super18.call(this);
          _this30.top = top;
          _this30.text = text;
          return _this30;
        }

        _createClass(CompositionWidget, [{
          key: "eq",
          value: function eq(other) {
            return this.top == other.top && this.text == other.text;
          }
        }, {
          key: "toDOM",
          value: function toDOM() {
            return this.top;
          }
        }, {
          key: "ignoreEvent",
          value: function ignoreEvent() {
            return false;
          }
        }, {
          key: "customView",
          get: function get() {
            return CompositionView;
          }
        }]);

        return CompositionWidget;
      }(WidgetType);

      function nearbyTextNode(node, offset, side) {
        for (;;) {
          if (node.nodeType == 3) return node;

          if (node.nodeType == 1 && offset > 0 && side <= 0) {
            node = node.childNodes[offset - 1];
            offset = maxOffset(node);
          } else if (node.nodeType == 1 && offset < node.childNodes.length && side >= 0) {
            node = node.childNodes[offset];
            offset = 0;
          } else {
            return null;
          }
        }
      }

      function nextToUneditable(node, offset) {
        if (node.nodeType != 1) return 0;
        return (offset && node.childNodes[offset - 1].contentEditable == "false" ? 1
        /* Before */
        : 0) | (offset < node.childNodes.length && node.childNodes[offset].contentEditable == "false" ? 2
        /* After */
        : 0);
      }

      var DecorationComparator$1 = /*#__PURE__*/function () {
        function DecorationComparator$1() {
          _classCallCheck(this, DecorationComparator$1);

          this.changes = [];
        }

        _createClass(DecorationComparator$1, [{
          key: "compareRange",
          value: function compareRange(from, to) {
            addRange(from, to, this.changes);
          }
        }, {
          key: "comparePoint",
          value: function comparePoint(from, to) {
            addRange(from, to, this.changes);
          }
        }]);

        return DecorationComparator$1;
      }();

      function findChangedDeco(a, b, diff) {
        var comp = new DecorationComparator$1();

        _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_2__["RangeSet"].compare(a, b, diff, comp);

        return comp.changes;
      }
      /**
      Used to indicate [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
      */


      var Direction = /*@__PURE__*/function (Direction) {
        // (These are chosen to match the base levels, in bidi algorithm
        // terms, of spans in that direction.)

        /**
        Left-to-right.
        */
        Direction[Direction["LTR"] = 0] = "LTR";
        /**
        Right-to-left.
        */

        Direction[Direction["RTL"] = 1] = "RTL";
        return Direction;
      }(Direction || (Direction = {}));

      var LTR = Direction.LTR,
          RTL = Direction.RTL; // Decode a string with each type encoded as log2(type)

      function dec(str) {
        var result = [];

        for (var _i48 = 0; _i48 < str.length; _i48++) {
          result.push(1 << +str[_i48]);
        }

        return result;
      } // Character types for codepoints 0 to 0xf8


      var LowTypes = /*@__PURE__*/dec("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008"); // Character types for codepoints 0x600 to 0x6f9

      var ArabicTypes = /*@__PURE__*/dec("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
      var Brackets = /*@__PURE__*/Object.create(null),
          BracketStack = []; // There's a lot more in
      // https://www.unicode.org/Public/UCD/latest/ucd/BidiBrackets.txt,
      // which are left out to keep code size down.

      for (var _i49 = 0, _arr2 = ["()", "[]", "{}"]; _i49 < _arr2.length; _i49++) {
        var p = _arr2[_i49];
        var l = /*@__PURE__*/p.charCodeAt(0),
            r = /*@__PURE__*/p.charCodeAt(1);
        Brackets[l] = r;
        Brackets[r] = -l;
      }

      function charType(ch) {
        return ch <= 0xf7 ? LowTypes[ch] : 0x590 <= ch && ch <= 0x5f4 ? 2
        /* R */
        : 0x600 <= ch && ch <= 0x6f9 ? ArabicTypes[ch - 0x600] : 0x6ee <= ch && ch <= 0x8ac ? 4
        /* AL */
        : 0x2000 <= ch && ch <= 0x200b ? 256
        /* NI */
        : ch == 0x200c ? 256
        /* NI */
        : 1
        /* L */
        ;
      }

      var BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;
      /**
      Represents a contiguous range of text that has a single direction
      (as in left-to-right or right-to-left).
      */

      var BidiSpan = /*#__PURE__*/function () {
        /**
        @internal
        */
        function BidiSpan(
        /**
        The start of the span (relative to the start of the line).
        */
        from,
        /**
        The end of the span.
        */
        to,
        /**
        The ["bidi
        level"](https://unicode.org/reports/tr9/#Basic_Display_Algorithm)
        of the span (in this context, 0 means
        left-to-right, 1 means right-to-left, 2 means left-to-right
        number inside right-to-left text).
        */
        level) {
          _classCallCheck(this, BidiSpan);

          this.from = from;
          this.to = to;
          this.level = level;
        }
        /**
        The direction of this span.
        */


        _createClass(BidiSpan, [{
          key: "dir",
          get: function get() {
            return this.level % 2 ? RTL : LTR;
          }
          /**
          @internal
          */

        }, {
          key: "side",
          value: function side(end, dir) {
            return this.dir == dir == end ? this.to : this.from;
          }
          /**
          @internal
          */

        }], [{
          key: "find",
          value: function find(order, index, level, assoc) {
            var maybe = -1;

            for (var _i50 = 0; _i50 < order.length; _i50++) {
              var span = order[_i50];

              if (span.from <= index && span.to >= index) {
                if (span.level == level) return _i50; // When multiple spans match, if assoc != 0, take the one that
                // covers that side, otherwise take the one with the minimum
                // level.

                if (maybe < 0 || (assoc != 0 ? assoc < 0 ? span.from < index : span.to > index : order[maybe].level > span.level)) maybe = _i50;
              }
            }

            if (maybe < 0) throw new RangeError("Index out of range");
            return maybe;
          }
        }]);

        return BidiSpan;
      }(); // Reused array of character types


      var types = [];

      function computeOrder(line, direction) {
        var len = line.length,
            outerType = direction == LTR ? 1
        /* L */
        : 2
        /* R */
        ,
            oppositeType = direction == LTR ? 2
        /* R */
        : 1
        /* L */
        ;
        if (!line || outerType == 1
        /* L */
        && !BidiRE.test(line)) return trivialOrder(len); // W1. Examine each non-spacing mark (NSM) in the level run, and
        // change the type of the NSM to the type of the previous
        // character. If the NSM is at the start of the level run, it will
        // get the type of sor.
        // W2. Search backwards from each instance of a European number
        // until the first strong type (R, L, AL, or sor) is found. If an
        // AL is found, change the type of the European number to Arabic
        // number.
        // W3. Change all ALs to R.
        // (Left after this: L, R, EN, AN, ET, CS, NI)

        for (var _i51 = 0, prev = outerType, prevStrong = outerType; _i51 < len; _i51++) {
          var type = charType(line.charCodeAt(_i51));
          if (type == 512
          /* NSM */
          ) type = prev;else if (type == 8
          /* EN */
          && prevStrong == 4
          /* AL */
          ) type = 16
          /* AN */
          ;
          types[_i51] = type == 4
          /* AL */
          ? 2
          /* R */
          : type;
          if (type & 7
          /* Strong */
          ) prevStrong = type;
          prev = type;
        } // W5. A sequence of European terminators adjacent to European
        // numbers changes to all European numbers.
        // W6. Otherwise, separators and terminators change to Other
        // Neutral.
        // W7. Search backwards from each instance of a European number
        // until the first strong type (R, L, or sor) is found. If an L is
        // found, then change the type of the European number to L.
        // (Left after this: L, R, EN+AN, NI)


        for (var _i52 = 0, _prev = outerType, _prevStrong = outerType; _i52 < len; _i52++) {
          var _type2 = types[_i52];

          if (_type2 == 128
          /* CS */
          ) {
            if (_i52 < len - 1 && _prev == types[_i52 + 1] && _prev & 24
            /* Num */
            ) _type2 = types[_i52] = _prev;else types[_i52] = 256
            /* NI */
            ;
          } else if (_type2 == 64
          /* ET */
          ) {
            var end = _i52 + 1;

            while (end < len && types[end] == 64
            /* ET */
            ) {
              end++;
            }

            var replace = _i52 && _prev == 8
            /* EN */
            || end < len && types[end] == 8
            /* EN */
            ? _prevStrong == 1
            /* L */
            ? 1
            /* L */
            : 8
            /* EN */
            : 256
            /* NI */
            ;

            for (var j = _i52; j < end; j++) {
              types[j] = replace;
            }

            _i52 = end - 1;
          } else if (_type2 == 8
          /* EN */
          && _prevStrong == 1
          /* L */
          ) {
            types[_i52] = 1
            /* L */
            ;
          }

          _prev = _type2;
          if (_type2 & 7
          /* Strong */
          ) _prevStrong = _type2;
        } // N0. Process bracket pairs in an isolating run sequence
        // sequentially in the logical order of the text positions of the
        // opening paired brackets using the logic given below. Within this
        // scope, bidirectional types EN and AN are treated as R.


        for (var _i53 = 0, sI = 0, context = 0, ch, br, _type3; _i53 < len; _i53++) {
          // Keeps [startIndex, type, strongSeen] triples for each open
          // bracket on BracketStack.
          if (br = Brackets[ch = line.charCodeAt(_i53)]) {
            if (br < 0) {
              // Closing bracket
              for (var sJ = sI - 3; sJ >= 0; sJ -= 3) {
                if (BracketStack[sJ + 1] == -br) {
                  var flags = BracketStack[sJ + 2];

                  var _type4 = flags & 2
                  /* EmbedInside */
                  ? outerType : !(flags & 4
                  /* OppositeInside */
                  ) ? 0 : flags & 1
                  /* OppositeBefore */
                  ? oppositeType : outerType;

                  if (_type4) types[_i53] = types[BracketStack[sJ]] = _type4;
                  sI = sJ;
                  break;
                }
              }
            } else if (BracketStack.length == 189
            /* MaxDepth */
            ) {
              break;
            } else {
              BracketStack[sI++] = _i53;
              BracketStack[sI++] = ch;
              BracketStack[sI++] = context;
            }
          } else if ((_type3 = types[_i53]) == 2
          /* R */
          || _type3 == 1
          /* L */
          ) {
            var embed = _type3 == outerType;
            context = embed ? 0 : 1
            /* OppositeBefore */
            ;

            for (var _sJ = sI - 3; _sJ >= 0; _sJ -= 3) {
              var cur = BracketStack[_sJ + 2];
              if (cur & 2
              /* EmbedInside */
              ) break;

              if (embed) {
                BracketStack[_sJ + 2] |= 2
                /* EmbedInside */
                ;
              } else {
                if (cur & 4
                /* OppositeInside */
                ) break;
                BracketStack[_sJ + 2] |= 4
                /* OppositeInside */
                ;
              }
            }
          }
        } // N1. A sequence of neutrals takes the direction of the
        // surrounding strong text if the text on both sides has the same
        // direction. European and Arabic numbers act as if they were R in
        // terms of their influence on neutrals. Start-of-level-run (sor)
        // and end-of-level-run (eor) are used at level run boundaries.
        // N2. Any remaining neutrals take the embedding direction.
        // (Left after this: L, R, EN+AN)


        for (var _i54 = 0; _i54 < len; _i54++) {
          if (types[_i54] == 256
          /* NI */
          ) {
            var _end3 = _i54 + 1;

            while (_end3 < len && types[_end3] == 256
            /* NI */
            ) {
              _end3++;
            }

            var beforeL = (_i54 ? types[_i54 - 1] : outerType) == 1
            /* L */
            ;
            var afterL = (_end3 < len ? types[_end3] : outerType) == 1
            /* L */
            ;

            var _replace = beforeL == afterL ? beforeL ? 1
            /* L */
            : 2
            /* R */
            : outerType;

            for (var _j = _i54; _j < _end3; _j++) {
              types[_j] = _replace;
            }

            _i54 = _end3 - 1;
          }
        } // Here we depart from the documented algorithm, in order to avoid
        // building up an actual levels array. Since there are only three
        // levels (0, 1, 2) in an implementation that doesn't take
        // explicit embedding into account, we can build up the order on
        // the fly, without following the level-based algorithm.


        var order = [];

        if (outerType == 1
        /* L */
        ) {
          for (var _i55 = 0; _i55 < len;) {
            var start = _i55,
                rtl = types[_i55++] != 1
            /* L */
            ;

            while (_i55 < len && rtl == (types[_i55] != 1
            /* L */
            )) {
              _i55++;
            }

            if (rtl) {
              for (var _j2 = _i55; _j2 > start;) {
                var _end4 = _j2,
                    _l = types[--_j2] != 2
                /* R */
                ;

                while (_j2 > start && _l == (types[_j2 - 1] != 2
                /* R */
                )) {
                  _j2--;
                }

                order.push(new BidiSpan(_j2, _end4, _l ? 2 : 1));
              }
            } else {
              order.push(new BidiSpan(start, _i55, 0));
            }
          }
        } else {
          for (var _i56 = 0; _i56 < len;) {
            var _start4 = _i56,
                _rtl = types[_i56++] == 2
            /* R */
            ;

            while (_i56 < len && _rtl == (types[_i56] == 2
            /* R */
            )) {
              _i56++;
            }

            order.push(new BidiSpan(_start4, _i56, _rtl ? 1 : 2));
          }
        }

        return order;
      }

      function trivialOrder(length) {
        return [new BidiSpan(0, length, 0)];
      }

      var movedOver = "";

      function moveVisually(line, order, dir, start, forward) {
        var _a;

        var startIndex = start.head - line.from,
            spanI = -1;

        if (startIndex == 0) {
          if (!forward || !line.length) return null;

          if (order[0].level != dir) {
            startIndex = order[0].side(false, dir);
            spanI = 0;
          }
        } else if (startIndex == line.length) {
          if (forward) return null;
          var last = order[order.length - 1];

          if (last.level != dir) {
            startIndex = last.side(true, dir);
            spanI = order.length - 1;
          }
        }

        if (spanI < 0) spanI = BidiSpan.find(order, startIndex, (_a = start.bidiLevel) !== null && _a !== void 0 ? _a : -1, start.assoc);
        var span = order[spanI]; // End of span. (But not end of line--that was checked for above.)

        if (startIndex == span.side(forward, dir)) {
          span = order[spanI += forward ? 1 : -1];
          startIndex = span.side(!forward, dir);
        }

        var indexForward = forward == (span.dir == dir);
        var nextIndex = Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_3__["findClusterBreak"])(line.text, startIndex, indexForward);
        movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
        if (nextIndex != span.side(forward, dir)) return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(nextIndex + line.from, indexForward ? -1 : 1, span.level);
        var nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];
        if (!nextSpan && span.level != dir) return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(forward ? line.to : line.from, forward ? -1 : 1, dir);
        if (nextSpan && nextSpan.level < span.level) return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(nextSpan.side(!forward, dir) + line.from, forward ? 1 : -1, nextSpan.level);
        return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(nextIndex + line.from, forward ? -1 : 1, span.level);
      }

      function groupAt(state, pos) {
        var bias = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
        var categorize = state.charCategorizer(pos);
        var line = state.doc.lineAt(pos),
            linePos = pos - line.from;
        if (line.length == 0) return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(pos);
        if (linePos == 0) bias = 1;else if (linePos == line.length) bias = -1;
        var from = linePos,
            to = linePos;
        if (bias < 0) from = Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_3__["findClusterBreak"])(line.text, linePos, false);else to = Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_3__["findClusterBreak"])(line.text, linePos);
        var cat = categorize(line.text.slice(from, to));

        while (from > 0) {
          var prev = Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_3__["findClusterBreak"])(line.text, from, false);
          if (categorize(line.text.slice(prev, from)) != cat) break;
          from = prev;
        }

        while (to < line.length) {
          var next = Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_3__["findClusterBreak"])(line.text, to);
          if (categorize(line.text.slice(to, next)) != cat) break;
          to = next;
        }

        return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].range(from + line.from, to + line.from);
      } // Search the DOM for the {node, offset} position closest to the given
      // coordinates. Very inefficient and crude, but can usually be avoided
      // by calling caret(Position|Range)FromPoint instead.


      function getdx(x, rect) {
        return rect.left > x ? rect.left - x : Math.max(0, x - rect.right);
      }

      function getdy(y, rect) {
        return rect.top > y ? rect.top - y : Math.max(0, y - rect.bottom);
      }

      function yOverlap(a, b) {
        return a.top < b.bottom - 1 && a.bottom > b.top + 1;
      }

      function upTop(rect, top) {
        return top < rect.top ? {
          top: top,
          left: rect.left,
          right: rect.right,
          bottom: rect.bottom
        } : rect;
      }

      function upBot(rect, bottom) {
        return bottom > rect.bottom ? {
          top: rect.top,
          left: rect.left,
          right: rect.right,
          bottom: bottom
        } : rect;
      }

      function domPosAtCoords(parent, x, y) {
        var closest, closestRect, closestX, closestY;
        var above, below, aboveRect, belowRect;

        for (var child = parent.firstChild; child; child = child.nextSibling) {
          var rects = clientRectsFor(child);

          for (var _i57 = 0; _i57 < rects.length; _i57++) {
            var rect = rects[_i57];
            if (closestRect && yOverlap(closestRect, rect)) rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);
            var dx = getdx(x, rect),
                dy = getdy(y, rect);
            if (dx == 0 && dy == 0) return child.nodeType == 3 ? domPosInText(child, x, y) : domPosAtCoords(child, x, y);

            if (!closest || closestY > dy || closestY == dy && closestX > dx) {
              closest = child;
              closestRect = rect;
              closestX = dx;
              closestY = dy;
            }

            if (dx == 0) {
              if (y > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
                above = child;
                aboveRect = rect;
              } else if (y < rect.top && (!belowRect || belowRect.top > rect.top)) {
                below = child;
                belowRect = rect;
              }
            } else if (aboveRect && yOverlap(aboveRect, rect)) {
              aboveRect = upBot(aboveRect, rect.bottom);
            } else if (belowRect && yOverlap(belowRect, rect)) {
              belowRect = upTop(belowRect, rect.top);
            }
          }
        }

        if (aboveRect && aboveRect.bottom >= y) {
          closest = above;
          closestRect = aboveRect;
        } else if (belowRect && belowRect.top <= y) {
          closest = below;
          closestRect = belowRect;
        }

        if (!closest) return {
          node: parent,
          offset: 0
        };
        var clipX = Math.max(closestRect.left, Math.min(closestRect.right, x));
        if (closest.nodeType == 3) return domPosInText(closest, clipX, y);
        if (!closestX && closest.contentEditable == "true") return domPosAtCoords(closest, clipX, y);
        var offset = Array.prototype.indexOf.call(parent.childNodes, closest) + (x >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
        return {
          node: parent,
          offset: offset
        };
      }

      function domPosInText(node, x, y) {
        var len = node.nodeValue.length;
        var closestOffset = -1,
            closestDY = 1e9,
            generalSide = 0;

        for (var _i58 = 0; _i58 < len; _i58++) {
          var rects = textRange(node, _i58, _i58 + 1).getClientRects();

          for (var j = 0; j < rects.length; j++) {
            var rect = rects[j];
            if (rect.top == rect.bottom) continue;
            if (!generalSide) generalSide = x - rect.left;
            var dy = (rect.top > y ? rect.top - y : y - rect.bottom) - 1;

            if (rect.left - 1 <= x && rect.right + 1 >= x && dy < closestDY) {
              var right = x >= (rect.left + rect.right) / 2,
                  after = right;

              if (browser.chrome || browser.gecko) {
                // Check for RTL on browsers that support getting client
                // rects for empty ranges.
                var rectBefore = textRange(node, _i58).getBoundingClientRect();
                if (rectBefore.left == rect.right) after = !right;
              }

              if (dy <= 0) return {
                node: node,
                offset: _i58 + (after ? 1 : 0)
              };
              closestOffset = _i58 + (after ? 1 : 0);
              closestDY = dy;
            }
          }
        }

        return {
          node: node,
          offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0
        };
      }

      function _posAtCoords(view, _ref10, precise) {
        var x = _ref10.x,
            y = _ref10.y;
        var bias = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;
        var content = view.contentDOM.getBoundingClientRect(),
            block;
        var halfLine = view.defaultLineHeight / 2;

        for (var bounced = false;;) {
          block = view.blockAtHeight(y, content.top);

          if (block.top > y || block.bottom < y) {
            bias = block.top > y ? -1 : 1;
            y = Math.min(block.bottom - halfLine, Math.max(block.top + halfLine, y));
            if (bounced) return precise ? null : 0;else bounced = true;
          }

          if (block.type == BlockType.Text) break;
          y = bias > 0 ? block.bottom + halfLine : block.top - halfLine;
        }

        var lineStart = block.from;
        x = Math.max(content.left + 1, Math.min(content.right - 1, x)); // If this is outside of the rendered viewport, we can't determine a position

        if (lineStart < view.viewport.from) return view.viewport.from == 0 ? 0 : posAtCoordsImprecise(view, content, block, x, y);
        if (lineStart > view.viewport.to) return view.viewport.to == view.state.doc.length ? view.state.doc.length : posAtCoordsImprecise(view, content, block, x, y); // Clip x to the viewport sides

        var root = view.root,
            element = root.elementFromPoint(x, y); // There's visible editor content under the point, so we can try
        // using caret(Position|Range)FromPoint as a shortcut

        var node,
            offset = -1;

        if (element && view.contentDOM.contains(element) && !(view.docView.nearest(element) instanceof WidgetView)) {
          if (root.caretPositionFromPoint) {
            var pos = root.caretPositionFromPoint(x, y);

            if (pos) {
              node = pos.offsetNode;
              offset = pos.offset;
            }
          } else if (root.caretRangeFromPoint) {
            var range = root.caretRangeFromPoint(x, y);

            if (range) {
              node = range.startContainer;
              offset = range.startOffset;
              if (browser.safari && isSuspiciousCaretResult(node, offset, x)) node = undefined;
            }
          }
        } // No luck, do our own (potentially expensive) search


        if (!node || !view.docView.dom.contains(node)) {
          var line = LineView.find(view.docView, lineStart);

          var _domPosAtCoords = domPosAtCoords(line.dom, x, y);

          node = _domPosAtCoords.node;
          offset = _domPosAtCoords.offset;
        }

        return view.docView.posFromDOM(node, offset);
      }

      function posAtCoordsImprecise(view, contentRect, block, x, y) {
        var into = Math.round((x - contentRect.left) * view.defaultCharacterWidth);

        if (view.lineWrapping && block.height > view.defaultLineHeight * 1.5) {
          var line = Math.floor((y - block.top) / view.defaultLineHeight);
          into += line * view.viewState.heightOracle.lineLength;
        }

        var content = view.state.sliceDoc(block.from, block.to);
        return block.from + Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_3__["findColumn"])(content, into, view.state.tabSize);
      } // In case of a high line height, Safari's caretRangeFromPoint treats
      // the space between lines as belonging to the last character of the
      // line before. This is used to detect such a result so that it can be
      // ignored (issue #401).


      function isSuspiciousCaretResult(node, offset, x) {
        var len;
        if (node.nodeType != 3 || offset != (len = node.nodeValue.length)) return false;

        for (var next = node.nextSibling; next; next = next.nextSibling) {
          if (next.nodeType != 1 || next.nodeName != "BR") return false;
        }

        return textRange(node, len - 1, len).getBoundingClientRect().left > x;
      }

      function _moveToLineBoundary(view, start, forward, includeWrap) {
        var line = view.state.doc.lineAt(start.head);
        var coords = !includeWrap || !view.lineWrapping ? null : view.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);

        if (coords) {
          var editorRect = view.dom.getBoundingClientRect();
          var pos = view.posAtCoords({
            x: forward == (view.textDirection == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,
            y: (coords.top + coords.bottom) / 2
          });
          if (pos != null) return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(pos, forward ? -1 : 1);
        }

        var lineView = LineView.find(view.docView, start.head);
        var end = lineView ? forward ? lineView.posAtEnd : lineView.posAtStart : forward ? line.to : line.from;
        return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(end, forward ? -1 : 1);
      }

      function _moveByChar(view, start, forward, by) {
        var line = view.state.doc.lineAt(start.head),
            spans = view.bidiSpans(line);

        for (var cur = start, check = null;;) {
          var next = moveVisually(line, spans, view.textDirection, cur, forward),
              _char3 = movedOver;

          if (!next) {
            if (line.number == (forward ? view.state.doc.lines : 1)) return cur;
            _char3 = "\n";
            line = view.state.doc.line(line.number + (forward ? 1 : -1));
            spans = view.bidiSpans(line);
            next = _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(forward ? line.from : line.to);
          }

          if (!check) {
            if (!by) return next;
            check = by(_char3);
          } else if (!check(_char3)) {
            return cur;
          }

          cur = next;
        }
      }

      function byGroup(view, pos, start) {
        var categorize = view.state.charCategorizer(pos);
        var cat = categorize(start);
        return function (next) {
          var nextCat = categorize(next);
          if (cat == _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["CharCategory"].Space) cat = nextCat;
          return cat == nextCat;
        };
      }

      function _moveVertically(view, start, forward, distance) {
        var startPos = start.head,
            dir = forward ? 1 : -1;
        if (startPos == (forward ? view.state.doc.length : 0)) return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(startPos);
        var goal = start.goalColumn,
            startY;
        var rect = view.contentDOM.getBoundingClientRect();
        var startCoords = view.coordsAtPos(startPos);

        if (startCoords) {
          if (goal == null) goal = startCoords.left - rect.left;
          startY = dir < 0 ? startCoords.top : startCoords.bottom;
        } else {
          var line = view.viewState.lineAt(startPos, view.dom.getBoundingClientRect().top);
          if (goal == null) goal = Math.min(rect.right - rect.left, view.defaultCharacterWidth * (startPos - line.from));
          startY = dir < 0 ? line.top : line.bottom;
        }

        var resolvedGoal = rect.left + goal;
        var dist = distance !== null && distance !== void 0 ? distance : view.defaultLineHeight >> 1;

        for (var extra = 0;; extra += 10) {
          var curY = startY + (dist + extra) * dir;

          var pos = _posAtCoords(view, {
            x: resolvedGoal,
            y: curY
          }, false, dir);

          if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos)) return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(pos, undefined, undefined, goal);
        }
      }

      function skipAtoms(view, oldPos, pos) {
        var atoms = view.pluginField(PluginField.atomicRanges);

        for (;;) {
          var moved = false;

          var _iterator52 = _createForOfIteratorHelper(atoms),
              _step52;

          try {
            for (_iterator52.s(); !(_step52 = _iterator52.n()).done;) {
              var set = _step52.value;
              set.between(pos.from - 1, pos.from + 1, function (from, to, value) {
                if (pos.from > from && pos.from < to) {
                  pos = oldPos.from > pos.from ? _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(from, 1) : _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(to, -1);
                  moved = true;
                }
              });
            }
          } catch (err) {
            _iterator52.e(err);
          } finally {
            _iterator52.f();
          }

          if (!moved) return pos;
        }
      } // This will also be where dragging info and such goes


      var InputState = /*#__PURE__*/function () {
        function InputState(view) {
          var _this31 = this;

          _classCallCheck(this, InputState);

          this.lastKeyCode = 0;
          this.lastKeyTime = 0;
          this.pendingIOSKey = null;
          this.lastSelectionOrigin = null;
          this.lastSelectionTime = 0;
          this.lastEscPress = 0;
          this.lastContextMenu = 0;
          this.scrollHandlers = [];
          this.registeredEvents = [];
          this.customHandlers = []; // -1 means not in a composition. Otherwise, this counts the number
          // of changes made during the composition. The count is used to
          // avoid treating the start state of the composition, before any
          // changes have been made, as part of the composition.

          this.composing = -1; // Tracks whether the next change should be marked as starting the
          // composition (null means no composition, true means next is the
          // first, false means first has already been marked for this
          // composition)

          this.compositionFirstChange = null;
          this.compositionEndedAt = 0;
          this.rapidCompositionStart = false;
          this.mouseSelection = null;

          var _loop7 = function _loop7(type) {
            var handler = handlers[type];
            view.contentDOM.addEventListener(type, function (event) {
              if (type == "keydown" && _this31.keydown(view, event)) return;
              if (!eventBelongsToEditor(view, event) || _this31.ignoreDuringComposition(event)) return;
              if (_this31.mustFlushObserver(event)) view.observer.forceFlush();
              if (_this31.runCustomHandlers(type, view, event)) event.preventDefault();else handler(view, event);
            });

            _this31.registeredEvents.push(type);
          };

          for (var type in handlers) {
            _loop7(type);
          }

          this.notifiedFocused = view.hasFocus;
          this.ensureHandlers(view); // On Safari adding an input event handler somehow prevents an
          // issue where the composition vanishes when you press enter.

          if (browser.safari) view.contentDOM.addEventListener("input", function () {
            return null;
          });
        }

        _createClass(InputState, [{
          key: "setSelectionOrigin",
          value: function setSelectionOrigin(origin) {
            this.lastSelectionOrigin = origin;
            this.lastSelectionTime = Date.now();
          }
        }, {
          key: "ensureHandlers",
          value: function ensureHandlers(view) {
            var _this32 = this;

            var handlers = this.customHandlers = view.pluginField(domEventHandlers);

            var _iterator53 = _createForOfIteratorHelper(handlers),
                _step53;

            try {
              for (_iterator53.s(); !(_step53 = _iterator53.n()).done;) {
                var set = _step53.value;

                var _loop8 = function _loop8(type) {
                  if (_this32.registeredEvents.indexOf(type) < 0 && type != "scroll") {
                    _this32.registeredEvents.push(type);

                    view.contentDOM.addEventListener(type, function (event) {
                      if (!eventBelongsToEditor(view, event)) return;
                      if (_this32.runCustomHandlers(type, view, event)) event.preventDefault();
                    });
                  }
                };

                for (var type in set.handlers) {
                  _loop8(type);
                }
              }
            } catch (err) {
              _iterator53.e(err);
            } finally {
              _iterator53.f();
            }
          }
        }, {
          key: "runCustomHandlers",
          value: function runCustomHandlers(type, view, event) {
            var _iterator54 = _createForOfIteratorHelper(this.customHandlers),
                _step54;

            try {
              for (_iterator54.s(); !(_step54 = _iterator54.n()).done;) {
                var set = _step54.value;
                var handler = set.handlers[type],
                    handled = false;

                if (handler) {
                  try {
                    handled = handler.call(set.plugin, event, view);
                  } catch (e) {
                    logException(view.state, e);
                  }

                  if (handled || event.defaultPrevented) {
                    // Chrome for Android often applies a bunch of nonsensical
                    // DOM changes after an enter press, even when
                    // preventDefault-ed. This tries to ignore those.
                    if (browser.android && type == "keydown" && event.keyCode == 13) view.observer.flushSoon();
                    return true;
                  }
                }
              }
            } catch (err) {
              _iterator54.e(err);
            } finally {
              _iterator54.f();
            }

            return false;
          }
        }, {
          key: "runScrollHandlers",
          value: function runScrollHandlers(view, event) {
            var _iterator55 = _createForOfIteratorHelper(this.customHandlers),
                _step55;

            try {
              for (_iterator55.s(); !(_step55 = _iterator55.n()).done;) {
                var set = _step55.value;
                var handler = set.handlers.scroll;

                if (handler) {
                  try {
                    handler.call(set.plugin, event, view);
                  } catch (e) {
                    logException(view.state, e);
                  }
                }
              }
            } catch (err) {
              _iterator55.e(err);
            } finally {
              _iterator55.f();
            }
          }
        }, {
          key: "keydown",
          value: function keydown(view, event) {
            var _this33 = this;

            // Must always run, even if a custom handler handled the event
            this.lastKeyCode = event.keyCode;
            this.lastKeyTime = Date.now();
            if (this.screenKeyEvent(view, event)) return true; // Prevent the default behavior of Enter on iOS makes the
            // virtual keyboard get stuck in the wrong (lowercase)
            // state. So we let it go through, and then, in
            // applyDOMChange, notify key handlers of it and reset to
            // the state they produce.

            if (browser.ios && (event.keyCode == 13 || event.keyCode == 8) && !(event.ctrlKey || event.altKey || event.metaKey) && !event.synthetic) {
              this.pendingIOSKey = event.keyCode == 13 ? "enter" : "backspace";
              setTimeout(function () {
                return _this33.flushIOSKey(view);
              }, 250);
              return true;
            }

            return false;
          }
        }, {
          key: "flushIOSKey",
          value: function flushIOSKey(view) {
            if (!this.pendingIOSKey) return false;
            var dom = view.contentDOM,
                key = this.pendingIOSKey;
            this.pendingIOSKey = null;
            return key == "enter" ? dispatchKey(dom, "Enter", 13) : dispatchKey(dom, "Backspace", 8);
          }
        }, {
          key: "ignoreDuringComposition",
          value: function ignoreDuringComposition(event) {
            if (!/^key/.test(event.type)) return false;
            if (this.composing > 0) return true; // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.
            // On some input method editors (IMEs), the Enter key is used to
            // confirm character selection. On Safari, when Enter is pressed,
            // compositionend and keydown events are sometimes emitted in the
            // wrong order. The key event should still be ignored, even when
            // it happens after the compositionend event.

            if (browser.safari && Date.now() - this.compositionEndedAt < 500) {
              this.compositionEndedAt = 0;
              return true;
            }

            return false;
          }
        }, {
          key: "screenKeyEvent",
          value: function screenKeyEvent(view, event) {
            var protectedTab = event.keyCode == 9 && Date.now() < this.lastEscPress + 2000;
            if (event.keyCode == 27) this.lastEscPress = Date.now();else if (modifierCodes.indexOf(event.keyCode) < 0) this.lastEscPress = 0;
            return protectedTab;
          }
        }, {
          key: "mustFlushObserver",
          value: function mustFlushObserver(event) {
            return event.type == "keydown" && event.keyCode != 229 || event.type == "compositionend" && !browser.ios;
          }
        }, {
          key: "startMouseSelection",
          value: function startMouseSelection(view, event, style) {
            if (this.mouseSelection) this.mouseSelection.destroy();
            this.mouseSelection = new MouseSelection(this, view, event, style);
          }
        }, {
          key: "update",
          value: function update(_update5) {
            if (this.mouseSelection) this.mouseSelection.update(_update5);
            if (_update5.transactions.length) this.lastKeyCode = this.lastSelectionTime = 0;
          }
        }, {
          key: "destroy",
          value: function destroy() {
            if (this.mouseSelection) this.mouseSelection.destroy();
          }
        }]);

        return InputState;
      }(); // Key codes for modifier keys


      var modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];

      var MouseSelection = /*#__PURE__*/function () {
        function MouseSelection(inputState, view, startEvent, style) {
          _classCallCheck(this, MouseSelection);

          this.inputState = inputState;
          this.view = view;
          this.style = style;
          this.lastEvent = startEvent;
          var doc = view.contentDOM.ownerDocument;
          doc.addEventListener("mousemove", this.move = this.move.bind(this));
          doc.addEventListener("mouseup", this.up = this.up.bind(this));
          this.extend = startEvent.shiftKey;
          this.multiple = view.state.facet(_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorState"].allowMultipleSelections) && addsSelectionRange(view, startEvent);
          this.dragMove = dragMovesSelection(view, startEvent);
          this.dragging = isInPrimarySelection(view, startEvent) ? null : false; // When clicking outside of the selection, immediately apply the
          // effect of starting the selection

          if (this.dragging === false) {
            startEvent.preventDefault();
            this.select(startEvent);
          }
        }

        _createClass(MouseSelection, [{
          key: "move",
          value: function move(event) {
            if (event.buttons == 0) return this.destroy();
            if (this.dragging !== false) return;
            this.select(this.lastEvent = event);
          }
        }, {
          key: "up",
          value: function up(event) {
            if (this.dragging == null) this.select(this.lastEvent);
            if (!this.dragging) event.preventDefault();
            this.destroy();
          }
        }, {
          key: "destroy",
          value: function destroy() {
            var doc = this.view.contentDOM.ownerDocument;
            doc.removeEventListener("mousemove", this.move);
            doc.removeEventListener("mouseup", this.up);
            this.inputState.mouseSelection = null;
          }
        }, {
          key: "select",
          value: function select(event) {
            var selection = this.style.get(event, this.extend, this.multiple);
            if (!selection.eq(this.view.state.selection) || selection.main.assoc != this.view.state.selection.main.assoc) this.view.dispatch({
              selection: selection,
              userEvent: "select.pointer",
              scrollIntoView: true
            });
          }
        }, {
          key: "update",
          value: function update(_update6) {
            var _this34 = this;

            if (_update6.docChanged && this.dragging) this.dragging = this.dragging.map(_update6.changes);
            if (this.style.update(_update6)) setTimeout(function () {
              return _this34.select(_this34.lastEvent);
            }, 20);
          }
        }]);

        return MouseSelection;
      }();

      function addsSelectionRange(view, event) {
        var facet = view.state.facet(clickAddsSelectionRange);
        return facet.length ? facet[0](event) : browser.mac ? event.metaKey : event.ctrlKey;
      }

      function dragMovesSelection(view, event) {
        var facet = view.state.facet(dragMovesSelection$1);
        return facet.length ? facet[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;
      }

      function isInPrimarySelection(view, event) {
        var main = view.state.selection.main;
        if (main.empty) return false; // On boundary clicks, check whether the coordinates are inside the
        // selection's client rectangles

        var sel = getSelection(view.root);
        if (sel.rangeCount == 0) return true;
        var rects = sel.getRangeAt(0).getClientRects();

        for (var _i59 = 0; _i59 < rects.length; _i59++) {
          var rect = rects[_i59];
          if (rect.left <= event.clientX && rect.right >= event.clientX && rect.top <= event.clientY && rect.bottom >= event.clientY) return true;
        }

        return false;
      }

      function eventBelongsToEditor(view, event) {
        if (!event.bubbles) return true;
        if (event.defaultPrevented) return false;

        for (var node = event.target, cView; node != view.contentDOM; node = node.parentNode) {
          if (!node || node.nodeType == 11 || (cView = ContentView.get(node)) && cView.ignoreEvent(event)) return false;
        }

        return true;
      }

      var handlers = /*@__PURE__*/Object.create(null); // This is very crude, but unfortunately both these browsers _pretend_
      // that they have a clipboard API—all the objects and methods are
      // there, they just don't work, and they are hard to test.

      var brokenClipboardAPI = browser.ie && browser.ie_version < 15 || browser.ios && browser.webkit_version < 604;

      function capturePaste(view) {
        var parent = view.dom.parentNode;
        if (!parent) return;
        var target = parent.appendChild(document.createElement("textarea"));
        target.style.cssText = "position: fixed; left: -10000px; top: 10px";
        target.focus();
        setTimeout(function () {
          view.focus();
          target.remove();
          doPaste(view, target.value);
        }, 50);
      }

      function doPaste(view, input) {
        var state = view.state,
            changes,
            i = 1,
            text = state.toText(input);
        var byLine = text.lines == state.selection.ranges.length;
        var linewise = lastLinewiseCopy && state.selection.ranges.every(function (r) {
          return r.empty;
        }) && lastLinewiseCopy == text.toString();

        if (linewise) {
          var lastLine = -1;
          changes = state.changeByRange(function (range) {
            var line = state.doc.lineAt(range.from);
            if (line.from == lastLine) return {
              range: range
            };
            lastLine = line.from;
            var insert = state.toText((byLine ? text.line(i++).text : input) + state.lineBreak);
            return {
              changes: {
                from: line.from,
                insert: insert
              },
              range: _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(range.from + insert.length)
            };
          });
        } else if (byLine) {
          changes = state.changeByRange(function (range) {
            var line = text.line(i++);
            return {
              changes: {
                from: range.from,
                to: range.to,
                insert: line.text
              },
              range: _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(range.from + line.length)
            };
          });
        } else {
          changes = state.replaceSelection(text);
        }

        view.dispatch(changes, {
          userEvent: "input.paste",
          scrollIntoView: true
        });
      }

      handlers.keydown = function (view, event) {
        view.inputState.setSelectionOrigin("select");
      };

      var lastTouch = 0;

      handlers.touchstart = function (view, e) {
        lastTouch = Date.now();
        view.inputState.setSelectionOrigin("select.pointer");
      };

      handlers.touchmove = function (view) {
        view.inputState.setSelectionOrigin("select.pointer");
      };

      handlers.mousedown = function (view, event) {
        view.observer.flush();
        if (lastTouch > Date.now() - 2000) return; // Ignore touch interaction

        var style = null;

        var _iterator56 = _createForOfIteratorHelper(view.state.facet(mouseSelectionStyle)),
            _step56;

        try {
          for (_iterator56.s(); !(_step56 = _iterator56.n()).done;) {
            var makeStyle = _step56.value;
            style = makeStyle(view, event);
            if (style) break;
          }
        } catch (err) {
          _iterator56.e(err);
        } finally {
          _iterator56.f();
        }

        if (!style && event.button == 0) style = basicMouseSelection(view, event);

        if (style) {
          if (view.root.activeElement != view.contentDOM) view.observer.ignore(function () {
            return focusPreventScroll(view.contentDOM);
          });
          view.inputState.startMouseSelection(view, event, style);
        }
      };

      function rangeForClick(view, pos, bias, type) {
        if (type == 1) {
          // Single click
          return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(pos, bias);
        } else if (type == 2) {
          // Double click
          return groupAt(view.state, pos, bias);
        } else {
          // Triple click
          var visual = LineView.find(view.docView, pos),
              line = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);
          var from = visual ? visual.posAtStart : line.from,
              to = visual ? visual.posAtEnd : line.to;
          if (to < view.state.doc.length && to == line.to) to++;
          return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].range(from, to);
        }
      }

      var insideY = function insideY(y, rect) {
        return y >= rect.top && y <= rect.bottom;
      };

      var inside = function inside(x, y, rect) {
        return insideY(y, rect) && x >= rect.left && x <= rect.right;
      }; // Try to determine, for the given coordinates, associated with the
      // given position, whether they are related to the element before or
      // the element after the position.


      function findPositionSide(view, pos, x, y) {
        var line = LineView.find(view.docView, pos);
        if (!line) return 1;
        var off = pos - line.posAtStart; // Line boundaries point into the line

        if (off == 0) return 1;
        if (off == line.length) return -1; // Positions on top of an element point at that element

        var before = line.coordsAt(off, -1);
        if (before && inside(x, y, before)) return -1;
        var after = line.coordsAt(off, 1);
        if (after && inside(x, y, after)) return 1; // This is probably a line wrap point. Pick before if the point is
        // beside it.

        return before && insideY(y, before) ? -1 : 1;
      }

      function queryPos(view, event) {
        var pos = view.posAtCoords({
          x: event.clientX,
          y: event.clientY
        }, false);
        return {
          pos: pos,
          bias: findPositionSide(view, pos, event.clientX, event.clientY)
        };
      }

      var BadMouseDetail = browser.ie && browser.ie_version <= 11;
      var lastMouseDown = null,
          lastMouseDownCount = 0,
          lastMouseDownTime = 0;

      function getClickType(event) {
        if (!BadMouseDetail) return event.detail;
        var last = lastMouseDown,
            lastTime = lastMouseDownTime;
        lastMouseDown = event;
        lastMouseDownTime = Date.now();
        return lastMouseDownCount = !last || lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 && Math.abs(last.clientY - event.clientY) < 2 ? (lastMouseDownCount + 1) % 3 : 1;
      }

      function basicMouseSelection(view, event) {
        var start = queryPos(view, event),
            type = getClickType(event);
        var startSel = view.state.selection;
        var last = start,
            lastEvent = event;
        return {
          update: function update(_update7) {
            if (_update7.changes) {
              if (start) start.pos = _update7.changes.mapPos(start.pos);
              startSel = startSel.map(_update7.changes);
              lastEvent = null;
            }
          },
          get: function get(event, extend, multiple) {
            var cur;
            if (lastEvent && event.clientX == lastEvent.clientX && event.clientY == lastEvent.clientY) cur = last;else {
              cur = last = queryPos(view, event);
              lastEvent = event;
            }
            if (!cur || !start) return startSel;
            var range = rangeForClick(view, cur.pos, cur.bias, type);

            if (start.pos != cur.pos && !extend) {
              var startRange = rangeForClick(view, start.pos, start.bias, type);
              var from = Math.min(startRange.from, range.from),
                  to = Math.max(startRange.to, range.to);
              range = from < range.from ? _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].range(from, to) : _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].range(to, from);
            }

            if (extend) return startSel.replaceRange(startSel.main.extend(range.from, range.to));else if (multiple) return startSel.addRange(range);else return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].create([range]);
          }
        };
      }

      handlers.dragstart = function (view, event) {
        var main = view.state.selection.main;
        var mouseSelection = view.inputState.mouseSelection;
        if (mouseSelection) mouseSelection.dragging = main;

        if (event.dataTransfer) {
          event.dataTransfer.setData("Text", view.state.sliceDoc(main.from, main.to));
          event.dataTransfer.effectAllowed = "copyMove";
        }
      };

      function dropText(view, event, text, direct) {
        var dropPos = view.posAtCoords({
          x: event.clientX,
          y: event.clientY
        });
        if (dropPos == null || !text) return;
        event.preventDefault();
        var mouseSelection = view.inputState.mouseSelection;
        var del = direct && mouseSelection && mouseSelection.dragging && mouseSelection.dragMove ? {
          from: mouseSelection.dragging.from,
          to: mouseSelection.dragging.to
        } : null;
        var ins = {
          from: dropPos,
          insert: text
        };
        var changes = view.state.changes(del ? [del, ins] : ins);
        view.focus();
        view.dispatch({
          changes: changes,
          selection: {
            anchor: changes.mapPos(dropPos, -1),
            head: changes.mapPos(dropPos, 1)
          },
          userEvent: del ? "move.drop" : "input.drop"
        });
      }

      handlers.drop = function (view, event) {
        if (!event.dataTransfer) return;
        if (view.state.readOnly) return event.preventDefault();
        var files = event.dataTransfer.files;

        if (files && files.length) {
          (function () {
            // For a file drop, read the file's text.
            event.preventDefault();
            var text = Array(files.length),
                read = 0;

            var finishFile = function finishFile() {
              if (++read == files.length) dropText(view, event, text.filter(function (s) {
                return s != null;
              }).join(view.state.lineBreak), false);
            };

            var _loop9 = function _loop9(_i60) {
              var reader = new FileReader();
              reader.onerror = finishFile;

              reader.onload = function () {
                if (!/[\x00-\x08\x0e-\x1f]{2}/.test(reader.result)) text[_i60] = reader.result;
                finishFile();
              };

              reader.readAsText(files[_i60]);
            };

            for (var _i60 = 0; _i60 < files.length; _i60++) {
              _loop9(_i60);
            }
          })();
        } else {
          dropText(view, event, event.dataTransfer.getData("Text"), true);
        }
      };

      handlers.paste = function (view, event) {
        if (view.state.readOnly) return event.preventDefault();
        view.observer.flush();
        var data = brokenClipboardAPI ? null : event.clipboardData;
        var text = data && data.getData("text/plain");

        if (text) {
          doPaste(view, text);
          event.preventDefault();
        } else {
          capturePaste(view);
        }
      };

      function captureCopy(view, text) {
        // The extra wrapper is somehow necessary on IE/Edge to prevent the
        // content from being mangled when it is put onto the clipboard
        var parent = view.dom.parentNode;
        if (!parent) return;
        var target = parent.appendChild(document.createElement("textarea"));
        target.style.cssText = "position: fixed; left: -10000px; top: 10px";
        target.value = text;
        target.focus();
        target.selectionEnd = text.length;
        target.selectionStart = 0;
        setTimeout(function () {
          target.remove();
          view.focus();
        }, 50);
      }

      function copiedRange(state) {
        var content = [],
            ranges = [],
            linewise = false;

        var _iterator57 = _createForOfIteratorHelper(state.selection.ranges),
            _step57;

        try {
          for (_iterator57.s(); !(_step57 = _iterator57.n()).done;) {
            var range = _step57.value;

            if (!range.empty) {
              content.push(state.sliceDoc(range.from, range.to));
              ranges.push(range);
            }
          }
        } catch (err) {
          _iterator57.e(err);
        } finally {
          _iterator57.f();
        }

        if (!content.length) {
          // Nothing selected, do a line-wise copy
          var upto = -1;

          var _iterator58 = _createForOfIteratorHelper(state.selection.ranges),
              _step58;

          try {
            for (_iterator58.s(); !(_step58 = _iterator58.n()).done;) {
              var from = _step58.value.from;
              var line = state.doc.lineAt(from);

              if (line.number > upto) {
                content.push(line.text);
                ranges.push({
                  from: line.from,
                  to: Math.min(state.doc.length, line.to + 1)
                });
              }

              upto = line.number;
            }
          } catch (err) {
            _iterator58.e(err);
          } finally {
            _iterator58.f();
          }

          linewise = true;
        }

        return {
          text: content.join(state.lineBreak),
          ranges: ranges,
          linewise: linewise
        };
      }

      var lastLinewiseCopy = null;

      handlers.copy = handlers.cut = function (view, event) {
        var _copiedRange = copiedRange(view.state),
            text = _copiedRange.text,
            ranges = _copiedRange.ranges,
            linewise = _copiedRange.linewise;

        if (!text) return;
        lastLinewiseCopy = linewise ? text : null;
        var data = brokenClipboardAPI ? null : event.clipboardData;

        if (data) {
          event.preventDefault();
          data.clearData();
          data.setData("text/plain", text);
        } else {
          captureCopy(view, text);
        }

        if (event.type == "cut" && !view.state.readOnly) view.dispatch({
          changes: ranges,
          scrollIntoView: true,
          userEvent: "delete.cut"
        });
      };

      handlers.focus = handlers.blur = function (view) {
        setTimeout(function () {
          if (view.hasFocus != view.inputState.notifiedFocused) view.update([]);
        }, 10);
      };

      handlers.beforeprint = function (view) {
        view.viewState.printing = true;
        view.requestMeasure();
        setTimeout(function () {
          view.viewState.printing = false;
          view.requestMeasure();
        }, 2000);
      };

      function forceClearComposition(view, rapid) {
        if (view.docView.compositionDeco.size) {
          view.inputState.rapidCompositionStart = rapid;

          try {
            view.update([]);
          } finally {
            view.inputState.rapidCompositionStart = false;
          }
        }
      }

      handlers.compositionstart = handlers.compositionupdate = function (view) {
        if (view.inputState.compositionFirstChange == null) view.inputState.compositionFirstChange = true;

        if (view.inputState.composing < 0) {
          if (view.docView.compositionDeco.size) {
            view.observer.flush();
            forceClearComposition(view, true);
          } // FIXME possibly set a timeout to clear it again on Android


          view.inputState.composing = 0;
        }
      };

      handlers.compositionend = function (view) {
        view.inputState.composing = -1;
        view.inputState.compositionEndedAt = Date.now();
        view.inputState.compositionFirstChange = null;
        setTimeout(function () {
          if (view.inputState.composing < 0) forceClearComposition(view, false);
        }, 50);
      };

      handlers.contextmenu = function (view) {
        view.inputState.lastContextMenu = Date.now();
      };

      var wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line"];

      var HeightOracle = /*#__PURE__*/function () {
        function HeightOracle() {
          _classCallCheck(this, HeightOracle);

          this.doc = _codemirror_text__WEBPACK_IMPORTED_MODULE_3__["Text"].empty;
          this.lineWrapping = false;
          this.direction = Direction.LTR;
          this.heightSamples = {};
          this.lineHeight = 14;
          this.charWidth = 7;
          this.lineLength = 30; // Used to track, during updateHeight, if any actual heights changed

          this.heightChanged = false;
        }

        _createClass(HeightOracle, [{
          key: "heightForGap",
          value: function heightForGap(from, to) {
            var lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;
            if (this.lineWrapping) lines += Math.ceil((to - from - lines * this.lineLength * 0.5) / this.lineLength);
            return this.lineHeight * lines;
          }
        }, {
          key: "heightForLine",
          value: function heightForLine(length) {
            if (!this.lineWrapping) return this.lineHeight;
            var lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));
            return lines * this.lineHeight;
          }
        }, {
          key: "setDoc",
          value: function setDoc(doc) {
            this.doc = doc;
            return this;
          }
        }, {
          key: "mustRefresh",
          value: function mustRefresh(lineHeights, whiteSpace, direction) {
            var newHeight = false;

            for (var _i61 = 0; _i61 < lineHeights.length; _i61++) {
              var h = lineHeights[_i61];

              if (h < 0) {
                _i61++;
              } else if (!this.heightSamples[Math.floor(h * 10)]) {
                // Round to .1 pixels
                newHeight = true;
                this.heightSamples[Math.floor(h * 10)] = true;
              }
            }

            return newHeight || wrappingWhiteSpace.indexOf(whiteSpace) > -1 != this.lineWrapping || this.direction != direction;
          }
        }, {
          key: "refresh",
          value: function refresh(whiteSpace, direction, lineHeight, charWidth, lineLength, knownHeights) {
            var lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
            var changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping || this.direction != direction;
            this.lineWrapping = lineWrapping;
            this.direction = direction;
            this.lineHeight = lineHeight;
            this.charWidth = charWidth;
            this.lineLength = lineLength;

            if (changed) {
              this.heightSamples = {};

              for (var _i62 = 0; _i62 < knownHeights.length; _i62++) {
                var h = knownHeights[_i62];
                if (h < 0) _i62++;else this.heightSamples[Math.floor(h * 10)] = true;
              }
            }

            return changed;
          }
        }]);

        return HeightOracle;
      }(); // This object is used by `updateHeight` to make DOM measurements
      // arrive at the right nides. The `heights` array is a sequence of
      // block heights, starting from position `from`.


      var MeasuredHeights = /*#__PURE__*/function () {
        function MeasuredHeights(from, heights) {
          _classCallCheck(this, MeasuredHeights);

          this.from = from;
          this.heights = heights;
          this.index = 0;
        }

        _createClass(MeasuredHeights, [{
          key: "more",
          get: function get() {
            return this.index < this.heights.length;
          }
        }]);

        return MeasuredHeights;
      }();
      /**
      Record used to represent information about a block-level element
      in the editor view.
      */


      var BlockInfo = /*#__PURE__*/function () {
        /**
        @internal
        */
        function BlockInfo(
        /**
        The start of the element in the document.
        */
        from,
        /**
        The length of the element.
        */
        length,
        /**
        The top position of the element.
        */
        top,
        /**
        Its height.
        */
        height,
        /**
        The type of element this is. When querying lines, this may be
        an array of all the blocks that make up the line.
        */
        type) {
          _classCallCheck(this, BlockInfo);

          this.from = from;
          this.length = length;
          this.top = top;
          this.height = height;
          this.type = type;
        }
        /**
        The end of the element as a document position.
        */


        _createClass(BlockInfo, [{
          key: "to",
          get: function get() {
            return this.from + this.length;
          }
          /**
          The bottom position of the element.
          */

        }, {
          key: "bottom",
          get: function get() {
            return this.top + this.height;
          }
          /**
          @internal
          */

        }, {
          key: "join",
          value: function join(other) {
            var detail = (Array.isArray(this.type) ? this.type : [this]).concat(Array.isArray(other.type) ? other.type : [other]);
            return new BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, detail);
          }
        }]);

        return BlockInfo;
      }();

      var QueryType = /*@__PURE__*/function (QueryType) {
        QueryType[QueryType["ByPos"] = 0] = "ByPos";
        QueryType[QueryType["ByHeight"] = 1] = "ByHeight";
        QueryType[QueryType["ByPosNoHeight"] = 2] = "ByPosNoHeight";
        return QueryType;
      }(QueryType || (QueryType = {}));

      var Epsilon = 1e-4;

      var HeightMap = /*#__PURE__*/function () {
        function HeightMap(length, // The number of characters covered
        height) {
          var flags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;

          _classCallCheck(this, HeightMap);

          this.length = length;
          this.height = height;
          this.flags = flags;
        }

        _createClass(HeightMap, [{
          key: "outdated",
          get: function get() {
            return (this.flags & 2
            /* Outdated */
            ) > 0;
          },
          set: function set(value) {
            this.flags = (value ? 2
            /* Outdated */
            : 0) | this.flags & ~2
            /* Outdated */
            ;
          }
        }, {
          key: "setHeight",
          value: function setHeight(oracle, height) {
            if (this.height != height) {
              if (Math.abs(this.height - height) > Epsilon) oracle.heightChanged = true;
              this.height = height;
            }
          } // Base case is to replace a leaf node, which simply builds a tree
          // from the new nodes and returns that (HeightMapBranch and
          // HeightMapGap override this to actually use from/to)

        }, {
          key: "replace",
          value: function replace(_from, _to, nodes) {
            return HeightMap.of(nodes);
          } // Again, these are base cases, and are overridden for branch and gap nodes.

        }, {
          key: "decomposeLeft",
          value: function decomposeLeft(_to, result) {
            result.push(this);
          }
        }, {
          key: "decomposeRight",
          value: function decomposeRight(_from, result) {
            result.push(this);
          }
        }, {
          key: "applyChanges",
          value: function applyChanges(decorations, oldDoc, oracle, changes) {
            var me = this;

            for (var _i63 = changes.length - 1; _i63 >= 0; _i63--) {
              var _changes$_i = changes[_i63],
                  fromA = _changes$_i.fromA,
                  toA = _changes$_i.toA,
                  fromB = _changes$_i.fromB,
                  toB = _changes$_i.toB;
              var start = me.lineAt(fromA, QueryType.ByPosNoHeight, oldDoc, 0, 0);
              var end = start.to >= toA ? start : me.lineAt(toA, QueryType.ByPosNoHeight, oldDoc, 0, 0);
              toB += end.to - toA;
              toA = end.to;

              while (_i63 > 0 && start.from <= changes[_i63 - 1].toA) {
                fromA = changes[_i63 - 1].fromA;
                fromB = changes[_i63 - 1].fromB;
                _i63--;
                if (fromA < start.from) start = me.lineAt(fromA, QueryType.ByPosNoHeight, oldDoc, 0, 0);
              }

              fromB += start.from - fromA;
              fromA = start.from;
              var nodes = NodeBuilder.build(oracle, decorations, fromB, toB);
              me = me.replace(fromA, toA, nodes);
            }

            return me.updateHeight(oracle, 0);
          }
        }], [{
          key: "empty",
          value: function empty() {
            return new HeightMapText(0, 0);
          } // nodes uses null values to indicate the position of line breaks.
          // There are never line breaks at the start or end of the array, or
          // two line breaks next to each other, and the array isn't allowed
          // to be empty (same restrictions as return value from the builder).

        }, {
          key: "of",
          value: function of(nodes) {
            if (nodes.length == 1) return nodes[0];
            var i = 0,
                j = nodes.length,
                before = 0,
                after = 0;

            for (;;) {
              if (i == j) {
                if (before > after * 2) {
                  var split = nodes[i - 1];
                  if (split["break"]) nodes.splice(--i, 1, split.left, null, split.right);else nodes.splice(--i, 1, split.left, split.right);
                  j += 1 + split["break"];
                  before -= split.size;
                } else if (after > before * 2) {
                  var _split = nodes[j];
                  if (_split["break"]) nodes.splice(j, 1, _split.left, null, _split.right);else nodes.splice(j, 1, _split.left, _split.right);
                  j += 2 + _split["break"];
                  after -= _split.size;
                } else {
                  break;
                }
              } else if (before < after) {
                var next = nodes[i++];
                if (next) before += next.size;
              } else {
                var _next3 = nodes[--j];
                if (_next3) after += _next3.size;
              }
            }

            var brk = 0;

            if (nodes[i - 1] == null) {
              brk = 1;
              i--;
            } else if (nodes[i] == null) {
              brk = 1;
              j++;
            }

            return new HeightMapBranch(HeightMap.of(nodes.slice(0, i)), brk, HeightMap.of(nodes.slice(j)));
          }
        }]);

        return HeightMap;
      }();

      HeightMap.prototype.size = 1;

      var HeightMapBlock = /*#__PURE__*/function (_HeightMap) {
        _inherits(HeightMapBlock, _HeightMap);

        var _super19 = _createSuper(HeightMapBlock);

        function HeightMapBlock(length, height, type) {
          var _this35;

          _classCallCheck(this, HeightMapBlock);

          _this35 = _super19.call(this, length, height);
          _this35.type = type;
          return _this35;
        }

        _createClass(HeightMapBlock, [{
          key: "blockAt",
          value: function blockAt(_height, _doc, top, offset) {
            return new BlockInfo(offset, this.length, top, this.height, this.type);
          }
        }, {
          key: "lineAt",
          value: function lineAt(_value, _type, doc, top, offset) {
            return this.blockAt(0, doc, top, offset);
          }
        }, {
          key: "forEachLine",
          value: function forEachLine(_from, _to, doc, top, offset, f) {
            f(this.blockAt(0, doc, top, offset));
          }
        }, {
          key: "updateHeight",
          value: function updateHeight(oracle) {
            var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            var _force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            var measured = arguments.length > 3 ? arguments[3] : undefined;
            if (measured && measured.from <= offset && measured.more) this.setHeight(oracle, measured.heights[measured.index++]);
            this.outdated = false;
            return this;
          }
        }, {
          key: "toString",
          value: function toString() {
            return "block(".concat(this.length, ")");
          }
        }]);

        return HeightMapBlock;
      }(HeightMap);

      var HeightMapText = /*#__PURE__*/function (_HeightMapBlock) {
        _inherits(HeightMapText, _HeightMapBlock);

        var _super20 = _createSuper(HeightMapText);

        function HeightMapText(length, height) {
          var _this36;

          _classCallCheck(this, HeightMapText);

          _this36 = _super20.call(this, length, height, BlockType.Text);
          _this36.collapsed = 0; // Amount of collapsed content in the line

          _this36.widgetHeight = 0; // Maximum inline widget height

          return _this36;
        }

        _createClass(HeightMapText, [{
          key: "replace",
          value: function replace(_from, _to, nodes) {
            var node = nodes[0];

            if (nodes.length == 1 && (node instanceof HeightMapText || node instanceof HeightMapGap && node.flags & 4
            /* SingleLine */
            ) && Math.abs(this.length - node.length) < 10) {
              if (node instanceof HeightMapGap) node = new HeightMapText(node.length, this.height);else node.height = this.height;
              if (!this.outdated) node.outdated = false;
              return node;
            } else {
              return HeightMap.of(nodes);
            }
          }
        }, {
          key: "updateHeight",
          value: function updateHeight(oracle) {
            var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            var measured = arguments.length > 3 ? arguments[3] : undefined;
            if (measured && measured.from <= offset && measured.more) this.setHeight(oracle, measured.heights[measured.index++]);else if (force || this.outdated) this.setHeight(oracle, Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)));
            this.outdated = false;
            return this;
          }
        }, {
          key: "toString",
          value: function toString() {
            return "line(".concat(this.length).concat(this.collapsed ? -this.collapsed : "").concat(this.widgetHeight ? ":" + this.widgetHeight : "", ")");
          }
        }]);

        return HeightMapText;
      }(HeightMapBlock);

      var HeightMapGap = /*#__PURE__*/function (_HeightMap2) {
        _inherits(HeightMapGap, _HeightMap2);

        var _super21 = _createSuper(HeightMapGap);

        function HeightMapGap(length) {
          _classCallCheck(this, HeightMapGap);

          return _super21.call(this, length, 0);
        }

        _createClass(HeightMapGap, [{
          key: "lines",
          value: function lines(doc, offset) {
            var firstLine = doc.lineAt(offset).number,
                lastLine = doc.lineAt(offset + this.length).number;
            return {
              firstLine: firstLine,
              lastLine: lastLine,
              lineHeight: this.height / (lastLine - firstLine + 1)
            };
          }
        }, {
          key: "blockAt",
          value: function blockAt(height, doc, top, offset) {
            var _this$lines = this.lines(doc, offset),
                firstLine = _this$lines.firstLine,
                lastLine = _this$lines.lastLine,
                lineHeight = _this$lines.lineHeight;

            var line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top) / lineHeight)));

            var _doc$line = doc.line(firstLine + line),
                from = _doc$line.from,
                length = _doc$line.length;

            return new BlockInfo(from, length, top + lineHeight * line, lineHeight, BlockType.Text);
          }
        }, {
          key: "lineAt",
          value: function lineAt(value, type, doc, top, offset) {
            if (type == QueryType.ByHeight) return this.blockAt(value, doc, top, offset);

            if (type == QueryType.ByPosNoHeight) {
              var _doc$lineAt = doc.lineAt(value),
                  _from2 = _doc$lineAt.from,
                  to = _doc$lineAt.to;

              return new BlockInfo(_from2, to - _from2, 0, 0, BlockType.Text);
            }

            var _this$lines2 = this.lines(doc, offset),
                firstLine = _this$lines2.firstLine,
                lineHeight = _this$lines2.lineHeight;

            var _doc$lineAt2 = doc.lineAt(value),
                from = _doc$lineAt2.from,
                length = _doc$lineAt2.length,
                number = _doc$lineAt2.number;

            return new BlockInfo(from, length, top + lineHeight * (number - firstLine), lineHeight, BlockType.Text);
          }
        }, {
          key: "forEachLine",
          value: function forEachLine(from, to, doc, top, offset, f) {
            var _this$lines3 = this.lines(doc, offset),
                firstLine = _this$lines3.firstLine,
                lineHeight = _this$lines3.lineHeight;

            for (var pos = Math.max(from, offset), end = Math.min(offset + this.length, to); pos <= end;) {
              var line = doc.lineAt(pos);
              if (pos == from) top += lineHeight * (line.number - firstLine);
              f(new BlockInfo(line.from, line.length, top, lineHeight, BlockType.Text));
              top += lineHeight;
              pos = line.to + 1;
            }
          }
        }, {
          key: "replace",
          value: function replace(from, to, nodes) {
            var after = this.length - to;

            if (after > 0) {
              var last = nodes[nodes.length - 1];
              if (last instanceof HeightMapGap) nodes[nodes.length - 1] = new HeightMapGap(last.length + after);else nodes.push(null, new HeightMapGap(after - 1));
            }

            if (from > 0) {
              var first = nodes[0];
              if (first instanceof HeightMapGap) nodes[0] = new HeightMapGap(from + first.length);else nodes.unshift(new HeightMapGap(from - 1), null);
            }

            return HeightMap.of(nodes);
          }
        }, {
          key: "decomposeLeft",
          value: function decomposeLeft(to, result) {
            result.push(new HeightMapGap(to - 1), null);
          }
        }, {
          key: "decomposeRight",
          value: function decomposeRight(from, result) {
            result.push(null, new HeightMapGap(this.length - from - 1));
          }
        }, {
          key: "updateHeight",
          value: function updateHeight(oracle) {
            var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            var measured = arguments.length > 3 ? arguments[3] : undefined;
            var end = offset + this.length;

            if (measured && measured.from <= offset + this.length && measured.more) {
              // Fill in part of this gap with measured lines. We know there
              // can't be widgets or collapsed ranges in those lines, because
              // they would already have been added to the heightmap (gaps
              // only contain plain text).
              var nodes = [],
                  pos = Math.max(offset, measured.from);
              if (measured.from > offset) nodes.push(new HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));

              while (pos <= end && measured.more) {
                var len = oracle.doc.lineAt(pos).length;
                if (nodes.length) nodes.push(null);
                var line = new HeightMapText(len, measured.heights[measured.index++]);
                line.outdated = false;
                nodes.push(line);
                pos += len + 1;
              }

              if (pos <= end) nodes.push(null, new HeightMapGap(end - pos).updateHeight(oracle, pos));
              oracle.heightChanged = true;
              return HeightMap.of(nodes);
            } else if (force || this.outdated) {
              this.setHeight(oracle, oracle.heightForGap(offset, offset + this.length));
              this.outdated = false;
            }

            return this;
          }
        }, {
          key: "toString",
          value: function toString() {
            return "gap(".concat(this.length, ")");
          }
        }]);

        return HeightMapGap;
      }(HeightMap);

      var HeightMapBranch = /*#__PURE__*/function (_HeightMap3) {
        _inherits(HeightMapBranch, _HeightMap3);

        var _super22 = _createSuper(HeightMapBranch);

        function HeightMapBranch(left, brk, right) {
          var _this37;

          _classCallCheck(this, HeightMapBranch);

          _this37 = _super22.call(this, left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2
          /* Outdated */
          : 0));
          _this37.left = left;
          _this37.right = right;
          _this37.size = left.size + right.size;
          return _this37;
        }

        _createClass(HeightMapBranch, [{
          key: "break",
          get: function get() {
            return this.flags & 1
            /* Break */
            ;
          }
        }, {
          key: "blockAt",
          value: function blockAt(height, doc, top, offset) {
            var mid = top + this.left.height;
            return height < mid || this.right.height == 0 ? this.left.blockAt(height, doc, top, offset) : this.right.blockAt(height, doc, mid, offset + this.left.length + this["break"]);
          }
        }, {
          key: "lineAt",
          value: function lineAt(value, type, doc, top, offset) {
            var rightTop = top + this.left.height,
                rightOffset = offset + this.left.length + this["break"];
            var left = type == QueryType.ByHeight ? value < rightTop || this.right.height == 0 : value < rightOffset;
            var base = left ? this.left.lineAt(value, type, doc, top, offset) : this.right.lineAt(value, type, doc, rightTop, rightOffset);
            if (this["break"] || (left ? base.to < rightOffset : base.from > rightOffset)) return base;
            var subQuery = type == QueryType.ByPosNoHeight ? QueryType.ByPosNoHeight : QueryType.ByPos;
            if (left) return base.join(this.right.lineAt(rightOffset, subQuery, doc, rightTop, rightOffset));else return this.left.lineAt(rightOffset, subQuery, doc, top, offset).join(base);
          }
        }, {
          key: "forEachLine",
          value: function forEachLine(from, to, doc, top, offset, f) {
            var rightTop = top + this.left.height,
                rightOffset = offset + this.left.length + this["break"];

            if (this["break"]) {
              if (from < rightOffset) this.left.forEachLine(from, to, doc, top, offset, f);
              if (to >= rightOffset) this.right.forEachLine(from, to, doc, rightTop, rightOffset, f);
            } else {
              var mid = this.lineAt(rightOffset, QueryType.ByPos, doc, top, offset);
              if (from < mid.from) this.left.forEachLine(from, mid.from - 1, doc, top, offset, f);
              if (mid.to >= from && mid.from <= to) f(mid);
              if (to > mid.to) this.right.forEachLine(mid.to + 1, to, doc, rightTop, rightOffset, f);
            }
          }
        }, {
          key: "replace",
          value: function replace(from, to, nodes) {
            var rightStart = this.left.length + this["break"];
            if (to < rightStart) return this.balanced(this.left.replace(from, to, nodes), this.right);
            if (from > this.left.length) return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));
            var result = [];
            if (from > 0) this.decomposeLeft(from, result);
            var left = result.length;

            var _iterator59 = _createForOfIteratorHelper(nodes),
                _step59;

            try {
              for (_iterator59.s(); !(_step59 = _iterator59.n()).done;) {
                var node = _step59.value;
                result.push(node);
              }
            } catch (err) {
              _iterator59.e(err);
            } finally {
              _iterator59.f();
            }

            if (from > 0) mergeGaps(result, left - 1);

            if (to < this.length) {
              var right = result.length;
              this.decomposeRight(to, result);
              mergeGaps(result, right);
            }

            return HeightMap.of(result);
          }
        }, {
          key: "decomposeLeft",
          value: function decomposeLeft(to, result) {
            var left = this.left.length;
            if (to <= left) return this.left.decomposeLeft(to, result);
            result.push(this.left);

            if (this["break"]) {
              left++;
              if (to >= left) result.push(null);
            }

            if (to > left) this.right.decomposeLeft(to - left, result);
          }
        }, {
          key: "decomposeRight",
          value: function decomposeRight(from, result) {
            var left = this.left.length,
                right = left + this["break"];
            if (from >= right) return this.right.decomposeRight(from - right, result);
            if (from < left) this.left.decomposeRight(from, result);
            if (this["break"] && from < right) result.push(null);
            result.push(this.right);
          }
        }, {
          key: "balanced",
          value: function balanced(left, right) {
            if (left.size > 2 * right.size || right.size > 2 * left.size) return HeightMap.of(this["break"] ? [left, null, right] : [left, right]);
            this.left = left;
            this.right = right;
            this.height = left.height + right.height;
            this.outdated = left.outdated || right.outdated;
            this.size = left.size + right.size;
            this.length = left.length + this["break"] + right.length;
            return this;
          }
        }, {
          key: "updateHeight",
          value: function updateHeight(oracle) {
            var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            var measured = arguments.length > 3 ? arguments[3] : undefined;
            var left = this.left,
                right = this.right,
                rightStart = offset + left.length + this["break"],
                rebalance = null;
            if (measured && measured.from <= offset + left.length && measured.more) rebalance = left = left.updateHeight(oracle, offset, force, measured);else left.updateHeight(oracle, offset, force);
            if (measured && measured.from <= rightStart + right.length && measured.more) rebalance = right = right.updateHeight(oracle, rightStart, force, measured);else right.updateHeight(oracle, rightStart, force);
            if (rebalance) return this.balanced(left, right);
            this.height = this.left.height + this.right.height;
            this.outdated = false;
            return this;
          }
        }, {
          key: "toString",
          value: function toString() {
            return this.left + (this["break"] ? " " : "-") + this.right;
          }
        }]);

        return HeightMapBranch;
      }(HeightMap);

      function mergeGaps(nodes, around) {
        var before, after;
        if (nodes[around] == null && (before = nodes[around - 1]) instanceof HeightMapGap && (after = nodes[around + 1]) instanceof HeightMapGap) nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
      }

      var relevantWidgetHeight = 5;

      var NodeBuilder = /*#__PURE__*/function () {
        function NodeBuilder(pos, oracle) {
          _classCallCheck(this, NodeBuilder);

          this.pos = pos;
          this.oracle = oracle;
          this.nodes = [];
          this.lineStart = -1;
          this.lineEnd = -1;
          this.covering = null;
          this.writtenTo = pos;
        }

        _createClass(NodeBuilder, [{
          key: "isCovered",
          get: function get() {
            return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
          }
        }, {
          key: "span",
          value: function span(_from, to) {
            if (this.lineStart > -1) {
              var end = Math.min(to, this.lineEnd),
                  last = this.nodes[this.nodes.length - 1];
              if (last instanceof HeightMapText) last.length += end - this.pos;else if (end > this.pos || !this.isCovered) this.nodes.push(new HeightMapText(end - this.pos, -1));
              this.writtenTo = end;

              if (to > end) {
                this.nodes.push(null);
                this.writtenTo++;
                this.lineStart = -1;
              }
            }

            this.pos = to;
          }
        }, {
          key: "point",
          value: function point(from, to, deco) {
            if (from < to || deco.heightRelevant) {
              var height = deco.widget ? Math.max(0, deco.widget.estimatedHeight) : 0;
              var len = to - from;

              if (deco.block) {
                this.addBlock(new HeightMapBlock(len, height, deco.type));
              } else if (len || height >= relevantWidgetHeight) {
                this.addLineDeco(height, len);
              }
            } else if (to > from) {
              this.span(from, to);
            }

            if (this.lineEnd > -1 && this.lineEnd < this.pos) this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
          }
        }, {
          key: "enterLine",
          value: function enterLine() {
            if (this.lineStart > -1) return;

            var _this$oracle$doc$line = this.oracle.doc.lineAt(this.pos),
                from = _this$oracle$doc$line.from,
                to = _this$oracle$doc$line.to;

            this.lineStart = from;
            this.lineEnd = to;

            if (this.writtenTo < from) {
              if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null) this.nodes.push(this.blankContent(this.writtenTo, from - 1));
              this.nodes.push(null);
            }

            if (this.pos > from) this.nodes.push(new HeightMapText(this.pos - from, -1));
            this.writtenTo = this.pos;
          }
        }, {
          key: "blankContent",
          value: function blankContent(from, to) {
            var gap = new HeightMapGap(to - from);
            if (this.oracle.doc.lineAt(from).to == to) gap.flags |= 4
            /* SingleLine */
            ;
            return gap;
          }
        }, {
          key: "ensureLine",
          value: function ensureLine() {
            this.enterLine();
            var last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
            if (last instanceof HeightMapText) return last;
            var line = new HeightMapText(0, -1);
            this.nodes.push(line);
            return line;
          }
        }, {
          key: "addBlock",
          value: function addBlock(block) {
            this.enterLine();
            if (block.type == BlockType.WidgetAfter && !this.isCovered) this.ensureLine();
            this.nodes.push(block);
            this.writtenTo = this.pos = this.pos + block.length;
            if (block.type != BlockType.WidgetBefore) this.covering = block;
          }
        }, {
          key: "addLineDeco",
          value: function addLineDeco(height, length) {
            var line = this.ensureLine();
            line.length += length;
            line.collapsed += length;
            line.widgetHeight = Math.max(line.widgetHeight, height);
            this.writtenTo = this.pos = this.pos + length;
          }
        }, {
          key: "finish",
          value: function finish(from) {
            var last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
            if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered) this.nodes.push(new HeightMapText(0, -1));else if (this.writtenTo < this.pos || last == null) this.nodes.push(this.blankContent(this.writtenTo, this.pos));
            var pos = from;

            var _iterator60 = _createForOfIteratorHelper(this.nodes),
                _step60;

            try {
              for (_iterator60.s(); !(_step60 = _iterator60.n()).done;) {
                var node = _step60.value;
                if (node instanceof HeightMapText) node.updateHeight(this.oracle, pos);
                pos += node ? node.length : 1;
              }
            } catch (err) {
              _iterator60.e(err);
            } finally {
              _iterator60.f();
            }

            return this.nodes;
          } // Always called with a region that on both sides either stretches
          // to a line break or the end of the document.
          // The returned array uses null to indicate line breaks, but never
          // starts or ends in a line break, or has multiple line breaks next
          // to each other.

        }], [{
          key: "build",
          value: function build(oracle, decorations, from, to) {
            var builder = new NodeBuilder(from, oracle);

            _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_2__["RangeSet"].spans(decorations, from, to, builder, 0);

            return builder.finish(from);
          }
        }]);

        return NodeBuilder;
      }();

      function heightRelevantDecoChanges(a, b, diff) {
        var comp = new DecorationComparator();

        _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_2__["RangeSet"].compare(a, b, diff, comp, 0);

        return comp.changes;
      }

      var DecorationComparator = /*#__PURE__*/function () {
        function DecorationComparator() {
          _classCallCheck(this, DecorationComparator);

          this.changes = [];
        }

        _createClass(DecorationComparator, [{
          key: "compareRange",
          value: function compareRange() {}
        }, {
          key: "comparePoint",
          value: function comparePoint(from, to, a, b) {
            if (from < to || a && a.heightRelevant || b && b.heightRelevant) addRange(from, to, this.changes, 5);
          }
        }]);

        return DecorationComparator;
      }();

      function visiblePixelRange(dom, paddingTop) {
        var rect = dom.getBoundingClientRect();
        var left = Math.max(0, rect.left),
            right = Math.min(innerWidth, rect.right);
        var top = Math.max(0, rect.top),
            bottom = Math.min(innerHeight, rect.bottom);

        for (var parent = dom.parentNode; parent;) {
          // (Cast to any because TypeScript is useless with Node types)
          if (parent.nodeType == 1) {
            var style = window.getComputedStyle(parent);

            if ((parent.scrollHeight > parent.clientHeight || parent.scrollWidth > parent.clientWidth) && style.overflow != "visible") {
              var parentRect = parent.getBoundingClientRect();
              left = Math.max(left, parentRect.left);
              right = Math.min(right, parentRect.right);
              top = Math.max(top, parentRect.top);
              bottom = Math.min(bottom, parentRect.bottom);
            }

            parent = style.position == "absolute" || style.position == "fixed" ? parent.offsetParent : parent.parentNode;
          } else if (parent.nodeType == 11) {
            // Shadow root
            parent = parent.host;
          } else {
            break;
          }
        }

        return {
          left: left - rect.left,
          right: right - rect.left,
          top: top - (rect.top + paddingTop),
          bottom: bottom - (rect.top + paddingTop)
        };
      } // Line gaps are placeholder widgets used to hide pieces of overlong
      // lines within the viewport, as a kludge to keep the editor
      // responsive when a ridiculously long line is loaded into it.


      var LineGap = /*#__PURE__*/function () {
        function LineGap(from, to, size) {
          _classCallCheck(this, LineGap);

          this.from = from;
          this.to = to;
          this.size = size;
        }

        _createClass(LineGap, [{
          key: "draw",
          value: function draw(wrapping) {
            return Decoration.replace({
              widget: new LineGapWidget(this.size, wrapping)
            }).range(this.from, this.to);
          }
        }], [{
          key: "same",
          value: function same(a, b) {
            if (a.length != b.length) return false;

            for (var _i64 = 0; _i64 < a.length; _i64++) {
              var gA = a[_i64],
                  gB = b[_i64];
              if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size) return false;
            }

            return true;
          }
        }]);

        return LineGap;
      }();

      var LineGapWidget = /*#__PURE__*/function (_WidgetType4) {
        _inherits(LineGapWidget, _WidgetType4);

        var _super23 = _createSuper(LineGapWidget);

        function LineGapWidget(size, vertical) {
          var _this38;

          _classCallCheck(this, LineGapWidget);

          _this38 = _super23.call(this);
          _this38.size = size;
          _this38.vertical = vertical;
          return _this38;
        }

        _createClass(LineGapWidget, [{
          key: "eq",
          value: function eq(other) {
            return other.size == this.size && other.vertical == this.vertical;
          }
        }, {
          key: "toDOM",
          value: function toDOM() {
            var elt = document.createElement("div");

            if (this.vertical) {
              elt.style.height = this.size + "px";
            } else {
              elt.style.width = this.size + "px";
              elt.style.height = "2px";
              elt.style.display = "inline-block";
            }

            return elt;
          }
        }, {
          key: "estimatedHeight",
          get: function get() {
            return this.vertical ? this.size : -1;
          }
        }]);

        return LineGapWidget;
      }(WidgetType);

      var ViewState = /*#__PURE__*/function () {
        function ViewState(state) {
          _classCallCheck(this, ViewState);

          this.state = state; // These are contentDOM-local coordinates

          this.pixelViewport = {
            left: 0,
            right: window.innerWidth,
            top: 0,
            bottom: 0
          };
          this.inView = true;
          this.paddingTop = 0;
          this.paddingBottom = 0;
          this.contentWidth = 0;
          this.heightOracle = new HeightOracle(); // See VP.MaxDOMHeight

          this.scaler = IdScaler;
          this.scrollTo = null; // Briefly set to true when printing, to disable viewport limiting

          this.printing = false;
          this.visibleRanges = []; // Cursor 'assoc' is only significant when the cursor is on a line
          // wrap point, where it must stick to the character that it is
          // associated with. Since browsers don't provide a reasonable
          // interface to set or query this, when a selection is set that
          // might cause this to be significant, this flag is set. The next
          // measure phase will check whether the cursor is on a line-wrapping
          // boundary and, if so, reset it to make sure it is positioned in
          // the right place.

          this.mustEnforceCursorAssoc = false;
          this.heightMap = HeightMap.empty().applyChanges(state.facet(decorations), _codemirror_text__WEBPACK_IMPORTED_MODULE_3__["Text"].empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);
          this.viewport = this.getViewport(0, null);
          this.updateForViewport();
          this.lineGaps = this.ensureLineGaps([]);
          this.lineGapDeco = Decoration.set(this.lineGaps.map(function (gap) {
            return gap.draw(false);
          }));
          this.computeVisibleRanges();
        }

        _createClass(ViewState, [{
          key: "updateForViewport",
          value: function updateForViewport() {
            var _this39 = this;

            var viewports = [this.viewport],
                main = this.state.selection.main;

            var _loop10 = function _loop10(_i65) {
              var pos = _i65 ? main.head : main.anchor;

              if (!viewports.some(function (_ref11) {
                var from = _ref11.from,
                    to = _ref11.to;
                return pos >= from && pos <= to;
              })) {
                var _this39$lineAt = _this39.lineAt(pos, 0),
                    from = _this39$lineAt.from,
                    to = _this39$lineAt.to;

                viewports.push(new Viewport(from, to));
              }
            };

            for (var _i65 = 0; _i65 <= 1; _i65++) {
              _loop10(_i65);
            }

            this.viewports = viewports.sort(function (a, b) {
              return a.from - b.from;
            });
            this.scaler = this.heightMap.height <= 7000000
            /* MaxDOMHeight */
            ? IdScaler : new BigScaler(this.heightOracle.doc, this.heightMap, this.viewports);
          }
        }, {
          key: "update",
          value: function update(_update8) {
            var scrollTo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var prev = this.state;
            this.state = _update8.state;
            var newDeco = this.state.facet(decorations);
            var contentChanges = _update8.changedRanges;
            var heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(_update8.startState.facet(decorations), newDeco, _update8 ? _update8.changes : _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["ChangeSet"].empty(this.state.doc.length)));
            var prevHeight = this.heightMap.height;
            this.heightMap = this.heightMap.applyChanges(newDeco, prev.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
            if (this.heightMap.height != prevHeight) _update8.flags |= 2
            /* Height */
            ;
            var viewport = heightChanges.length ? this.mapViewport(this.viewport, _update8.changes) : this.viewport;
            if (scrollTo && (scrollTo.head < viewport.from || scrollTo.head > viewport.to) || !this.viewportIsAppropriate(viewport)) viewport = this.getViewport(0, scrollTo);

            if (!viewport.eq(this.viewport)) {
              this.viewport = viewport;
              _update8.flags |= 4
              /* Viewport */
              ;
            }

            this.updateForViewport();
            if (this.lineGaps.length || this.viewport.to - this.viewport.from > 15000
            /* MinViewPort */
            ) _update8.flags |= this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, _update8.changes)));
            this.computeVisibleRanges();
            if (scrollTo) this.scrollTo = scrollTo;
            if (!this.mustEnforceCursorAssoc && _update8.selectionSet && _update8.view.lineWrapping && _update8.state.selection.main.empty && _update8.state.selection.main.assoc) this.mustEnforceCursorAssoc = true;
          }
        }, {
          key: "measure",
          value: function measure(docView, repeated) {
            var dom = docView.dom,
                whiteSpace = "",
                direction = Direction.LTR;

            if (!repeated) {
              // Vertical padding
              var style = window.getComputedStyle(dom);
              whiteSpace = style.whiteSpace, direction = style.direction == "rtl" ? Direction.RTL : Direction.LTR;
              this.paddingTop = parseInt(style.paddingTop) || 0;
              this.paddingBottom = parseInt(style.paddingBottom) || 0;
            } // Pixel viewport


            var pixelViewport = this.printing ? {
              top: -1e8,
              bottom: 1e8,
              left: -1e8,
              right: 1e8
            } : visiblePixelRange(dom, this.paddingTop);
            var dTop = pixelViewport.top - this.pixelViewport.top,
                dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
            this.pixelViewport = pixelViewport;
            this.inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
            if (!this.inView) return 0;
            var lineHeights = docView.measureVisibleLineHeights();
            var refresh = false,
                bias = 0,
                result = 0,
                oracle = this.heightOracle;

            if (!repeated) {
              var contentWidth = docView.dom.clientWidth;

              if (oracle.mustRefresh(lineHeights, whiteSpace, direction) || oracle.lineWrapping && Math.abs(contentWidth - this.contentWidth) > oracle.charWidth) {
                var _docView$measureTextS = docView.measureTextSize(),
                    lineHeight = _docView$measureTextS.lineHeight,
                    charWidth = _docView$measureTextS.charWidth;

                refresh = oracle.refresh(whiteSpace, direction, lineHeight, charWidth, contentWidth / charWidth, lineHeights);

                if (refresh) {
                  docView.minWidth = 0;
                  result |= 16
                  /* Geometry */
                  ;
                }
              }

              if (this.contentWidth != contentWidth) {
                this.contentWidth = contentWidth;
                result |= 16
                /* Geometry */
                ;
              }

              if (dTop > 0 && dBottom > 0) bias = Math.max(dTop, dBottom);else if (dTop < 0 && dBottom < 0) bias = Math.min(dTop, dBottom);
            }

            oracle.heightChanged = false;
            this.heightMap = this.heightMap.updateHeight(oracle, 0, refresh, new MeasuredHeights(this.viewport.from, lineHeights));
            if (oracle.heightChanged) result |= 2
            /* Height */
            ;

            if (!this.viewportIsAppropriate(this.viewport, bias) || this.scrollTo && (this.scrollTo.head < this.viewport.from || this.scrollTo.head > this.viewport.to)) {
              var newVP = this.getViewport(bias, this.scrollTo);

              if (newVP.from != this.viewport.from || newVP.to != this.viewport.to) {
                this.viewport = newVP;
                result |= 4
                /* Viewport */
                ;
              }
            }

            this.updateForViewport();
            if (this.lineGaps.length || this.viewport.to - this.viewport.from > 15000
            /* MinViewPort */
            ) result |= this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps));
            this.computeVisibleRanges();

            if (this.mustEnforceCursorAssoc) {
              this.mustEnforceCursorAssoc = false; // This is done in the read stage, because moving the selection
              // to a line end is going to trigger a layout anyway, so it
              // can't be a pure write. It should be rare that it does any
              // writing.

              docView.enforceCursorAssoc();
            }

            return result;
          }
        }, {
          key: "visibleTop",
          get: function get() {
            return this.scaler.fromDOM(this.pixelViewport.top, 0);
          }
        }, {
          key: "visibleBottom",
          get: function get() {
            return this.scaler.fromDOM(this.pixelViewport.bottom, 0);
          }
        }, {
          key: "getViewport",
          value: function getViewport(bias, scrollTo) {
            // This will divide VP.Margin between the top and the
            // bottom, depending on the bias (the change in viewport position
            // since the last update). It'll hold a number between 0 and 1
            var marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1000
            /* Margin */
            / 2));
            var map = this.heightMap,
                doc = this.state.doc,
                visibleTop = this.visibleTop,
                visibleBottom = this.visibleBottom;
            var viewport = new Viewport(map.lineAt(visibleTop - marginTop * 1000
            /* Margin */
            , QueryType.ByHeight, doc, 0, 0).from, map.lineAt(visibleBottom + (1 - marginTop) * 1000
            /* Margin */
            , QueryType.ByHeight, doc, 0, 0).to); // If scrollTo is given, make sure the viewport includes that position

            if (scrollTo) {
              if (scrollTo.head < viewport.from) {
                var _map$lineAt = map.lineAt(scrollTo.head, QueryType.ByPos, doc, 0, 0),
                    newTop = _map$lineAt.top;

                viewport = new Viewport(map.lineAt(newTop - 1000
                /* Margin */
                / 2, QueryType.ByHeight, doc, 0, 0).from, map.lineAt(newTop + (visibleBottom - visibleTop) + 1000
                /* Margin */
                / 2, QueryType.ByHeight, doc, 0, 0).to);
              } else if (scrollTo.head > viewport.to) {
                var _map$lineAt2 = map.lineAt(scrollTo.head, QueryType.ByPos, doc, 0, 0),
                    newBottom = _map$lineAt2.bottom;

                viewport = new Viewport(map.lineAt(newBottom - (visibleBottom - visibleTop) - 1000
                /* Margin */
                / 2, QueryType.ByHeight, doc, 0, 0).from, map.lineAt(newBottom + 1000
                /* Margin */
                / 2, QueryType.ByHeight, doc, 0, 0).to);
              }
            }

            return viewport;
          }
        }, {
          key: "mapViewport",
          value: function mapViewport(viewport, changes) {
            var from = changes.mapPos(viewport.from, -1),
                to = changes.mapPos(viewport.to, 1);
            return new Viewport(this.heightMap.lineAt(from, QueryType.ByPos, this.state.doc, 0, 0).from, this.heightMap.lineAt(to, QueryType.ByPos, this.state.doc, 0, 0).to);
          } // Checks if a given viewport covers the visible part of the
          // document and not too much beyond that.

        }, {
          key: "viewportIsAppropriate",
          value: function viewportIsAppropriate(_ref12) {
            var from = _ref12.from,
                to = _ref12.to;
            var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            var _this$heightMap$lineA = this.heightMap.lineAt(from, QueryType.ByPos, this.state.doc, 0, 0),
                top = _this$heightMap$lineA.top;

            var _this$heightMap$lineA2 = this.heightMap.lineAt(to, QueryType.ByPos, this.state.doc, 0, 0),
                bottom = _this$heightMap$lineA2.bottom;

            var visibleTop = this.visibleTop,
                visibleBottom = this.visibleBottom;
            return (from == 0 || top <= visibleTop - Math.max(10
            /* MinCoverMargin */
            , Math.min(-bias, 250
            /* MaxCoverMargin */
            ))) && (to == this.state.doc.length || bottom >= visibleBottom + Math.max(10
            /* MinCoverMargin */
            , Math.min(bias, 250
            /* MaxCoverMargin */
            ))) && top > visibleTop - 2 * 1000
            /* Margin */
            && bottom < visibleBottom + 2 * 1000
            /* Margin */
            ;
          }
        }, {
          key: "mapLineGaps",
          value: function mapLineGaps(gaps, changes) {
            if (!gaps.length || changes.empty) return gaps;
            var mapped = [];

            var _iterator61 = _createForOfIteratorHelper(gaps),
                _step61;

            try {
              for (_iterator61.s(); !(_step61 = _iterator61.n()).done;) {
                var gap = _step61.value;
                if (!changes.touchesRange(gap.from, gap.to)) mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size));
              }
            } catch (err) {
              _iterator61.e(err);
            } finally {
              _iterator61.f();
            }

            return mapped;
          } // Computes positions in the viewport where the start or end of a
          // line should be hidden, trying to reuse existing line gaps when
          // appropriate to avoid unneccesary redraws.
          // Uses crude character-counting for the positioning and sizing,
          // since actual DOM coordinates aren't always available and
          // predictable. Relies on generous margins (see LG.Margin) to hide
          // the artifacts this might produce from the user.

        }, {
          key: "ensureLineGaps",
          value: function ensureLineGaps(current) {
            var _this40 = this;

            var gaps = []; // This won't work at all in predominantly right-to-left text.

            if (this.heightOracle.direction != Direction.LTR) return gaps;
            this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.state.doc, 0, 0, function (line) {
              if (line.length < 10000
              /* Margin */
              ) return;
              var structure = lineStructure(line.from, line.to, _this40.state);
              if (structure.total < 10000
              /* Margin */
              ) return;
              var viewFrom, viewTo;

              if (_this40.heightOracle.lineWrapping) {
                if (line.from != _this40.viewport.from) viewFrom = line.from;else viewFrom = findPosition(structure, (_this40.visibleTop - line.top) / line.height);
                if (line.to != _this40.viewport.to) viewTo = line.to;else viewTo = findPosition(structure, (_this40.visibleBottom - line.top) / line.height);
              } else {
                var totalWidth = structure.total * _this40.heightOracle.charWidth;
                viewFrom = findPosition(structure, _this40.pixelViewport.left / totalWidth);
                viewTo = findPosition(structure, _this40.pixelViewport.right / totalWidth);
              }

              var sel = _this40.state.selection.main; // Make sure the gap doesn't cover a selection end

              if (sel.from <= viewFrom && sel.to >= line.from) viewFrom = sel.from;
              if (sel.from <= line.to && sel.to >= viewTo) viewTo = sel.to;
              var gapTo = viewFrom - 10000
              /* Margin */
              ,
                  gapFrom = viewTo + 10000
              /* Margin */
              ;
              if (gapTo > line.from + 5000
              /* HalfMargin */
              ) gaps.push(find(current, function (gap) {
                return gap.from == line.from && gap.to > gapTo - 5000
                /* HalfMargin */
                && gap.to < gapTo + 5000;
              }
              /* HalfMargin */
              ) || new LineGap(line.from, gapTo, _this40.gapSize(line, gapTo, true, structure)));
              if (gapFrom < line.to - 5000
              /* HalfMargin */
              ) gaps.push(find(current, function (gap) {
                return gap.to == line.to && gap.from > gapFrom - 5000
                /* HalfMargin */
                && gap.from < gapFrom + 5000;
              }
              /* HalfMargin */
              ) || new LineGap(gapFrom, line.to, _this40.gapSize(line, gapFrom, false, structure)));
            });
            return gaps;
          }
        }, {
          key: "gapSize",
          value: function gapSize(line, pos, start, structure) {
            if (this.heightOracle.lineWrapping) {
              var height = line.height * findFraction(structure, pos);
              return start ? height : line.height - height;
            } else {
              var ratio = findFraction(structure, pos);
              return structure.total * this.heightOracle.charWidth * (start ? ratio : 1 - ratio);
            }
          }
        }, {
          key: "updateLineGaps",
          value: function updateLineGaps(gaps) {
            var _this41 = this;

            if (!LineGap.same(gaps, this.lineGaps)) {
              this.lineGaps = gaps;
              this.lineGapDeco = Decoration.set(gaps.map(function (gap) {
                return gap.draw(_this41.heightOracle.lineWrapping);
              }));
              return 8
              /* LineGaps */
              ;
            }

            return 0;
          }
        }, {
          key: "computeVisibleRanges",
          value: function computeVisibleRanges() {
            var deco = this.state.facet(decorations);
            if (this.lineGaps.length) deco = deco.concat(this.lineGapDeco);
            var ranges = [];

            _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_2__["RangeSet"].spans(deco, this.viewport.from, this.viewport.to, {
              span: function span(from, to) {
                ranges.push({
                  from: from,
                  to: to
                });
              },
              point: function point() {}
            }, 20);

            this.visibleRanges = ranges;
          }
        }, {
          key: "lineAt",
          value: function lineAt(pos, editorTop) {
            editorTop += this.paddingTop;
            return scaleBlock(this.heightMap.lineAt(pos, QueryType.ByPos, this.state.doc, editorTop, 0), this.scaler, editorTop);
          }
        }, {
          key: "lineAtHeight",
          value: function lineAtHeight(height, editorTop) {
            editorTop += this.paddingTop;
            return scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height, editorTop), QueryType.ByHeight, this.state.doc, editorTop, 0), this.scaler, editorTop);
          }
        }, {
          key: "blockAtHeight",
          value: function blockAtHeight(height, editorTop) {
            editorTop += this.paddingTop;
            return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height, editorTop), this.state.doc, editorTop, 0), this.scaler, editorTop);
          }
        }, {
          key: "forEachLine",
          value: function forEachLine(from, to, f, editorTop) {
            var _this42 = this;

            editorTop += this.paddingTop;
            return this.heightMap.forEachLine(from, to, this.state.doc, editorTop, 0, this.scaler.scale == 1 ? f : function (b) {
              return f(scaleBlock(b, _this42.scaler, editorTop));
            });
          }
        }, {
          key: "contentHeight",
          get: function get() {
            return this.domHeight + this.paddingTop + this.paddingBottom;
          }
        }, {
          key: "domHeight",
          get: function get() {
            return this.scaler.toDOM(this.heightMap.height, this.paddingTop);
          }
        }]);

        return ViewState;
      }();
      /**
      Indicates the range of the document that is in the visible
      viewport.
      */


      var Viewport = /*#__PURE__*/function () {
        function Viewport(from, to) {
          _classCallCheck(this, Viewport);

          this.from = from;
          this.to = to;
        }

        _createClass(Viewport, [{
          key: "eq",
          value: function eq(b) {
            return this.from == b.from && this.to == b.to;
          }
        }]);

        return Viewport;
      }();

      function lineStructure(from, to, state) {
        var ranges = [],
            pos = from,
            total = 0;

        _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_2__["RangeSet"].spans(state.facet(decorations), from, to, {
          span: function span() {},
          point: function point(from, to) {
            if (from > pos) {
              ranges.push({
                from: pos,
                to: from
              });
              total += from - pos;
            }

            pos = to;
          }
        }, 20); // We're only interested in collapsed ranges of a significant size


        if (pos < to) {
          ranges.push({
            from: pos,
            to: to
          });
          total += to - pos;
        }

        return {
          total: total,
          ranges: ranges
        };
      }

      function findPosition(_ref13, ratio) {
        var total = _ref13.total,
            ranges = _ref13.ranges;
        if (ratio <= 0) return ranges[0].from;
        if (ratio >= 1) return ranges[ranges.length - 1].to;
        var dist = Math.floor(total * ratio);

        for (var _i66 = 0;; _i66++) {
          var _ranges$_i = ranges[_i66],
              from = _ranges$_i.from,
              to = _ranges$_i.to,
              size = to - from;
          if (dist <= size) return from + dist;
          dist -= size;
        }
      }

      function findFraction(structure, pos) {
        var counted = 0;

        var _iterator62 = _createForOfIteratorHelper(structure.ranges),
            _step62;

        try {
          for (_iterator62.s(); !(_step62 = _iterator62.n()).done;) {
            var _step62$value = _step62.value,
                from = _step62$value.from,
                to = _step62$value.to;

            if (pos <= to) {
              counted += pos - from;
              break;
            }

            counted += to - from;
          }
        } catch (err) {
          _iterator62.e(err);
        } finally {
          _iterator62.f();
        }

        return counted / structure.total;
      }

      function find(array, f) {
        var _iterator63 = _createForOfIteratorHelper(array),
            _step63;

        try {
          for (_iterator63.s(); !(_step63 = _iterator63.n()).done;) {
            var val = _step63.value;
            if (f(val)) return val;
          }
        } catch (err) {
          _iterator63.e(err);
        } finally {
          _iterator63.f();
        }

        return undefined;
      } // Don't scale when the document height is within the range of what
      // the DOM can handle.


      var IdScaler = {
        toDOM: function toDOM(n) {
          return n;
        },
        fromDOM: function fromDOM(n) {
          return n;
        },
        scale: 1
      }; // When the height is too big (> VP.MaxDOMHeight), scale down the
      // regions outside the viewports so that the total height is
      // VP.MaxDOMHeight.

      var BigScaler = /*#__PURE__*/function () {
        function BigScaler(doc, heightMap, viewports) {
          _classCallCheck(this, BigScaler);

          var vpHeight = 0,
              base = 0,
              domBase = 0;
          this.viewports = viewports.map(function (_ref14) {
            var from = _ref14.from,
                to = _ref14.to;
            var top = heightMap.lineAt(from, QueryType.ByPos, doc, 0, 0).top;
            var bottom = heightMap.lineAt(to, QueryType.ByPos, doc, 0, 0).bottom;
            vpHeight += bottom - top;
            return {
              from: from,
              to: to,
              top: top,
              bottom: bottom,
              domTop: 0,
              domBottom: 0
            };
          });
          this.scale = (7000000
          /* MaxDOMHeight */
          - vpHeight) / (heightMap.height - vpHeight);

          var _iterator64 = _createForOfIteratorHelper(this.viewports),
              _step64;

          try {
            for (_iterator64.s(); !(_step64 = _iterator64.n()).done;) {
              var obj = _step64.value;
              obj.domTop = domBase + (obj.top - base) * this.scale;
              domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);
              base = obj.bottom;
            }
          } catch (err) {
            _iterator64.e(err);
          } finally {
            _iterator64.f();
          }
        }

        _createClass(BigScaler, [{
          key: "toDOM",
          value: function toDOM(n, top) {
            n -= top;

            for (var _i67 = 0, base = 0, domBase = 0;; _i67++) {
              var vp = _i67 < this.viewports.length ? this.viewports[_i67] : null;
              if (!vp || n < vp.top) return domBase + (n - base) * this.scale + top;
              if (n <= vp.bottom) return vp.domTop + (n - vp.top) + top;
              base = vp.bottom;
              domBase = vp.domBottom;
            }
          }
        }, {
          key: "fromDOM",
          value: function fromDOM(n, top) {
            n -= top;

            for (var _i68 = 0, base = 0, domBase = 0;; _i68++) {
              var vp = _i68 < this.viewports.length ? this.viewports[_i68] : null;
              if (!vp || n < vp.domTop) return base + (n - domBase) / this.scale + top;
              if (n <= vp.domBottom) return vp.top + (n - vp.domTop) + top;
              base = vp.bottom;
              domBase = vp.domBottom;
            }
          }
        }]);

        return BigScaler;
      }();

      function scaleBlock(block, scaler, top) {
        if (scaler.scale == 1) return block;
        var bTop = scaler.toDOM(block.top, top),
            bBottom = scaler.toDOM(block.bottom, top);
        return new BlockInfo(block.from, block.length, bTop, bBottom - bTop, Array.isArray(block.type) ? block.type.map(function (b) {
          return scaleBlock(b, scaler, top);
        }) : block.type);
      }

      var _theme = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Facet"].define({
        combine: function combine(strs) {
          return strs.join(" ");
        }
      });

      var darkTheme = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Facet"].define({
        combine: function combine(values) {
          return values.indexOf(true) > -1;
        }
      });

      var baseThemeID = /*@__PURE__*/style_mod__WEBPACK_IMPORTED_MODULE_1__["StyleModule"].newName(),
          baseLightID = /*@__PURE__*/style_mod__WEBPACK_IMPORTED_MODULE_1__["StyleModule"].newName(),
          baseDarkID = /*@__PURE__*/style_mod__WEBPACK_IMPORTED_MODULE_1__["StyleModule"].newName();
      var lightDarkIDs = {
        "&light": "." + baseLightID,
        "&dark": "." + baseDarkID
      };

      function buildTheme(main, spec, scopes) {
        return new style_mod__WEBPACK_IMPORTED_MODULE_1__["StyleModule"](spec, {
          finish: function finish(sel) {
            return /&/.test(sel) ? sel.replace(/&\w*/, function (m) {
              if (m == "&") return main;
              if (!scopes || !scopes[m]) throw new RangeError("Unsupported selector: ".concat(m));
              return scopes[m];
            }) : main + " " + sel;
          }
        });
      }

      var baseTheme = /*@__PURE__*/buildTheme("." + baseThemeID, {
        "&": {
          position: "relative !important",
          boxSizing: "border-box",
          "&.cm-focused": {
            // Provide a simple default outline to make sure a focused
            // editor is visually distinct. Can't leave the default behavior
            // because that will apply to the content element, which is
            // inside the scrollable container and doesn't include the
            // gutters. We also can't use an 'auto' outline, since those
            // are, for some reason, drawn behind the element content, which
            // will cause things like the active line background to cover
            // the outline (#297).
            outline: "1px dotted #212121"
          },
          display: "flex !important",
          flexDirection: "column"
        },
        ".cm-scroller": {
          display: "flex !important",
          alignItems: "flex-start !important",
          fontFamily: "monospace",
          lineHeight: 1.4,
          height: "100%",
          overflowX: "auto",
          position: "relative",
          zIndex: 0
        },
        ".cm-content": {
          margin: 0,
          flexGrow: 2,
          minHeight: "100%",
          display: "block",
          whiteSpace: "pre",
          wordWrap: "normal",
          boxSizing: "border-box",
          padding: "4px 0",
          outline: "none"
        },
        ".cm-lineWrapping": {
          whiteSpace: "pre-wrap",
          wordBreak: "break-word",
          overflowWrap: "anywhere"
        },
        "&light .cm-content": {
          caretColor: "black"
        },
        "&dark .cm-content": {
          caretColor: "white"
        },
        ".cm-line": {
          display: "block",
          padding: "0 2px 0 4px"
        },
        ".cm-selectionLayer": {
          zIndex: -1,
          contain: "size style"
        },
        ".cm-selectionBackground": {
          position: "absolute"
        },
        "&light .cm-selectionBackground": {
          background: "#d9d9d9"
        },
        "&dark .cm-selectionBackground": {
          background: "#222"
        },
        "&light.cm-focused .cm-selectionBackground": {
          background: "#d7d4f0"
        },
        "&dark.cm-focused .cm-selectionBackground": {
          background: "#233"
        },
        ".cm-cursorLayer": {
          zIndex: 100,
          contain: "size style",
          pointerEvents: "none"
        },
        "&.cm-focused .cm-cursorLayer": {
          animation: "steps(1) cm-blink 1.2s infinite"
        },
        // Two animations defined so that we can switch between them to
        // restart the animation without forcing another style
        // recomputation.
        "@keyframes cm-blink": {
          "0%": {},
          "50%": {
            visibility: "hidden"
          },
          "100%": {}
        },
        "@keyframes cm-blink2": {
          "0%": {},
          "50%": {
            visibility: "hidden"
          },
          "100%": {}
        },
        ".cm-cursor": {
          position: "absolute",
          borderLeft: "1.2px solid black",
          marginLeft: "-0.6px",
          pointerEvents: "none",
          display: "none"
        },
        "&dark .cm-cursor": {
          borderLeftColor: "#444"
        },
        "&.cm-focused .cm-cursor": {
          display: "block"
        },
        "&light .cm-activeLine": {
          backgroundColor: "#f3f9ff"
        },
        "&dark .cm-activeLine": {
          backgroundColor: "#223039"
        },
        "&light .cm-specialChar": {
          color: "red"
        },
        "&dark .cm-specialChar": {
          color: "#f78"
        },
        ".cm-tab": {
          display: "inline-block",
          overflow: "hidden",
          verticalAlign: "bottom"
        },
        ".cm-placeholder": {
          color: "#888",
          display: "inline-block"
        },
        ".cm-button": {
          verticalAlign: "middle",
          color: "inherit",
          fontSize: "70%",
          padding: ".2em 1em",
          borderRadius: "3px"
        },
        "&light .cm-button": {
          backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
          border: "1px solid #888",
          "&:active": {
            backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
          }
        },
        "&dark .cm-button": {
          backgroundImage: "linear-gradient(#393939, #111)",
          border: "1px solid #888",
          "&:active": {
            backgroundImage: "linear-gradient(#111, #333)"
          }
        },
        ".cm-textfield": {
          verticalAlign: "middle",
          color: "inherit",
          fontSize: "70%",
          border: "1px solid silver",
          padding: ".2em .5em"
        },
        "&light .cm-textfield": {
          backgroundColor: "white"
        },
        "&dark .cm-textfield": {
          border: "1px solid #555",
          backgroundColor: "inherit"
        }
      }, lightDarkIDs);
      var observeOptions = {
        childList: true,
        characterData: true,
        subtree: true,
        attributes: true,
        characterDataOldValue: true
      }; // IE11 has very broken mutation observers, so we also listen to
      // DOMCharacterDataModified there

      var useCharData = browser.ie && browser.ie_version <= 11;

      var DOMObserver = /*#__PURE__*/function () {
        function DOMObserver(view, onChange, onScrollChanged) {
          var _this43 = this;

          _classCallCheck(this, DOMObserver);

          this.view = view;
          this.onChange = onChange;
          this.onScrollChanged = onScrollChanged;
          this.active = false;
          this.ignoreSelection = new DOMSelection();
          this.delayedFlush = -1;
          this.queue = [];
          this.lastFlush = 0;
          this.scrollTargets = [];
          this.intersection = null;
          this.intersecting = false; // Used to work around a Safari Selection/shadow DOM bug (#414)

          this._selectionRange = null; // Timeout for scheduling check of the parents that need scroll handlers

          this.parentCheck = -1;
          this.dom = view.contentDOM;
          this.observer = new MutationObserver(function (mutations) {
            var _iterator65 = _createForOfIteratorHelper(mutations),
                _step65;

            try {
              for (_iterator65.s(); !(_step65 = _iterator65.n()).done;) {
                var mut = _step65.value;

                _this43.queue.push(mut);
              }
            } catch (err) {
              _iterator65.e(err);
            } finally {
              _iterator65.f();
            }

            _this43._selectionRange = null; // IE11 will sometimes (on typing over a selection or
            // backspacing out a single character text node) call the
            // observer callback before actually updating the DOM.
            //
            // Unrelatedly, iOS Safari will, when ending a composition,
            // sometimes first clear it, deliver the mutations, and then
            // reinsert the finished text. CodeMirror's handling of the
            // deletion will prevent the reinsertion from happening,
            // breaking composition.

            if ((browser.ie && browser.ie_version <= 11 || browser.ios && view.composing) && mutations.some(function (m) {
              return m.type == "childList" && m.removedNodes.length || m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length;
            })) _this43.flushSoon();else _this43.flush();
          });
          if (useCharData) this.onCharData = function (event) {
            _this43.queue.push({
              target: event.target,
              type: "characterData",
              oldValue: event.prevValue
            });

            _this43.flushSoon();
          };
          this.onSelectionChange = this.onSelectionChange.bind(this);
          this.start();
          this.onScroll = this.onScroll.bind(this);
          window.addEventListener("scroll", this.onScroll);

          if (typeof IntersectionObserver == "function") {
            this.intersection = new IntersectionObserver(function (entries) {
              if (_this43.parentCheck < 0) _this43.parentCheck = setTimeout(_this43.listenForScroll.bind(_this43), 1000);

              if (entries[entries.length - 1].intersectionRatio > 0 != _this43.intersecting) {
                _this43.intersecting = !_this43.intersecting;
                if (_this43.intersecting != _this43.view.inView) _this43.onScrollChanged(document.createEvent("Event"));
              }
            }, {});
            this.intersection.observe(this.dom);
          }

          this.listenForScroll();
        }

        _createClass(DOMObserver, [{
          key: "onScroll",
          value: function onScroll(e) {
            if (this.intersecting) this.flush();
            this.onScrollChanged(e);
          }
        }, {
          key: "onSelectionChange",
          value: function onSelectionChange(event) {
            if (this.lastFlush < Date.now() - 50) this._selectionRange = null;
            var view = this.view,
                sel = this.selectionRange;
            if (view.state.facet(editable) ? view.root.activeElement != this.dom : !hasSelection(view.dom, sel)) return;
            var context = sel.anchorNode && view.docView.nearest(sel.anchorNode);
            if (context && context.ignoreEvent(event)) return; // Deletions on IE11 fire their events in the wrong order, giving
            // us a selection change event before the DOM changes are
            // reported.
            // (Selection.isCollapsed isn't reliable on IE)

            if (browser.ie && browser.ie_version <= 11 && !view.state.selection.main.empty && sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset)) this.flushSoon();else this.flush();
          }
        }, {
          key: "selectionRange",
          get: function get() {
            if (!this._selectionRange) {
              var root = this.view.root,
                  sel = getSelection(root); // The Selection object is broken in shadow roots in Safari. See
              // https://github.com/codemirror/codemirror.next/issues/414

              if (browser.safari && root.nodeType == 11 && deepActiveElement() == this.view.contentDOM) sel = safariSelectionRangeHack(this.view) || sel;
              this._selectionRange = sel;
            }

            return this._selectionRange;
          }
        }, {
          key: "setSelectionRange",
          value: function setSelectionRange(anchor, head) {
            var _a;

            if (!((_a = this._selectionRange) === null || _a === void 0 ? void 0 : _a.type)) this._selectionRange = {
              anchorNode: anchor.node,
              anchorOffset: anchor.offset,
              focusNode: head.node,
              focusOffset: head.offset
            };
          }
        }, {
          key: "listenForScroll",
          value: function listenForScroll() {
            this.parentCheck = -1;
            var i = 0,
                changed = null;

            for (var dom = this.dom; dom;) {
              if (dom.nodeType == 1) {
                if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom) i++;else if (!changed) changed = this.scrollTargets.slice(0, i);
                if (changed) changed.push(dom);
                dom = dom.assignedSlot || dom.parentNode;
              } else if (dom.nodeType == 11) {
                // Shadow root
                dom = dom.host;
              } else {
                break;
              }
            }

            if (i < this.scrollTargets.length && !changed) changed = this.scrollTargets.slice(0, i);

            if (changed) {
              var _iterator66 = _createForOfIteratorHelper(this.scrollTargets),
                  _step66;

              try {
                for (_iterator66.s(); !(_step66 = _iterator66.n()).done;) {
                  var _dom2 = _step66.value;

                  _dom2.removeEventListener("scroll", this.onScroll);
                }
              } catch (err) {
                _iterator66.e(err);
              } finally {
                _iterator66.f();
              }

              var _iterator67 = _createForOfIteratorHelper(this.scrollTargets = changed),
                  _step67;

              try {
                for (_iterator67.s(); !(_step67 = _iterator67.n()).done;) {
                  var _dom3 = _step67.value;

                  _dom3.addEventListener("scroll", this.onScroll);
                }
              } catch (err) {
                _iterator67.e(err);
              } finally {
                _iterator67.f();
              }
            }
          }
        }, {
          key: "ignore",
          value: function ignore(f) {
            if (!this.active) return f();

            try {
              this.stop();
              return f();
            } finally {
              this.start();
              this.clear();
            }
          }
        }, {
          key: "start",
          value: function start() {
            if (this.active) return;
            this.observer.observe(this.dom, observeOptions);
            this.dom.ownerDocument.addEventListener("selectionchange", this.onSelectionChange);
            if (useCharData) this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
            this.active = true;
          }
        }, {
          key: "stop",
          value: function stop() {
            if (!this.active) return;
            this.active = false;
            this.observer.disconnect();
            this.dom.ownerDocument.removeEventListener("selectionchange", this.onSelectionChange);
            if (useCharData) this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
          }
        }, {
          key: "clearSelection",
          value: function clearSelection() {
            this.ignoreSelection.set(this.selectionRange);
          } // Throw away any pending changes

        }, {
          key: "clear",
          value: function clear() {
            this.observer.takeRecords();
            this.queue.length = 0;
            this.clearSelection();
          }
        }, {
          key: "flushSoon",
          value: function flushSoon() {
            var _this44 = this;

            if (this.delayedFlush < 0) this.delayedFlush = window.setTimeout(function () {
              _this44.delayedFlush = -1;

              _this44.flush();
            }, 20);
          }
        }, {
          key: "forceFlush",
          value: function forceFlush() {
            if (this.delayedFlush >= 0) {
              window.clearTimeout(this.delayedFlush);
              this.delayedFlush = -1;
              this.flush();
            }
          } // Apply pending changes, if any

        }, {
          key: "flush",
          value: function flush() {
            var _this45 = this;

            if (this.delayedFlush >= 0) return;
            this.lastFlush = Date.now();
            var records = this.queue;

            var _iterator68 = _createForOfIteratorHelper(this.observer.takeRecords()),
                _step68;

            try {
              for (_iterator68.s(); !(_step68 = _iterator68.n()).done;) {
                var mut = _step68.value;
                records.push(mut);
              }
            } catch (err) {
              _iterator68.e(err);
            } finally {
              _iterator68.f();
            }

            if (records.length) this.queue = [];
            var selection = this.selectionRange;
            var newSel = !this.ignoreSelection.eq(selection) && hasSelection(this.dom, selection);
            if (records.length == 0 && !newSel) return;
            var from = -1,
                to = -1,
                typeOver = false;

            var _iterator69 = _createForOfIteratorHelper(records),
                _step69;

            try {
              for (_iterator69.s(); !(_step69 = _iterator69.n()).done;) {
                var record = _step69.value;
                var range = this.readMutation(record);
                if (!range) continue;
                if (range.typeOver) typeOver = true;

                if (from == -1) {
                  from = range.from;
                  to = range.to;
                } else {
                  from = Math.min(range.from, from);
                  to = Math.max(range.to, to);
                }
              }
            } catch (err) {
              _iterator69.e(err);
            } finally {
              _iterator69.f();
            }

            var startState = this.view.state;
            if (from > -1 || newSel) this.onChange(from, to, typeOver);

            if (this.view.state == startState) {
              // The view wasn't updated
              if (this.view.docView.dirty) {
                this.ignore(function () {
                  return _this45.view.docView.sync();
                });
                this.view.docView.dirty = 0
                /* Not */
                ;
              }

              if (newSel) this.view.docView.updateSelection();
            }

            this.clearSelection();
          }
        }, {
          key: "readMutation",
          value: function readMutation(rec) {
            var cView = this.view.docView.nearest(rec.target);
            if (!cView || cView.ignoreMutation(rec)) return null;
            cView.markDirty(rec.type == "attributes");
            if (rec.type == "attributes") cView.dirty |= 4
            /* Attrs */
            ;

            if (rec.type == "childList") {
              var childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
              var childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
              return {
                from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
                to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd,
                typeOver: false
              };
            } else if (rec.type == "characterData") {
              return {
                from: cView.posAtStart,
                to: cView.posAtEnd,
                typeOver: rec.target.nodeValue == rec.oldValue
              };
            } else {
              return null;
            }
          }
        }, {
          key: "destroy",
          value: function destroy() {
            this.stop();
            if (this.intersection) this.intersection.disconnect();

            var _iterator70 = _createForOfIteratorHelper(this.scrollTargets),
                _step70;

            try {
              for (_iterator70.s(); !(_step70 = _iterator70.n()).done;) {
                var dom = _step70.value;
                dom.removeEventListener("scroll", this.onScroll);
              }
            } catch (err) {
              _iterator70.e(err);
            } finally {
              _iterator70.f();
            }

            window.removeEventListener("scroll", this.onScroll);
            clearTimeout(this.parentCheck);
          }
        }]);

        return DOMObserver;
      }();

      function findChild(cView, dom, dir) {
        while (dom) {
          var curView = ContentView.get(dom);
          if (curView && curView.parent == cView) return curView;
          var parent = dom.parentNode;
          dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
        }

        return null;
      }

      function safariSelectionRangeHack(view) {
        var found = null; // Because Safari (at least in 2018-2021) doesn't provide regular
        // access to the selection inside a shadowroot, we have to perform a
        // ridiculous hack to get at it—using `execCommand` to trigger a
        // `beforeInput` event so that we can read the target range from the
        // event.

        function read(event) {
          event.preventDefault();
          event.stopImmediatePropagation();
          found = event.getTargetRanges()[0];
        }

        view.contentDOM.addEventListener("beforeinput", read, true);
        document.execCommand("indent");
        view.contentDOM.removeEventListener("beforeinput", read, true);
        if (!found) return null;
        var anchorNode = found.startContainer,
            anchorOffset = found.startOffset;
        var focusNode = found.endContainer,
            focusOffset = found.endOffset;
        var curAnchor = view.docView.domAtPos(view.state.selection.main.anchor); // Since such a range doesn't distinguish between anchor and head,
        // use a heuristic that flips it around if its end matches the
        // current anchor.

        if (isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset)) {
          var _ref15 = [focusNode, focusOffset, anchorNode, anchorOffset];
          anchorNode = _ref15[0];
          anchorOffset = _ref15[1];
          focusNode = _ref15[2];
          focusOffset = _ref15[3];
        }

        return {
          anchorNode: anchorNode,
          anchorOffset: anchorOffset,
          focusNode: focusNode,
          focusOffset: focusOffset
        };
      }

      function applyDOMChange(view, start, end, typeOver) {
        var change, newSel;
        var sel = view.state.selection.main,
            bounds;

        if (start > -1 && !view.state.readOnly && (bounds = view.docView.domBoundsAround(start, end, 0))) {
          var _bounds = bounds,
              from = _bounds.from,
              to = _bounds.to;
          var selPoints = view.docView.impreciseHead || view.docView.impreciseAnchor ? [] : selectionPoints(view);
          var reader = new DOMReader(selPoints, view);
          reader.readRange(bounds.startDOM, bounds.endDOM);
          newSel = selectionFromPoints(selPoints, from);
          var preferredPos = sel.from,
              preferredSide = null; // Prefer anchoring to end when Backspace is pressed (or, on
          // Android, when something was deleted)

          if (view.inputState.lastKeyCode === 8 && view.inputState.lastKeyTime > Date.now() - 100 || browser.android && reader.text.length < to - from) {
            preferredPos = sel.to;
            preferredSide = "end";
          }

          var diff = findDiff(view.state.sliceDoc(from, to), reader.text, preferredPos - from, preferredSide);
          if (diff) change = {
            from: from + diff.from,
            to: from + diff.toA,
            insert: view.state.toText(reader.text.slice(diff.from, diff.toB))
          };
        } else if (view.hasFocus || !view.state.facet(editable)) {
          var domSel = view.observer.selectionRange;
          var _view$docView = view.docView,
              iHead = _view$docView.impreciseHead,
              iAnchor = _view$docView.impreciseAnchor;
          var head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset || !contains(view.contentDOM, domSel.focusNode) ? view.state.selection.main.head : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
          var anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset || !contains(view.contentDOM, domSel.anchorNode) ? view.state.selection.main.anchor : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
          if (head != sel.head || anchor != sel.anchor) newSel = _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].single(anchor, head);
        }

        if (!change && !newSel) return; // Heuristic to notice typing over a selected character

        if (!change && typeOver && !sel.empty && newSel && newSel.main.empty) change = {
          from: sel.from,
          to: sel.to,
          insert: view.state.doc.slice(sel.from, sel.to)
        }; // If the change is inside the selection and covers most of it,
        // assume it is a selection replace (with identical characters at
        // the start/end not included in the diff)
        else if (change && change.from >= sel.from && change.to <= sel.to && (change.from != sel.from || change.to != sel.to) && sel.to - sel.from - (change.to - change.from) <= 4) change = {
          from: sel.from,
          to: sel.to,
          insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))
        };

        if (change) {
          var startState = view.state; // Android browsers don't fire reasonable key events for enter,
          // backspace, or delete. So this detects changes that look like
          // they're caused by those keys, and reinterprets them as key
          // events.

          if (browser.android && (change.from == sel.from && change.to == sel.to && change.insert.length == 1 && change.insert.lines == 2 && dispatchKey(view.contentDOM, "Enter", 13) || change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 && dispatchKey(view.contentDOM, "Backspace", 8) || change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 && dispatchKey(view.contentDOM, "Delete", 46)) || browser.ios && view.inputState.flushIOSKey(view)) return;
          var text = change.insert.toString();
          if (view.state.facet(inputHandler).some(function (h) {
            return h(view, change.from, change.to, text);
          })) return;
          if (view.inputState.composing >= 0) view.inputState.composing++;
          var tr;

          if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 && (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length)) {
            var before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : "";
            var after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : "";
            tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, undefined, view.state.lineBreak) + after));
          } else {
            var changes = startState.changes(change);
            tr = {
              changes: changes,
              selection: newSel && !startState.selection.main.eq(newSel.main) && newSel.main.to <= changes.newLength ? startState.selection.replaceRange(newSel.main) : undefined
            };
          }

          var userEvent = "input.type";

          if (view.composing) {
            userEvent += ".compose";

            if (view.inputState.compositionFirstChange) {
              userEvent += ".start";
              view.inputState.compositionFirstChange = false;
            }
          }

          view.dispatch(tr, {
            scrollIntoView: true,
            userEvent: userEvent
          });
        } else if (newSel && !newSel.main.eq(sel)) {
          var scrollIntoView = false,
              _userEvent = "select";

          if (view.inputState.lastSelectionTime > Date.now() - 50) {
            if (view.inputState.lastSelectionOrigin == "select") scrollIntoView = true;
            _userEvent = view.inputState.lastSelectionOrigin;
          }

          view.dispatch({
            selection: newSel,
            scrollIntoView: scrollIntoView,
            userEvent: _userEvent
          });
        }
      }

      function findDiff(a, b, preferredPos, preferredSide) {
        var minLen = Math.min(a.length, b.length);
        var from = 0;

        while (from < minLen && a.charCodeAt(from) == b.charCodeAt(from)) {
          from++;
        }

        if (from == minLen && a.length == b.length) return null;
        var toA = a.length,
            toB = b.length;

        while (toA > 0 && toB > 0 && a.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {
          toA--;
          toB--;
        }

        if (preferredSide == "end") {
          var adjust = Math.max(0, from - Math.min(toA, toB));
          preferredPos -= toA + adjust - from;
        }

        if (toA < from && a.length < b.length) {
          var move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;
          from -= move;
          toB = from + (toB - toA);
          toA = from;
        } else if (toB < from) {
          var _move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;

          from -= _move;
          toA = from + (toA - toB);
          toB = from;
        }

        return {
          from: from,
          toA: toA,
          toB: toB
        };
      }

      var DOMReader = /*#__PURE__*/function () {
        function DOMReader(points, view) {
          _classCallCheck(this, DOMReader);

          this.points = points;
          this.view = view;
          this.text = "";
          this.lineBreak = view.state.lineBreak;
        }

        _createClass(DOMReader, [{
          key: "readRange",
          value: function readRange(start, end) {
            if (!start) return;
            var parent = start.parentNode;

            for (var cur = start;;) {
              this.findPointBefore(parent, cur);
              this.readNode(cur);
              var next = cur.nextSibling;
              if (next == end) break;
              var view = ContentView.get(cur),
                  nextView = ContentView.get(next);
              if ((view ? view.breakAfter : isBlockElement(cur)) || (nextView ? nextView.breakAfter : isBlockElement(next)) && !(cur.nodeName == "BR" && !cur.cmIgnore)) this.text += this.lineBreak;
              cur = next;
            }

            this.findPointBefore(parent, end);
          }
        }, {
          key: "readNode",
          value: function readNode(node) {
            if (node.cmIgnore) return;
            var view = ContentView.get(node);
            var fromView = view && view.overrideDOMText;
            var text;
            if (fromView != null) text = fromView.sliceString(0, undefined, this.lineBreak);else if (node.nodeType == 3) text = node.nodeValue;else if (node.nodeName == "BR") text = node.nextSibling ? this.lineBreak : "";else if (node.nodeType == 1) this.readRange(node.firstChild, null);

            if (text != null) {
              this.findPointIn(node, text.length);
              this.text += text; // Chrome inserts two newlines when pressing shift-enter at the
              // end of a line. This drops one of those.

              if (browser.chrome && this.view.inputState.lastKeyCode == 13 && !node.nextSibling && /\n\n$/.test(this.text)) this.text = this.text.slice(0, -1);
            }
          }
        }, {
          key: "findPointBefore",
          value: function findPointBefore(node, next) {
            var _iterator71 = _createForOfIteratorHelper(this.points),
                _step71;

            try {
              for (_iterator71.s(); !(_step71 = _iterator71.n()).done;) {
                var point = _step71.value;
                if (point.node == node && node.childNodes[point.offset] == next) point.pos = this.text.length;
              }
            } catch (err) {
              _iterator71.e(err);
            } finally {
              _iterator71.f();
            }
          }
        }, {
          key: "findPointIn",
          value: function findPointIn(node, maxLen) {
            var _iterator72 = _createForOfIteratorHelper(this.points),
                _step72;

            try {
              for (_iterator72.s(); !(_step72 = _iterator72.n()).done;) {
                var point = _step72.value;
                if (point.node == node) point.pos = this.text.length + Math.min(point.offset, maxLen);
              }
            } catch (err) {
              _iterator72.e(err);
            } finally {
              _iterator72.f();
            }
          }
        }]);

        return DOMReader;
      }();

      function isBlockElement(node) {
        return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node.nodeName);
      }

      var DOMPoint = /*#__PURE__*/_createClass(function DOMPoint(node, offset) {
        _classCallCheck(this, DOMPoint);

        this.node = node;
        this.offset = offset;
        this.pos = -1;
      });

      function selectionPoints(view) {
        var result = [];
        if (view.root.activeElement != view.contentDOM) return result;
        var _view$observer$select = view.observer.selectionRange,
            anchorNode = _view$observer$select.anchorNode,
            anchorOffset = _view$observer$select.anchorOffset,
            focusNode = _view$observer$select.focusNode,
            focusOffset = _view$observer$select.focusOffset;

        if (anchorNode) {
          result.push(new DOMPoint(anchorNode, anchorOffset));
          if (focusNode != anchorNode || focusOffset != anchorOffset) result.push(new DOMPoint(focusNode, focusOffset));
        }

        return result;
      }

      function selectionFromPoints(points, base) {
        if (points.length == 0) return null;
        var anchor = points[0].pos,
            head = points.length == 2 ? points[1].pos : anchor;
        return anchor > -1 && head > -1 ? _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].single(anchor + base, head + base) : null;
      } // The editor's update state machine looks something like this:
      //
      //     Idle → Updating ⇆ Idle (unchecked) → Measuring → Idle
      //                                         ↑      ↓
      //                                         Updating (measure)
      //
      // The difference between 'Idle' and 'Idle (unchecked)' lies in
      // whether a layout check has been scheduled. A regular update through
      // the `update` method updates the DOM in a write-only fashion, and
      // relies on a check (scheduled with `requestAnimationFrame`) to make
      // sure everything is where it should be and the viewport covers the
      // visible code. That check continues to measure and then optionally
      // update until it reaches a coherent state.

      /**
      An editor view represents the editor's user interface. It holds
      the editable DOM surface, and possibly other elements such as the
      line number gutter. It handles events and dispatches state
      transactions for editing actions.
      */


      var EditorView = /*#__PURE__*/function () {
        /**
        Construct a new view. You'll usually want to put `view.dom` into
        your document after creating a view, so that the user can see
        it.
        */
        function EditorView() {
          var _this46 = this;

          var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

          _classCallCheck(this, EditorView);

          this.plugins = [];
          this.editorAttrs = {};
          this.contentAttrs = {};
          this.bidiCache = [];
          /**
          @internal
          */

          this.updateState = 2
          /* Updating */
          ;
          /**
          @internal
          */

          this.measureScheduled = -1;
          /**
          @internal
          */

          this.measureRequests = [];
          this.contentDOM = document.createElement("div");
          this.scrollDOM = document.createElement("div");
          this.scrollDOM.tabIndex = -1;
          this.scrollDOM.className = "cm-scroller";
          this.scrollDOM.appendChild(this.contentDOM);
          this.announceDOM = document.createElement("div");
          this.announceDOM.style.cssText = "position: absolute; top: -10000px";
          this.announceDOM.setAttribute("aria-live", "polite");
          this.dom = document.createElement("div");
          this.dom.appendChild(this.announceDOM);
          this.dom.appendChild(this.scrollDOM);

          this._dispatch = config.dispatch || function (tr) {
            return _this46.update([tr]);
          };

          this.dispatch = this.dispatch.bind(this);
          this.root = config.root || document;
          this.viewState = new ViewState(config.state || _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorState"].create());
          this.plugins = this.state.facet(viewPlugin).map(function (spec) {
            return new PluginInstance(spec).update(_this46);
          });
          this.observer = new DOMObserver(this, function (from, to, typeOver) {
            applyDOMChange(_this46, from, to, typeOver);
          }, function (event) {
            _this46.inputState.runScrollHandlers(_this46, event);

            if (_this46.observer.intersecting) _this46.measure();
          });
          this.inputState = new InputState(this);
          this.docView = new DocView(this);
          this.mountStyles();
          this.updateAttrs();
          this.updateState = 0
          /* Idle */
          ;
          ensureGlobalHandler();
          this.requestMeasure();
          if (config.parent) config.parent.appendChild(this.dom);
        }
        /**
        The current editor state.
        */


        _createClass(EditorView, [{
          key: "state",
          get: function get() {
            return this.viewState.state;
          }
          /**
          To be able to display large documents without consuming too much
          memory or overloading the browser, CodeMirror only draws the
          code that is visible (plus a margin around it) to the DOM. This
          property tells you the extent of the current drawn viewport, in
          document positions.
          */

        }, {
          key: "viewport",
          get: function get() {
            return this.viewState.viewport;
          }
          /**
          When there are, for example, large collapsed ranges in the
          viewport, its size can be a lot bigger than the actual visible
          content. Thus, if you are doing something like styling the
          content in the viewport, it is preferable to only do so for
          these ranges, which are the subset of the viewport that is
          actually drawn.
          */

        }, {
          key: "visibleRanges",
          get: function get() {
            return this.viewState.visibleRanges;
          }
          /**
          Returns false when the editor is entirely scrolled out of view
          or otherwise hidden.
          */

        }, {
          key: "inView",
          get: function get() {
            return this.viewState.inView;
          }
          /**
          Indicates whether the user is currently composing text via
          [IME](https://en.wikipedia.org/wiki/Input_method).
          */

        }, {
          key: "composing",
          get: function get() {
            return this.inputState.composing > 0;
          }
        }, {
          key: "dispatch",
          value: function dispatch() {
            var _this$state;

            this._dispatch(arguments.length == 1 && (arguments.length <= 0 ? undefined : arguments[0]) instanceof _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Transaction"] ? arguments.length <= 0 ? undefined : arguments[0] : (_this$state = this.state).update.apply(_this$state, arguments));
          }
          /**
          Update the view for the given array of transactions. This will
          update the visible document and selection to match the state
          produced by the transactions, and notify view plugins of the
          change. You should usually call
          [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
          as a primitive.
          */

        }, {
          key: "update",
          value: function update(transactions) {
            if (this.updateState != 0
            /* Idle */
            ) throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
            var redrawn = false,
                update;
            var state = this.state;

            var _iterator73 = _createForOfIteratorHelper(transactions),
                _step73;

            try {
              for (_iterator73.s(); !(_step73 = _iterator73.n()).done;) {
                var _tr2 = _step73.value;
                if (_tr2.startState != state) throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
                state = _tr2.state;
              } // When the phrases change, redraw the editor

            } catch (err) {
              _iterator73.e(err);
            } finally {
              _iterator73.f();
            }

            if (state.facet(_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorState"].phrases) != this.state.facet(_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorState"].phrases)) return this.setState(state);
            update = new ViewUpdate(this, state, transactions);
            var scrollPos = null;

            try {
              this.updateState = 2
              /* Updating */
              ;

              var _iterator74 = _createForOfIteratorHelper(transactions),
                  _step74;

              try {
                for (_iterator74.s(); !(_step74 = _iterator74.n()).done;) {
                  var tr = _step74.value;
                  if (scrollPos) scrollPos = scrollPos.map(tr.changes);

                  if (tr.scrollIntoView) {
                    var main = tr.state.selection.main;
                    scrollPos = main.empty ? main : _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(main.head, main.head > main.anchor ? -1 : 1);
                  }

                  var _iterator75 = _createForOfIteratorHelper(tr.effects),
                      _step75;

                  try {
                    for (_iterator75.s(); !(_step75 = _iterator75.n()).done;) {
                      var e = _step75.value;
                      if (e.is(scrollTo)) scrollPos = e.value;
                    }
                  } catch (err) {
                    _iterator75.e(err);
                  } finally {
                    _iterator75.f();
                  }
                }
              } catch (err) {
                _iterator74.e(err);
              } finally {
                _iterator74.f();
              }

              this.viewState.update(update, scrollPos);
              this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);

              if (!update.empty) {
                this.updatePlugins(update);
                this.inputState.update(update);
              }

              redrawn = this.docView.update(update);
              if (this.state.facet(styleModule) != this.styleModules) this.mountStyles();
              this.updateAttrs();
              this.showAnnouncements(transactions);
            } finally {
              this.updateState = 0
              /* Idle */
              ;
            }

            if (redrawn || scrollPos || this.viewState.mustEnforceCursorAssoc) this.requestMeasure();

            if (!update.empty) {
              var _iterator76 = _createForOfIteratorHelper(this.state.facet(updateListener)),
                  _step76;

              try {
                for (_iterator76.s(); !(_step76 = _iterator76.n()).done;) {
                  var listener = _step76.value;
                  listener(update);
                }
              } catch (err) {
                _iterator76.e(err);
              } finally {
                _iterator76.f();
              }
            }
          }
          /**
          Reset the view to the given state. (This will cause the entire
          document to be redrawn and all view plugins to be reinitialized,
          so you should probably only use it when the new state isn't
          derived from the old state. Otherwise, use
          [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
          */

        }, {
          key: "setState",
          value: function setState(newState) {
            var _this47 = this;

            if (this.updateState != 0
            /* Idle */
            ) throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
            this.updateState = 2
            /* Updating */
            ;

            try {
              var _iterator77 = _createForOfIteratorHelper(this.plugins),
                  _step77;

              try {
                for (_iterator77.s(); !(_step77 = _iterator77.n()).done;) {
                  var _plugin3 = _step77.value;

                  _plugin3.destroy(this);
                }
              } catch (err) {
                _iterator77.e(err);
              } finally {
                _iterator77.f();
              }

              this.viewState = new ViewState(newState);
              this.plugins = newState.facet(viewPlugin).map(function (spec) {
                return new PluginInstance(spec).update(_this47);
              });
              this.docView = new DocView(this);
              this.inputState.ensureHandlers(this);
              this.mountStyles();
              this.updateAttrs();
              this.bidiCache = [];
            } finally {
              this.updateState = 0
              /* Idle */
              ;
            }

            this.requestMeasure();
          }
        }, {
          key: "updatePlugins",
          value: function updatePlugins(update) {
            var prevSpecs = update.startState.facet(viewPlugin),
                specs = update.state.facet(viewPlugin);

            if (prevSpecs != specs) {
              var newPlugins = [];

              var _iterator78 = _createForOfIteratorHelper(specs),
                  _step78;

              try {
                for (_iterator78.s(); !(_step78 = _iterator78.n()).done;) {
                  var spec = _step78.value;
                  var found = prevSpecs.indexOf(spec);

                  if (found < 0) {
                    newPlugins.push(new PluginInstance(spec));
                  } else {
                    var _plugin4 = this.plugins[found];
                    _plugin4.mustUpdate = update;
                    newPlugins.push(_plugin4);
                  }
                }
              } catch (err) {
                _iterator78.e(err);
              } finally {
                _iterator78.f();
              }

              var _iterator79 = _createForOfIteratorHelper(this.plugins),
                  _step79;

              try {
                for (_iterator79.s(); !(_step79 = _iterator79.n()).done;) {
                  var _plugin5 = _step79.value;
                  if (_plugin5.mustUpdate != update) _plugin5.destroy(this);
                }
              } catch (err) {
                _iterator79.e(err);
              } finally {
                _iterator79.f();
              }

              this.plugins = newPlugins;
              this.inputState.ensureHandlers(this);
            } else {
              var _iterator80 = _createForOfIteratorHelper(this.plugins),
                  _step80;

              try {
                for (_iterator80.s(); !(_step80 = _iterator80.n()).done;) {
                  var _p = _step80.value;
                  _p.mustUpdate = update;
                }
              } catch (err) {
                _iterator80.e(err);
              } finally {
                _iterator80.f();
              }
            }

            for (var _i69 = 0; _i69 < this.plugins.length; _i69++) {
              this.plugins[_i69] = this.plugins[_i69].update(this);
            }
          }
          /**
          @internal
          */

        }, {
          key: "measure",
          value: function measure() {
            var _this48 = this;

            var flush = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
            if (this.measureScheduled > -1) cancelAnimationFrame(this.measureScheduled);
            this.measureScheduled = -1; // Prevent requestMeasure calls from scheduling another animation frame

            if (flush) this.observer.flush();
            var updated = null;

            try {
              for (var _i70 = 0;; _i70++) {
                this.updateState = 1
                /* Measuring */
                ;
                var changed = this.viewState.measure(this.docView, _i70 > 0);
                var measuring = this.measureRequests;
                if (!changed && !measuring.length && this.viewState.scrollTo == null) break;
                this.measureRequests = [];

                if (_i70 > 5) {
                  console.warn("Viewport failed to stabilize");
                  break;
                }

                var measured = measuring.map(function (m) {
                  try {
                    return m.read(_this48);
                  } catch (e) {
                    logException(_this48.state, e);
                    return BadMeasure;
                  }
                });
                var update = new ViewUpdate(this, this.state);
                update.flags |= changed;
                if (!updated) updated = update;else updated.flags |= changed;
                this.updateState = 2
                /* Updating */
                ;

                if (!update.empty) {
                  this.updatePlugins(update);
                  this.inputState.update(update);
                }

                this.updateAttrs();
                if (changed) this.docView.update(update);

                for (var _i71 = 0; _i71 < measuring.length; _i71++) {
                  if (measured[_i71] != BadMeasure) {
                    try {
                      measuring[_i71].write(measured[_i71], this);
                    } catch (e) {
                      logException(this.state, e);
                    }
                  }
                }

                if (this.viewState.scrollTo) {
                  this.docView.scrollRangeIntoView(this.viewState.scrollTo);
                  this.viewState.scrollTo = null;
                }

                if (!(changed & 4
                /* Viewport */
                ) && this.measureRequests.length == 0) break;
              }
            } finally {
              this.updateState = 0
              /* Idle */
              ;
            }

            this.measureScheduled = -1;

            if (updated && !updated.empty) {
              var _iterator81 = _createForOfIteratorHelper(this.state.facet(updateListener)),
                  _step81;

              try {
                for (_iterator81.s(); !(_step81 = _iterator81.n()).done;) {
                  var listener = _step81.value;
                  listener(updated);
                }
              } catch (err) {
                _iterator81.e(err);
              } finally {
                _iterator81.f();
              }
            }
          }
          /**
          Get the CSS classes for the currently active editor themes.
          */

        }, {
          key: "themeClasses",
          get: function get() {
            return baseThemeID + " " + (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + " " + this.state.facet(_theme);
          }
        }, {
          key: "updateAttrs",
          value: function updateAttrs() {
            var editorAttrs = combineAttrs(this.state.facet(editorAttributes), {
              "class": "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
            });

            _updateAttrs(this.dom, this.editorAttrs, editorAttrs);

            this.editorAttrs = editorAttrs;
            var contentAttrs = {
              spellcheck: "false",
              autocorrect: "off",
              autocapitalize: "off",
              contenteditable: !this.state.facet(editable) ? "false" : contentEditablePlainTextSupported() ? "plaintext-only" : "true",
              "class": "cm-content",
              style: "".concat(browser.tabSize, ": ").concat(this.state.tabSize),
              role: "textbox",
              "aria-multiline": "true"
            };
            if (this.state.readOnly) contentAttrs["aria-readonly"] = "true";
            combineAttrs(this.state.facet(contentAttributes), contentAttrs);

            _updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);

            this.contentAttrs = contentAttrs;
          }
        }, {
          key: "showAnnouncements",
          value: function showAnnouncements(trs) {
            var first = true;

            var _iterator82 = _createForOfIteratorHelper(trs),
                _step82;

            try {
              for (_iterator82.s(); !(_step82 = _iterator82.n()).done;) {
                var tr = _step82.value;

                var _iterator83 = _createForOfIteratorHelper(tr.effects),
                    _step83;

                try {
                  for (_iterator83.s(); !(_step83 = _iterator83.n()).done;) {
                    var effect = _step83.value;

                    if (effect.is(EditorView.announce)) {
                      if (first) this.announceDOM.textContent = "";
                      first = false;
                      var div = this.announceDOM.appendChild(document.createElement("div"));
                      div.textContent = effect.value;
                    }
                  }
                } catch (err) {
                  _iterator83.e(err);
                } finally {
                  _iterator83.f();
                }
              }
            } catch (err) {
              _iterator82.e(err);
            } finally {
              _iterator82.f();
            }
          }
        }, {
          key: "mountStyles",
          value: function mountStyles() {
            this.styleModules = this.state.facet(styleModule);
            style_mod__WEBPACK_IMPORTED_MODULE_1__["StyleModule"].mount(this.root, this.styleModules.concat(baseTheme).reverse());
          }
        }, {
          key: "readMeasured",
          value: function readMeasured() {
            if (this.updateState == 2
            /* Updating */
            ) throw new Error("Reading the editor layout isn't allowed during an update");
            if (this.updateState == 0
            /* Idle */
            && this.measureScheduled > -1) this.measure(false);
          }
          /**
          Schedule a layout measurement, optionally providing callbacks to
          do custom DOM measuring followed by a DOM write phase. Using
          this is preferable reading DOM layout directly from, for
          example, an event handler, because it'll make sure measuring and
          drawing done by other components is synchronized, avoiding
          unnecessary DOM layout computations.
          */

        }, {
          key: "requestMeasure",
          value: function requestMeasure(request) {
            var _this49 = this;

            if (this.measureScheduled < 0) this.measureScheduled = requestAnimationFrame(function () {
              return _this49.measure();
            });

            if (request) {
              if (request.key != null) for (var _i72 = 0; _i72 < this.measureRequests.length; _i72++) {
                if (this.measureRequests[_i72].key === request.key) {
                  this.measureRequests[_i72] = request;
                  return;
                }
              }
              this.measureRequests.push(request);
            }
          }
          /**
          Collect all values provided by the active plugins for a given
          field.
          */

        }, {
          key: "pluginField",
          value: function pluginField(field) {
            var result = [];

            var _iterator84 = _createForOfIteratorHelper(this.plugins),
                _step84;

            try {
              for (_iterator84.s(); !(_step84 = _iterator84.n()).done;) {
                var _plugin6 = _step84.value;

                _plugin6.update(this).takeField(field, result);
              }
            } catch (err) {
              _iterator84.e(err);
            } finally {
              _iterator84.f();
            }

            return result;
          }
          /**
          Get the value of a specific plugin, if present. Note that
          plugins that crash can be dropped from a view, so even when you
          know you registered a given plugin, it is recommended to check
          the return value of this method.
          */

        }, {
          key: "plugin",
          value: function plugin(_plugin2) {
            var _iterator85 = _createForOfIteratorHelper(this.plugins),
                _step85;

            try {
              for (_iterator85.s(); !(_step85 = _iterator85.n()).done;) {
                var inst = _step85.value;
                if (inst.spec == _plugin2) return inst.update(this).value;
              }
            } catch (err) {
              _iterator85.e(err);
            } finally {
              _iterator85.f();
            }

            return null;
          }
          /**
          Find the line or block widget at the given vertical position.
          
          By default, this position is interpreted as a screen position,
          meaning `docTop` is set to the DOM top position of the editor
          content (forcing a layout). You can pass a different `docTop`
          value—for example 0 to interpret `height` as a document-relative
          position, or a precomputed document top
          (`view.contentDOM.getBoundingClientRect().top`) to limit layout
          queries.
          */

        }, {
          key: "blockAtHeight",
          value: function blockAtHeight(height, docTop) {
            this.readMeasured();
            return this.viewState.blockAtHeight(height, ensureTop(docTop, this.contentDOM));
          }
          /**
          Find information for the visual line (see
          [`visualLineAt`](https://codemirror.net/6/docs/ref/#view.EditorView.visualLineAt)) at the given
          vertical position. The resulting block info might hold another
          array of block info structs in its `type` field if this line
          consists of more than one block.
          
          Defaults to treating `height` as a screen position. See
          [`blockAtHeight`](https://codemirror.net/6/docs/ref/#view.EditorView.blockAtHeight) for the
          interpretation of the `docTop` parameter.
          */

        }, {
          key: "visualLineAtHeight",
          value: function visualLineAtHeight(height, docTop) {
            this.readMeasured();
            return this.viewState.lineAtHeight(height, ensureTop(docTop, this.contentDOM));
          }
          /**
          Iterate over the height information of the visual lines in the
          viewport. The heights of lines are reported relative to the
          given document top, which defaults to the screen position of the
          document (forcing a layout).
          */

        }, {
          key: "viewportLines",
          value: function viewportLines(f, docTop) {
            var _this$viewport = this.viewport,
                from = _this$viewport.from,
                to = _this$viewport.to;
            this.viewState.forEachLine(from, to, f, ensureTop(docTop, this.contentDOM));
          }
          /**
          Find the extent and height of the visual line (a range delimited
          on both sides by either non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^range)
          line breaks, or the start/end of the document) at the given position.
          
          Vertical positions are computed relative to the `docTop`
          argument, which defaults to 0 for this method. You can pass
          `view.contentDOM.getBoundingClientRect().top` here to get screen
          coordinates.
          */

        }, {
          key: "visualLineAt",
          value: function visualLineAt(pos) {
            var docTop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            return this.viewState.lineAt(pos, docTop);
          }
          /**
          The editor's total content height.
          */

        }, {
          key: "contentHeight",
          get: function get() {
            return this.viewState.contentHeight;
          }
          /**
          Move a cursor position by [grapheme
          cluster](https://codemirror.net/6/docs/ref/#text.findClusterBreak). `forward` determines whether
          the motion is away from the line start, or towards it. Motion in
          bidirectional text is in visual order, in the editor's [text
          direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). When the start
          position was the last one on the line, the returned position
          will be across the line break. If there is no further line, the
          original position is returned.
          
          By default, this method moves over a single cluster. The
          optional `by` argument can be used to move across more. It will
          be called with the first cluster as argument, and should return
          a predicate that determines, for each subsequent cluster,
          whether it should also be moved over.
          */

        }, {
          key: "moveByChar",
          value: function moveByChar(start, forward, by) {
            return skipAtoms(this, start, _moveByChar(this, start, forward, by));
          }
          /**
          Move a cursor position across the next group of either
          [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
          non-whitespace characters.
          */

        }, {
          key: "moveByGroup",
          value: function moveByGroup(start, forward) {
            var _this50 = this;

            return skipAtoms(this, start, _moveByChar(this, start, forward, function (initial) {
              return byGroup(_this50, start.head, initial);
            }));
          }
          /**
          Move to the next line boundary in the given direction. If
          `includeWrap` is true, line wrapping is on, and there is a
          further wrap point on the current line, the wrap point will be
          returned. Otherwise this function will return the start or end
          of the line.
          */

        }, {
          key: "moveToLineBoundary",
          value: function moveToLineBoundary(start, forward) {
            var includeWrap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
            return _moveToLineBoundary(this, start, forward, includeWrap);
          }
          /**
          Move a cursor position vertically. When `distance` isn't given,
          it defaults to moving to the next line (including wrapped
          lines). Otherwise, `distance` should provide a positive distance
          in pixels.
          
          When `start` has a
          [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
          motion will use that as a target horizontal position. Otherwise,
          the cursor's own horizontal position is used. The returned
          cursor will have its goal column set to whichever column was
          used.
          */

        }, {
          key: "moveVertically",
          value: function moveVertically(start, forward, distance) {
            return skipAtoms(this, start, _moveVertically(this, start, forward, distance));
          }
          /**
          Scroll the given document position into view.
          */

        }, {
          key: "scrollPosIntoView",
          value: function scrollPosIntoView(pos) {
            this.viewState.scrollTo = _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(pos);
            this.requestMeasure();
          }
          /**
          Find the DOM parent node and offset (child offset if `node` is
          an element, character offset when it is a text node) at the
          given document position.
          */

        }, {
          key: "domAtPos",
          value: function domAtPos(pos) {
            return this.docView.domAtPos(pos);
          }
          /**
          Find the document position at the given DOM node. Can be useful
          for associating positions with DOM events. Will raise an error
          when `node` isn't part of the editor content.
          */

        }, {
          key: "posAtDOM",
          value: function posAtDOM(node) {
            var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            return this.docView.posFromDOM(node, offset);
          }
        }, {
          key: "posAtCoords",
          value: function posAtCoords(coords) {
            var precise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            this.readMeasured();
            return _posAtCoords(this, coords, precise);
          }
          /**
          Get the screen coordinates at the given document position.
          `side` determines whether the coordinates are based on the
          element before (-1) or after (1) the position (if no element is
          available on the given side, the method will transparently use
          another strategy to get reasonable coordinates).
          */

        }, {
          key: "coordsAtPos",
          value: function coordsAtPos(pos) {
            var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
            this.readMeasured();
            var rect = this.docView.coordsAt(pos, side);
            if (!rect || rect.left == rect.right) return rect;
            var line = this.state.doc.lineAt(pos),
                order = this.bidiSpans(line);
            var span = order[BidiSpan.find(order, pos - line.from, -1, side)];
            return flattenRect(rect, span.dir == Direction.LTR == side > 0);
          }
          /**
          The default width of a character in the editor. May not
          accurately reflect the width of all characters (given variable
          width fonts or styling of invididual ranges).
          */

        }, {
          key: "defaultCharacterWidth",
          get: function get() {
            return this.viewState.heightOracle.charWidth;
          }
          /**
          The default height of a line in the editor. May not be accurate
          for all lines.
          */

        }, {
          key: "defaultLineHeight",
          get: function get() {
            return this.viewState.heightOracle.lineHeight;
          }
          /**
          The text direction
          ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
          CSS property) of the editor.
          */

        }, {
          key: "textDirection",
          get: function get() {
            return this.viewState.heightOracle.direction;
          }
          /**
          Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
          (as determined by the
          [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
          CSS property of its content element).
          */

        }, {
          key: "lineWrapping",
          get: function get() {
            return this.viewState.heightOracle.lineWrapping;
          }
          /**
          Returns the bidirectional text structure of the given line
          (which should be in the current document) as an array of span
          objects. The order of these spans matches the [text
          direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
          left-to-right, the leftmost spans come first, otherwise the
          rightmost spans come first.
          */

        }, {
          key: "bidiSpans",
          value: function bidiSpans(line) {
            if (line.length > MaxBidiLine) return trivialOrder(line.length);
            var dir = this.textDirection;

            var _iterator86 = _createForOfIteratorHelper(this.bidiCache),
                _step86;

            try {
              for (_iterator86.s(); !(_step86 = _iterator86.n()).done;) {
                var entry = _step86.value;
                if (entry.from == line.from && entry.dir == dir) return entry.order;
              }
            } catch (err) {
              _iterator86.e(err);
            } finally {
              _iterator86.f();
            }

            var order = computeOrder(line.text, this.textDirection);
            this.bidiCache.push(new CachedOrder(line.from, line.to, dir, order));
            return order;
          }
          /**
          Check whether the editor has focus.
          */

        }, {
          key: "hasFocus",
          get: function get() {
            var _a; // Safari return false for hasFocus when the context menu is open
            // or closing, which leads us to ignore selection changes from the
            // context menu because it looks like the editor isn't focused.
            // This kludges around that.


            return (document.hasFocus() || browser.safari && ((_a = this.inputState) === null || _a === void 0 ? void 0 : _a.lastContextMenu) > Date.now() - 3e4) && this.root.activeElement == this.contentDOM;
          }
          /**
          Put focus on the editor.
          */

        }, {
          key: "focus",
          value: function focus() {
            var _this51 = this;

            this.observer.ignore(function () {
              focusPreventScroll(_this51.contentDOM);

              _this51.docView.updateSelection();
            });
          }
          /**
          Clean up this editor view, removing its element from the
          document, unregistering event handlers, and notifying
          plugins. The view instance can no longer be used after
          calling this.
          */

        }, {
          key: "destroy",
          value: function destroy() {
            var _iterator87 = _createForOfIteratorHelper(this.plugins),
                _step87;

            try {
              for (_iterator87.s(); !(_step87 = _iterator87.n()).done;) {
                var _plugin7 = _step87.value;

                _plugin7.destroy(this);
              }
            } catch (err) {
              _iterator87.e(err);
            } finally {
              _iterator87.f();
            }

            this.inputState.destroy();
            this.dom.remove();
            this.observer.destroy();
            if (this.measureScheduled > -1) cancelAnimationFrame(this.measureScheduled);
          }
          /**
          Facet that can be used to add DOM event handlers. The value
          should be an object mapping event names to handler functions. The
          first such function to return true will be assumed to have handled
          that event, and no other handlers or built-in behavior will be
          activated for it.
          These are registered on the [content
          element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except for `scroll`
          handlers, which will be called any time the editor's [scroll
          element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of its parent nodes
          is scrolled.
          */

        }], [{
          key: "domEventHandlers",
          value: function domEventHandlers(handlers) {
            return ViewPlugin.define(function () {
              return {};
            }, {
              eventHandlers: handlers
            });
          }
          /**
          Create a theme extension. The first argument can be a
          [`style-mod`](https://github.com/marijnh/style-mod#documentation)
          style spec providing the styles for the theme. These will be
          prefixed with a generated class for the style.
          
          Because the selectors will be prefixed with a scope class, rule
          that directly match the editor's [wrapper
          element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
          added—need to be explicitly differentiated by adding an `&` to
          the selector for that element—for example
          `&.cm-focused`.
          
          When `dark` is set to true, the theme will be marked as dark,
          which will cause the `&dark` rules from [base
          themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
          `&light` when a light theme is active).
          */

        }, {
          key: "theme",
          value: function theme(spec, options) {
            var prefix = style_mod__WEBPACK_IMPORTED_MODULE_1__["StyleModule"].newName();
            var result = [_theme.of(prefix), styleModule.of(buildTheme(".".concat(prefix), spec))];
            if (options && options.dark) result.push(darkTheme.of(true));
            return result;
          }
          /**
          Create an extension that adds styles to the base theme. Like
          with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
          place of the editor wrapper element when directly targeting
          that. You can also use `&dark` or `&light` instead to only
          target editors with a dark or light theme.
          */

        }, {
          key: "baseTheme",
          value: function baseTheme(spec) {
            return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Prec"].fallback(styleModule.of(buildTheme("." + baseThemeID, spec, lightDarkIDs)));
          }
        }]);

        return EditorView;
      }();
      /**
      Effect that can be [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a
      transaction to make it scroll the given range into view.
      */


      EditorView.scrollTo = scrollTo;
      /**
      Facet to add a [style
      module](https://github.com/marijnh/style-mod#documentation) to
      an editor view. The view will ensure that the module is
      mounted in its [document
      root](https://codemirror.net/6/docs/ref/#view.EditorView.constructor^config.root).
      */

      EditorView.styleModule = styleModule;
      /**
      An input handler can override the way changes to the editable
      DOM content are handled. Handlers are passed the document
      positions between which the change was found, and the new
      content. When one returns true, no further input handlers are
      called and the default behavior is prevented.
      */

      EditorView.inputHandler = inputHandler;
      /**
      Allows you to provide a function that should be called when the
      library catches an exception from an extension (mostly from view
      plugins, but may be used by other extensions to route exceptions
      from user-code-provided callbacks). This is mostly useful for
      debugging and logging. See [`logException`](https://codemirror.net/6/docs/ref/#view.logException).
      */

      EditorView.exceptionSink = exceptionSink;
      /**
      A facet that can be used to register a function to be called
      every time the view updates.
      */

      EditorView.updateListener = updateListener;
      /**
      Facet that controls whether the editor content DOM is editable.
      When its highest-precedence value is `false`, the element will
      not longer have its `contenteditable` attribute set. (Note that
      this doesn't affect API calls that change the editor content,
      even when those are bound to keys or buttons. See the
      [`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) facet for that.)
      */

      EditorView.editable = editable;
      /**
      Allows you to influence the way mouse selection happens. The
      functions in this facet will be called for a `mousedown` event
      on the editor, and can return an object that overrides the way a
      selection is computed from that mouse click or drag.
      */

      EditorView.mouseSelectionStyle = mouseSelectionStyle;
      /**
      Facet used to configure whether a given selection drag event
      should move or copy the selection. The given predicate will be
      called with the `mousedown` event, and can return `true` when
      the drag should move the content.
      */

      EditorView.dragMovesSelection = dragMovesSelection$1;
      /**
      Facet used to configure whether a given selecting click adds
      a new range to the existing selection or replaces it entirely.
      */

      EditorView.clickAddsSelectionRange = clickAddsSelectionRange;
      /**
      A facet that determines which [decorations](https://codemirror.net/6/docs/ref/#view.Decoration)
      are shown in the view. See also [view
      plugins](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), which have a separate
      mechanism for providing decorations.
      */

      EditorView.decorations = decorations;
      /**
      Facet that provides additional DOM attributes for the editor's
      editable DOM element.
      */

      EditorView.contentAttributes = contentAttributes;
      /**
      Facet that provides DOM attributes for the editor's outer
      element.
      */

      EditorView.editorAttributes = editorAttributes;
      /**
      An extension that enables line wrapping in the editor (by
      setting CSS `white-space` to `pre-wrap` in the content).
      */

      EditorView.lineWrapping = /*@__PURE__*/EditorView.contentAttributes.of({
        "class": "cm-lineWrapping"
      });
      /**
      State effect used to include screen reader announcements in a
      transaction. These will be added to the DOM in a visually hidden
      element with `aria-live="polite"` set, and should be used to
      describe effects that are visually obvious but may not be
      noticed by screen reader users (such as moving to the next
      search match).
      */

      EditorView.announce = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["StateEffect"].define(); // Maximum line length for which we compute accurate bidi info

      var MaxBidiLine = 4096;

      function ensureTop(given, dom) {
        return given == null ? dom.getBoundingClientRect().top : given;
      }

      var resizeDebounce = -1;

      function ensureGlobalHandler() {
        window.addEventListener("resize", function () {
          if (resizeDebounce == -1) resizeDebounce = setTimeout(handleResize, 50);
        });
      }

      function handleResize() {
        resizeDebounce = -1;
        var found = document.querySelectorAll(".cm-content");

        for (var _i73 = 0; _i73 < found.length; _i73++) {
          var docView = ContentView.get(found[_i73]);
          if (docView) docView.editorView.requestMeasure();
        }
      }

      var BadMeasure = {};

      var CachedOrder = /*#__PURE__*/function () {
        function CachedOrder(from, to, dir, order) {
          _classCallCheck(this, CachedOrder);

          this.from = from;
          this.to = to;
          this.dir = dir;
          this.order = order;
        }

        _createClass(CachedOrder, null, [{
          key: "update",
          value: function update(cache, changes) {
            if (changes.empty) return cache;
            var result = [],
                lastDir = cache.length ? cache[cache.length - 1].dir : Direction.LTR;

            for (var _i74 = Math.max(0, cache.length - 10); _i74 < cache.length; _i74++) {
              var entry = cache[_i74];
              if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to)) result.push(new CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.order));
            }

            return result;
          }
        }]);

        return CachedOrder;
      }();

      var currentPlatform = typeof navigator == "undefined" ? "key" : /*@__PURE__*/ /Mac/.test(navigator.platform) ? "mac" : /*@__PURE__*/ /Win/.test(navigator.platform) ? "win" : /*@__PURE__*/ /Linux|X11/.test(navigator.platform) ? "linux" : "key";

      function normalizeKeyName(name, platform) {
        var parts = name.split(/-(?!$)/);
        var result = parts[parts.length - 1];
        if (result == "Space") result = " ";
        var alt, ctrl, shift, meta;

        for (var _i75 = 0; _i75 < parts.length - 1; ++_i75) {
          var mod = parts[_i75];
          if (/^(cmd|meta|m)$/i.test(mod)) meta = true;else if (/^a(lt)?$/i.test(mod)) alt = true;else if (/^(c|ctrl|control)$/i.test(mod)) ctrl = true;else if (/^s(hift)?$/i.test(mod)) shift = true;else if (/^mod$/i.test(mod)) {
            if (platform == "mac") meta = true;else ctrl = true;
          } else throw new Error("Unrecognized modifier name: " + mod);
        }

        if (alt) result = "Alt-" + result;
        if (ctrl) result = "Ctrl-" + result;
        if (meta) result = "Meta-" + result;
        if (shift) result = "Shift-" + result;
        return result;
      }

      function modifiers(name, event, shift) {
        if (event.altKey) name = "Alt-" + name;
        if (event.ctrlKey) name = "Ctrl-" + name;
        if (event.metaKey) name = "Meta-" + name;
        if (shift !== false && event.shiftKey) name = "Shift-" + name;
        return name;
      }

      var handleKeyEvents = /*@__PURE__*/EditorView.domEventHandlers({
        keydown: function keydown(event, view) {
          return runHandlers(getKeymap(view.state), event, view, "editor");
        }
      });
      /**
      Facet used for registering keymaps.
      
      You can add multiple keymaps to an editor. Their priorities
      determine their precedence (the ones specified early or with high
      priority get checked first). When a handler has returned `true`
      for a given key, no further handlers are called.
      */

      var keymap = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Facet"].define({
        enables: handleKeyEvents
      });

      var Keymaps = /*@__PURE__*/new WeakMap(); // This is hidden behind an indirection, rather than directly computed
      // by the facet, to keep internal types out of the facet's type.

      function getKeymap(state) {
        var bindings = state.facet(keymap);
        var map = Keymaps.get(bindings);
        if (!map) Keymaps.set(bindings, map = buildKeymap(bindings.reduce(function (a, b) {
          return a.concat(b);
        }, [])));
        return map;
      }
      /**
      Run the key handlers registered for a given scope. The event
      object should be `"keydown"` event. Returns true if any of the
      handlers handled it.
      */


      function runScopeHandlers(view, event, scope) {
        return runHandlers(getKeymap(view.state), event, view, scope);
      }

      var storedPrefix = null;
      var PrefixTimeout = 4000;

      function buildKeymap(bindings) {
        var platform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : currentPlatform;
        var bound = Object.create(null);
        var isPrefix = Object.create(null);

        var checkPrefix = function checkPrefix(name, is) {
          var current = isPrefix[name];
          if (current == null) isPrefix[name] = is;else if (current != is) throw new Error("Key binding " + name + " is used both as a regular binding and as a multi-stroke prefix");
        };

        var add = function add(scope, key, command, preventDefault) {
          var scopeObj = bound[scope] || (bound[scope] = Object.create(null));
          var parts = key.split(/ (?!$)/).map(function (k) {
            return normalizeKeyName(k, platform);
          });

          var _loop11 = function _loop11(_i76) {
            var prefix = parts.slice(0, _i76).join(" ");
            checkPrefix(prefix, true);
            if (!scopeObj[prefix]) scopeObj[prefix] = {
              preventDefault: true,
              commands: [function (view) {
                var ourObj = storedPrefix = {
                  view: view,
                  prefix: prefix,
                  scope: scope
                };
                setTimeout(function () {
                  if (storedPrefix == ourObj) storedPrefix = null;
                }, PrefixTimeout);
                return true;
              }]
            };
          };

          for (var _i76 = 1; _i76 < parts.length; _i76++) {
            _loop11(_i76);
          }

          var full = parts.join(" ");
          checkPrefix(full, false);
          var binding = scopeObj[full] || (scopeObj[full] = {
            preventDefault: false,
            commands: []
          });
          binding.commands.push(command);
          if (preventDefault) binding.preventDefault = true;
        };

        var _iterator88 = _createForOfIteratorHelper(bindings),
            _step88;

        try {
          for (_iterator88.s(); !(_step88 = _iterator88.n()).done;) {
            var b = _step88.value;
            var name = b[platform] || b.key;
            if (!name) continue;

            var _iterator89 = _createForOfIteratorHelper(b.scope ? b.scope.split(" ") : ["editor"]),
                _step89;

            try {
              for (_iterator89.s(); !(_step89 = _iterator89.n()).done;) {
                var scope = _step89.value;
                add(scope, name, b.run, b.preventDefault);
                if (b.shift) add(scope, "Shift-" + name, b.shift, b.preventDefault);
              }
            } catch (err) {
              _iterator89.e(err);
            } finally {
              _iterator89.f();
            }
          }
        } catch (err) {
          _iterator88.e(err);
        } finally {
          _iterator88.f();
        }

        return bound;
      }

      function runHandlers(map, event, view, scope) {
        var name = Object(w3c_keyname__WEBPACK_IMPORTED_MODULE_4__["keyName"])(event),
            isChar = name.length == 1 && name != " ";
        var prefix = "",
            fallthrough = false;

        if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {
          prefix = storedPrefix.prefix + " ";
          if (fallthrough = modifierCodes.indexOf(event.keyCode) < 0) storedPrefix = null;
        }

        var runFor = function runFor(binding) {
          if (binding) {
            var _iterator90 = _createForOfIteratorHelper(binding.commands),
                _step90;

            try {
              for (_iterator90.s(); !(_step90 = _iterator90.n()).done;) {
                var cmd = _step90.value;
                if (cmd(view)) return true;
              }
            } catch (err) {
              _iterator90.e(err);
            } finally {
              _iterator90.f();
            }

            if (binding.preventDefault) fallthrough = true;
          }

          return false;
        };

        var scopeObj = map[scope],
            baseName;

        if (scopeObj) {
          if (runFor(scopeObj[prefix + modifiers(name, event, !isChar)])) return true;

          if (isChar && (event.shiftKey || event.altKey || event.metaKey) && (baseName = w3c_keyname__WEBPACK_IMPORTED_MODULE_4__["base"][event.keyCode]) && baseName != name) {
            if (runFor(scopeObj[prefix + modifiers(baseName, event, true)])) return true;
          } else if (isChar && event.shiftKey) {
            if (runFor(scopeObj[prefix + modifiers(name, event, true)])) return true;
          }
        }

        return fallthrough;
      }

      var CanHidePrimary = !browser.ios; // FIXME test IE

      var selectionConfig = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Facet"].define({
        combine: function combine(configs) {
          return Object(_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["combineConfig"])(configs, {
            cursorBlinkRate: 1200,
            drawRangeCursor: true
          }, {
            cursorBlinkRate: function cursorBlinkRate(a, b) {
              return Math.min(a, b);
            },
            drawRangeCursor: function drawRangeCursor(a, b) {
              return a || b;
            }
          });
        }
      });
      /**
      Returns an extension that hides the browser's native selection and
      cursor, replacing the selection with a background behind the text
      (with the `cm-selectionBackground` class), and the
      cursors with elements overlaid over the code (using
      `cm-cursor-primary` and `cm-cursor-secondary`).
      
      This allows the editor to display secondary selection ranges, and
      tends to produce a type of selection more in line with that users
      expect in a text editor (the native selection styling will often
      leave gaps between lines and won't fill the horizontal space after
      a line when the selection continues past it).
      
      It does have a performance cost, in that it requires an extra DOM
      layout cycle for many updates (the selection is drawn based on DOM
      layout information that's only available after laying out the
      content).
      */


      function drawSelection() {
        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return [selectionConfig.of(config), drawSelectionPlugin, hideNativeSelection];
      }

      var Piece = /*#__PURE__*/function () {
        function Piece(left, top, width, height, className) {
          _classCallCheck(this, Piece);

          this.left = left;
          this.top = top;
          this.width = width;
          this.height = height;
          this.className = className;
        }

        _createClass(Piece, [{
          key: "draw",
          value: function draw() {
            var elt = document.createElement("div");
            elt.className = this.className;
            this.adjust(elt);
            return elt;
          }
        }, {
          key: "adjust",
          value: function adjust(elt) {
            elt.style.left = this.left + "px";
            elt.style.top = this.top + "px";
            if (this.width >= 0) elt.style.width = this.width + "px";
            elt.style.height = this.height + "px";
          }
        }, {
          key: "eq",
          value: function eq(p) {
            return this.left == p.left && this.top == p.top && this.width == p.width && this.height == p.height && this.className == p.className;
          }
        }]);

        return Piece;
      }();

      var drawSelectionPlugin = /*@__PURE__*/ViewPlugin.fromClass( /*#__PURE__*/function () {
        function _class3(view) {
          _classCallCheck(this, _class3);

          this.view = view;
          this.rangePieces = [];
          this.cursors = [];
          this.measureReq = {
            read: this.readPos.bind(this),
            write: this.drawSel.bind(this)
          };
          this.selectionLayer = view.scrollDOM.appendChild(document.createElement("div"));
          this.selectionLayer.className = "cm-selectionLayer";
          this.selectionLayer.setAttribute("aria-hidden", "true");
          this.cursorLayer = view.scrollDOM.appendChild(document.createElement("div"));
          this.cursorLayer.className = "cm-cursorLayer";
          this.cursorLayer.setAttribute("aria-hidden", "true");
          view.requestMeasure(this.measureReq);
          this.setBlinkRate();
        }

        _createClass(_class3, [{
          key: "setBlinkRate",
          value: function setBlinkRate() {
            this.cursorLayer.style.animationDuration = this.view.state.facet(selectionConfig).cursorBlinkRate + "ms";
          }
        }, {
          key: "update",
          value: function update(_update9) {
            var confChanged = _update9.startState.facet(selectionConfig) != _update9.state.facet(selectionConfig);

            if (confChanged || _update9.selectionSet || _update9.geometryChanged || _update9.viewportChanged) this.view.requestMeasure(this.measureReq);
            if (_update9.transactions.some(function (tr) {
              return tr.scrollIntoView;
            })) this.cursorLayer.style.animationName = this.cursorLayer.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink";
            if (confChanged) this.setBlinkRate();
          }
        }, {
          key: "readPos",
          value: function readPos() {
            var _this52 = this;

            var state = this.view.state,
                conf = state.facet(selectionConfig);
            var rangePieces = state.selection.ranges.map(function (r) {
              return r.empty ? [] : measureRange(_this52.view, r);
            }).reduce(function (a, b) {
              return a.concat(b);
            });
            var cursors = [];

            var _iterator91 = _createForOfIteratorHelper(state.selection.ranges),
                _step91;

            try {
              for (_iterator91.s(); !(_step91 = _iterator91.n()).done;) {
                var _r = _step91.value;
                var prim = _r == state.selection.main;

                if (_r.empty ? !prim || CanHidePrimary : conf.drawRangeCursor) {
                  var piece = measureCursor(this.view, _r, prim);
                  if (piece) cursors.push(piece);
                }
              }
            } catch (err) {
              _iterator91.e(err);
            } finally {
              _iterator91.f();
            }

            return {
              rangePieces: rangePieces,
              cursors: cursors
            };
          }
        }, {
          key: "drawSel",
          value: function drawSel(_ref16) {
            var _this53 = this;

            var rangePieces = _ref16.rangePieces,
                cursors = _ref16.cursors;

            if (rangePieces.length != this.rangePieces.length || rangePieces.some(function (p, i) {
              return !p.eq(_this53.rangePieces[i]);
            })) {
              this.selectionLayer.textContent = "";

              var _iterator92 = _createForOfIteratorHelper(rangePieces),
                  _step92;

              try {
                for (_iterator92.s(); !(_step92 = _iterator92.n()).done;) {
                  var _p2 = _step92.value;
                  this.selectionLayer.appendChild(_p2.draw());
                }
              } catch (err) {
                _iterator92.e(err);
              } finally {
                _iterator92.f();
              }

              this.rangePieces = rangePieces;
            }

            if (cursors.length != this.cursors.length || cursors.some(function (c, i) {
              return !c.eq(_this53.cursors[i]);
            })) {
              var oldCursors = this.cursorLayer.children;

              if (oldCursors.length !== cursors.length) {
                this.cursorLayer.textContent = "";

                var _iterator93 = _createForOfIteratorHelper(cursors),
                    _step93;

                try {
                  for (_iterator93.s(); !(_step93 = _iterator93.n()).done;) {
                    var c = _step93.value;
                    this.cursorLayer.appendChild(c.draw());
                  }
                } catch (err) {
                  _iterator93.e(err);
                } finally {
                  _iterator93.f();
                }
              } else {
                cursors.forEach(function (c, idx) {
                  return c.adjust(oldCursors[idx]);
                });
              }

              this.cursors = cursors;
            }
          }
        }, {
          key: "destroy",
          value: function destroy() {
            this.selectionLayer.remove();
            this.cursorLayer.remove();
          }
        }]);

        return _class3;
      }());
      var themeSpec = {
        ".cm-line": {
          "& ::selection": {
            backgroundColor: "transparent !important"
          },
          "&::selection": {
            backgroundColor: "transparent !important"
          }
        }
      };
      if (CanHidePrimary) themeSpec[".cm-line"].caretColor = "transparent !important";

      var hideNativeSelection = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Prec"].override( /*@__PURE__*/EditorView.theme(themeSpec));

      function getBase(view) {
        var rect = view.scrollDOM.getBoundingClientRect();
        var left = view.textDirection == Direction.LTR ? rect.left : rect.right - view.scrollDOM.clientWidth;
        return {
          left: left - view.scrollDOM.scrollLeft,
          top: rect.top - view.scrollDOM.scrollTop
        };
      }

      function wrappedLine(view, pos, inside) {
        var range = _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(pos);

        return {
          from: Math.max(inside.from, view.moveToLineBoundary(range, false, true).from),
          to: Math.min(inside.to, view.moveToLineBoundary(range, true, true).from),
          type: BlockType.Text
        };
      }

      function blockAt(view, pos) {
        var line = view.visualLineAt(pos);

        if (Array.isArray(line.type)) {
          var _iterator94 = _createForOfIteratorHelper(line.type),
              _step94;

          try {
            for (_iterator94.s(); !(_step94 = _iterator94.n()).done;) {
              var _l2 = _step94.value;
              if (_l2.to > pos || _l2.to == pos && (_l2.to == line.to || _l2.type == BlockType.Text)) return _l2;
            }
          } catch (err) {
            _iterator94.e(err);
          } finally {
            _iterator94.f();
          }
        }

        return line;
      }

      function measureRange(view, range) {
        if (range.to <= view.viewport.from || range.from >= view.viewport.to) return [];
        var from = Math.max(range.from, view.viewport.from),
            to = Math.min(range.to, view.viewport.to);
        var ltr = view.textDirection == Direction.LTR;
        var content = view.contentDOM,
            contentRect = content.getBoundingClientRect(),
            base = getBase(view);
        var lineStyle = window.getComputedStyle(content.firstChild);
        var leftSide = contentRect.left + parseInt(lineStyle.paddingLeft);
        var rightSide = contentRect.right - parseInt(lineStyle.paddingRight);
        var startBlock = blockAt(view, from),
            endBlock = blockAt(view, to);
        var visualStart = startBlock.type == BlockType.Text ? startBlock : null;
        var visualEnd = endBlock.type == BlockType.Text ? endBlock : null;

        if (view.lineWrapping) {
          if (visualStart) visualStart = wrappedLine(view, from, visualStart);
          if (visualEnd) visualEnd = wrappedLine(view, to, visualEnd);
        }

        if (visualStart && visualEnd && visualStart.from == visualEnd.from) {
          return pieces(drawForLine(range.from, range.to, visualStart));
        } else {
          var top = visualStart ? drawForLine(range.from, null, visualStart) : drawForWidget(startBlock, false);
          var bottom = visualEnd ? drawForLine(null, range.to, visualEnd) : drawForWidget(endBlock, true);
          var between = [];
          if ((visualStart || startBlock).to < (visualEnd || endBlock).from - 1) between.push(piece(leftSide, top.bottom, rightSide, bottom.top));else if (top.bottom < bottom.top && blockAt(view, (top.bottom + bottom.top) / 2).type == BlockType.Text) top.bottom = bottom.top = (top.bottom + bottom.top) / 2;
          return pieces(top).concat(between).concat(pieces(bottom));
        }

        function piece(left, top, right, bottom) {
          return new Piece(left - base.left, top - base.top, right - left, bottom - top, "cm-selectionBackground");
        }

        function pieces(_ref17) {
          var top = _ref17.top,
              bottom = _ref17.bottom,
              horizontal = _ref17.horizontal;
          var pieces = [];

          for (var _i77 = 0; _i77 < horizontal.length; _i77 += 2) {
            pieces.push(piece(horizontal[_i77], top, horizontal[_i77 + 1], bottom));
          }

          return pieces;
        } // Gets passed from/to in line-local positions


        function drawForLine(from, to, line) {
          var top = 1e9,
              bottom = -1e9,
              horizontal = [];

          function addSpan(from, fromOpen, to, toOpen, dir) {
            // Passing 2/-2 is a kludge to force the view to return
            // coordinates on the proper side of block widgets, since
            // normalizing the side there, though appropriate for most
            // coordsAtPos queries, would break selection drawing.
            var fromCoords = view.coordsAtPos(from, from == line.to ? -2 : 2);
            var toCoords = view.coordsAtPos(to, to == line.from ? 2 : -2);
            top = Math.min(fromCoords.top, toCoords.top, top);
            bottom = Math.max(fromCoords.bottom, toCoords.bottom, bottom);
            if (dir == Direction.LTR) horizontal.push(ltr && fromOpen ? leftSide : fromCoords.left, ltr && toOpen ? rightSide : toCoords.right);else horizontal.push(!ltr && toOpen ? leftSide : toCoords.left, !ltr && fromOpen ? rightSide : fromCoords.right);
          }

          var start = from !== null && from !== void 0 ? from : line.from,
              end = to !== null && to !== void 0 ? to : line.to; // Split the range by visible range and document line

          var _iterator95 = _createForOfIteratorHelper(view.visibleRanges),
              _step95;

          try {
            for (_iterator95.s(); !(_step95 = _iterator95.n()).done;) {
              var _r2 = _step95.value;

              if (_r2.to > start && _r2.from < end) {
                for (var pos = Math.max(_r2.from, start), endPos = Math.min(_r2.to, end);;) {
                  var docLine = view.state.doc.lineAt(pos);

                  var _iterator96 = _createForOfIteratorHelper(view.bidiSpans(docLine)),
                      _step96;

                  try {
                    for (_iterator96.s(); !(_step96 = _iterator96.n()).done;) {
                      var span = _step96.value;
                      var spanFrom = span.from + docLine.from,
                          spanTo = span.to + docLine.from;
                      if (spanFrom >= endPos) break;
                      if (spanTo > pos) addSpan(Math.max(spanFrom, pos), from == null && spanFrom <= start, Math.min(spanTo, endPos), to == null && spanTo >= end, span.dir);
                    }
                  } catch (err) {
                    _iterator96.e(err);
                  } finally {
                    _iterator96.f();
                  }

                  pos = docLine.to + 1;
                  if (pos >= endPos) break;
                }
              }
            }
          } catch (err) {
            _iterator95.e(err);
          } finally {
            _iterator95.f();
          }

          if (horizontal.length == 0) addSpan(start, from == null, end, to == null, view.textDirection);
          return {
            top: top,
            bottom: bottom,
            horizontal: horizontal
          };
        }

        function drawForWidget(block, top) {
          var y = contentRect.top + (top ? block.top : block.bottom);
          return {
            top: y,
            bottom: y,
            horizontal: []
          };
        }
      }

      function measureCursor(view, cursor, primary) {
        var pos = view.coordsAtPos(cursor.head, cursor.assoc || 1);
        if (!pos) return null;
        var base = getBase(view);
        return new Piece(pos.left - base.left, pos.top - base.top, -1, pos.bottom - pos.top, primary ? "cm-cursor cm-cursor-primary" : "cm-cursor cm-cursor-secondary");
      }

      function iterMatches(doc, re, from, to, f) {
        re.lastIndex = 0;

        for (var cursor = doc.iterRange(from, to), pos = from, m; !cursor.next().done; pos += cursor.value.length) {
          if (!cursor.lineBreak) while (m = re.exec(cursor.value)) {
            f(pos + m.index, pos + m.index + m[0].length, m);
          }
        }
      }
      /**
      Helper class used to make it easier to maintain decorations on
      visible code that matches a given regular expression. To be used
      in a [view plugin](https://codemirror.net/6/docs/ref/#view.ViewPlugin). Instances of this object
      represent a matching configuration.
      */


      var MatchDecorator = /*#__PURE__*/function () {
        /**
        Create a decorator.
        */
        function MatchDecorator(config) {
          _classCallCheck(this, MatchDecorator);

          var regexp = config.regexp,
              decoration = config.decoration,
              boundary = config.boundary;
          if (!regexp.global) throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
          this.regexp = regexp;
          this.getDeco = typeof decoration == "function" ? decoration : function () {
            return decoration;
          };
          this.boundary = boundary;
        }
        /**
        Compute the full set of decorations for matches in the given
        view's viewport. You'll want to call this when initializing your
        plugin.
        */


        _createClass(MatchDecorator, [{
          key: "createDeco",
          value: function createDeco(view) {
            var _this54 = this;

            var build = new _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_2__["RangeSetBuilder"]();

            var _iterator97 = _createForOfIteratorHelper(view.visibleRanges),
                _step97;

            try {
              for (_iterator97.s(); !(_step97 = _iterator97.n()).done;) {
                var _step97$value = _step97.value,
                    from = _step97$value.from,
                    to = _step97$value.to;
                iterMatches(view.state.doc, this.regexp, from, to, function (a, b, m) {
                  return build.add(a, b, _this54.getDeco(m, view, a));
                });
              }
            } catch (err) {
              _iterator97.e(err);
            } finally {
              _iterator97.f();
            }

            return build.finish();
          }
          /**
          Update a set of decorations for a view update. `deco` _must_ be
          the set of decorations produced by _this_ `MatchDecorator` for
          the view state before the update.
          */

        }, {
          key: "updateDeco",
          value: function updateDeco(update, deco) {
            var changeFrom = 1e9,
                changeTo = -1;
            if (update.docChanged) update.changes.iterChanges(function (_f, _t, from, to) {
              if (to > update.view.viewport.from && from < update.view.viewport.to) {
                changeFrom = Math.min(from, changeFrom);
                changeTo = Math.max(to, changeTo);
              }
            });
            if (update.viewportChanged || changeTo - changeFrom > 1000) return this.createDeco(update.view);
            if (changeTo > -1) return this.updateRange(update.view, deco.map(update.changes), changeFrom, changeTo);
            return deco;
          }
        }, {
          key: "updateRange",
          value: function updateRange(view, deco, updateFrom, updateTo) {
            var _this55 = this;

            var _iterator98 = _createForOfIteratorHelper(view.visibleRanges),
                _step98;

            try {
              for (_iterator98.s(); !(_step98 = _iterator98.n()).done;) {
                var _r3 = _step98.value;
                var from = Math.max(_r3.from, updateFrom),
                    to = Math.min(_r3.to, updateTo);

                if (to > from) {
                  (function () {
                    var fromLine = view.state.doc.lineAt(from),
                        toLine = fromLine.to < to ? view.state.doc.lineAt(to) : fromLine;
                    var start = Math.max(_r3.from, fromLine.from),
                        end = Math.min(_r3.to, toLine.to);

                    if (_this55.boundary) {
                      for (; from > fromLine.from; from--) {
                        if (_this55.boundary.test(fromLine.text[from - 1 - fromLine.from])) {
                          start = from;
                          break;
                        }
                      }

                      for (; to < toLine.to; to++) {
                        if (_this55.boundary.test(toLine.text[to - toLine.from])) {
                          end = to;
                          break;
                        }
                      }
                    }

                    var ranges = [],
                        m = void 0;

                    if (fromLine == toLine) {
                      _this55.regexp.lastIndex = start - fromLine.from;

                      while ((m = _this55.regexp.exec(fromLine.text)) && m.index < end - fromLine.from) {
                        var pos = m.index + fromLine.from;
                        ranges.push(_this55.getDeco(m, view, pos).range(pos, pos + m[0].length));
                      }
                    } else {
                      iterMatches(view.state.doc, _this55.regexp, start, end, function (from, to, m) {
                        return ranges.push(_this55.getDeco(m, view, from).range(from, to));
                      });
                    }

                    deco = deco.update({
                      filterFrom: start,
                      filterTo: end,
                      filter: function filter(from, to) {
                        return from < start || to > end;
                      },
                      add: ranges
                    });
                  })();
                }
              }
            } catch (err) {
              _iterator98.e(err);
            } finally {
              _iterator98.f();
            }

            return deco;
          }
        }]);

        return MatchDecorator;
      }();

      var UnicodeRegexpSupport = /x/.unicode != null ? "gu" : "g";
      var Specials = /*@__PURE__*/new RegExp("[\0-\b\n-\x1F\x7F-\x9F\xAD\u061C\u200B\u200E\u200F\u2028\u2029\uFEFF\uFFF9-\uFFFC]", UnicodeRegexpSupport);
      var Names = {
        0: "null",
        7: "bell",
        8: "backspace",
        10: "newline",
        11: "vertical tab",
        13: "carriage return",
        27: "escape",
        8203: "zero width space",
        8204: "zero width non-joiner",
        8205: "zero width joiner",
        8206: "left-to-right mark",
        8207: "right-to-left mark",
        8232: "line separator",
        8233: "paragraph separator",
        65279: "zero width no-break space",
        65532: "object replacement"
      };
      var _supportsTabSize = null;

      function supportsTabSize() {
        var _a;

        if (_supportsTabSize == null && typeof document != "undefined" && document.body) {
          var styles = document.body.style;
          _supportsTabSize = ((_a = styles.tabSize) !== null && _a !== void 0 ? _a : styles.MozTabSize) != null;
        }

        return _supportsTabSize || false;
      }

      var specialCharConfig = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Facet"].define({
        combine: function combine(configs) {
          var config = Object(_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["combineConfig"])(configs, {
            render: null,
            specialChars: Specials,
            addSpecialChars: null
          });
          if (config.replaceTabs = !supportsTabSize()) config.specialChars = new RegExp("\t|" + config.specialChars.source, UnicodeRegexpSupport);
          if (config.addSpecialChars) config.specialChars = new RegExp(config.specialChars.source + "|" + config.addSpecialChars.source, UnicodeRegexpSupport);
          return config;
        }
      });
      /**
      Returns an extension that installs highlighting of special
      characters.
      */


      function highlightSpecialChars() {
        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return [specialCharConfig.of(config), specialCharPlugin()];
      }

      var _plugin = null;

      function specialCharPlugin() {
        return _plugin || (_plugin = ViewPlugin.fromClass( /*#__PURE__*/function () {
          function _class4(view) {
            _classCallCheck(this, _class4);

            this.view = view;
            this.decorations = Decoration.none;
            this.decorationCache = Object.create(null);
            this.decorator = this.makeDecorator(view.state.facet(specialCharConfig));
            this.decorations = this.decorator.createDeco(view);
          }

          _createClass(_class4, [{
            key: "makeDecorator",
            value: function makeDecorator(conf) {
              var _this56 = this;

              return new MatchDecorator({
                regexp: conf.specialChars,
                decoration: function decoration(m, view, pos) {
                  var doc = view.state.doc;
                  var code = Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_3__["codePointAt"])(m[0], 0);

                  if (code == 9) {
                    var line = doc.lineAt(pos);
                    var size = view.state.tabSize,
                        col = Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_3__["countColumn"])(line.text, size, pos - line.from);
                    return Decoration.replace({
                      widget: new TabWidget((size - col % size) * _this56.view.defaultCharacterWidth)
                    });
                  }

                  return _this56.decorationCache[code] || (_this56.decorationCache[code] = Decoration.replace({
                    widget: new SpecialCharWidget(conf, code)
                  }));
                },
                boundary: conf.replaceTabs ? undefined : /[^]/
              });
            }
          }, {
            key: "update",
            value: function update(_update10) {
              var conf = _update10.state.facet(specialCharConfig);

              if (_update10.startState.facet(specialCharConfig) != conf) {
                this.decorator = this.makeDecorator(conf);
                this.decorations = this.decorator.createDeco(_update10.view);
              } else {
                this.decorations = this.decorator.updateDeco(_update10, this.decorations);
              }
            }
          }]);

          return _class4;
        }(), {
          decorations: function decorations(v) {
            return v.decorations;
          }
        }));
      }

      var DefaultPlaceholder = "\u2022"; // Assigns placeholder characters from the Control Pictures block to
      // ASCII control characters

      function placeholder$1(code) {
        if (code >= 32) return DefaultPlaceholder;
        if (code == 10) return "\u2424";
        return String.fromCharCode(9216 + code);
      }

      var SpecialCharWidget = /*#__PURE__*/function (_WidgetType5) {
        _inherits(SpecialCharWidget, _WidgetType5);

        var _super24 = _createSuper(SpecialCharWidget);

        function SpecialCharWidget(options, code) {
          var _this57;

          _classCallCheck(this, SpecialCharWidget);

          _this57 = _super24.call(this);
          _this57.options = options;
          _this57.code = code;
          return _this57;
        }

        _createClass(SpecialCharWidget, [{
          key: "eq",
          value: function eq(other) {
            return other.code == this.code;
          }
        }, {
          key: "toDOM",
          value: function toDOM(view) {
            var ph = placeholder$1(this.code);
            var desc = view.state.phrase("Control character") + " " + (Names[this.code] || "0x" + this.code.toString(16));
            var custom = this.options.render && this.options.render(this.code, desc, ph);
            if (custom) return custom;
            var span = document.createElement("span");
            span.textContent = ph;
            span.title = desc;
            span.setAttribute("aria-label", desc);
            span.className = "cm-specialChar";
            return span;
          }
        }, {
          key: "ignoreEvent",
          value: function ignoreEvent() {
            return false;
          }
        }]);

        return SpecialCharWidget;
      }(WidgetType);

      var TabWidget = /*#__PURE__*/function (_WidgetType6) {
        _inherits(TabWidget, _WidgetType6);

        var _super25 = _createSuper(TabWidget);

        function TabWidget(width) {
          var _this58;

          _classCallCheck(this, TabWidget);

          _this58 = _super25.call(this);
          _this58.width = width;
          return _this58;
        }

        _createClass(TabWidget, [{
          key: "eq",
          value: function eq(other) {
            return other.width == this.width;
          }
        }, {
          key: "toDOM",
          value: function toDOM() {
            var span = document.createElement("span");
            span.textContent = "\t";
            span.className = "cm-tab";
            span.style.width = this.width + "px";
            return span;
          }
        }, {
          key: "ignoreEvent",
          value: function ignoreEvent() {
            return false;
          }
        }]);

        return TabWidget;
      }(WidgetType);

      var plugin = /*@__PURE__*/ViewPlugin.fromClass( /*#__PURE__*/function () {
        function _class5(view) {
          var _this59 = this;

          _classCallCheck(this, _class5);

          this.height = -1;
          this.measure = {
            read: function read(view) {
              return Math.max(0, view.scrollDOM.clientHeight - view.defaultLineHeight);
            },
            write: function write(value, view) {
              if (Math.abs(value - _this59.height) > 1) {
                _this59.height = value;
                view.contentDOM.style.paddingBottom = value + "px";
              }
            }
          };
          view.requestMeasure(this.measure);
        }

        _createClass(_class5, [{
          key: "update",
          value: function update(_update11) {
            if (_update11.geometryChanged) _update11.view.requestMeasure(this.measure);
          }
        }]);

        return _class5;
      }());
      /**
      Returns a plugin that makes sure the content has a bottom margin
      equivalent to the height of the editor, minus one line height, so
      that every line in the document can be scrolled to the top of the
      editor.
      
      This is only meaningful when the editor is scrollable, and should
      not be enabled in editors that take the size of their content.
      */

      function scrollPastEnd() {
        return plugin;
      }
      /**
      Mark lines that have a cursor on them with the `"cm-activeLine"`
      DOM class.
      */


      function highlightActiveLine() {
        return activeLineHighlighter;
      }

      var lineDeco = /*@__PURE__*/Decoration.line({
        attributes: {
          "class": "cm-activeLine"
        }
      });
      var activeLineHighlighter = /*@__PURE__*/ViewPlugin.fromClass( /*#__PURE__*/function () {
        function _class6(view) {
          _classCallCheck(this, _class6);

          this.decorations = this.getDeco(view);
        }

        _createClass(_class6, [{
          key: "update",
          value: function update(_update12) {
            if (_update12.docChanged || _update12.selectionSet) this.decorations = this.getDeco(_update12.view);
          }
        }, {
          key: "getDeco",
          value: function getDeco(view) {
            var lastLineStart = -1,
                deco = [];

            var _iterator99 = _createForOfIteratorHelper(view.state.selection.ranges),
                _step99;

            try {
              for (_iterator99.s(); !(_step99 = _iterator99.n()).done;) {
                var _r4 = _step99.value;
                if (!_r4.empty) return Decoration.none;
                var line = view.visualLineAt(_r4.head);

                if (line.from > lastLineStart) {
                  deco.push(lineDeco.range(line.from));
                  lastLineStart = line.from;
                }
              }
            } catch (err) {
              _iterator99.e(err);
            } finally {
              _iterator99.f();
            }

            return Decoration.set(deco);
          }
        }]);

        return _class6;
      }(), {
        decorations: function decorations(v) {
          return v.decorations;
        }
      });

      var Placeholder = /*#__PURE__*/function (_WidgetType7) {
        _inherits(Placeholder, _WidgetType7);

        var _super26 = _createSuper(Placeholder);

        function Placeholder(content) {
          var _this60;

          _classCallCheck(this, Placeholder);

          _this60 = _super26.call(this);
          _this60.content = content;
          return _this60;
        }

        _createClass(Placeholder, [{
          key: "toDOM",
          value: function toDOM() {
            var wrap = document.createElement("span");
            wrap.className = "cm-placeholder";
            wrap.style.pointerEvents = "none";
            wrap.appendChild(typeof this.content == "string" ? document.createTextNode(this.content) : this.content);
            if (typeof this.content == "string") wrap.setAttribute("aria-label", "placeholder " + this.content);else wrap.setAttribute("aria-hidden", "true");
            return wrap;
          }
        }, {
          key: "ignoreEvent",
          value: function ignoreEvent() {
            return false;
          }
        }]);

        return Placeholder;
      }(WidgetType);
      /**
      Extension that enables a placeholder—a piece of example content
      to show when the editor is empty.
      */


      function placeholder(content) {
        return ViewPlugin.fromClass( /*#__PURE__*/function () {
          function _class7(view) {
            _classCallCheck(this, _class7);

            this.view = view;
            this.placeholder = Decoration.set([Decoration.widget({
              widget: new Placeholder(content),
              side: 1
            }).range(0)]);
          }

          _createClass(_class7, [{
            key: "decorations",
            get: function get() {
              return this.view.state.doc.length ? Decoration.none : this.placeholder;
            }
          }]);

          return _class7;
        }(), {
          decorations: function decorations(v) {
            return v.decorations;
          }
        });
      }
      /**
      @internal
      */


      var __test = {
        HeightMap: HeightMap,
        HeightOracle: HeightOracle,
        MeasuredHeights: MeasuredHeights,
        QueryType: QueryType,
        ChangedRange: ChangedRange,
        computeOrder: computeOrder,
        moveVisually: moveVisually
      };
      /***/
    },

    /***/
    "BG4M":
    /*!***********************************************************************************!*\
      !*** ./node_modules/@codemirror/fold/node_modules/@codemirror/view/dist/index.js ***!
      \***********************************************************************************/

    /*! exports provided: Range, BidiSpan, BlockInfo, BlockType, Decoration, Direction, EditorView, MatchDecorator, PluginField, PluginFieldProvider, ViewPlugin, ViewUpdate, WidgetType, __test, drawSelection, dropCursor, highlightActiveLine, highlightSpecialChars, keymap, logException, placeholder, runScopeHandlers, scrollPastEnd */

    /***/
    function BG4M(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "BidiSpan", function () {
        return BidiSpan;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "BlockInfo", function () {
        return BlockInfo;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "BlockType", function () {
        return BlockType;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Decoration", function () {
        return Decoration;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Direction", function () {
        return Direction;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EditorView", function () {
        return EditorView;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MatchDecorator", function () {
        return MatchDecorator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PluginField", function () {
        return PluginField;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PluginFieldProvider", function () {
        return PluginFieldProvider;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ViewPlugin", function () {
        return ViewPlugin;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ViewUpdate", function () {
        return ViewUpdate;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "WidgetType", function () {
        return WidgetType;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "__test", function () {
        return __test;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "drawSelection", function () {
        return drawSelection;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "dropCursor", function () {
        return dropCursor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "highlightActiveLine", function () {
        return highlightActiveLine;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "highlightSpecialChars", function () {
        return highlightSpecialChars;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "keymap", function () {
        return keymap;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "logException", function () {
        return logException;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "placeholder", function () {
        return placeholder;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "runScopeHandlers", function () {
        return runScopeHandlers;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "scrollPastEnd", function () {
        return scrollPastEnd;
      });
      /* harmony import */


      var _codemirror_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @codemirror/state */
      "rVk5");
      /* harmony import */


      var style_mod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! style-mod */
      "rknV");
      /* harmony import */


      var _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @codemirror/rangeset */
      "wG49");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "Range", function () {
        return _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_2__["Range"];
      });
      /* harmony import */


      var _codemirror_text__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @codemirror/text */
      "uZp5");
      /* harmony import */


      var w3c_keyname__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! w3c-keyname */
      "nqdA");

      function getSelection(root) {
        var target; // Browsers differ on whether shadow roots have a getSelection
        // method. If it exists, use that, otherwise, call it on the
        // document.

        if (root.nodeType == 11) {
          // Shadow root
          target = root.getSelection ? root : root.ownerDocument;
        } else {
          target = root;
        }

        return target.getSelection();
      }

      function contains(dom, node) {
        return node ? dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;
      }

      function deepActiveElement() {
        var elt = document.activeElement;

        while (elt && elt.shadowRoot) {
          elt = elt.shadowRoot.activeElement;
        }

        return elt;
      }

      function hasSelection(dom, selection) {
        if (!selection.anchorNode) return false;

        try {
          // Firefox will raise 'permission denied' errors when accessing
          // properties of `sel.anchorNode` when it's in a generated CSS
          // element.
          return contains(dom, selection.anchorNode);
        } catch (_) {
          return false;
        }
      }

      function clientRectsFor(dom) {
        if (dom.nodeType == 3) return textRange(dom, 0, dom.nodeValue.length).getClientRects();else if (dom.nodeType == 1) return dom.getClientRects();else return [];
      } // Scans forward and backward through DOM positions equivalent to the
      // given one to see if the two are in the same place (i.e. after a
      // text node vs at the end of that text node)


      function isEquivalentPosition(node, off, targetNode, targetOff) {
        return targetNode ? scanFor(node, off, targetNode, targetOff, -1) || scanFor(node, off, targetNode, targetOff, 1) : false;
      }

      function domIndex(node) {
        for (var index = 0;; index++) {
          node = node.previousSibling;
          if (!node) return index;
        }
      }

      function scanFor(node, off, targetNode, targetOff, dir) {
        for (;;) {
          if (node == targetNode && off == targetOff) return true;

          if (off == (dir < 0 ? 0 : maxOffset(node))) {
            if (node.nodeName == "DIV") return false;
            var parent = node.parentNode;
            if (!parent || parent.nodeType != 1) return false;
            off = domIndex(node) + (dir < 0 ? 0 : 1);
            node = parent;
          } else if (node.nodeType == 1) {
            node = node.childNodes[off + (dir < 0 ? -1 : 0)];
            if (node.nodeType == 1 && node.contentEditable == "false") return false;
            off = dir < 0 ? maxOffset(node) : 0;
          } else {
            return false;
          }
        }
      }

      function maxOffset(node) {
        return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
      }

      var Rect0 = {
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      };

      function flattenRect(rect, left) {
        var x = left ? rect.left : rect.right;
        return {
          left: x,
          right: x,
          top: rect.top,
          bottom: rect.bottom
        };
      }

      function windowRect(win) {
        return {
          left: 0,
          right: win.innerWidth,
          top: 0,
          bottom: win.innerHeight
        };
      }

      function scrollRectIntoView(dom, rect, side, x, y, xMargin, yMargin, ltr) {
        var doc = dom.ownerDocument,
            win = doc.defaultView;

        for (var cur = dom; cur;) {
          if (cur.nodeType == 1) {
            // Element
            var bounding = void 0,
                top = cur == doc.body;

            if (top) {
              bounding = windowRect(win);
            } else {
              if (cur.scrollHeight <= cur.clientHeight && cur.scrollWidth <= cur.clientWidth) {
                cur = cur.parentNode;
                continue;
              }

              var _rect2 = cur.getBoundingClientRect(); // Make sure scrollbar width isn't included in the rectangle


              bounding = {
                left: _rect2.left,
                right: _rect2.left + cur.clientWidth,
                top: _rect2.top,
                bottom: _rect2.top + cur.clientHeight
              };
            }

            var moveX = 0,
                moveY = 0;

            if (y == "nearest") {
              if (rect.top < bounding.top) {
                moveY = -(bounding.top - rect.top + yMargin);
                if (side > 0 && rect.bottom > bounding.bottom + moveY) moveY = rect.bottom - bounding.bottom + moveY + yMargin;
              } else if (rect.bottom > bounding.bottom) {
                moveY = rect.bottom - bounding.bottom + yMargin;
                if (side < 0 && rect.top - moveY < bounding.top) moveY = -(bounding.top + moveY - rect.top + yMargin);
              }
            } else {
              var rectHeight = rect.bottom - rect.top,
                  boundingHeight = bounding.bottom - bounding.top;
              var targetTop = y == "center" && rectHeight <= boundingHeight ? rect.top + rectHeight / 2 - boundingHeight / 2 : y == "start" || y == "center" && side < 0 ? rect.top - yMargin : rect.bottom - boundingHeight + yMargin;
              moveY = targetTop - bounding.top;
            }

            if (x == "nearest") {
              if (rect.left < bounding.left) {
                moveX = -(bounding.left - rect.left + xMargin);
                if (side > 0 && rect.right > bounding.right + moveX) moveX = rect.right - bounding.right + moveX + xMargin;
              } else if (rect.right > bounding.right) {
                moveX = rect.right - bounding.right + xMargin;
                if (side < 0 && rect.left < bounding.left + moveX) moveX = -(bounding.left + moveX - rect.left + xMargin);
              }
            } else {
              var targetLeft = x == "center" ? rect.left + (rect.right - rect.left) / 2 - (bounding.right - bounding.left) / 2 : x == "start" == ltr ? rect.left - xMargin : rect.right - (bounding.right - bounding.left) + xMargin;
              moveX = targetLeft - bounding.left;
            }

            if (moveX || moveY) {
              if (top) {
                win.scrollBy(moveX, moveY);
              } else {
                if (moveY) {
                  var start = cur.scrollTop;
                  cur.scrollTop += moveY;
                  moveY = cur.scrollTop - start;
                }

                if (moveX) {
                  var _start5 = cur.scrollLeft;
                  cur.scrollLeft += moveX;
                  moveX = cur.scrollLeft - _start5;
                }

                rect = {
                  left: rect.left - moveX,
                  top: rect.top - moveY,
                  right: rect.right - moveX,
                  bottom: rect.bottom - moveY
                };
              }
            }

            if (top) break;
            cur = cur.assignedSlot || cur.parentNode;
            x = y = "nearest";
          } else if (cur.nodeType == 11) {
            // A shadow root
            cur = cur.host;
          } else {
            break;
          }
        }
      }

      var DOMSelectionState = /*#__PURE__*/function () {
        function DOMSelectionState() {
          _classCallCheck(this, DOMSelectionState);

          this.anchorNode = null;
          this.anchorOffset = 0;
          this.focusNode = null;
          this.focusOffset = 0;
        }

        _createClass(DOMSelectionState, [{
          key: "eq",
          value: function eq(domSel) {
            return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset && this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
          }
        }, {
          key: "setRange",
          value: function setRange(range) {
            this.set(range.anchorNode, range.anchorOffset, range.focusNode, range.focusOffset);
          }
        }, {
          key: "set",
          value: function set(anchorNode, anchorOffset, focusNode, focusOffset) {
            this.anchorNode = anchorNode;
            this.anchorOffset = anchorOffset;
            this.focusNode = focusNode;
            this.focusOffset = focusOffset;
          }
        }]);

        return DOMSelectionState;
      }();

      var preventScrollSupported = null; // Feature-detects support for .focus({preventScroll: true}), and uses
      // a fallback kludge when not supported.

      function focusPreventScroll(dom) {
        if (dom.setActive) return dom.setActive(); // in IE

        if (preventScrollSupported) return dom.focus(preventScrollSupported);
        var stack = [];

        for (var cur = dom; cur; cur = cur.parentNode) {
          stack.push(cur, cur.scrollTop, cur.scrollLeft);
          if (cur == cur.ownerDocument) break;
        }

        dom.focus(preventScrollSupported == null ? {
          get preventScroll() {
            preventScrollSupported = {
              preventScroll: true
            };
            return true;
          }

        } : undefined);

        if (!preventScrollSupported) {
          preventScrollSupported = false;

          for (var _i78 = 0; _i78 < stack.length;) {
            var elt = stack[_i78++],
                top = stack[_i78++],
                left = stack[_i78++];
            if (elt.scrollTop != top) elt.scrollTop = top;
            if (elt.scrollLeft != left) elt.scrollLeft = left;
          }
        }
      }

      var scratchRange;

      function textRange(node, from) {
        var to = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : from;
        var range = scratchRange || (scratchRange = document.createRange());
        range.setEnd(node, to);
        range.setStart(node, from);
        return range;
      }

      function dispatchKey(elt, name, code) {
        var options = {
          key: name,
          code: name,
          keyCode: code,
          which: code,
          cancelable: true
        };
        var down = new KeyboardEvent("keydown", options);
        down.synthetic = true;
        elt.dispatchEvent(down);
        var up = new KeyboardEvent("keyup", options);
        up.synthetic = true;
        elt.dispatchEvent(up);
        return down.defaultPrevented || up.defaultPrevented;
      }

      function getRoot(node) {
        while (node) {
          if (node && (node.nodeType == 9 || node.nodeType == 11 && node.host)) return node;
          node = node.assignedSlot || node.parentNode;
        }

        return null;
      }

      function clearAttributes(node) {
        while (node.attributes.length) {
          node.removeAttributeNode(node.attributes[0]);
        }
      }

      var DOMPos = /*#__PURE__*/function () {
        function DOMPos(node, offset) {
          var precise = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

          _classCallCheck(this, DOMPos);

          this.node = node;
          this.offset = offset;
          this.precise = precise;
        }

        _createClass(DOMPos, null, [{
          key: "before",
          value: function before(dom, precise) {
            return new DOMPos(dom.parentNode, domIndex(dom), precise);
          }
        }, {
          key: "after",
          value: function after(dom, precise) {
            return new DOMPos(dom.parentNode, domIndex(dom) + 1, precise);
          }
        }]);

        return DOMPos;
      }();

      var noChildren = [];

      var ContentView = /*#__PURE__*/function () {
        function ContentView() {
          _classCallCheck(this, ContentView);

          this.parent = null;
          this.dom = null;
          this.dirty = 2
          /* Node */
          ;
        }

        _createClass(ContentView, [{
          key: "editorView",
          get: function get() {
            if (!this.parent) throw new Error("Accessing view in orphan content view");
            return this.parent.editorView;
          }
        }, {
          key: "overrideDOMText",
          get: function get() {
            return null;
          }
        }, {
          key: "posAtStart",
          get: function get() {
            return this.parent ? this.parent.posBefore(this) : 0;
          }
        }, {
          key: "posAtEnd",
          get: function get() {
            return this.posAtStart + this.length;
          }
        }, {
          key: "posBefore",
          value: function posBefore(view) {
            var pos = this.posAtStart;

            var _iterator100 = _createForOfIteratorHelper(this.children),
                _step100;

            try {
              for (_iterator100.s(); !(_step100 = _iterator100.n()).done;) {
                var child = _step100.value;
                if (child == view) return pos;
                pos += child.length + child.breakAfter;
              }
            } catch (err) {
              _iterator100.e(err);
            } finally {
              _iterator100.f();
            }

            throw new RangeError("Invalid child in posBefore");
          }
        }, {
          key: "posAfter",
          value: function posAfter(view) {
            return this.posBefore(view) + view.length;
          } // Will return a rectangle directly before (when side < 0), after
          // (side > 0) or directly on (when the browser supports it) the
          // given position.

        }, {
          key: "coordsAt",
          value: function coordsAt(_pos, _side) {
            return null;
          }
        }, {
          key: "sync",
          value: function sync(track) {
            if (this.dirty & 2
            /* Node */
            ) {
              var parent = this.dom;
              var pos = parent.firstChild;

              var _iterator101 = _createForOfIteratorHelper(this.children),
                  _step101;

              try {
                for (_iterator101.s(); !(_step101 = _iterator101.n()).done;) {
                  var child = _step101.value;

                  if (child.dirty) {
                    if (!child.dom && pos) {
                      var contentView = ContentView.get(pos);
                      if (!contentView || !contentView.parent && contentView.constructor == child.constructor) child.reuseDOM(pos);
                    }

                    child.sync(track);
                    child.dirty = 0
                    /* Not */
                    ;
                  }

                  if (track && !track.written && track.node == parent && pos != child.dom) track.written = true;

                  if (child.dom.parentNode == parent) {
                    while (pos && pos != child.dom) {
                      pos = rm(pos);
                    }

                    pos = child.dom.nextSibling;
                  } else {
                    parent.insertBefore(child.dom, pos);
                  }
                }
              } catch (err) {
                _iterator101.e(err);
              } finally {
                _iterator101.f();
              }

              if (pos && track && track.node == parent) track.written = true;

              while (pos) {
                pos = rm(pos);
              }
            } else if (this.dirty & 1
            /* Child */
            ) {
              var _iterator102 = _createForOfIteratorHelper(this.children),
                  _step102;

              try {
                for (_iterator102.s(); !(_step102 = _iterator102.n()).done;) {
                  var _child2 = _step102.value;

                  if (_child2.dirty) {
                    _child2.sync(track);

                    _child2.dirty = 0
                    /* Not */
                    ;
                  }
                }
              } catch (err) {
                _iterator102.e(err);
              } finally {
                _iterator102.f();
              }
            }
          }
        }, {
          key: "reuseDOM",
          value: function reuseDOM(_dom) {}
        }, {
          key: "localPosFromDOM",
          value: function localPosFromDOM(node, offset) {
            var after;

            if (node == this.dom) {
              after = this.dom.childNodes[offset];
            } else {
              var bias = maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;

              for (;;) {
                var parent = node.parentNode;
                if (parent == this.dom) break;

                if (bias == 0 && parent.firstChild != parent.lastChild) {
                  if (node == parent.firstChild) bias = -1;else bias = 1;
                }

                node = parent;
              }

              if (bias < 0) after = node;else after = node.nextSibling;
            }

            if (after == this.dom.firstChild) return 0;

            while (after && !ContentView.get(after)) {
              after = after.nextSibling;
            }

            if (!after) return this.length;

            for (var _i79 = 0, pos = 0;; _i79++) {
              var child = this.children[_i79];
              if (child.dom == after) return pos;
              pos += child.length + child.breakAfter;
            }
          }
        }, {
          key: "domBoundsAround",
          value: function domBoundsAround(from, to) {
            var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
            var fromI = -1,
                fromStart = -1,
                toI = -1,
                toEnd = -1;

            for (var _i80 = 0, pos = offset, prevEnd = offset; _i80 < this.children.length; _i80++) {
              var child = this.children[_i80],
                  end = pos + child.length;
              if (pos < from && end > to) return child.domBoundsAround(from, to, pos);

              if (end >= from && fromI == -1) {
                fromI = _i80;
                fromStart = pos;
              }

              if (pos > to && child.dom.parentNode == this.dom) {
                toI = _i80;
                toEnd = prevEnd;
                break;
              }

              prevEnd = end;
              pos = end + child.breakAfter;
            }

            return {
              from: fromStart,
              to: toEnd < 0 ? offset + this.length : toEnd,
              startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,
              endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null
            };
          }
        }, {
          key: "markDirty",
          value: function markDirty() {
            var andParent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
            this.dirty |= 2
            /* Node */
            ;
            this.markParentsDirty(andParent);
          }
        }, {
          key: "markParentsDirty",
          value: function markParentsDirty(childList) {
            for (var parent = this.parent; parent; parent = parent.parent) {
              if (childList) parent.dirty |= 2
              /* Node */
              ;
              if (parent.dirty & 1
              /* Child */
              ) return;
              parent.dirty |= 1
              /* Child */
              ;
              childList = false;
            }
          }
        }, {
          key: "setParent",
          value: function setParent(parent) {
            if (this.parent != parent) {
              this.parent = parent;
              if (this.dirty) this.markParentsDirty(true);
            }
          }
        }, {
          key: "setDOM",
          value: function setDOM(dom) {
            if (this.dom) this.dom.cmView = null;
            this.dom = dom;
            dom.cmView = this;
          }
        }, {
          key: "rootView",
          get: function get() {
            for (var v = this;;) {
              var parent = v.parent;
              if (!parent) return v;
              v = parent;
            }
          }
        }, {
          key: "replaceChildren",
          value: function replaceChildren(from, to) {
            var _this$children2;

            var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noChildren;
            this.markDirty();

            for (var _i81 = from; _i81 < to; _i81++) {
              var child = this.children[_i81];
              if (child.parent == this) child.destroy();
            }

            (_this$children2 = this.children).splice.apply(_this$children2, [from, to - from].concat(_toConsumableArray(children)));

            for (var _i82 = 0; _i82 < children.length; _i82++) {
              children[_i82].setParent(this);
            }
          }
        }, {
          key: "ignoreMutation",
          value: function ignoreMutation(_rec) {
            return false;
          }
        }, {
          key: "ignoreEvent",
          value: function ignoreEvent(_event) {
            return false;
          }
        }, {
          key: "childCursor",
          value: function childCursor() {
            var pos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.length;
            return new ChildCursor(this.children, pos, this.children.length);
          }
        }, {
          key: "childPos",
          value: function childPos(pos) {
            var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
            return this.childCursor().findPos(pos, bias);
          }
        }, {
          key: "toString",
          value: function toString() {
            var name = this.constructor.name.replace("View", "");
            return name + (this.children.length ? "(" + this.children.join() + ")" : this.length ? "[" + (name == "Text" ? this.text : this.length) + "]" : "") + (this.breakAfter ? "#" : "");
          }
        }, {
          key: "isEditable",
          get: function get() {
            return true;
          }
        }, {
          key: "merge",
          value: function merge(from, to, source, hasStart, openStart, openEnd) {
            return false;
          }
        }, {
          key: "become",
          value: function become(other) {
            return false;
          } // When this is a zero-length view with a side, this should return a
          // number <= 0 to indicate it is before its position, or a
          // number > 0 when after its position.

        }, {
          key: "getSide",
          value: function getSide() {
            return 0;
          }
        }, {
          key: "destroy",
          value: function destroy() {
            this.parent = null;
          }
        }], [{
          key: "get",
          value: function get(node) {
            return node.cmView;
          }
        }]);

        return ContentView;
      }();

      ContentView.prototype.breakAfter = 0; // Remove a DOM node and return its next sibling.

      function rm(dom) {
        var next = dom.nextSibling;
        dom.parentNode.removeChild(dom);
        return next;
      }

      var ChildCursor = /*#__PURE__*/function () {
        function ChildCursor(children, pos, i) {
          _classCallCheck(this, ChildCursor);

          this.children = children;
          this.pos = pos;
          this.i = i;
          this.off = 0;
        }

        _createClass(ChildCursor, [{
          key: "findPos",
          value: function findPos(pos) {
            var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

            for (;;) {
              if (pos > this.pos || pos == this.pos && (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
                this.off = pos - this.pos;
                return this;
              }

              var next = this.children[--this.i];
              this.pos -= next.length + next.breakAfter;
            }
          }
        }]);

        return ChildCursor;
      }();

      function replaceRange(parent, fromI, fromOff, toI, toOff, insert, breakAtStart, openStart, openEnd) {
        var children = parent.children;
        var before = children.length ? children[fromI] : null;
        var last = insert.length ? insert[insert.length - 1] : null;
        var breakAtEnd = last ? last.breakAfter : breakAtStart; // Change within a single child

        if (fromI == toI && before && !breakAtStart && !breakAtEnd && insert.length < 2 && before.merge(fromOff, toOff, insert.length ? last : null, fromOff == 0, openStart, openEnd)) return;

        if (toI < children.length) {
          var after = children[toI]; // Make sure the end of the child after the update is preserved in `after`

          if (after && toOff < after.length) {
            // If we're splitting a child, separate part of it to avoid that
            // being mangled when updating the child before the update.
            if (fromI == toI) {
              after = after.split(toOff);
              toOff = 0;
            } // If the element after the replacement should be merged with
            // the last replacing element, update `content`


            if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {
              insert[insert.length - 1] = after;
            } else {
              // Remove the start of the after element, if necessary, and
              // add it to `content`.
              if (toOff) after.merge(0, toOff, null, false, 0, openEnd);
              insert.push(after);
            }
          } else if (after === null || after === void 0 ? void 0 : after.breakAfter) {
            // The element at `toI` is entirely covered by this range.
            // Preserve its line break, if any.
            if (last) last.breakAfter = 1;else breakAtStart = 1;
          } // Since we've handled the next element from the current elements
          // now, make sure `toI` points after that.


          toI++;
        }

        if (before) {
          before.breakAfter = breakAtStart;

          if (fromOff > 0) {
            if (!breakAtStart && insert.length && before.merge(fromOff, before.length, insert[0], false, openStart, 0)) {
              before.breakAfter = insert.shift().breakAfter;
            } else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
              before.merge(fromOff, before.length, null, false, openStart, 0);
            }

            fromI++;
          }
        } // Try to merge widgets on the boundaries of the replacement


        while (fromI < toI && insert.length) {
          if (children[toI - 1].become(insert[insert.length - 1])) {
            toI--;
            insert.pop();
            openEnd = insert.length ? 0 : openStart;
          } else if (children[fromI].become(insert[0])) {
            fromI++;
            insert.shift();
            openStart = insert.length ? 0 : openEnd;
          } else {
            break;
          }
        }

        if (!insert.length && fromI && toI < children.length && !children[fromI - 1].breakAfter && children[toI].merge(0, 0, children[fromI - 1], false, openStart, openEnd)) fromI--;
        if (fromI < toI || insert.length) parent.replaceChildren(fromI, toI, insert);
      }

      function mergeChildrenInto(parent, from, to, insert, openStart, openEnd) {
        var cur = parent.childCursor();

        var _cur$findPos3 = cur.findPos(to, 1),
            toI = _cur$findPos3.i,
            toOff = _cur$findPos3.off;

        var _cur$findPos4 = cur.findPos(from, -1),
            fromI = _cur$findPos4.i,
            fromOff = _cur$findPos4.off;

        var dLen = from - to;

        var _iterator103 = _createForOfIteratorHelper(insert),
            _step103;

        try {
          for (_iterator103.s(); !(_step103 = _iterator103.n()).done;) {
            var view = _step103.value;
            dLen += view.length;
          }
        } catch (err) {
          _iterator103.e(err);
        } finally {
          _iterator103.f();
        }

        parent.length += dLen;
        replaceRange(parent, fromI, fromOff, toI, toOff, insert, 0, openStart, openEnd);
      }

      var _ref18 = typeof navigator != "undefined" ? [navigator, document] : [{
        userAgent: "",
        vendor: "",
        platform: ""
      }, {
        documentElement: {
          style: {}
        }
      }],
          _ref19 = _slicedToArray(_ref18, 2),
          nav = _ref19[0],
          doc = _ref19[1];

      var ie_edge = /*@__PURE__*/ /Edge\/(\d+)/.exec(nav.userAgent);
      var ie_upto10 = /*@__PURE__*/ /MSIE \d/.test(nav.userAgent);
      var ie_11up = /*@__PURE__*/ /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav.userAgent);
      var ie = !!(ie_upto10 || ie_11up || ie_edge);
      var gecko = !ie && /*@__PURE__*/ /gecko\/(\d+)/i.test(nav.userAgent);
      var chrome = !ie && /*@__PURE__*/ /Chrome\/(\d+)/.exec(nav.userAgent);
      var webkit = ("webkitFontSmoothing" in doc.documentElement.style);
      var safari = !ie && /*@__PURE__*/ /Apple Computer/.test(nav.vendor);
      var ios = safari && ( /*@__PURE__*/ /Mobile\/\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2);
      var browser = {
        mac: ios || /*@__PURE__*/ /Mac/.test(nav.platform),
        windows: /*@__PURE__*/ /Win/.test(nav.platform),
        linux: /*@__PURE__*/ /Linux|X11/.test(nav.platform),
        ie: ie,
        ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,
        gecko: gecko,
        gecko_version: gecko ? +( /*@__PURE__*/ /Firefox\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
        chrome: !!chrome,
        chrome_version: chrome ? +chrome[1] : 0,
        ios: ios,
        android: /*@__PURE__*/ /Android\b/.test(nav.userAgent),
        webkit: webkit,
        safari: safari,
        webkit_version: webkit ? +( /*@__PURE__*/ /\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0,
        tabSize: doc.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
      };
      var MaxJoinLen = 256;

      var TextView = /*#__PURE__*/function (_ContentView5) {
        _inherits(TextView, _ContentView5);

        var _super27 = _createSuper(TextView);

        function TextView(text) {
          var _this61;

          _classCallCheck(this, TextView);

          _this61 = _super27.call(this);
          _this61.text = text;
          return _this61;
        }

        _createClass(TextView, [{
          key: "length",
          get: function get() {
            return this.text.length;
          }
        }, {
          key: "createDOM",
          value: function createDOM(textDOM) {
            this.setDOM(textDOM || document.createTextNode(this.text));
          }
        }, {
          key: "sync",
          value: function sync(track) {
            if (!this.dom) this.createDOM();

            if (this.dom.nodeValue != this.text) {
              if (track && track.node == this.dom) track.written = true;
              this.dom.nodeValue = this.text;
            }
          }
        }, {
          key: "reuseDOM",
          value: function reuseDOM(dom) {
            if (dom.nodeType == 3) this.createDOM(dom);
          }
        }, {
          key: "merge",
          value: function merge(from, to, source) {
            if (source && (!(source instanceof TextView) || this.length - (to - from) + source.length > MaxJoinLen)) return false;
            this.text = this.text.slice(0, from) + (source ? source.text : "") + this.text.slice(to);
            this.markDirty();
            return true;
          }
        }, {
          key: "split",
          value: function split(from) {
            var result = new TextView(this.text.slice(from));
            this.text = this.text.slice(0, from);
            this.markDirty();
            return result;
          }
        }, {
          key: "localPosFromDOM",
          value: function localPosFromDOM(node, offset) {
            return node == this.dom ? offset : offset ? this.text.length : 0;
          }
        }, {
          key: "domAtPos",
          value: function domAtPos(pos) {
            return new DOMPos(this.dom, pos);
          }
        }, {
          key: "domBoundsAround",
          value: function domBoundsAround(_from, _to, offset) {
            return {
              from: offset,
              to: offset + this.length,
              startDOM: this.dom,
              endDOM: this.dom.nextSibling
            };
          }
        }, {
          key: "coordsAt",
          value: function coordsAt(pos, side) {
            return textCoords(this.dom, pos, side);
          }
        }]);

        return TextView;
      }(ContentView);

      var MarkView = /*#__PURE__*/function (_ContentView6) {
        _inherits(MarkView, _ContentView6);

        var _super28 = _createSuper(MarkView);

        function MarkView(mark) {
          var _this62;

          var children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
          var length = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

          _classCallCheck(this, MarkView);

          _this62 = _super28.call(this);
          _this62.mark = mark;
          _this62.children = children;
          _this62.length = length;

          var _iterator104 = _createForOfIteratorHelper(children),
              _step104;

          try {
            for (_iterator104.s(); !(_step104 = _iterator104.n()).done;) {
              var ch = _step104.value;
              ch.setParent(_assertThisInitialized(_this62));
            }
          } catch (err) {
            _iterator104.e(err);
          } finally {
            _iterator104.f();
          }

          return _this62;
        }

        _createClass(MarkView, [{
          key: "setAttrs",
          value: function setAttrs(dom) {
            clearAttributes(dom);
            if (this.mark["class"]) dom.className = this.mark["class"];
            if (this.mark.attrs) for (var name in this.mark.attrs) {
              dom.setAttribute(name, this.mark.attrs[name]);
            }
            return dom;
          }
        }, {
          key: "reuseDOM",
          value: function reuseDOM(node) {
            if (node.nodeName == this.mark.tagName.toUpperCase()) {
              this.setDOM(node);
              this.dirty |= 4
              /* Attrs */
              | 2
              /* Node */
              ;
            }
          }
        }, {
          key: "sync",
          value: function sync(track) {
            if (!this.dom) this.setDOM(this.setAttrs(document.createElement(this.mark.tagName)));else if (this.dirty & 4
            /* Attrs */
            ) this.setAttrs(this.dom);

            _get(_getPrototypeOf(MarkView.prototype), "sync", this).call(this, track);
          }
        }, {
          key: "merge",
          value: function merge(from, to, source, _hasStart, openStart, openEnd) {
            if (source && (!(source instanceof MarkView && source.mark.eq(this.mark)) || from && openStart <= 0 || to < this.length && openEnd <= 0)) return false;
            mergeChildrenInto(this, from, to, source ? source.children : [], openStart - 1, openEnd - 1);
            this.markDirty();
            return true;
          }
        }, {
          key: "split",
          value: function split(from) {
            var result = [],
                off = 0,
                detachFrom = -1,
                i = 0;

            var _iterator105 = _createForOfIteratorHelper(this.children),
                _step105;

            try {
              for (_iterator105.s(); !(_step105 = _iterator105.n()).done;) {
                var elt = _step105.value;
                var end = off + elt.length;
                if (end > from) result.push(off < from ? elt.split(from - off) : elt);
                if (detachFrom < 0 && off >= from) detachFrom = i;
                off = end;
                i++;
              }
            } catch (err) {
              _iterator105.e(err);
            } finally {
              _iterator105.f();
            }

            var length = this.length - from;
            this.length = from;

            if (detachFrom > -1) {
              this.children.length = detachFrom;
              this.markDirty();
            }

            return new MarkView(this.mark, result, length);
          }
        }, {
          key: "domAtPos",
          value: function domAtPos(pos) {
            return inlineDOMAtPos(this.dom, this.children, pos);
          }
        }, {
          key: "coordsAt",
          value: function coordsAt(pos, side) {
            return coordsInChildren(this, pos, side);
          }
        }]);

        return MarkView;
      }(ContentView);

      function textCoords(text, pos, side) {
        var length = text.nodeValue.length;
        if (pos > length) pos = length;
        var from = pos,
            to = pos,
            flatten = 0;

        if (pos == 0 && side < 0 || pos == length && side >= 0) {
          if (!(browser.chrome || browser.gecko)) {
            // These browsers reliably return valid rectangles for empty ranges
            if (pos) {
              from--;
              flatten = 1;
            } // FIXME this is wrong in RTL text
            else {
              to++;
              flatten = -1;
            }
          }
        } else {
          if (side < 0) from--;else to++;
        }

        var rects = textRange(text, from, to).getClientRects();
        if (!rects.length) return Rect0;
        var rect = rects[(flatten ? flatten < 0 : side >= 0) ? 0 : rects.length - 1];
        if (browser.safari && !flatten && rect.width == 0) rect = Array.prototype.find.call(rects, function (r) {
          return r.width;
        }) || rect;
        return flatten ? flattenRect(rect, flatten < 0) : rect || null;
      } // Also used for collapsed ranges that don't have a placeholder widget!


      var WidgetView = /*#__PURE__*/function (_ContentView7) {
        _inherits(WidgetView, _ContentView7);

        var _super29 = _createSuper(WidgetView);

        function WidgetView(widget, length, side) {
          var _this63;

          _classCallCheck(this, WidgetView);

          _this63 = _super29.call(this);
          _this63.widget = widget;
          _this63.length = length;
          _this63.side = side;
          return _this63;
        }

        _createClass(WidgetView, [{
          key: "split",
          value: function split(from) {
            var result = WidgetView.create(this.widget, this.length - from, this.side);
            this.length -= from;
            return result;
          }
        }, {
          key: "sync",
          value: function sync() {
            if (!this.dom || !this.widget.updateDOM(this.dom)) {
              this.setDOM(this.widget.toDOM(this.editorView));
              this.dom.contentEditable = "false";
            }
          }
        }, {
          key: "getSide",
          value: function getSide() {
            return this.side;
          }
        }, {
          key: "merge",
          value: function merge(from, to, source, hasStart, openStart, openEnd) {
            if (source && (!(source instanceof WidgetView) || !this.widget.compare(source.widget) || from > 0 && openStart <= 0 || to < this.length && openEnd <= 0)) return false;
            this.length = from + (source ? source.length : 0) + (this.length - to);
            return true;
          }
        }, {
          key: "become",
          value: function become(other) {
            if (other.length == this.length && other instanceof WidgetView && other.side == this.side) {
              if (this.widget.constructor == other.widget.constructor) {
                if (!this.widget.eq(other.widget)) this.markDirty(true);
                this.widget = other.widget;
                return true;
              }
            }

            return false;
          }
        }, {
          key: "ignoreMutation",
          value: function ignoreMutation() {
            return true;
          }
        }, {
          key: "ignoreEvent",
          value: function ignoreEvent(event) {
            return this.widget.ignoreEvent(event);
          }
        }, {
          key: "overrideDOMText",
          get: function get() {
            if (this.length == 0) return _codemirror_text__WEBPACK_IMPORTED_MODULE_3__["Text"].empty;
            var top = this;

            while (top.parent) {
              top = top.parent;
            }

            var view = top.editorView,
                text = view && view.state.doc,
                start = this.posAtStart;
            return text ? text.slice(start, start + this.length) : _codemirror_text__WEBPACK_IMPORTED_MODULE_3__["Text"].empty;
          }
        }, {
          key: "domAtPos",
          value: function domAtPos(pos) {
            return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
          }
        }, {
          key: "domBoundsAround",
          value: function domBoundsAround() {
            return null;
          }
        }, {
          key: "coordsAt",
          value: function coordsAt(pos, side) {
            var rects = this.dom.getClientRects(),
                rect = null;
            if (!rects.length) return Rect0;

            for (var _i83 = pos > 0 ? rects.length - 1 : 0;; _i83 += pos > 0 ? -1 : 1) {
              rect = rects[_i83];
              if (pos > 0 ? _i83 == 0 : _i83 == rects.length - 1 || rect.top < rect.bottom) break;
            }

            return pos == 0 && side > 0 || pos == this.length && side <= 0 ? rect : flattenRect(rect, pos == 0);
          }
        }, {
          key: "isEditable",
          get: function get() {
            return false;
          }
        }, {
          key: "destroy",
          value: function destroy() {
            _get(_getPrototypeOf(WidgetView.prototype), "destroy", this).call(this);

            if (this.dom) this.widget.destroy(this.dom);
          }
        }], [{
          key: "create",
          value: function create(widget, length, side) {
            return new (widget.customView || WidgetView)(widget, length, side);
          }
        }]);

        return WidgetView;
      }(ContentView);

      var CompositionView = /*#__PURE__*/function (_WidgetView2) {
        _inherits(CompositionView, _WidgetView2);

        var _super30 = _createSuper(CompositionView);

        function CompositionView() {
          _classCallCheck(this, CompositionView);

          return _super30.apply(this, arguments);
        }

        _createClass(CompositionView, [{
          key: "domAtPos",
          value: function domAtPos(pos) {
            return new DOMPos(this.widget.text, pos);
          }
        }, {
          key: "sync",
          value: function sync() {
            this.setDOM(this.widget.toDOM());
          }
        }, {
          key: "localPosFromDOM",
          value: function localPosFromDOM(node, offset) {
            return !offset ? 0 : node.nodeType == 3 ? Math.min(offset, this.length) : this.length;
          }
        }, {
          key: "ignoreMutation",
          value: function ignoreMutation() {
            return false;
          }
        }, {
          key: "overrideDOMText",
          get: function get() {
            return null;
          }
        }, {
          key: "coordsAt",
          value: function coordsAt(pos, side) {
            return textCoords(this.widget.text, pos, side);
          }
        }, {
          key: "isEditable",
          get: function get() {
            return true;
          }
        }]);

        return CompositionView;
      }(WidgetView); // Use two characters on Android, to prevent Chrome from closing the
      // virtual keyboard when backspacing after a widget (#602).


      var ZeroWidthSpace = browser.android ? "\u200B\u200B" : "\u200B"; // These are drawn around uneditable widgets to avoid a number of
      // browser bugs that show up when the cursor is directly next to
      // uneditable inline content.

      var WidgetBufferView = /*#__PURE__*/function (_ContentView8) {
        _inherits(WidgetBufferView, _ContentView8);

        var _super31 = _createSuper(WidgetBufferView);

        function WidgetBufferView(side) {
          var _this64;

          _classCallCheck(this, WidgetBufferView);

          _this64 = _super31.call(this);
          _this64.side = side;
          return _this64;
        }

        _createClass(WidgetBufferView, [{
          key: "length",
          get: function get() {
            return 0;
          }
        }, {
          key: "merge",
          value: function merge() {
            return false;
          }
        }, {
          key: "become",
          value: function become(other) {
            return other instanceof WidgetBufferView && other.side == this.side;
          }
        }, {
          key: "split",
          value: function split() {
            return new WidgetBufferView(this.side);
          }
        }, {
          key: "sync",
          value: function sync() {
            if (!this.dom) this.setDOM(document.createTextNode(ZeroWidthSpace));else if (this.dirty && this.dom.nodeValue != ZeroWidthSpace) this.dom.nodeValue = ZeroWidthSpace;
          }
        }, {
          key: "getSide",
          value: function getSide() {
            return this.side;
          }
        }, {
          key: "domAtPos",
          value: function domAtPos(pos) {
            return DOMPos.before(this.dom);
          }
        }, {
          key: "localPosFromDOM",
          value: function localPosFromDOM() {
            return 0;
          }
        }, {
          key: "domBoundsAround",
          value: function domBoundsAround() {
            return null;
          }
        }, {
          key: "coordsAt",
          value: function coordsAt(pos) {
            var rects = clientRectsFor(this.dom);
            return rects[rects.length - 1] || null;
          }
        }, {
          key: "overrideDOMText",
          get: function get() {
            return _codemirror_text__WEBPACK_IMPORTED_MODULE_3__["Text"].of([this.dom.nodeValue.replace(/\u200b/g, "")]);
          }
        }]);

        return WidgetBufferView;
      }(ContentView);

      TextView.prototype.children = WidgetView.prototype.children = WidgetBufferView.prototype.children = noChildren;

      function inlineDOMAtPos(dom, children, pos) {
        var i = 0;

        for (var off = 0; i < children.length; i++) {
          var child = children[i],
              end = off + child.length;
          if (end == off && child.getSide() <= 0) continue;
          if (pos > off && pos < end && child.dom.parentNode == dom) return child.domAtPos(pos - off);
          if (pos <= off) break;
          off = end;
        }

        for (; i > 0; i--) {
          var before = children[i - 1].dom;
          if (before.parentNode == dom) return DOMPos.after(before);
        }

        return new DOMPos(dom, 0);
      } // Assumes `view`, if a mark view, has precisely 1 child.


      function joinInlineInto(parent, view, open) {
        var last,
            children = parent.children;

        if (open > 0 && view instanceof MarkView && children.length && (last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {
          joinInlineInto(last, view.children[0], open - 1);
        } else {
          children.push(view);
          view.setParent(parent);
        }

        parent.length += view.length;
      }

      function coordsInChildren(view, pos, side) {
        for (var off = 0, _i84 = 0; _i84 < view.children.length; _i84++) {
          var child = view.children[_i84],
              end = off + child.length,
              next = void 0;

          if ((side <= 0 || end == view.length || child.getSide() > 0 ? end >= pos : end > pos) && (pos < end || _i84 + 1 == view.children.length || (next = view.children[_i84 + 1]).length || next.getSide() > 0)) {
            var flatten = 0;

            if (end == off) {
              if (child.getSide() <= 0) continue;
              flatten = side = -child.getSide();
            }

            var rect = child.coordsAt(pos - off, side);
            return flatten && rect ? flattenRect(rect, side < 0) : rect;
          }

          off = end;
        }

        var last = view.dom.lastChild;
        if (!last) return view.dom.getBoundingClientRect();
        var rects = clientRectsFor(last);
        return rects[rects.length - 1] || null;
      }

      function combineAttrs(source, target) {
        for (var name in source) {
          if (name == "class" && target["class"]) target["class"] += " " + source["class"];else if (name == "style" && target.style) target.style += ";" + source.style;else target[name] = source[name];
        }

        return target;
      }

      function attrsEq(a, b) {
        if (a == b) return true;
        if (!a || !b) return false;
        var keysA = Object.keys(a),
            keysB = Object.keys(b);
        if (keysA.length != keysB.length) return false;

        for (var _i85 = 0, _keysA2 = keysA; _i85 < _keysA2.length; _i85++) {
          var key = _keysA2[_i85];
          if (keysB.indexOf(key) == -1 || a[key] !== b[key]) return false;
        }

        return true;
      }

      function _updateAttrs2(dom, prev, attrs) {
        if (prev) for (var name in prev) {
          if (!(attrs && name in attrs)) dom.removeAttribute(name);
        }
        if (attrs) for (var _name2 in attrs) {
          if (!(prev && prev[_name2] == attrs[_name2])) dom.setAttribute(_name2, attrs[_name2]);
        }
      }
      /**
      Widgets added to the content are described by subclasses of this
      class. Using a description object like that makes it possible to
      delay creating of the DOM structure for a widget until it is
      needed, and to avoid redrawing widgets even when the decorations
      that define them are recreated.
      */


      var WidgetType = /*#__PURE__*/function () {
        function WidgetType() {
          _classCallCheck(this, WidgetType);
        }

        _createClass(WidgetType, [{
          key: "eq",
          value:
          /**
          Compare this instance to another instance of the same type.
          (TypeScript can't express this, but only instances of the same
          specific class will be passed to this method.) This is used to
          avoid redrawing widgets when they are replaced by a new
          decoration of the same type. The default implementation just
          returns `false`, which will cause new instances of the widget to
          always be redrawn.
          */
          function eq(_widget) {
            return false;
          }
          /**
          Update a DOM element created by a widget of the same type (but
          different, non-`eq` content) to reflect this widget. May return
          true to indicate that it could update, false to indicate it
          couldn't (in which case the widget will be redrawn). The default
          implementation just returns false.
          */

        }, {
          key: "updateDOM",
          value: function updateDOM(_dom) {
            return false;
          }
          /**
          @internal
          */

        }, {
          key: "compare",
          value: function compare(other) {
            return this == other || this.constructor == other.constructor && this.eq(other);
          }
          /**
          The estimated height this widget will have, to be used when
          estimating the height of content that hasn't been drawn. May
          return -1 to indicate you don't know. The default implementation
          returns -1.
          */

        }, {
          key: "estimatedHeight",
          get: function get() {
            return -1;
          }
          /**
          Can be used to configure which kinds of events inside the widget
          should be ignored by the editor. The default is to ignore all
          events.
          */

        }, {
          key: "ignoreEvent",
          value: function ignoreEvent(_event) {
            return true;
          }
          /**
          @internal
          */

        }, {
          key: "customView",
          get: function get() {
            return null;
          }
          /**
          This is called when the an instance of the widget is removed
          from the editor view.
          */

        }, {
          key: "destroy",
          value: function destroy(_dom) {}
        }]);

        return WidgetType;
      }();
      /**
      The different types of blocks that can occur in an editor view.
      */


      var BlockType = /*@__PURE__*/function (BlockType) {
        /**
        A line of text.
        */
        BlockType[BlockType["Text"] = 0] = "Text";
        /**
        A block widget associated with the position after it.
        */

        BlockType[BlockType["WidgetBefore"] = 1] = "WidgetBefore";
        /**
        A block widget associated with the position before it.
        */

        BlockType[BlockType["WidgetAfter"] = 2] = "WidgetAfter";
        /**
        A block widget [replacing](https://codemirror.net/6/docs/ref/#view.Decoration^replace) a range of content.
        */

        BlockType[BlockType["WidgetRange"] = 3] = "WidgetRange";
        return BlockType;
      }(BlockType || (BlockType = {}));
      /**
      A decoration provides information on how to draw or style a piece
      of content. You'll usually use it wrapped in a
      [`Range`](https://codemirror.net/6/docs/ref/#rangeset.Range), which adds a start and end position.
      */


      var Decoration = /*#__PURE__*/function (_codemirror_rangeset_2) {
        _inherits(Decoration, _codemirror_rangeset_2);

        var _super32 = _createSuper(Decoration);

        /**
        @internal
        */
        function Decoration(
        /**
        @internal
        */
        startSide,
        /**
        @internal
        */
        endSide,
        /**
        @internal
        */
        widget,
        /**
        The config object used to create this decoration. You can
        include additional properties in there to store metadata about
        your decoration.
        */
        spec) {
          var _this65;

          _classCallCheck(this, Decoration);

          _this65 = _super32.call(this);
          _this65.startSide = startSide;
          _this65.endSide = endSide;
          _this65.widget = widget;
          _this65.spec = spec;
          return _this65;
        }
        /**
        @internal
        */


        _createClass(Decoration, [{
          key: "heightRelevant",
          get: function get() {
            return false;
          }
          /**
          Create a mark decoration, which influences the styling of the
          content in its range. Nested mark decorations will cause nested
          DOM elements to be created. Nesting order is determined by
          precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations) or
          (below the facet-provided decorations) [view
          plugin](https://codemirror.net/6/docs/ref/#view.PluginSpec.decorations). Such elements are split
          on line boundaries and on the boundaries of higher-precedence
          decorations.
          */

        }, {
          key: "hasHeight",
          value:
          /**
          @internal
          */
          function hasHeight() {
            return this.widget ? this.widget.estimatedHeight > -1 : false;
          }
        }], [{
          key: "mark",
          value: function mark(spec) {
            return new MarkDecoration(spec);
          }
          /**
          Create a widget decoration, which adds an element at the given
          position.
          */

        }, {
          key: "widget",
          value: function widget(spec) {
            var side = spec.side || 0,
                block = !!spec.block;
            side += block ? side > 0 ? 300000000
            /* BlockAfter */
            : -400000000
            /* BlockBefore */
            : side > 0 ? 100000000
            /* InlineAfter */
            : -100000000
            /* InlineBefore */
            ;
            return new PointDecoration(spec, side, side, block, spec.widget || null, false);
          }
          /**
          Create a replace decoration which replaces the given range with
          a widget, or simply hides it.
          */

        }, {
          key: "replace",
          value: function replace(spec) {
            var block = !!spec.block;

            var _getInclusive3 = getInclusive(spec, block),
                start = _getInclusive3.start,
                end = _getInclusive3.end;

            var startSide = block ? start ? -300000000
            /* BlockIncStart */
            : -1
            /* InlineIncStart */
            : 400000000
            /* NonIncStart */
            ;
            var endSide = block ? end ? 200000000
            /* BlockIncEnd */
            : 1
            /* InlineIncEnd */
            : -500000000
            /* NonIncEnd */
            ;
            return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);
          }
          /**
          Create a line decoration, which can add DOM attributes to the
          line starting at the given position.
          */

        }, {
          key: "line",
          value: function line(spec) {
            return new LineDecoration(spec);
          }
          /**
          Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
          decorated range or ranges. If the ranges aren't already sorted,
          pass `true` for `sort` to make the library sort them for you.
          */

        }, {
          key: "set",
          value: function set(of) {
            var sort = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            return _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_2__["RangeSet"].of(of, sort);
          }
        }]);

        return Decoration;
      }(_codemirror_rangeset__WEBPACK_IMPORTED_MODULE_2__["RangeValue"]);
      /**
      The empty set of decorations.
      */


      Decoration.none = _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_2__["RangeSet"].empty;

      var MarkDecoration = /*#__PURE__*/function (_Decoration4) {
        _inherits(MarkDecoration, _Decoration4);

        var _super33 = _createSuper(MarkDecoration);

        function MarkDecoration(spec) {
          var _this66;

          _classCallCheck(this, MarkDecoration);

          var _getInclusive4 = getInclusive(spec),
              start = _getInclusive4.start,
              end = _getInclusive4.end;

          _this66 = _super33.call(this, start ? -1
          /* InlineIncStart */
          : 400000000
          /* NonIncStart */
          , end ? 1
          /* InlineIncEnd */
          : -500000000
          /* NonIncEnd */
          , null, spec);
          _this66.tagName = spec.tagName || "span";
          _this66["class"] = spec["class"] || "";
          _this66.attrs = spec.attributes || null;
          return _this66;
        }

        _createClass(MarkDecoration, [{
          key: "eq",
          value: function eq(other) {
            return this == other || other instanceof MarkDecoration && this.tagName == other.tagName && this["class"] == other["class"] && attrsEq(this.attrs, other.attrs);
          }
        }, {
          key: "range",
          value: function range(from) {
            var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;
            if (from >= to) throw new RangeError("Mark decorations may not be empty");
            return _get(_getPrototypeOf(MarkDecoration.prototype), "range", this).call(this, from, to);
          }
        }]);

        return MarkDecoration;
      }(Decoration);

      MarkDecoration.prototype.point = false;

      var LineDecoration = /*#__PURE__*/function (_Decoration5) {
        _inherits(LineDecoration, _Decoration5);

        var _super34 = _createSuper(LineDecoration);

        function LineDecoration(spec) {
          _classCallCheck(this, LineDecoration);

          return _super34.call(this, -200000000
          /* Line */
          , -200000000
          /* Line */
          , null, spec);
        }

        _createClass(LineDecoration, [{
          key: "eq",
          value: function eq(other) {
            return other instanceof LineDecoration && attrsEq(this.spec.attributes, other.spec.attributes);
          }
        }, {
          key: "range",
          value: function range(from) {
            var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;
            if (to != from) throw new RangeError("Line decoration ranges must be zero-length");
            return _get(_getPrototypeOf(LineDecoration.prototype), "range", this).call(this, from, to);
          }
        }]);

        return LineDecoration;
      }(Decoration);

      LineDecoration.prototype.mapMode = _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["MapMode"].TrackBefore;
      LineDecoration.prototype.point = true;

      var PointDecoration = /*#__PURE__*/function (_Decoration6) {
        _inherits(PointDecoration, _Decoration6);

        var _super35 = _createSuper(PointDecoration);

        function PointDecoration(spec, startSide, endSide, block, widget, isReplace) {
          var _this67;

          _classCallCheck(this, PointDecoration);

          _this67 = _super35.call(this, startSide, endSide, widget, spec);
          _this67.block = block;
          _this67.isReplace = isReplace;
          _this67.mapMode = !block ? _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["MapMode"].TrackDel : startSide <= 0 ? _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["MapMode"].TrackBefore : _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["MapMode"].TrackAfter;
          return _this67;
        } // Only relevant when this.block == true


        _createClass(PointDecoration, [{
          key: "type",
          get: function get() {
            return this.startSide < this.endSide ? BlockType.WidgetRange : this.startSide <= 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;
          }
        }, {
          key: "heightRelevant",
          get: function get() {
            return this.block || !!this.widget && this.widget.estimatedHeight >= 5;
          }
        }, {
          key: "eq",
          value: function eq(other) {
            return other instanceof PointDecoration && widgetsEq(this.widget, other.widget) && this.block == other.block && this.startSide == other.startSide && this.endSide == other.endSide;
          }
        }, {
          key: "range",
          value: function range(from) {
            var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;
            if (this.isReplace && (from > to || from == to && this.startSide > 0 && this.endSide <= 0)) throw new RangeError("Invalid range for replacement decoration");
            if (!this.isReplace && to != from) throw new RangeError("Widget decorations can only have zero-length ranges");
            return _get(_getPrototypeOf(PointDecoration.prototype), "range", this).call(this, from, to);
          }
        }]);

        return PointDecoration;
      }(Decoration);

      PointDecoration.prototype.point = true;

      function getInclusive(spec) {
        var block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var start = spec.inclusiveStart,
            end = spec.inclusiveEnd;
        if (start == null) start = spec.inclusive;
        if (end == null) end = spec.inclusive;
        return {
          start: start !== null && start !== void 0 ? start : block,
          end: end !== null && end !== void 0 ? end : block
        };
      }

      function widgetsEq(a, b) {
        return a == b || !!(a && b && a.compare(b));
      }

      function addRange(from, to, ranges) {
        var margin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
        var last = ranges.length - 1;
        if (last >= 0 && ranges[last] + margin > from) ranges[last] = Math.max(ranges[last], to);else ranges.push(from, to);
      }

      var LineView = /*#__PURE__*/function (_ContentView9) {
        _inherits(LineView, _ContentView9);

        var _super36 = _createSuper(LineView);

        function LineView() {
          var _this68;

          _classCallCheck(this, LineView);

          _this68 = _super36.apply(this, arguments);
          _this68.children = [];
          _this68.length = 0;
          _this68.prevAttrs = undefined;
          _this68.attrs = null;
          _this68.breakAfter = 0;
          return _this68;
        } // Consumes source


        _createClass(LineView, [{
          key: "merge",
          value: function merge(from, to, source, hasStart, openStart, openEnd) {
            if (source) {
              if (!(source instanceof LineView)) return false;
              if (!this.dom) source.transferDOM(this); // Reuse source.dom when appropriate
            }

            if (hasStart) this.setDeco(source ? source.attrs : null);
            mergeChildrenInto(this, from, to, source ? source.children : [], openStart, openEnd);
            return true;
          }
        }, {
          key: "split",
          value: function split(at) {
            var end = new LineView();
            end.breakAfter = this.breakAfter;
            if (this.length == 0) return end;

            var _this$childPos2 = this.childPos(at),
                i = _this$childPos2.i,
                off = _this$childPos2.off;

            if (off) {
              end.append(this.children[i].split(off), 0);
              this.children[i].merge(off, this.children[i].length, null, false, 0, 0);
              i++;
            }

            for (var j = i; j < this.children.length; j++) {
              end.append(this.children[j], 0);
            }

            while (i > 0 && this.children[i - 1].length == 0) {
              this.children[--i].destroy();
            }

            this.children.length = i;
            this.markDirty();
            this.length = at;
            return end;
          }
        }, {
          key: "transferDOM",
          value: function transferDOM(other) {
            if (!this.dom) return;
            other.setDOM(this.dom);
            other.prevAttrs = this.prevAttrs === undefined ? this.attrs : this.prevAttrs;
            this.prevAttrs = undefined;
            this.dom = null;
          }
        }, {
          key: "setDeco",
          value: function setDeco(attrs) {
            if (!attrsEq(this.attrs, attrs)) {
              if (this.dom) {
                this.prevAttrs = this.attrs;
                this.markDirty();
              }

              this.attrs = attrs;
            }
          }
        }, {
          key: "append",
          value: function append(child, openStart) {
            joinInlineInto(this, child, openStart);
          } // Only called when building a line view in ContentBuilder

        }, {
          key: "addLineDeco",
          value: function addLineDeco(deco) {
            var attrs = deco.spec.attributes,
                cls = deco.spec["class"];
            if (attrs) this.attrs = combineAttrs(attrs, this.attrs || {});
            if (cls) this.attrs = combineAttrs(attrs, {
              "class": cls
            });
          }
        }, {
          key: "domAtPos",
          value: function domAtPos(pos) {
            return inlineDOMAtPos(this.dom, this.children, pos);
          }
        }, {
          key: "reuseDOM",
          value: function reuseDOM(node) {
            if (node.nodeName == "DIV") {
              this.setDOM(node);
              this.dirty |= 4
              /* Attrs */
              | 2
              /* Node */
              ;
            }
          }
        }, {
          key: "sync",
          value: function sync(track) {
            var _a;

            if (!this.dom) {
              this.setDOM(document.createElement("div"));
              this.dom.className = "cm-line";
              this.prevAttrs = this.attrs ? null : undefined;
            } else if (this.dirty & 4
            /* Attrs */
            ) {
              clearAttributes(this.dom);
              this.dom.className = "cm-line";
              this.prevAttrs = this.attrs ? null : undefined;
            }

            if (this.prevAttrs !== undefined) {
              _updateAttrs2(this.dom, this.prevAttrs, this.attrs);

              this.dom.classList.add("cm-line");
              this.prevAttrs = undefined;
            }

            _get(_getPrototypeOf(LineView.prototype), "sync", this).call(this, track);

            var last = this.dom.lastChild;

            while (last && ContentView.get(last) instanceof MarkView) {
              last = last.lastChild;
            }

            if (!last || last.nodeName != "BR" && ((_a = ContentView.get(last)) === null || _a === void 0 ? void 0 : _a.isEditable) == false && (!browser.ios || !this.children.some(function (ch) {
              return ch instanceof TextView;
            }))) {
              var hack = document.createElement("BR");
              hack.cmIgnore = true;
              this.dom.appendChild(hack);
            }
          }
        }, {
          key: "measureTextSize",
          value: function measureTextSize() {
            if (this.children.length == 0 || this.length > 20) return null;
            var totalWidth = 0;

            var _iterator106 = _createForOfIteratorHelper(this.children),
                _step106;

            try {
              for (_iterator106.s(); !(_step106 = _iterator106.n()).done;) {
                var child = _step106.value;
                if (!(child instanceof TextView)) return null;
                var rects = clientRectsFor(child.dom);
                if (rects.length != 1) return null;
                totalWidth += rects[0].width;
              }
            } catch (err) {
              _iterator106.e(err);
            } finally {
              _iterator106.f();
            }

            return {
              lineHeight: this.dom.getBoundingClientRect().height,
              charWidth: totalWidth / this.length
            };
          }
        }, {
          key: "coordsAt",
          value: function coordsAt(pos, side) {
            return coordsInChildren(this, pos, side);
          }
        }, {
          key: "become",
          value: function become(_other) {
            return false;
          }
        }, {
          key: "type",
          get: function get() {
            return BlockType.Text;
          }
        }], [{
          key: "find",
          value: function find(docView, pos) {
            for (var _i86 = 0, off = 0; _i86 < docView.children.length; _i86++) {
              var block = docView.children[_i86],
                  end = off + block.length;

              if (end >= pos) {
                if (block instanceof LineView) return block;
                if (end > pos) break;
              }

              off = end + block.breakAfter;
            }

            return null;
          }
        }]);

        return LineView;
      }(ContentView);

      var BlockWidgetView = /*#__PURE__*/function (_ContentView10) {
        _inherits(BlockWidgetView, _ContentView10);

        var _super37 = _createSuper(BlockWidgetView);

        function BlockWidgetView(widget, length, type) {
          var _this69;

          _classCallCheck(this, BlockWidgetView);

          _this69 = _super37.call(this);
          _this69.widget = widget;
          _this69.length = length;
          _this69.type = type;
          _this69.breakAfter = 0;
          return _this69;
        }

        _createClass(BlockWidgetView, [{
          key: "merge",
          value: function merge(from, to, source, _takeDeco, openStart, openEnd) {
            if (source && (!(source instanceof BlockWidgetView) || !this.widget.compare(source.widget) || from > 0 && openStart <= 0 || to < this.length && openEnd <= 0)) return false;
            this.length = from + (source ? source.length : 0) + (this.length - to);
            return true;
          }
        }, {
          key: "domAtPos",
          value: function domAtPos(pos) {
            return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
          }
        }, {
          key: "split",
          value: function split(at) {
            var len = this.length - at;
            this.length = at;
            var end = new BlockWidgetView(this.widget, len, this.type);
            end.breakAfter = this.breakAfter;
            return end;
          }
        }, {
          key: "children",
          get: function get() {
            return noChildren;
          }
        }, {
          key: "sync",
          value: function sync() {
            if (!this.dom || !this.widget.updateDOM(this.dom)) {
              this.setDOM(this.widget.toDOM(this.editorView));
              this.dom.contentEditable = "false";
            }
          }
        }, {
          key: "overrideDOMText",
          get: function get() {
            return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Text"].empty;
          }
        }, {
          key: "domBoundsAround",
          value: function domBoundsAround() {
            return null;
          }
        }, {
          key: "become",
          value: function become(other) {
            if (other instanceof BlockWidgetView && other.type == this.type && other.widget.constructor == this.widget.constructor) {
              if (!other.widget.eq(this.widget)) this.markDirty(true);
              this.widget = other.widget;
              this.length = other.length;
              this.breakAfter = other.breakAfter;
              return true;
            }

            return false;
          }
        }, {
          key: "ignoreMutation",
          value: function ignoreMutation() {
            return true;
          }
        }, {
          key: "ignoreEvent",
          value: function ignoreEvent(event) {
            return this.widget.ignoreEvent(event);
          }
        }, {
          key: "destroy",
          value: function destroy() {
            _get(_getPrototypeOf(BlockWidgetView.prototype), "destroy", this).call(this);

            if (this.dom) this.widget.destroy(this.dom);
          }
        }]);

        return BlockWidgetView;
      }(ContentView);

      var ContentBuilder = /*#__PURE__*/function () {
        function ContentBuilder(doc, pos, end, disallowBlockEffectsBelow) {
          _classCallCheck(this, ContentBuilder);

          this.doc = doc;
          this.pos = pos;
          this.end = end;
          this.disallowBlockEffectsBelow = disallowBlockEffectsBelow;
          this.content = [];
          this.curLine = null;
          this.breakAtStart = 0;
          this.pendingBuffer = 0
          /* No */
          ; // Set to false directly after a widget that covers the position after it

          this.atCursorPos = true;
          this.openStart = -1;
          this.openEnd = -1;
          this.text = "";
          this.textOff = 0;
          this.cursor = doc.iter();
          this.skip = pos;
        }

        _createClass(ContentBuilder, [{
          key: "posCovered",
          value: function posCovered() {
            if (this.content.length == 0) return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
            var last = this.content[this.content.length - 1];
            return !last.breakAfter && !(last instanceof BlockWidgetView && last.type == BlockType.WidgetBefore);
          }
        }, {
          key: "getLine",
          value: function getLine() {
            if (!this.curLine) {
              this.content.push(this.curLine = new LineView());
              this.atCursorPos = true;
            }

            return this.curLine;
          }
        }, {
          key: "flushBuffer",
          value: function flushBuffer(active) {
            if (this.pendingBuffer) {
              this.curLine.append(wrapMarks(new WidgetBufferView(-1), active), active.length);
              this.pendingBuffer = 0
              /* No */
              ;
            }
          }
        }, {
          key: "addBlockWidget",
          value: function addBlockWidget(view) {
            this.flushBuffer([]);
            this.curLine = null;
            this.content.push(view);
          }
        }, {
          key: "finish",
          value: function finish(openEnd) {
            if (!openEnd) this.flushBuffer([]);else this.pendingBuffer = 0
            /* No */
            ;
            if (!this.posCovered()) this.getLine();
          }
        }, {
          key: "buildText",
          value: function buildText(length, active, openStart) {
            while (length > 0) {
              if (this.textOff == this.text.length) {
                var _this$cursor$next2 = this.cursor.next(this.skip),
                    value = _this$cursor$next2.value,
                    lineBreak = _this$cursor$next2.lineBreak,
                    done = _this$cursor$next2.done;

                this.skip = 0;
                if (done) throw new Error("Ran out of text content when drawing inline views");

                if (lineBreak) {
                  if (!this.posCovered()) this.getLine();
                  if (this.content.length) this.content[this.content.length - 1].breakAfter = 1;else this.breakAtStart = 1;
                  this.flushBuffer([]);
                  this.curLine = null;
                  length--;
                  continue;
                } else {
                  this.text = value;
                  this.textOff = 0;
                }
              }

              var take = Math.min(this.text.length - this.textOff, length, 512
              /* Chunk */
              );
              this.flushBuffer(active);
              this.getLine().append(wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);
              this.atCursorPos = true;
              this.textOff += take;
              length -= take;
              openStart = 0;
            }
          }
        }, {
          key: "span",
          value: function span(from, to, active, openStart) {
            this.buildText(to - from, active, openStart);
            this.pos = to;
            if (this.openStart < 0) this.openStart = openStart;
          }
        }, {
          key: "point",
          value: function point(from, to, deco, active, openStart) {
            var len = to - from;

            if (deco instanceof PointDecoration) {
              if (deco.block) {
                var type = deco.type;
                if (type == BlockType.WidgetAfter && !this.posCovered()) this.getLine();
                this.addBlockWidget(new BlockWidgetView(deco.widget || new NullWidget("div"), len, type));
              } else {
                var view = WidgetView.create(deco.widget || new NullWidget("span"), len, deco.startSide);
                var cursorBefore = this.atCursorPos && !view.isEditable && openStart <= active.length && (from < to || deco.startSide > 0);
                var cursorAfter = !view.isEditable && (from < to || deco.startSide <= 0);
                var line = this.getLine();
                if (this.pendingBuffer == 2
                /* IfCursor */
                && !cursorBefore) this.pendingBuffer = 0
                /* No */
                ;
                this.flushBuffer(active);

                if (cursorBefore) {
                  line.append(wrapMarks(new WidgetBufferView(1), active), openStart);
                  openStart = active.length + Math.max(0, openStart - active.length);
                }

                line.append(wrapMarks(view, active), openStart);
                this.atCursorPos = cursorAfter;
                this.pendingBuffer = !cursorAfter ? 0
                /* No */
                : from < to ? 1
                /* Yes */
                : 2
                /* IfCursor */
                ;
              }
            } else if (this.doc.lineAt(this.pos).from == this.pos) {
              // Line decoration
              this.getLine().addLineDeco(deco);
            }

            if (len) {
              // Advance the iterator past the replaced content
              if (this.textOff + len <= this.text.length) {
                this.textOff += len;
              } else {
                this.skip += len - (this.text.length - this.textOff);
                this.text = "";
                this.textOff = 0;
              }

              this.pos = to;
            }

            if (this.openStart < 0) this.openStart = openStart;
          }
        }, {
          key: "filterPoint",
          value: function filterPoint(from, to, value, index) {
            if (index >= this.disallowBlockEffectsBelow || !(value instanceof PointDecoration)) return true;
            if (value.block) throw new RangeError("Block decorations may not be specified via plugins");
            return to <= this.doc.lineAt(this.pos).to;
          }
        }], [{
          key: "build",
          value: function build(text, from, to, decorations, pluginDecorationLength) {
            var builder = new ContentBuilder(text, from, to, pluginDecorationLength);
            builder.openEnd = _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_2__["RangeSet"].spans(decorations, from, to, builder);
            if (builder.openStart < 0) builder.openStart = builder.openEnd;
            builder.finish(builder.openEnd);
            return builder;
          }
        }]);

        return ContentBuilder;
      }();

      function wrapMarks(view, active) {
        var _iterator107 = _createForOfIteratorHelper(active),
            _step107;

        try {
          for (_iterator107.s(); !(_step107 = _iterator107.n()).done;) {
            var mark = _step107.value;
            view = new MarkView(mark, [view], view.length);
          }
        } catch (err) {
          _iterator107.e(err);
        } finally {
          _iterator107.f();
        }

        return view;
      }

      var NullWidget = /*#__PURE__*/function (_WidgetType8) {
        _inherits(NullWidget, _WidgetType8);

        var _super38 = _createSuper(NullWidget);

        function NullWidget(tag) {
          var _this70;

          _classCallCheck(this, NullWidget);

          _this70 = _super38.call(this);
          _this70.tag = tag;
          return _this70;
        }

        _createClass(NullWidget, [{
          key: "eq",
          value: function eq(other) {
            return other.tag == this.tag;
          }
        }, {
          key: "toDOM",
          value: function toDOM() {
            return document.createElement(this.tag);
          }
        }, {
          key: "updateDOM",
          value: function updateDOM(elt) {
            return elt.nodeName.toLowerCase() == this.tag;
          }
        }]);

        return NullWidget;
      }(WidgetType);

      var none = [];

      var clickAddsSelectionRange = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Facet"].define();

      var dragMovesSelection$1 = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Facet"].define();

      var mouseSelectionStyle = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Facet"].define();

      var exceptionSink = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Facet"].define();

      var updateListener = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Facet"].define();

      var inputHandler = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Facet"].define(); // FIXME remove


      var scrollTo = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["StateEffect"].define({
        map: function map(range, changes) {
          return range.map(changes);
        }
      }); // FIXME remove


      var centerOn = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["StateEffect"].define({
        map: function map(range, changes) {
          return range.map(changes);
        }
      });

      var ScrollTarget = /*#__PURE__*/function () {
        function ScrollTarget(range) {
          var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "nearest";
          var x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "nearest";
          var yMargin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 5;
          var xMargin = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 5;

          _classCallCheck(this, ScrollTarget);

          this.range = range;
          this.y = y;
          this.x = x;
          this.yMargin = yMargin;
          this.xMargin = xMargin;
        }

        _createClass(ScrollTarget, [{
          key: "map",
          value: function map(changes) {
            return changes.empty ? this : new ScrollTarget(this.range.map(changes), this.y, this.x, this.yMargin, this.xMargin);
          }
        }]);

        return ScrollTarget;
      }();

      var _scrollIntoView2 = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["StateEffect"].define({
        map: function map(t, ch) {
          return t.map(ch);
        }
      });
      /**
      Log or report an unhandled exception in client code. Should
      probably only be used by extension code that allows client code to
      provide functions, and calls those functions in a context where an
      exception can't be propagated to calling code in a reasonable way
      (for example when in an event handler).
      
      Either calls a handler registered with
      [`EditorView.exceptionSink`](https://codemirror.net/6/docs/ref/#view.EditorView^exceptionSink),
      `window.onerror`, if defined, or `console.error` (in which case
      it'll pass `context`, when given, as first argument).
      */


      function logException(state, exception, context) {
        var handler = state.facet(exceptionSink);
        if (handler.length) handler[0](exception);else if (window.onerror) window.onerror(String(exception), context, undefined, undefined, exception);else if (context) console.error(context + ":", exception);else console.error(exception);
      }

      var editable = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Facet"].define({
        combine: function combine(values) {
          return values.length ? values[0] : true;
        }
      });
      /**
      Used to [declare](https://codemirror.net/6/docs/ref/#view.PluginSpec.provide) which
      [fields](https://codemirror.net/6/docs/ref/#view.PluginValue) a [view plugin](https://codemirror.net/6/docs/ref/#view.ViewPlugin)
      provides.
      */


      var PluginFieldProvider = /*#__PURE__*/_createClass(
      /**
      @internal
      */
      function PluginFieldProvider(
      /**
      @internal
      */
      field,
      /**
      @internal
      */
      get) {
        _classCallCheck(this, PluginFieldProvider);

        this.field = field;
        this.get = get;
      });
      /**
      Plugin fields are a mechanism for allowing plugins to provide
      values that can be retrieved through the
      [`pluginField`](https://codemirror.net/6/docs/ref/#view.EditorView.pluginField) view method.
      */


      var PluginField = /*#__PURE__*/function () {
        function PluginField() {
          _classCallCheck(this, PluginField);
        }

        _createClass(PluginField, [{
          key: "from",
          value:
          /**
          Create a [provider](https://codemirror.net/6/docs/ref/#view.PluginFieldProvider) for this field,
          to use with a plugin's [provide](https://codemirror.net/6/docs/ref/#view.PluginSpec.provide)
          option.
          */
          function from(get) {
            return new PluginFieldProvider(this, get);
          }
          /**
          Define a new plugin field.
          */

        }], [{
          key: "define",
          value: function define() {
            return new PluginField();
          }
        }]);

        return PluginField;
      }();
      /**
      This field can be used by plugins to provide
      [decorations](https://codemirror.net/6/docs/ref/#view.Decoration).
      
      **Note**: For reasons of data flow (plugins are only updated
      after the viewport is computed), decorations produced by plugins
      are _not_ taken into account when predicting the vertical layout
      structure of the editor. They **must not** introduce block
      widgets (that will raise an error) or replacing decorations that
      cover line breaks (these will be ignored if they occur). Such
      decorations, or others that cause a large amount of vertical
      size shift compared to the undecorated content, should be
      provided through the state-level [`decorations`
      facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations) instead.
      */


      PluginField.decorations = /*@__PURE__*/PluginField.define();
      /**
      Used to provide ranges that should be treated as atoms as far as
      cursor motion is concerned. This causes methods like
      [`moveByChar`](https://codemirror.net/6/docs/ref/#view.EditorView.moveByChar) and
      [`moveVertically`](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) (and the
      commands built on top of them) to skip across such regions when
      a selection endpoint would enter them. This does _not_ prevent
      direct programmatic [selection
      updates](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) from moving into such
      regions.
      */

      PluginField.atomicRanges = /*@__PURE__*/PluginField.define();
      /**
      Plugins can provide additional scroll margins (space around the
      sides of the scrolling element that should be considered
      invisible) through this field. This can be useful when the
      plugin introduces elements that cover part of that element (for
      example a horizontally fixed gutter).
      */

      PluginField.scrollMargins = /*@__PURE__*/PluginField.define();
      var nextPluginID = 0;

      var viewPlugin = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Facet"].define();
      /**
      View plugins associate stateful values with a view. They can
      influence the way the content is drawn, and are notified of things
      that happen in the view.
      */


      var ViewPlugin = /*#__PURE__*/function () {
        function ViewPlugin(
        /**
        @internal
        */
        id,
        /**
        @internal
        */
        create,
        /**
        @internal
        */
        fields) {
          _classCallCheck(this, ViewPlugin);

          this.id = id;
          this.create = create;
          this.fields = fields;
          this.extension = viewPlugin.of(this);
        }
        /**
        Define a plugin from a constructor function that creates the
        plugin's value, given an editor view.
        */


        _createClass(ViewPlugin, null, [{
          key: "define",
          value: function define(create, spec) {
            var _ref20 = spec || {},
                eventHandlers = _ref20.eventHandlers,
                provide = _ref20.provide,
                decorations = _ref20.decorations;

            var fields = [];

            if (provide) {
              var _iterator108 = _createForOfIteratorHelper(Array.isArray(provide) ? provide : [provide]),
                  _step108;

              try {
                for (_iterator108.s(); !(_step108 = _iterator108.n()).done;) {
                  var provider = _step108.value;
                  fields.push(provider);
                }
              } catch (err) {
                _iterator108.e(err);
              } finally {
                _iterator108.f();
              }
            }

            if (eventHandlers) fields.push(domEventHandlers.from(function (value) {
              return {
                plugin: value,
                handlers: eventHandlers
              };
            }));
            if (decorations) fields.push(PluginField.decorations.from(decorations));
            return new ViewPlugin(nextPluginID++, create, fields);
          }
          /**
          Create a plugin for a class whose constructor takes a single
          editor view as argument.
          */

        }, {
          key: "fromClass",
          value: function fromClass(cls, spec) {
            return ViewPlugin.define(function (view) {
              return new cls(view);
            }, spec);
          }
        }]);

        return ViewPlugin;
      }();

      var domEventHandlers = /*@__PURE__*/PluginField.define();

      var PluginInstance = /*#__PURE__*/function () {
        function PluginInstance(spec) {
          _classCallCheck(this, PluginInstance);

          this.spec = spec; // When starting an update, all plugins have this field set to the
          // update object, indicating they need to be updated. When finished
          // updating, it is set to `false`. Retrieving a plugin that needs to
          // be updated with `view.plugin` forces an eager update.

          this.mustUpdate = null; // This is null when the plugin is initially created, but
          // initialized on the first update.

          this.value = null;
        }

        _createClass(PluginInstance, [{
          key: "takeField",
          value: function takeField(type, target) {
            if (this.spec) {
              var _iterator109 = _createForOfIteratorHelper(this.spec.fields),
                  _step109;

              try {
                for (_iterator109.s(); !(_step109 = _iterator109.n()).done;) {
                  var _step109$value = _step109.value,
                      field = _step109$value.field,
                      get = _step109$value.get;
                  if (field == type) target.push(get(this.value));
                }
              } catch (err) {
                _iterator109.e(err);
              } finally {
                _iterator109.f();
              }
            }
          }
        }, {
          key: "update",
          value: function update(view) {
            if (!this.value) {
              if (this.spec) {
                try {
                  this.value = this.spec.create(view);
                } catch (e) {
                  logException(view.state, e, "CodeMirror plugin crashed");
                  this.deactivate();
                }
              }
            } else if (this.mustUpdate) {
              var update = this.mustUpdate;
              this.mustUpdate = null;

              if (this.value.update) {
                try {
                  this.value.update(update);
                } catch (e) {
                  logException(update.state, e, "CodeMirror plugin crashed");
                  if (this.value.destroy) try {
                    this.value.destroy();
                  } catch (_) {}
                  this.deactivate();
                }
              }
            }

            return this;
          }
        }, {
          key: "destroy",
          value: function destroy(view) {
            var _a;

            if ((_a = this.value) === null || _a === void 0 ? void 0 : _a.destroy) {
              try {
                this.value.destroy();
              } catch (e) {
                logException(view.state, e, "CodeMirror plugin crashed");
              }
            }
          }
        }, {
          key: "deactivate",
          value: function deactivate() {
            this.spec = this.value = null;
          }
        }]);

        return PluginInstance;
      }();

      var editorAttributes = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Facet"].define();

      var contentAttributes = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Facet"].define(); // Provide decorations


      var decorations = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Facet"].define();

      var styleModule = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Facet"].define();

      var ChangedRange = /*#__PURE__*/function () {
        function ChangedRange(fromA, toA, fromB, toB) {
          _classCallCheck(this, ChangedRange);

          this.fromA = fromA;
          this.toA = toA;
          this.fromB = fromB;
          this.toB = toB;
        }

        _createClass(ChangedRange, [{
          key: "join",
          value: function join(other) {
            return new ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
          }
        }, {
          key: "addToSet",
          value: function addToSet(set) {
            var i = set.length,
                me = this;

            for (; i > 0; i--) {
              var range = set[i - 1];
              if (range.fromA > me.toA) continue;
              if (range.toA < me.fromA) break;
              me = me.join(range);
              set.splice(i - 1, 1);
            }

            set.splice(i, 0, me);
            return set;
          }
        }], [{
          key: "extendWithRanges",
          value: function extendWithRanges(diff, ranges) {
            if (ranges.length == 0) return diff;
            var result = [];

            for (var dI = 0, rI = 0, posA = 0, posB = 0;; dI++) {
              var next = dI == diff.length ? null : diff[dI],
                  off = posA - posB;
              var end = next ? next.fromB : 1e9;

              while (rI < ranges.length && ranges[rI] < end) {
                var from = ranges[rI],
                    to = ranges[rI + 1];
                var fromB = Math.max(posB, from),
                    toB = Math.min(end, to);
                if (fromB <= toB) new ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);
                if (to > end) break;else rI += 2;
              }

              if (!next) return result;
              new ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);
              posA = next.toA;
              posB = next.toB;
            }
          }
        }]);

        return ChangedRange;
      }();
      /**
      View [plugins](https://codemirror.net/6/docs/ref/#view.ViewPlugin) are given instances of this
      class, which describe what happened, whenever the view is updated.
      */


      var ViewUpdate = /*#__PURE__*/function () {
        /**
        @internal
        */
        function ViewUpdate(
        /**
        The editor view that the update is associated with.
        */
        view,
        /**
        The new editor state.
        */
        state) {
          var transactions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : none;

          _classCallCheck(this, ViewUpdate);

          this.view = view;
          this.state = state;
          this.transactions = transactions;
          /**
          @internal
          */

          this.flags = 0;
          this.startState = view.state;
          this.changes = _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["ChangeSet"].empty(this.startState.doc.length);

          var _iterator110 = _createForOfIteratorHelper(transactions),
              _step110;

          try {
            for (_iterator110.s(); !(_step110 = _iterator110.n()).done;) {
              var tr = _step110.value;
              this.changes = this.changes.compose(tr.changes);
            }
          } catch (err) {
            _iterator110.e(err);
          } finally {
            _iterator110.f();
          }

          var changedRanges = [];
          this.changes.iterChangedRanges(function (fromA, toA, fromB, toB) {
            return changedRanges.push(new ChangedRange(fromA, toA, fromB, toB));
          });
          this.changedRanges = changedRanges;
          var focus = view.hasFocus;

          if (focus != view.inputState.notifiedFocused) {
            view.inputState.notifiedFocused = focus;
            this.flags |= 1
            /* Focus */
            ;
          }
        }
        /**
        Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
        [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
        update.
        */


        _createClass(ViewUpdate, [{
          key: "viewportChanged",
          get: function get() {
            return (this.flags & 4
            /* Viewport */
            ) > 0;
          }
          /**
          Indicates whether the height of an element in the editor changed
          in this update.
          */

        }, {
          key: "heightChanged",
          get: function get() {
            return (this.flags & 2
            /* Height */
            ) > 0;
          }
          /**
          Returns true when the document was modified or the size of the
          editor, or elements within the editor, changed.
          */

        }, {
          key: "geometryChanged",
          get: function get() {
            return this.docChanged || (this.flags & (8
            /* Geometry */
            | 2
            /* Height */
            )) > 0;
          }
          /**
          True when this update indicates a focus change.
          */

        }, {
          key: "focusChanged",
          get: function get() {
            return (this.flags & 1
            /* Focus */
            ) > 0;
          }
          /**
          Whether the document changed in this update.
          */

        }, {
          key: "docChanged",
          get: function get() {
            return !this.changes.empty;
          }
          /**
          Whether the selection was explicitly set in this update.
          */

        }, {
          key: "selectionSet",
          get: function get() {
            return this.transactions.some(function (tr) {
              return tr.selection;
            });
          }
          /**
          @internal
          */

        }, {
          key: "empty",
          get: function get() {
            return this.flags == 0 && this.transactions.length == 0;
          }
        }]);

        return ViewUpdate;
      }();
      /**
      Used to indicate [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
      */


      var Direction = /*@__PURE__*/function (Direction) {
        // (These are chosen to match the base levels, in bidi algorithm
        // terms, of spans in that direction.)

        /**
        Left-to-right.
        */
        Direction[Direction["LTR"] = 0] = "LTR";
        /**
        Right-to-left.
        */

        Direction[Direction["RTL"] = 1] = "RTL";
        return Direction;
      }(Direction || (Direction = {}));

      var LTR = Direction.LTR,
          RTL = Direction.RTL; // Decode a string with each type encoded as log2(type)

      function dec(str) {
        var result = [];

        for (var _i87 = 0; _i87 < str.length; _i87++) {
          result.push(1 << +str[_i87]);
        }

        return result;
      } // Character types for codepoints 0 to 0xf8


      var LowTypes = /*@__PURE__*/dec("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008"); // Character types for codepoints 0x600 to 0x6f9

      var ArabicTypes = /*@__PURE__*/dec("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
      var Brackets = /*@__PURE__*/Object.create(null),
          BracketStack = []; // There's a lot more in
      // https://www.unicode.org/Public/UCD/latest/ucd/BidiBrackets.txt,
      // which are left out to keep code size down.

      for (var _i88 = 0, _arr3 = ["()", "[]", "{}"]; _i88 < _arr3.length; _i88++) {
        var p = _arr3[_i88];
        var l = /*@__PURE__*/p.charCodeAt(0),
            r = /*@__PURE__*/p.charCodeAt(1);
        Brackets[l] = r;
        Brackets[r] = -l;
      }

      function charType(ch) {
        return ch <= 0xf7 ? LowTypes[ch] : 0x590 <= ch && ch <= 0x5f4 ? 2
        /* R */
        : 0x600 <= ch && ch <= 0x6f9 ? ArabicTypes[ch - 0x600] : 0x6ee <= ch && ch <= 0x8ac ? 4
        /* AL */
        : 0x2000 <= ch && ch <= 0x200b ? 256
        /* NI */
        : ch == 0x200c ? 256
        /* NI */
        : 1
        /* L */
        ;
      }

      var BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;
      /**
      Represents a contiguous range of text that has a single direction
      (as in left-to-right or right-to-left).
      */

      var BidiSpan = /*#__PURE__*/function () {
        /**
        @internal
        */
        function BidiSpan(
        /**
        The start of the span (relative to the start of the line).
        */
        from,
        /**
        The end of the span.
        */
        to,
        /**
        The ["bidi
        level"](https://unicode.org/reports/tr9/#Basic_Display_Algorithm)
        of the span (in this context, 0 means
        left-to-right, 1 means right-to-left, 2 means left-to-right
        number inside right-to-left text).
        */
        level) {
          _classCallCheck(this, BidiSpan);

          this.from = from;
          this.to = to;
          this.level = level;
        }
        /**
        The direction of this span.
        */


        _createClass(BidiSpan, [{
          key: "dir",
          get: function get() {
            return this.level % 2 ? RTL : LTR;
          }
          /**
          @internal
          */

        }, {
          key: "side",
          value: function side(end, dir) {
            return this.dir == dir == end ? this.to : this.from;
          }
          /**
          @internal
          */

        }], [{
          key: "find",
          value: function find(order, index, level, assoc) {
            var maybe = -1;

            for (var _i89 = 0; _i89 < order.length; _i89++) {
              var span = order[_i89];

              if (span.from <= index && span.to >= index) {
                if (span.level == level) return _i89; // When multiple spans match, if assoc != 0, take the one that
                // covers that side, otherwise take the one with the minimum
                // level.

                if (maybe < 0 || (assoc != 0 ? assoc < 0 ? span.from < index : span.to > index : order[maybe].level > span.level)) maybe = _i89;
              }
            }

            if (maybe < 0) throw new RangeError("Index out of range");
            return maybe;
          }
        }]);

        return BidiSpan;
      }(); // Reused array of character types


      var types = [];

      function computeOrder(line, direction) {
        var len = line.length,
            outerType = direction == LTR ? 1
        /* L */
        : 2
        /* R */
        ,
            oppositeType = direction == LTR ? 2
        /* R */
        : 1
        /* L */
        ;
        if (!line || outerType == 1
        /* L */
        && !BidiRE.test(line)) return trivialOrder(len); // W1. Examine each non-spacing mark (NSM) in the level run, and
        // change the type of the NSM to the type of the previous
        // character. If the NSM is at the start of the level run, it will
        // get the type of sor.
        // W2. Search backwards from each instance of a European number
        // until the first strong type (R, L, AL, or sor) is found. If an
        // AL is found, change the type of the European number to Arabic
        // number.
        // W3. Change all ALs to R.
        // (Left after this: L, R, EN, AN, ET, CS, NI)

        for (var _i90 = 0, prev = outerType, prevStrong = outerType; _i90 < len; _i90++) {
          var type = charType(line.charCodeAt(_i90));
          if (type == 512
          /* NSM */
          ) type = prev;else if (type == 8
          /* EN */
          && prevStrong == 4
          /* AL */
          ) type = 16
          /* AN */
          ;
          types[_i90] = type == 4
          /* AL */
          ? 2
          /* R */
          : type;
          if (type & 7
          /* Strong */
          ) prevStrong = type;
          prev = type;
        } // W5. A sequence of European terminators adjacent to European
        // numbers changes to all European numbers.
        // W6. Otherwise, separators and terminators change to Other
        // Neutral.
        // W7. Search backwards from each instance of a European number
        // until the first strong type (R, L, or sor) is found. If an L is
        // found, then change the type of the European number to L.
        // (Left after this: L, R, EN+AN, NI)


        for (var _i91 = 0, _prev2 = outerType, _prevStrong2 = outerType; _i91 < len; _i91++) {
          var _type5 = types[_i91];

          if (_type5 == 128
          /* CS */
          ) {
            if (_i91 < len - 1 && _prev2 == types[_i91 + 1] && _prev2 & 24
            /* Num */
            ) _type5 = types[_i91] = _prev2;else types[_i91] = 256
            /* NI */
            ;
          } else if (_type5 == 64
          /* ET */
          ) {
            var end = _i91 + 1;

            while (end < len && types[end] == 64
            /* ET */
            ) {
              end++;
            }

            var replace = _i91 && _prev2 == 8
            /* EN */
            || end < len && types[end] == 8
            /* EN */
            ? _prevStrong2 == 1
            /* L */
            ? 1
            /* L */
            : 8
            /* EN */
            : 256
            /* NI */
            ;

            for (var j = _i91; j < end; j++) {
              types[j] = replace;
            }

            _i91 = end - 1;
          } else if (_type5 == 8
          /* EN */
          && _prevStrong2 == 1
          /* L */
          ) {
            types[_i91] = 1
            /* L */
            ;
          }

          _prev2 = _type5;
          if (_type5 & 7
          /* Strong */
          ) _prevStrong2 = _type5;
        } // N0. Process bracket pairs in an isolating run sequence
        // sequentially in the logical order of the text positions of the
        // opening paired brackets using the logic given below. Within this
        // scope, bidirectional types EN and AN are treated as R.


        for (var _i92 = 0, sI = 0, context = 0, ch, br, _type6; _i92 < len; _i92++) {
          // Keeps [startIndex, type, strongSeen] triples for each open
          // bracket on BracketStack.
          if (br = Brackets[ch = line.charCodeAt(_i92)]) {
            if (br < 0) {
              // Closing bracket
              for (var sJ = sI - 3; sJ >= 0; sJ -= 3) {
                if (BracketStack[sJ + 1] == -br) {
                  var flags = BracketStack[sJ + 2];

                  var _type7 = flags & 2
                  /* EmbedInside */
                  ? outerType : !(flags & 4
                  /* OppositeInside */
                  ) ? 0 : flags & 1
                  /* OppositeBefore */
                  ? oppositeType : outerType;

                  if (_type7) types[_i92] = types[BracketStack[sJ]] = _type7;
                  sI = sJ;
                  break;
                }
              }
            } else if (BracketStack.length == 189
            /* MaxDepth */
            ) {
              break;
            } else {
              BracketStack[sI++] = _i92;
              BracketStack[sI++] = ch;
              BracketStack[sI++] = context;
            }
          } else if ((_type6 = types[_i92]) == 2
          /* R */
          || _type6 == 1
          /* L */
          ) {
            var embed = _type6 == outerType;
            context = embed ? 0 : 1
            /* OppositeBefore */
            ;

            for (var _sJ2 = sI - 3; _sJ2 >= 0; _sJ2 -= 3) {
              var cur = BracketStack[_sJ2 + 2];
              if (cur & 2
              /* EmbedInside */
              ) break;

              if (embed) {
                BracketStack[_sJ2 + 2] |= 2
                /* EmbedInside */
                ;
              } else {
                if (cur & 4
                /* OppositeInside */
                ) break;
                BracketStack[_sJ2 + 2] |= 4
                /* OppositeInside */
                ;
              }
            }
          }
        } // N1. A sequence of neutrals takes the direction of the
        // surrounding strong text if the text on both sides has the same
        // direction. European and Arabic numbers act as if they were R in
        // terms of their influence on neutrals. Start-of-level-run (sor)
        // and end-of-level-run (eor) are used at level run boundaries.
        // N2. Any remaining neutrals take the embedding direction.
        // (Left after this: L, R, EN+AN)


        for (var _i93 = 0; _i93 < len; _i93++) {
          if (types[_i93] == 256
          /* NI */
          ) {
            var _end5 = _i93 + 1;

            while (_end5 < len && types[_end5] == 256
            /* NI */
            ) {
              _end5++;
            }

            var beforeL = (_i93 ? types[_i93 - 1] : outerType) == 1
            /* L */
            ;
            var afterL = (_end5 < len ? types[_end5] : outerType) == 1
            /* L */
            ;

            var _replace2 = beforeL == afterL ? beforeL ? 1
            /* L */
            : 2
            /* R */
            : outerType;

            for (var _j3 = _i93; _j3 < _end5; _j3++) {
              types[_j3] = _replace2;
            }

            _i93 = _end5 - 1;
          }
        } // Here we depart from the documented algorithm, in order to avoid
        // building up an actual levels array. Since there are only three
        // levels (0, 1, 2) in an implementation that doesn't take
        // explicit embedding into account, we can build up the order on
        // the fly, without following the level-based algorithm.


        var order = [];

        if (outerType == 1
        /* L */
        ) {
          for (var _i94 = 0; _i94 < len;) {
            var start = _i94,
                rtl = types[_i94++] != 1
            /* L */
            ;

            while (_i94 < len && rtl == (types[_i94] != 1
            /* L */
            )) {
              _i94++;
            }

            if (rtl) {
              for (var _j4 = _i94; _j4 > start;) {
                var _end6 = _j4,
                    _l3 = types[--_j4] != 2
                /* R */
                ;

                while (_j4 > start && _l3 == (types[_j4 - 1] != 2
                /* R */
                )) {
                  _j4--;
                }

                order.push(new BidiSpan(_j4, _end6, _l3 ? 2 : 1));
              }
            } else {
              order.push(new BidiSpan(start, _i94, 0));
            }
          }
        } else {
          for (var _i95 = 0; _i95 < len;) {
            var _start6 = _i95,
                _rtl2 = types[_i95++] == 2
            /* R */
            ;

            while (_i95 < len && _rtl2 == (types[_i95] == 2
            /* R */
            )) {
              _i95++;
            }

            order.push(new BidiSpan(_start6, _i95, _rtl2 ? 1 : 2));
          }
        }

        return order;
      }

      function trivialOrder(length) {
        return [new BidiSpan(0, length, 0)];
      }

      var movedOver = "";

      function moveVisually(line, order, dir, start, forward) {
        var _a;

        var startIndex = start.head - line.from,
            spanI = -1;

        if (startIndex == 0) {
          if (!forward || !line.length) return null;

          if (order[0].level != dir) {
            startIndex = order[0].side(false, dir);
            spanI = 0;
          }
        } else if (startIndex == line.length) {
          if (forward) return null;
          var last = order[order.length - 1];

          if (last.level != dir) {
            startIndex = last.side(true, dir);
            spanI = order.length - 1;
          }
        }

        if (spanI < 0) spanI = BidiSpan.find(order, startIndex, (_a = start.bidiLevel) !== null && _a !== void 0 ? _a : -1, start.assoc);
        var span = order[spanI]; // End of span. (But not end of line--that was checked for above.)

        if (startIndex == span.side(forward, dir)) {
          span = order[spanI += forward ? 1 : -1];
          startIndex = span.side(!forward, dir);
        }

        var indexForward = forward == (span.dir == dir);
        var nextIndex = Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_3__["findClusterBreak"])(line.text, startIndex, indexForward);
        movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
        if (nextIndex != span.side(forward, dir)) return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(nextIndex + line.from, indexForward ? -1 : 1, span.level);
        var nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];
        if (!nextSpan && span.level != dir) return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(forward ? line.to : line.from, forward ? -1 : 1, dir);
        if (nextSpan && nextSpan.level < span.level) return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(nextSpan.side(!forward, dir) + line.from, forward ? 1 : -1, nextSpan.level);
        return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(nextIndex + line.from, forward ? -1 : 1, span.level);
      }

      var DOMReader = /*#__PURE__*/function () {
        function DOMReader(points, view) {
          _classCallCheck(this, DOMReader);

          this.points = points;
          this.view = view;
          this.text = "";
          this.lineBreak = view.state.lineBreak;
        }

        _createClass(DOMReader, [{
          key: "readRange",
          value: function readRange(start, end) {
            if (!start) return this;
            var parent = start.parentNode;

            for (var cur = start;;) {
              this.findPointBefore(parent, cur);
              this.readNode(cur);
              var next = cur.nextSibling;
              if (next == end) break;
              var view = ContentView.get(cur),
                  nextView = ContentView.get(next);
              if (view && nextView ? view.breakAfter : (view ? view.breakAfter : isBlockElement(cur)) || isBlockElement(next) && (cur.nodeName != "BR" || cur.cmIgnore)) this.text += this.lineBreak;
              cur = next;
            }

            this.findPointBefore(parent, end);
            return this;
          }
        }, {
          key: "readNode",
          value: function readNode(node) {
            if (node.cmIgnore) return;
            var view = ContentView.get(node);
            var fromView = view && view.overrideDOMText;
            var text;
            if (fromView != null) text = fromView.sliceString(0, undefined, this.lineBreak);else if (node.nodeType == 3) text = node.nodeValue;else if (node.nodeName == "BR") text = node.nextSibling ? this.lineBreak : "";else if (node.nodeType == 1) this.readRange(node.firstChild, null);

            if (text != null) {
              this.findPointIn(node, text.length);
              this.text += text; // Chrome inserts two newlines when pressing shift-enter at the
              // end of a line. This drops one of those.

              if (browser.chrome && this.view.inputState.lastKeyCode == 13 && !node.nextSibling && /\n\n$/.test(this.text)) this.text = this.text.slice(0, -1);
            }
          }
        }, {
          key: "findPointBefore",
          value: function findPointBefore(node, next) {
            var _iterator111 = _createForOfIteratorHelper(this.points),
                _step111;

            try {
              for (_iterator111.s(); !(_step111 = _iterator111.n()).done;) {
                var point = _step111.value;
                if (point.node == node && node.childNodes[point.offset] == next) point.pos = this.text.length;
              }
            } catch (err) {
              _iterator111.e(err);
            } finally {
              _iterator111.f();
            }
          }
        }, {
          key: "findPointIn",
          value: function findPointIn(node, maxLen) {
            var _iterator112 = _createForOfIteratorHelper(this.points),
                _step112;

            try {
              for (_iterator112.s(); !(_step112 = _iterator112.n()).done;) {
                var point = _step112.value;
                if (point.node == node) point.pos = this.text.length + Math.min(point.offset, maxLen);
              }
            } catch (err) {
              _iterator112.e(err);
            } finally {
              _iterator112.f();
            }
          }
        }]);

        return DOMReader;
      }();

      function isBlockElement(node) {
        return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node.nodeName);
      }

      var DOMPoint = /*#__PURE__*/_createClass(function DOMPoint(node, offset) {
        _classCallCheck(this, DOMPoint);

        this.node = node;
        this.offset = offset;
        this.pos = -1;
      });

      var DocView = /*#__PURE__*/function (_ContentView11) {
        _inherits(DocView, _ContentView11);

        var _super39 = _createSuper(DocView);

        function DocView(view) {
          var _this71;

          _classCallCheck(this, DocView);

          _this71 = _super39.call(this);
          _this71.view = view;
          _this71.compositionDeco = Decoration.none;
          _this71.decorations = [];
          _this71.pluginDecorationLength = 0; // Track a minimum width for the editor. When measuring sizes in
          // measureVisibleLineHeights, this is updated to point at the width
          // of a given element and its extent in the document. When a change
          // happens in that range, these are reset. That way, once we've seen
          // a line/element of a given length, we keep the editor wide enough
          // to fit at least that element, until it is changed, at which point
          // we forget it again.

          _this71.minWidth = 0;
          _this71.minWidthFrom = 0;
          _this71.minWidthTo = 0; // Track whether the DOM selection was set in a lossy way, so that
          // we don't mess it up when reading it back it

          _this71.impreciseAnchor = null;
          _this71.impreciseHead = null;
          _this71.forceSelection = false; // Used by the resize observer to ignore resizes that we caused
          // ourselves

          _this71.lastUpdate = Date.now();

          _this71.setDOM(view.contentDOM);

          _this71.children = [new LineView()];

          _this71.children[0].setParent(_assertThisInitialized(_this71));

          _this71.updateDeco();

          _this71.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], 0);

          return _this71;
        }

        _createClass(DocView, [{
          key: "root",
          get: function get() {
            return this.view.root;
          }
        }, {
          key: "editorView",
          get: function get() {
            return this.view;
          }
        }, {
          key: "length",
          get: function get() {
            return this.view.state.doc.length;
          } // Update the document view to a given state. scrollIntoView can be
          // used as a hint to compute a new viewport that includes that
          // position, if we know the editor is going to scroll that position
          // into view.

        }, {
          key: "update",
          value: function update(_update13) {
            var _this72 = this;

            var changedRanges = _update13.changedRanges;

            if (this.minWidth > 0 && changedRanges.length) {
              if (!changedRanges.every(function (_ref21) {
                var fromA = _ref21.fromA,
                    toA = _ref21.toA;
                return toA < _this72.minWidthFrom || fromA > _this72.minWidthTo;
              })) {
                this.minWidth = this.minWidthFrom = this.minWidthTo = 0;
              } else {
                this.minWidthFrom = _update13.changes.mapPos(this.minWidthFrom, 1);
                this.minWidthTo = _update13.changes.mapPos(this.minWidthTo, 1);
              }
            }

            if (this.view.inputState.composing < 0) this.compositionDeco = Decoration.none;else if (_update13.transactions.length || this.dirty) this.compositionDeco = computeCompositionDeco(this.view, _update13.changes); // When the DOM nodes around the selection are moved to another
            // parent, Chrome sometimes reports a different selection through
            // getSelection than the one that it actually shows to the user.
            // This forces a selection update when lines are joined to work
            // around that. Issue #54

            if ((browser.ie || browser.chrome) && !this.compositionDeco.size && _update13 && _update13.state.doc.lines != _update13.startState.doc.lines) this.forceSelection = true;
            var prevDeco = this.decorations,
                deco = this.updateDeco();
            var decoDiff = findChangedDeco(prevDeco, deco, _update13.changes);
            changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);

            if (this.dirty == 0
            /* Not */
            && changedRanges.length == 0) {
              return false;
            } else {
              this.updateInner(changedRanges, _update13.startState.doc.length);
              if (_update13.transactions.length) this.lastUpdate = Date.now();
              return true;
            }
          } // Used by update and the constructor do perform the actual DOM
          // update

        }, {
          key: "updateInner",
          value: function updateInner(changes, oldLength) {
            var _this73 = this;

            this.view.viewState.mustMeasureContent = true;
            this.updateChildren(changes, oldLength);
            var observer = this.view.observer;
            observer.ignore(function () {
              // Lock the height during redrawing, since Chrome sometimes
              // messes with the scroll position during DOM mutation (though
              // no relayout is triggered and I cannot imagine how it can
              // recompute the scroll position without a layout)
              _this73.dom.style.height = _this73.view.viewState.contentHeight + "px";
              _this73.dom.style.minWidth = _this73.minWidth ? _this73.minWidth + "px" : ""; // Chrome will sometimes, when DOM mutations occur directly
              // around the selection, get confused and report a different
              // selection from the one it displays (issue #218). This tries
              // to detect that situation.

              var track = browser.chrome || browser.ios ? {
                node: observer.selectionRange.focusNode,
                written: false
              } : undefined;

              _this73.sync(track);

              _this73.dirty = 0
              /* Not */
              ;
              if (track && (track.written || observer.selectionRange.focusNode != track.node)) _this73.forceSelection = true;
              _this73.dom.style.height = "";
            });
            var gaps = [];

            if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length) {
              var _iterator113 = _createForOfIteratorHelper(this.children),
                  _step113;

              try {
                for (_iterator113.s(); !(_step113 = _iterator113.n()).done;) {
                  var child = _step113.value;
                  if (child instanceof BlockWidgetView && child.widget instanceof BlockGapWidget) gaps.push(child.dom);
                }
              } catch (err) {
                _iterator113.e(err);
              } finally {
                _iterator113.f();
              }
            }

            observer.updateGaps(gaps);
          }
        }, {
          key: "updateChildren",
          value: function updateChildren(changes, oldLength) {
            var cursor = this.childCursor(oldLength);

            for (var _i96 = changes.length - 1;; _i96--) {
              var next = _i96 >= 0 ? changes[_i96] : null;
              if (!next) break;
              var fromA = next.fromA,
                  toA = next.toA,
                  fromB = next.fromB,
                  toB = next.toB;

              var _ContentBuilder$build2 = ContentBuilder.build(this.view.state.doc, fromB, toB, this.decorations, this.pluginDecorationLength),
                  content = _ContentBuilder$build2.content,
                  breakAtStart = _ContentBuilder$build2.breakAtStart,
                  openStart = _ContentBuilder$build2.openStart,
                  openEnd = _ContentBuilder$build2.openEnd;

              var _cursor$findPos3 = cursor.findPos(toA, 1),
                  toI = _cursor$findPos3.i,
                  toOff = _cursor$findPos3.off;

              var _cursor$findPos4 = cursor.findPos(fromA, -1),
                  fromI = _cursor$findPos4.i,
                  fromOff = _cursor$findPos4.off;

              replaceRange(this, fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd);
            }
          } // Sync the DOM selection to this.state.selection

        }, {
          key: "updateSelection",
          value: function updateSelection() {
            var _this74 = this;

            var mustRead = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
            var fromPointer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            if (mustRead) this.view.observer.readSelectionRange();
            if (!(fromPointer || this.mayControlSelection()) || browser.ios && this.view.inputState.rapidCompositionStart) return;
            var force = this.forceSelection;
            this.forceSelection = false;
            var main = this.view.state.selection.main; // FIXME need to handle the case where the selection falls inside a block range

            var anchor = this.domAtPos(main.anchor);
            var head = main.empty ? anchor : this.domAtPos(main.head); // Always reset on Firefox when next to an uneditable node to
            // avoid invisible cursor bugs (#111)

            if (browser.gecko && main.empty && betweenUneditable(anchor)) {
              var dummy = document.createTextNode("");
              this.view.observer.ignore(function () {
                return anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null);
              });
              anchor = head = new DOMPos(dummy, 0);
              force = true;
            }

            var domSel = this.view.observer.selectionRange; // If the selection is already here, or in an equivalent position, don't touch it

            if (force || !domSel.focusNode || !isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) || !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) {
              this.view.observer.ignore(function () {
                // Chrome Android will hide the virtual keyboard when tapping
                // inside an uneditable node, and not bring it back when we
                // move the cursor to its proper position. This tries to
                // restore the keyboard by cycling focus.
                if (browser.android && browser.chrome && _this74.dom.contains(domSel.focusNode) && inUneditable(domSel.focusNode, _this74.dom)) {
                  _this74.dom.blur();

                  _this74.dom.focus({
                    preventScroll: true
                  });
                }

                var rawSel = getSelection(_this74.root);

                if (main.empty) {
                  // Work around https://bugzilla.mozilla.org/show_bug.cgi?id=1612076
                  if (browser.gecko) {
                    var nextTo = nextToUneditable(anchor.node, anchor.offset);

                    if (nextTo && nextTo != (1
                    /* Before */
                    | 2
                    /* After */
                    )) {
                      var text = nearbyTextNode(anchor.node, anchor.offset, nextTo == 1
                      /* Before */
                      ? 1 : -1);
                      if (text) anchor = new DOMPos(text, nextTo == 1
                      /* Before */
                      ? 0 : text.nodeValue.length);
                    }
                  }

                  rawSel.collapse(anchor.node, anchor.offset);
                  if (main.bidiLevel != null && domSel.cursorBidiLevel != null) domSel.cursorBidiLevel = main.bidiLevel;
                } else if (rawSel.extend) {
                  // Selection.extend can be used to create an 'inverted' selection
                  // (one where the focus is before the anchor), but not all
                  // browsers support it yet.
                  rawSel.collapse(anchor.node, anchor.offset);
                  rawSel.extend(head.node, head.offset);
                } else {
                  // Primitive (IE) way
                  var range = document.createRange();

                  if (main.anchor > main.head) {
                    var _ref22 = [head, anchor];
                    anchor = _ref22[0];
                    head = _ref22[1];
                  }

                  range.setEnd(head.node, head.offset);
                  range.setStart(anchor.node, anchor.offset);
                  rawSel.removeAllRanges();
                  rawSel.addRange(range);
                }
              });
              this.view.observer.setSelectionRange(anchor, head);
            }

            this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
            this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
          }
        }, {
          key: "enforceCursorAssoc",
          value: function enforceCursorAssoc() {
            if (this.compositionDeco.size) return;
            var cursor = this.view.state.selection.main;
            var sel = getSelection(this.root);
            if (!cursor.empty || !cursor.assoc || !sel.modify) return;
            var line = LineView.find(this, cursor.head);
            if (!line) return;
            var lineStart = line.posAtStart;
            if (cursor.head == lineStart || cursor.head == lineStart + line.length) return;
            var before = this.coordsAt(cursor.head, -1),
                after = this.coordsAt(cursor.head, 1);
            if (!before || !after || before.bottom > after.top) return;
            var dom = this.domAtPos(cursor.head + cursor.assoc);
            sel.collapse(dom.node, dom.offset);
            sel.modify("move", cursor.assoc < 0 ? "forward" : "backward", "lineboundary");
          }
        }, {
          key: "mayControlSelection",
          value: function mayControlSelection() {
            return this.view.state.facet(editable) ? this.root.activeElement == this.dom : hasSelection(this.dom, this.view.observer.selectionRange);
          }
        }, {
          key: "nearest",
          value: function nearest(dom) {
            for (var cur = dom; cur;) {
              var domView = ContentView.get(cur);
              if (domView && domView.rootView == this) return domView;
              cur = cur.parentNode;
            }

            return null;
          }
        }, {
          key: "posFromDOM",
          value: function posFromDOM(node, offset) {
            var view = this.nearest(node);
            if (!view) throw new RangeError("Trying to find position for a DOM position outside of the document");
            return view.localPosFromDOM(node, offset) + view.posAtStart;
          }
        }, {
          key: "domAtPos",
          value: function domAtPos(pos) {
            var _this$childCursor$fin2 = this.childCursor().findPos(pos, -1),
                i = _this$childCursor$fin2.i,
                off = _this$childCursor$fin2.off;

            for (; i < this.children.length - 1;) {
              var child = this.children[i];
              if (off < child.length || child instanceof LineView) break;
              i++;
              off = 0;
            }

            return this.children[i].domAtPos(off);
          }
        }, {
          key: "coordsAt",
          value: function coordsAt(pos, side) {
            for (var off = this.length, _i97 = this.children.length - 1;; _i97--) {
              var child = this.children[_i97],
                  start = off - child.breakAfter - child.length;
              if (pos > start || pos == start && child.type != BlockType.WidgetBefore && child.type != BlockType.WidgetAfter && (!_i97 || side == 2 || this.children[_i97 - 1].breakAfter || this.children[_i97 - 1].type == BlockType.WidgetBefore && side > -2)) return child.coordsAt(pos - start, side);
              off = start;
            }
          }
        }, {
          key: "measureVisibleLineHeights",
          value: function measureVisibleLineHeights() {
            var result = [],
                _this$view$viewState$2 = this.view.viewState.viewport,
                from = _this$view$viewState$2.from,
                to = _this$view$viewState$2.to;
            var contentWidth = this.view.contentDOM.clientWidth;
            var isWider = contentWidth > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
            var widest = -1;

            for (var pos = 0, _i98 = 0; _i98 < this.children.length; _i98++) {
              var child = this.children[_i98],
                  end = pos + child.length;
              if (end > to) break;

              if (pos >= from) {
                var childRect = child.dom.getBoundingClientRect();
                result.push(childRect.height);

                if (isWider) {
                  var last = child.dom.lastChild;
                  var rects = last ? clientRectsFor(last) : [];

                  if (rects.length) {
                    var rect = rects[rects.length - 1];
                    var width = this.view.textDirection == Direction.LTR ? rect.right - childRect.left : childRect.right - rect.left;

                    if (width > widest) {
                      widest = width;
                      this.minWidth = contentWidth;
                      this.minWidthFrom = pos;
                      this.minWidthTo = end;
                    }
                  }
                }
              }

              pos = end + child.breakAfter;
            }

            return result;
          }
        }, {
          key: "measureTextSize",
          value: function measureTextSize() {
            var _this75 = this;

            var _iterator114 = _createForOfIteratorHelper(this.children),
                _step114;

            try {
              for (_iterator114.s(); !(_step114 = _iterator114.n()).done;) {
                var child = _step114.value;

                if (child instanceof LineView) {
                  var measure = child.measureTextSize();
                  if (measure) return measure;
                }
              } // If no workable line exists, force a layout of a measurable element

            } catch (err) {
              _iterator114.e(err);
            } finally {
              _iterator114.f();
            }

            var dummy = document.createElement("div"),
                lineHeight,
                charWidth;
            dummy.className = "cm-line";
            dummy.textContent = "abc def ghi jkl mno pqr stu";
            this.view.observer.ignore(function () {
              _this75.dom.appendChild(dummy);

              var rect = clientRectsFor(dummy.firstChild)[0];
              lineHeight = dummy.getBoundingClientRect().height;
              charWidth = rect ? rect.width / 27 : 7;
              dummy.remove();
            });
            return {
              lineHeight: lineHeight,
              charWidth: charWidth
            };
          }
        }, {
          key: "childCursor",
          value: function childCursor() {
            var pos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.length;
            // Move back to start of last element when possible, so that
            // `ChildCursor.findPos` doesn't have to deal with the edge case
            // of being after the last element.
            var i = this.children.length;
            if (i) pos -= this.children[--i].length;
            return new ChildCursor(this.children, pos, i);
          }
        }, {
          key: "computeBlockGapDeco",
          value: function computeBlockGapDeco() {
            var deco = [],
                vs = this.view.viewState;

            for (var pos = 0, _i99 = 0;; _i99++) {
              var next = _i99 == vs.viewports.length ? null : vs.viewports[_i99];
              var end = next ? next.from - 1 : this.length;

              if (end > pos) {
                var height = vs.lineBlockAt(end).bottom - vs.lineBlockAt(pos).top;
                deco.push(Decoration.replace({
                  widget: new BlockGapWidget(height),
                  block: true,
                  inclusive: true
                }).range(pos, end));
              }

              if (!next) break;
              pos = next.to + 1;
            }

            return Decoration.set(deco);
          }
        }, {
          key: "updateDeco",
          value: function updateDeco() {
            var pluginDecorations = this.view.pluginField(PluginField.decorations);
            this.pluginDecorationLength = pluginDecorations.length;
            return this.decorations = [].concat(_toConsumableArray(pluginDecorations), _toConsumableArray(this.view.state.facet(decorations)), [this.compositionDeco, this.computeBlockGapDeco(), this.view.viewState.lineGapDeco]);
          }
        }, {
          key: "scrollIntoView",
          value: function scrollIntoView(target) {
            var range = target.range;
            var rect = this.coordsAt(range.head, range.empty ? range.assoc : range.head > range.anchor ? -1 : 1),
                other;
            if (!rect) return;
            if (!range.empty && (other = this.coordsAt(range.anchor, range.anchor > range.head ? -1 : 1))) rect = {
              left: Math.min(rect.left, other.left),
              top: Math.min(rect.top, other.top),
              right: Math.max(rect.right, other.right),
              bottom: Math.max(rect.bottom, other.bottom)
            };
            var mLeft = 0,
                mRight = 0,
                mTop = 0,
                mBottom = 0;

            var _iterator115 = _createForOfIteratorHelper(this.view.pluginField(PluginField.scrollMargins)),
                _step115;

            try {
              for (_iterator115.s(); !(_step115 = _iterator115.n()).done;) {
                var margins = _step115.value;

                if (margins) {
                  var left = margins.left,
                      right = margins.right,
                      top = margins.top,
                      bottom = margins.bottom;
                  if (left != null) mLeft = Math.max(mLeft, left);
                  if (right != null) mRight = Math.max(mRight, right);
                  if (top != null) mTop = Math.max(mTop, top);
                  if (bottom != null) mBottom = Math.max(mBottom, bottom);
                }
              }
            } catch (err) {
              _iterator115.e(err);
            } finally {
              _iterator115.f();
            }

            var targetRect = {
              left: rect.left - mLeft,
              top: rect.top - mTop,
              right: rect.right + mRight,
              bottom: rect.bottom + mBottom
            };
            scrollRectIntoView(this.view.scrollDOM, targetRect, range.head < range.anchor ? -1 : 1, target.x, target.y, target.xMargin, target.yMargin, this.view.textDirection == Direction.LTR);
          }
        }]);

        return DocView;
      }(ContentView);

      function betweenUneditable(pos) {
        return pos.node.nodeType == 1 && pos.node.firstChild && (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == "false") && (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == "false");
      }

      var BlockGapWidget = /*#__PURE__*/function (_WidgetType9) {
        _inherits(BlockGapWidget, _WidgetType9);

        var _super40 = _createSuper(BlockGapWidget);

        function BlockGapWidget(height) {
          var _this76;

          _classCallCheck(this, BlockGapWidget);

          _this76 = _super40.call(this);
          _this76.height = height;
          return _this76;
        }

        _createClass(BlockGapWidget, [{
          key: "toDOM",
          value: function toDOM() {
            var elt = document.createElement("div");
            this.updateDOM(elt);
            return elt;
          }
        }, {
          key: "eq",
          value: function eq(other) {
            return other.height == this.height;
          }
        }, {
          key: "updateDOM",
          value: function updateDOM(elt) {
            elt.style.height = this.height + "px";
            return true;
          }
        }, {
          key: "estimatedHeight",
          get: function get() {
            return this.height;
          }
        }]);

        return BlockGapWidget;
      }(WidgetType);

      function computeCompositionDeco(view, changes) {
        var sel = view.observer.selectionRange;
        var textNode = sel.focusNode && nearbyTextNode(sel.focusNode, sel.focusOffset, 0);
        if (!textNode) return Decoration.none;
        var cView = view.docView.nearest(textNode);
        if (!cView) return Decoration.none;
        var from,
            to,
            topNode = textNode;

        if (cView instanceof LineView) {
          while (topNode.parentNode != cView.dom) {
            topNode = topNode.parentNode;
          }

          var prev = topNode.previousSibling;

          while (prev && !ContentView.get(prev)) {
            prev = prev.previousSibling;
          }

          from = to = prev ? ContentView.get(prev).posAtEnd : cView.posAtStart;
        } else {
          for (;;) {
            var _cView = cView,
                parent = _cView.parent;
            if (!parent) return Decoration.none;
            if (parent instanceof LineView) break;
            cView = parent;
          }

          from = cView.posAtStart;
          to = from + cView.length;
          topNode = cView.dom;
        }

        var newFrom = changes.mapPos(from, 1),
            newTo = Math.max(newFrom, changes.mapPos(to, -1));
        var state = view.state,
            text = topNode.nodeType == 3 ? topNode.nodeValue : new DOMReader([], view).readRange(topNode.firstChild, null).text;

        if (newTo - newFrom < text.length) {
          if (state.sliceDoc(newFrom, Math.min(state.doc.length, newFrom + text.length)) == text) newTo = newFrom + text.length;else if (state.sliceDoc(Math.max(0, newTo - text.length), newTo) == text) newFrom = newTo - text.length;else return Decoration.none;
        } else if (state.sliceDoc(newFrom, newTo) != text) {
          return Decoration.none;
        }

        return Decoration.set(Decoration.replace({
          widget: new CompositionWidget(topNode, textNode)
        }).range(newFrom, newTo));
      }

      var CompositionWidget = /*#__PURE__*/function (_WidgetType10) {
        _inherits(CompositionWidget, _WidgetType10);

        var _super41 = _createSuper(CompositionWidget);

        function CompositionWidget(top, text) {
          var _this77;

          _classCallCheck(this, CompositionWidget);

          _this77 = _super41.call(this);
          _this77.top = top;
          _this77.text = text;
          return _this77;
        }

        _createClass(CompositionWidget, [{
          key: "eq",
          value: function eq(other) {
            return this.top == other.top && this.text == other.text;
          }
        }, {
          key: "toDOM",
          value: function toDOM() {
            return this.top;
          }
        }, {
          key: "ignoreEvent",
          value: function ignoreEvent() {
            return false;
          }
        }, {
          key: "customView",
          get: function get() {
            return CompositionView;
          }
        }]);

        return CompositionWidget;
      }(WidgetType);

      function nearbyTextNode(node, offset, side) {
        for (;;) {
          if (node.nodeType == 3) return node;

          if (node.nodeType == 1 && offset > 0 && side <= 0) {
            node = node.childNodes[offset - 1];
            offset = maxOffset(node);
          } else if (node.nodeType == 1 && offset < node.childNodes.length && side >= 0) {
            node = node.childNodes[offset];
            offset = 0;
          } else {
            return null;
          }
        }
      }

      function nextToUneditable(node, offset) {
        if (node.nodeType != 1) return 0;
        return (offset && node.childNodes[offset - 1].contentEditable == "false" ? 1
        /* Before */
        : 0) | (offset < node.childNodes.length && node.childNodes[offset].contentEditable == "false" ? 2
        /* After */
        : 0);
      }

      var DecorationComparator$1 = /*#__PURE__*/function () {
        function DecorationComparator$1() {
          _classCallCheck(this, DecorationComparator$1);

          this.changes = [];
        }

        _createClass(DecorationComparator$1, [{
          key: "compareRange",
          value: function compareRange(from, to) {
            addRange(from, to, this.changes);
          }
        }, {
          key: "comparePoint",
          value: function comparePoint(from, to) {
            addRange(from, to, this.changes);
          }
        }]);

        return DecorationComparator$1;
      }();

      function findChangedDeco(a, b, diff) {
        var comp = new DecorationComparator$1();

        _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_2__["RangeSet"].compare(a, b, diff, comp);

        return comp.changes;
      }

      function inUneditable(node, inside) {
        for (var cur = node; cur && cur != inside; cur = cur.assignedSlot || cur.parentNode) {
          if (cur.nodeType == 1 && cur.contentEditable == 'false') {
            return true;
          }
        }

        return false;
      }

      function groupAt(state, pos) {
        var bias = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
        var categorize = state.charCategorizer(pos);
        var line = state.doc.lineAt(pos),
            linePos = pos - line.from;
        if (line.length == 0) return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(pos);
        if (linePos == 0) bias = 1;else if (linePos == line.length) bias = -1;
        var from = linePos,
            to = linePos;
        if (bias < 0) from = Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_3__["findClusterBreak"])(line.text, linePos, false);else to = Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_3__["findClusterBreak"])(line.text, linePos);
        var cat = categorize(line.text.slice(from, to));

        while (from > 0) {
          var prev = Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_3__["findClusterBreak"])(line.text, from, false);
          if (categorize(line.text.slice(prev, from)) != cat) break;
          from = prev;
        }

        while (to < line.length) {
          var next = Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_3__["findClusterBreak"])(line.text, to);
          if (categorize(line.text.slice(to, next)) != cat) break;
          to = next;
        }

        return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].range(from + line.from, to + line.from);
      } // Search the DOM for the {node, offset} position closest to the given
      // coordinates. Very inefficient and crude, but can usually be avoided
      // by calling caret(Position|Range)FromPoint instead.


      function getdx(x, rect) {
        return rect.left > x ? rect.left - x : Math.max(0, x - rect.right);
      }

      function getdy(y, rect) {
        return rect.top > y ? rect.top - y : Math.max(0, y - rect.bottom);
      }

      function yOverlap(a, b) {
        return a.top < b.bottom - 1 && a.bottom > b.top + 1;
      }

      function upTop(rect, top) {
        return top < rect.top ? {
          top: top,
          left: rect.left,
          right: rect.right,
          bottom: rect.bottom
        } : rect;
      }

      function upBot(rect, bottom) {
        return bottom > rect.bottom ? {
          top: rect.top,
          left: rect.left,
          right: rect.right,
          bottom: bottom
        } : rect;
      }

      function domPosAtCoords(parent, x, y) {
        var closest, closestRect, closestX, closestY;
        var above, below, aboveRect, belowRect;

        for (var child = parent.firstChild; child; child = child.nextSibling) {
          var rects = clientRectsFor(child);

          for (var _i100 = 0; _i100 < rects.length; _i100++) {
            var rect = rects[_i100];
            if (closestRect && yOverlap(closestRect, rect)) rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);
            var dx = getdx(x, rect),
                dy = getdy(y, rect);
            if (dx == 0 && dy == 0) return child.nodeType == 3 ? domPosInText(child, x, y) : domPosAtCoords(child, x, y);

            if (!closest || closestY > dy || closestY == dy && closestX > dx) {
              closest = child;
              closestRect = rect;
              closestX = dx;
              closestY = dy;
            }

            if (dx == 0) {
              if (y > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
                above = child;
                aboveRect = rect;
              } else if (y < rect.top && (!belowRect || belowRect.top > rect.top)) {
                below = child;
                belowRect = rect;
              }
            } else if (aboveRect && yOverlap(aboveRect, rect)) {
              aboveRect = upBot(aboveRect, rect.bottom);
            } else if (belowRect && yOverlap(belowRect, rect)) {
              belowRect = upTop(belowRect, rect.top);
            }
          }
        }

        if (aboveRect && aboveRect.bottom >= y) {
          closest = above;
          closestRect = aboveRect;
        } else if (belowRect && belowRect.top <= y) {
          closest = below;
          closestRect = belowRect;
        }

        if (!closest) return {
          node: parent,
          offset: 0
        };
        var clipX = Math.max(closestRect.left, Math.min(closestRect.right, x));
        if (closest.nodeType == 3) return domPosInText(closest, clipX, y);
        if (!closestX && closest.contentEditable == "true") return domPosAtCoords(closest, clipX, y);
        var offset = Array.prototype.indexOf.call(parent.childNodes, closest) + (x >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
        return {
          node: parent,
          offset: offset
        };
      }

      function domPosInText(node, x, y) {
        var len = node.nodeValue.length;
        var closestOffset = -1,
            closestDY = 1e9,
            generalSide = 0;

        for (var _i101 = 0; _i101 < len; _i101++) {
          var rects = textRange(node, _i101, _i101 + 1).getClientRects();

          for (var j = 0; j < rects.length; j++) {
            var rect = rects[j];
            if (rect.top == rect.bottom) continue;
            if (!generalSide) generalSide = x - rect.left;
            var dy = (rect.top > y ? rect.top - y : y - rect.bottom) - 1;

            if (rect.left - 1 <= x && rect.right + 1 >= x && dy < closestDY) {
              var right = x >= (rect.left + rect.right) / 2,
                  after = right;

              if (browser.chrome || browser.gecko) {
                // Check for RTL on browsers that support getting client
                // rects for empty ranges.
                var rectBefore = textRange(node, _i101).getBoundingClientRect();
                if (rectBefore.left == rect.right) after = !right;
              }

              if (dy <= 0) return {
                node: node,
                offset: _i101 + (after ? 1 : 0)
              };
              closestOffset = _i101 + (after ? 1 : 0);
              closestDY = dy;
            }
          }
        }

        return {
          node: node,
          offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0
        };
      }

      function _posAtCoords2(view, _ref23, precise) {
        var x = _ref23.x,
            y = _ref23.y;
        var bias = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;

        var _a;

        var content = view.contentDOM.getBoundingClientRect(),
            docTop = content.top + view.viewState.paddingTop;
        var block,
            docHeight = view.viewState.docHeight;
        var yOffset = Math.max(0, Math.min(y - docTop, docHeight)); // Scan for a text block near the queried y position

        for (var halfLine = view.defaultLineHeight / 2, bounced = false;;) {
          block = view.elementAtHeight(yOffset);
          if (block.type == BlockType.Text) break;

          for (;;) {
            // Move the y position out of this block
            yOffset = bias > 0 ? block.bottom + halfLine : block.top - halfLine;
            if (yOffset >= 0 && yOffset <= docHeight) break; // If the document consists entirely of replaced widgets, we
            // won't find a text block, so return 0

            if (bounced) return precise ? null : 0;
            bounced = true;
            bias = -bias;
          }
        }

        y = docTop + yOffset;
        var lineStart = block.from; // If this is outside of the rendered viewport, we can't determine a position

        if (lineStart < view.viewport.from) return view.viewport.from == 0 ? 0 : precise ? null : posAtCoordsImprecise(view, content, block, x, y);
        if (lineStart > view.viewport.to) return view.viewport.to == view.state.doc.length ? view.state.doc.length : precise ? null : posAtCoordsImprecise(view, content, block, x, y); // Prefer ShadowRootOrDocument.elementFromPoint if present, fall back to document if not

        var doc = view.dom.ownerDocument;
        var root = view.root.elementFromPoint ? view.root : doc;
        var element = root.elementFromPoint(x, y);
        if (element && !view.contentDOM.contains(element)) element = null; // If the element is unexpected, clip x at the sides of the content area and try again

        if (!element) {
          x = Math.max(content.left + 1, Math.min(content.right - 1, x));
          element = root.elementFromPoint(x, y);
          if (element && !view.contentDOM.contains(element)) element = null;
        } // There's visible editor content under the point, so we can try
        // using caret(Position|Range)FromPoint as a shortcut


        var node,
            offset = -1;

        if (element && ((_a = view.docView.nearest(element)) === null || _a === void 0 ? void 0 : _a.isEditable) != false) {
          if (doc.caretPositionFromPoint) {
            var pos = doc.caretPositionFromPoint(x, y);

            if (pos) {
              node = pos.offsetNode;
              offset = pos.offset;
            }
          } else if (doc.caretRangeFromPoint) {
            var range = doc.caretRangeFromPoint(x, y);

            if (range) {
              node = range.startContainer;
              offset = range.startOffset;
              if (browser.safari && isSuspiciousCaretResult(node, offset, x)) node = undefined;
            }
          }
        } // No luck, do our own (potentially expensive) search


        if (!node || !view.docView.dom.contains(node)) {
          var line = LineView.find(view.docView, lineStart);
          if (!line) return yOffset > block.top + block.height / 2 ? block.to : block.from;

          var _domPosAtCoords2 = domPosAtCoords(line.dom, x, y);

          node = _domPosAtCoords2.node;
          offset = _domPosAtCoords2.offset;
        }

        return view.docView.posFromDOM(node, offset);
      }

      function posAtCoordsImprecise(view, contentRect, block, x, y) {
        var into = Math.round((x - contentRect.left) * view.defaultCharacterWidth);

        if (view.lineWrapping && block.height > view.defaultLineHeight * 1.5) {
          var line = Math.floor((y - block.top) / view.defaultLineHeight);
          into += line * view.viewState.heightOracle.lineLength;
        }

        var content = view.state.sliceDoc(block.from, block.to);
        return block.from + Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_3__["findColumn"])(content, into, view.state.tabSize);
      } // In case of a high line height, Safari's caretRangeFromPoint treats
      // the space between lines as belonging to the last character of the
      // line before. This is used to detect such a result so that it can be
      // ignored (issue #401).


      function isSuspiciousCaretResult(node, offset, x) {
        var len;
        if (node.nodeType != 3 || offset != (len = node.nodeValue.length)) return false;

        for (var next = node.nextSibling; next; next = next.nextSibling) {
          if (next.nodeType != 1 || next.nodeName != "BR") return false;
        }

        return textRange(node, len - 1, len).getBoundingClientRect().left > x;
      }

      function _moveToLineBoundary2(view, start, forward, includeWrap) {
        var line = view.state.doc.lineAt(start.head);
        var coords = !includeWrap || !view.lineWrapping ? null : view.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);

        if (coords) {
          var editorRect = view.dom.getBoundingClientRect();
          var pos = view.posAtCoords({
            x: forward == (view.textDirection == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,
            y: (coords.top + coords.bottom) / 2
          });
          if (pos != null) return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(pos, forward ? -1 : 1);
        }

        var lineView = LineView.find(view.docView, start.head);
        var end = lineView ? forward ? lineView.posAtEnd : lineView.posAtStart : forward ? line.to : line.from;
        return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(end, forward ? -1 : 1);
      }

      function _moveByChar2(view, start, forward, by) {
        var line = view.state.doc.lineAt(start.head),
            spans = view.bidiSpans(line);

        for (var cur = start, check = null;;) {
          var next = moveVisually(line, spans, view.textDirection, cur, forward),
              _char4 = movedOver;

          if (!next) {
            if (line.number == (forward ? view.state.doc.lines : 1)) return cur;
            _char4 = "\n";
            line = view.state.doc.line(line.number + (forward ? 1 : -1));
            spans = view.bidiSpans(line);
            next = _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(forward ? line.from : line.to);
          }

          if (!check) {
            if (!by) return next;
            check = by(_char4);
          } else if (!check(_char4)) {
            return cur;
          }

          cur = next;
        }
      }

      function byGroup(view, pos, start) {
        var categorize = view.state.charCategorizer(pos);
        var cat = categorize(start);
        return function (next) {
          var nextCat = categorize(next);
          if (cat == _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["CharCategory"].Space) cat = nextCat;
          return cat == nextCat;
        };
      }

      function _moveVertically2(view, start, forward, distance) {
        var startPos = start.head,
            dir = forward ? 1 : -1;
        if (startPos == (forward ? view.state.doc.length : 0)) return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(startPos);
        var goal = start.goalColumn,
            startY;
        var rect = view.contentDOM.getBoundingClientRect();
        var startCoords = view.coordsAtPos(startPos),
            docTop = view.documentTop;

        if (startCoords) {
          if (goal == null) goal = startCoords.left - rect.left;
          startY = dir < 0 ? startCoords.top : startCoords.bottom;
        } else {
          var line = view.viewState.lineBlockAt(startPos - docTop);
          if (goal == null) goal = Math.min(rect.right - rect.left, view.defaultCharacterWidth * (startPos - line.from));
          startY = (dir < 0 ? line.top : line.bottom) + docTop;
        }

        var resolvedGoal = rect.left + goal;
        var dist = distance !== null && distance !== void 0 ? distance : view.defaultLineHeight >> 1;

        for (var extra = 0;; extra += 10) {
          var curY = startY + (dist + extra) * dir;

          var pos = _posAtCoords2(view, {
            x: resolvedGoal,
            y: curY
          }, false, dir);

          if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos)) return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(pos, undefined, undefined, goal);
        }
      }

      function skipAtoms(view, oldPos, pos) {
        var atoms = view.pluginField(PluginField.atomicRanges);

        for (;;) {
          var moved = false;

          var _iterator116 = _createForOfIteratorHelper(atoms),
              _step116;

          try {
            for (_iterator116.s(); !(_step116 = _iterator116.n()).done;) {
              var set = _step116.value;
              set.between(pos.from - 1, pos.from + 1, function (from, to, value) {
                if (pos.from > from && pos.from < to) {
                  pos = oldPos.from > pos.from ? _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(from, 1) : _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(to, -1);
                  moved = true;
                }
              });
            }
          } catch (err) {
            _iterator116.e(err);
          } finally {
            _iterator116.f();
          }

          if (!moved) return pos;
        }
      } // This will also be where dragging info and such goes


      var InputState = /*#__PURE__*/function () {
        function InputState(view) {
          var _this78 = this;

          _classCallCheck(this, InputState);

          this.lastKeyCode = 0;
          this.lastKeyTime = 0; // On iOS, some keys need to have their default behavior happen
          // (after which we retroactively handle them and reset the DOM) to
          // avoid messing up the virtual keyboard state.

          this.pendingIOSKey = undefined;
          this.lastSelectionOrigin = null;
          this.lastSelectionTime = 0;
          this.lastEscPress = 0;
          this.lastContextMenu = 0;
          this.scrollHandlers = [];
          this.registeredEvents = [];
          this.customHandlers = []; // -1 means not in a composition. Otherwise, this counts the number
          // of changes made during the composition. The count is used to
          // avoid treating the start state of the composition, before any
          // changes have been made, as part of the composition.

          this.composing = -1; // Tracks whether the next change should be marked as starting the
          // composition (null means no composition, true means next is the
          // first, false means first has already been marked for this
          // composition)

          this.compositionFirstChange = null;
          this.compositionEndedAt = 0;
          this.rapidCompositionStart = false;
          this.mouseSelection = null;

          var _loop12 = function _loop12(type) {
            var handler = handlers[type];
            view.contentDOM.addEventListener(type, function (event) {
              if (type == "keydown" && _this78.keydown(view, event)) return;
              if (!eventBelongsToEditor(view, event) || _this78.ignoreDuringComposition(event)) return;
              if (_this78.mustFlushObserver(event)) view.observer.forceFlush();
              if (_this78.runCustomHandlers(type, view, event)) event.preventDefault();else handler(view, event);
            });

            _this78.registeredEvents.push(type);
          };

          for (var type in handlers) {
            _loop12(type);
          }

          this.notifiedFocused = view.hasFocus;
          this.ensureHandlers(view); // On Safari adding an input event handler somehow prevents an
          // issue where the composition vanishes when you press enter.

          if (browser.safari) view.contentDOM.addEventListener("input", function () {
            return null;
          });
        }

        _createClass(InputState, [{
          key: "setSelectionOrigin",
          value: function setSelectionOrigin(origin) {
            this.lastSelectionOrigin = origin;
            this.lastSelectionTime = Date.now();
          }
        }, {
          key: "ensureHandlers",
          value: function ensureHandlers(view) {
            var _this79 = this;

            var handlers = this.customHandlers = view.pluginField(domEventHandlers);

            var _iterator117 = _createForOfIteratorHelper(handlers),
                _step117;

            try {
              for (_iterator117.s(); !(_step117 = _iterator117.n()).done;) {
                var set = _step117.value;

                var _loop13 = function _loop13(type) {
                  if (_this79.registeredEvents.indexOf(type) < 0 && type != "scroll") {
                    _this79.registeredEvents.push(type);

                    view.contentDOM.addEventListener(type, function (event) {
                      if (!eventBelongsToEditor(view, event)) return;
                      if (_this79.runCustomHandlers(type, view, event)) event.preventDefault();
                    });
                  }
                };

                for (var type in set.handlers) {
                  _loop13(type);
                }
              }
            } catch (err) {
              _iterator117.e(err);
            } finally {
              _iterator117.f();
            }
          }
        }, {
          key: "runCustomHandlers",
          value: function runCustomHandlers(type, view, event) {
            var _iterator118 = _createForOfIteratorHelper(this.customHandlers),
                _step118;

            try {
              for (_iterator118.s(); !(_step118 = _iterator118.n()).done;) {
                var set = _step118.value;
                var handler = set.handlers[type];

                if (handler) {
                  try {
                    if (handler.call(set.plugin, event, view) || event.defaultPrevented) return true;
                  } catch (e) {
                    logException(view.state, e);
                  }
                }
              }
            } catch (err) {
              _iterator118.e(err);
            } finally {
              _iterator118.f();
            }

            return false;
          }
        }, {
          key: "runScrollHandlers",
          value: function runScrollHandlers(view, event) {
            var _iterator119 = _createForOfIteratorHelper(this.customHandlers),
                _step119;

            try {
              for (_iterator119.s(); !(_step119 = _iterator119.n()).done;) {
                var set = _step119.value;
                var handler = set.handlers.scroll;

                if (handler) {
                  try {
                    handler.call(set.plugin, event, view);
                  } catch (e) {
                    logException(view.state, e);
                  }
                }
              }
            } catch (err) {
              _iterator119.e(err);
            } finally {
              _iterator119.f();
            }
          }
        }, {
          key: "keydown",
          value: function keydown(view, event) {
            var _this80 = this;

            // Must always run, even if a custom handler handled the event
            this.lastKeyCode = event.keyCode;
            this.lastKeyTime = Date.now();
            if (this.screenKeyEvent(view, event)) return true; // Chrome for Android usually doesn't fire proper key events, but
            // occasionally does, usually surrounded by a bunch of complicated
            // composition changes. When an enter or backspace key event is
            // seen, hold off on handling DOM events for a bit, and then
            // dispatch it.

            if (browser.android && browser.chrome && !event.synthetic && (event.keyCode == 13 || event.keyCode == 8)) {
              view.observer.delayAndroidKey(event.key, event.keyCode);
              return true;
            } // Prevent the default behavior of Enter on iOS makes the
            // virtual keyboard get stuck in the wrong (lowercase)
            // state. So we let it go through, and then, in
            // applyDOMChange, notify key handlers of it and reset to
            // the state they produce.


            var pending;

            if (browser.ios && (pending = PendingKeys.find(function (key) {
              return key.keyCode == event.keyCode;
            })) && !(event.ctrlKey || event.altKey || event.metaKey) && !event.synthetic) {
              this.pendingIOSKey = pending;
              setTimeout(function () {
                return _this80.flushIOSKey(view);
              }, 250);
              return true;
            }

            return false;
          }
        }, {
          key: "flushIOSKey",
          value: function flushIOSKey(view) {
            var key = this.pendingIOSKey;
            if (!key) return false;
            this.pendingIOSKey = undefined;
            return dispatchKey(view.contentDOM, key.key, key.keyCode);
          }
        }, {
          key: "ignoreDuringComposition",
          value: function ignoreDuringComposition(event) {
            if (!/^key/.test(event.type)) return false;
            if (this.composing > 0) return true; // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.
            // On some input method editors (IMEs), the Enter key is used to
            // confirm character selection. On Safari, when Enter is pressed,
            // compositionend and keydown events are sometimes emitted in the
            // wrong order. The key event should still be ignored, even when
            // it happens after the compositionend event.

            if (browser.safari && Date.now() - this.compositionEndedAt < 500) {
              this.compositionEndedAt = 0;
              return true;
            }

            return false;
          }
        }, {
          key: "screenKeyEvent",
          value: function screenKeyEvent(view, event) {
            var protectedTab = event.keyCode == 9 && Date.now() < this.lastEscPress + 2000;
            if (event.keyCode == 27) this.lastEscPress = Date.now();else if (modifierCodes.indexOf(event.keyCode) < 0) this.lastEscPress = 0;
            return protectedTab;
          }
        }, {
          key: "mustFlushObserver",
          value: function mustFlushObserver(event) {
            return event.type == "keydown" && event.keyCode != 229 || event.type == "compositionend" && !browser.ios;
          }
        }, {
          key: "startMouseSelection",
          value: function startMouseSelection(mouseSelection) {
            if (this.mouseSelection) this.mouseSelection.destroy();
            this.mouseSelection = mouseSelection;
          }
        }, {
          key: "update",
          value: function update(_update14) {
            if (this.mouseSelection) this.mouseSelection.update(_update14);
            if (_update14.transactions.length) this.lastKeyCode = this.lastSelectionTime = 0;
          }
        }, {
          key: "destroy",
          value: function destroy() {
            if (this.mouseSelection) this.mouseSelection.destroy();
          }
        }]);

        return InputState;
      }();

      var PendingKeys = [{
        key: "Backspace",
        keyCode: 8,
        inputType: "deleteContentBackward"
      }, {
        key: "Enter",
        keyCode: 13,
        inputType: "insertParagraph"
      }, {
        key: "Delete",
        keyCode: 46,
        inputType: "deleteContentForward"
      }]; // Key codes for modifier keys

      var modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];

      var MouseSelection = /*#__PURE__*/function () {
        function MouseSelection(view, startEvent, style, mustSelect) {
          _classCallCheck(this, MouseSelection);

          this.view = view;
          this.style = style;
          this.mustSelect = mustSelect;
          this.lastEvent = startEvent;
          var doc = view.contentDOM.ownerDocument;
          doc.addEventListener("mousemove", this.move = this.move.bind(this));
          doc.addEventListener("mouseup", this.up = this.up.bind(this));
          this.extend = startEvent.shiftKey;
          this.multiple = view.state.facet(_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorState"].allowMultipleSelections) && addsSelectionRange(view, startEvent);
          this.dragMove = dragMovesSelection(view, startEvent);
          this.dragging = isInPrimarySelection(view, startEvent) && getClickType(startEvent) == 1 ? null : false; // When clicking outside of the selection, immediately apply the
          // effect of starting the selection

          if (this.dragging === false) {
            startEvent.preventDefault();
            this.select(startEvent);
          }
        }

        _createClass(MouseSelection, [{
          key: "move",
          value: function move(event) {
            if (event.buttons == 0) return this.destroy();
            if (this.dragging !== false) return;
            this.select(this.lastEvent = event);
          }
        }, {
          key: "up",
          value: function up(event) {
            if (this.dragging == null) this.select(this.lastEvent);
            if (!this.dragging) event.preventDefault();
            this.destroy();
          }
        }, {
          key: "destroy",
          value: function destroy() {
            var doc = this.view.contentDOM.ownerDocument;
            doc.removeEventListener("mousemove", this.move);
            doc.removeEventListener("mouseup", this.up);
            this.view.inputState.mouseSelection = null;
          }
        }, {
          key: "select",
          value: function select(event) {
            var selection = this.style.get(event, this.extend, this.multiple);
            if (this.mustSelect || !selection.eq(this.view.state.selection) || selection.main.assoc != this.view.state.selection.main.assoc) this.view.dispatch({
              selection: selection,
              userEvent: "select.pointer",
              scrollIntoView: true
            });
            this.mustSelect = false;
          }
        }, {
          key: "update",
          value: function update(_update15) {
            var _this81 = this;

            if (_update15.docChanged && this.dragging) this.dragging = this.dragging.map(_update15.changes);
            if (this.style.update(_update15)) setTimeout(function () {
              return _this81.select(_this81.lastEvent);
            }, 20);
          }
        }]);

        return MouseSelection;
      }();

      function addsSelectionRange(view, event) {
        var facet = view.state.facet(clickAddsSelectionRange);
        return facet.length ? facet[0](event) : browser.mac ? event.metaKey : event.ctrlKey;
      }

      function dragMovesSelection(view, event) {
        var facet = view.state.facet(dragMovesSelection$1);
        return facet.length ? facet[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;
      }

      function isInPrimarySelection(view, event) {
        var main = view.state.selection.main;
        if (main.empty) return false; // On boundary clicks, check whether the coordinates are inside the
        // selection's client rectangles

        var sel = getSelection(view.root);
        if (sel.rangeCount == 0) return true;
        var rects = sel.getRangeAt(0).getClientRects();

        for (var _i102 = 0; _i102 < rects.length; _i102++) {
          var rect = rects[_i102];
          if (rect.left <= event.clientX && rect.right >= event.clientX && rect.top <= event.clientY && rect.bottom >= event.clientY) return true;
        }

        return false;
      }

      function eventBelongsToEditor(view, event) {
        if (!event.bubbles) return true;
        if (event.defaultPrevented) return false;

        for (var node = event.target, cView; node != view.contentDOM; node = node.parentNode) {
          if (!node || node.nodeType == 11 || (cView = ContentView.get(node)) && cView.ignoreEvent(event)) return false;
        }

        return true;
      }

      var handlers = /*@__PURE__*/Object.create(null); // This is very crude, but unfortunately both these browsers _pretend_
      // that they have a clipboard API—all the objects and methods are
      // there, they just don't work, and they are hard to test.

      var brokenClipboardAPI = browser.ie && browser.ie_version < 15 || browser.ios && browser.webkit_version < 604;

      function capturePaste(view) {
        var parent = view.dom.parentNode;
        if (!parent) return;
        var target = parent.appendChild(document.createElement("textarea"));
        target.style.cssText = "position: fixed; left: -10000px; top: 10px";
        target.focus();
        setTimeout(function () {
          view.focus();
          target.remove();
          doPaste(view, target.value);
        }, 50);
      }

      function doPaste(view, input) {
        var state = view.state,
            changes,
            i = 1,
            text = state.toText(input);
        var byLine = text.lines == state.selection.ranges.length;
        var linewise = lastLinewiseCopy != null && state.selection.ranges.every(function (r) {
          return r.empty;
        }) && lastLinewiseCopy == text.toString();

        if (linewise) {
          var lastLine = -1;
          changes = state.changeByRange(function (range) {
            var line = state.doc.lineAt(range.from);
            if (line.from == lastLine) return {
              range: range
            };
            lastLine = line.from;
            var insert = state.toText((byLine ? text.line(i++).text : input) + state.lineBreak);
            return {
              changes: {
                from: line.from,
                insert: insert
              },
              range: _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(range.from + insert.length)
            };
          });
        } else if (byLine) {
          changes = state.changeByRange(function (range) {
            var line = text.line(i++);
            return {
              changes: {
                from: range.from,
                to: range.to,
                insert: line.text
              },
              range: _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(range.from + line.length)
            };
          });
        } else {
          changes = state.replaceSelection(text);
        }

        view.dispatch(changes, {
          userEvent: "input.paste",
          scrollIntoView: true
        });
      }

      handlers.keydown = function (view, event) {
        view.inputState.setSelectionOrigin("select");
      };

      var lastTouch = 0;

      handlers.touchstart = function (view, e) {
        lastTouch = Date.now();
        view.inputState.setSelectionOrigin("select.pointer");
      };

      handlers.touchmove = function (view) {
        view.inputState.setSelectionOrigin("select.pointer");
      };

      handlers.mousedown = function (view, event) {
        view.observer.flush();
        if (lastTouch > Date.now() - 2000 && getClickType(event) == 1) return; // Ignore touch interaction

        var style = null;

        var _iterator120 = _createForOfIteratorHelper(view.state.facet(mouseSelectionStyle)),
            _step120;

        try {
          for (_iterator120.s(); !(_step120 = _iterator120.n()).done;) {
            var makeStyle = _step120.value;
            style = makeStyle(view, event);
            if (style) break;
          }
        } catch (err) {
          _iterator120.e(err);
        } finally {
          _iterator120.f();
        }

        if (!style && event.button == 0) style = basicMouseSelection(view, event);

        if (style) {
          var mustFocus = view.root.activeElement != view.contentDOM;
          if (mustFocus) view.observer.ignore(function () {
            return focusPreventScroll(view.contentDOM);
          });
          view.inputState.startMouseSelection(new MouseSelection(view, event, style, mustFocus));
        }
      };

      function rangeForClick(view, pos, bias, type) {
        if (type == 1) {
          // Single click
          return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(pos, bias);
        } else if (type == 2) {
          // Double click
          return groupAt(view.state, pos, bias);
        } else {
          // Triple click
          var visual = LineView.find(view.docView, pos),
              line = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);
          var from = visual ? visual.posAtStart : line.from,
              to = visual ? visual.posAtEnd : line.to;
          if (to < view.state.doc.length && to == line.to) to++;
          return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].range(from, to);
        }
      }

      var insideY = function insideY(y, rect) {
        return y >= rect.top && y <= rect.bottom;
      };

      var inside = function inside(x, y, rect) {
        return insideY(y, rect) && x >= rect.left && x <= rect.right;
      }; // Try to determine, for the given coordinates, associated with the
      // given position, whether they are related to the element before or
      // the element after the position.


      function findPositionSide(view, pos, x, y) {
        var line = LineView.find(view.docView, pos);
        if (!line) return 1;
        var off = pos - line.posAtStart; // Line boundaries point into the line

        if (off == 0) return 1;
        if (off == line.length) return -1; // Positions on top of an element point at that element

        var before = line.coordsAt(off, -1);
        if (before && inside(x, y, before)) return -1;
        var after = line.coordsAt(off, 1);
        if (after && inside(x, y, after)) return 1; // This is probably a line wrap point. Pick before if the point is
        // beside it.

        return before && insideY(y, before) ? -1 : 1;
      }

      function queryPos(view, event) {
        var pos = view.posAtCoords({
          x: event.clientX,
          y: event.clientY
        }, false);
        return {
          pos: pos,
          bias: findPositionSide(view, pos, event.clientX, event.clientY)
        };
      }

      var BadMouseDetail = browser.ie && browser.ie_version <= 11;
      var lastMouseDown = null,
          lastMouseDownCount = 0,
          lastMouseDownTime = 0;

      function getClickType(event) {
        if (!BadMouseDetail) return event.detail;
        var last = lastMouseDown,
            lastTime = lastMouseDownTime;
        lastMouseDown = event;
        lastMouseDownTime = Date.now();
        return lastMouseDownCount = !last || lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 && Math.abs(last.clientY - event.clientY) < 2 ? (lastMouseDownCount + 1) % 3 : 1;
      }

      function basicMouseSelection(view, event) {
        var start = queryPos(view, event),
            type = getClickType(event);
        var startSel = view.state.selection;
        var last = start,
            lastEvent = event;
        return {
          update: function update(_update16) {
            if (_update16.docChanged) {
              if (start) start.pos = _update16.changes.mapPos(start.pos);
              startSel = startSel.map(_update16.changes);
              lastEvent = null;
            }
          },
          get: function get(event, extend, multiple) {
            var cur;
            if (lastEvent && event.clientX == lastEvent.clientX && event.clientY == lastEvent.clientY) cur = last;else {
              cur = last = queryPos(view, event);
              lastEvent = event;
            }
            if (!cur || !start) return startSel;
            var range = rangeForClick(view, cur.pos, cur.bias, type);

            if (start.pos != cur.pos && !extend) {
              var startRange = rangeForClick(view, start.pos, start.bias, type);
              var from = Math.min(startRange.from, range.from),
                  to = Math.max(startRange.to, range.to);
              range = from < range.from ? _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].range(from, to) : _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].range(to, from);
            }

            if (extend) return startSel.replaceRange(startSel.main.extend(range.from, range.to));else if (multiple) return startSel.addRange(range);else return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].create([range]);
          }
        };
      }

      handlers.dragstart = function (view, event) {
        var main = view.state.selection.main;
        var mouseSelection = view.inputState.mouseSelection;
        if (mouseSelection) mouseSelection.dragging = main;

        if (event.dataTransfer) {
          event.dataTransfer.setData("Text", view.state.sliceDoc(main.from, main.to));
          event.dataTransfer.effectAllowed = "copyMove";
        }
      };

      function dropText(view, event, text, direct) {
        if (!text) return;
        var dropPos = view.posAtCoords({
          x: event.clientX,
          y: event.clientY
        }, false);
        event.preventDefault();
        var mouseSelection = view.inputState.mouseSelection;
        var del = direct && mouseSelection && mouseSelection.dragging && mouseSelection.dragMove ? {
          from: mouseSelection.dragging.from,
          to: mouseSelection.dragging.to
        } : null;
        var ins = {
          from: dropPos,
          insert: text
        };
        var changes = view.state.changes(del ? [del, ins] : ins);
        view.focus();
        view.dispatch({
          changes: changes,
          selection: {
            anchor: changes.mapPos(dropPos, -1),
            head: changes.mapPos(dropPos, 1)
          },
          userEvent: del ? "move.drop" : "input.drop"
        });
      }

      handlers.drop = function (view, event) {
        if (!event.dataTransfer) return;
        if (view.state.readOnly) return event.preventDefault();
        var files = event.dataTransfer.files;

        if (files && files.length) {
          (function () {
            // For a file drop, read the file's text.
            event.preventDefault();
            var text = Array(files.length),
                read = 0;

            var finishFile = function finishFile() {
              if (++read == files.length) dropText(view, event, text.filter(function (s) {
                return s != null;
              }).join(view.state.lineBreak), false);
            };

            var _loop14 = function _loop14(_i103) {
              var reader = new FileReader();
              reader.onerror = finishFile;

              reader.onload = function () {
                if (!/[\x00-\x08\x0e-\x1f]{2}/.test(reader.result)) text[_i103] = reader.result;
                finishFile();
              };

              reader.readAsText(files[_i103]);
            };

            for (var _i103 = 0; _i103 < files.length; _i103++) {
              _loop14(_i103);
            }
          })();
        } else {
          dropText(view, event, event.dataTransfer.getData("Text"), true);
        }
      };

      handlers.paste = function (view, event) {
        if (view.state.readOnly) return event.preventDefault();
        view.observer.flush();
        var data = brokenClipboardAPI ? null : event.clipboardData;

        if (data) {
          doPaste(view, data.getData("text/plain"));
          event.preventDefault();
        } else {
          capturePaste(view);
        }
      };

      function captureCopy(view, text) {
        // The extra wrapper is somehow necessary on IE/Edge to prevent the
        // content from being mangled when it is put onto the clipboard
        var parent = view.dom.parentNode;
        if (!parent) return;
        var target = parent.appendChild(document.createElement("textarea"));
        target.style.cssText = "position: fixed; left: -10000px; top: 10px";
        target.value = text;
        target.focus();
        target.selectionEnd = text.length;
        target.selectionStart = 0;
        setTimeout(function () {
          target.remove();
          view.focus();
        }, 50);
      }

      function copiedRange(state) {
        var content = [],
            ranges = [],
            linewise = false;

        var _iterator121 = _createForOfIteratorHelper(state.selection.ranges),
            _step121;

        try {
          for (_iterator121.s(); !(_step121 = _iterator121.n()).done;) {
            var range = _step121.value;

            if (!range.empty) {
              content.push(state.sliceDoc(range.from, range.to));
              ranges.push(range);
            }
          }
        } catch (err) {
          _iterator121.e(err);
        } finally {
          _iterator121.f();
        }

        if (!content.length) {
          // Nothing selected, do a line-wise copy
          var upto = -1;

          var _iterator122 = _createForOfIteratorHelper(state.selection.ranges),
              _step122;

          try {
            for (_iterator122.s(); !(_step122 = _iterator122.n()).done;) {
              var from = _step122.value.from;
              var line = state.doc.lineAt(from);

              if (line.number > upto) {
                content.push(line.text);
                ranges.push({
                  from: line.from,
                  to: Math.min(state.doc.length, line.to + 1)
                });
              }

              upto = line.number;
            }
          } catch (err) {
            _iterator122.e(err);
          } finally {
            _iterator122.f();
          }

          linewise = true;
        }

        return {
          text: content.join(state.lineBreak),
          ranges: ranges,
          linewise: linewise
        };
      }

      var lastLinewiseCopy = null;

      handlers.copy = handlers.cut = function (view, event) {
        var _copiedRange2 = copiedRange(view.state),
            text = _copiedRange2.text,
            ranges = _copiedRange2.ranges,
            linewise = _copiedRange2.linewise;

        if (!text && !linewise) return;
        lastLinewiseCopy = linewise ? text : null;
        var data = brokenClipboardAPI ? null : event.clipboardData;

        if (data) {
          event.preventDefault();
          data.clearData();
          data.setData("text/plain", text);
        } else {
          captureCopy(view, text);
        }

        if (event.type == "cut" && !view.state.readOnly) view.dispatch({
          changes: ranges,
          scrollIntoView: true,
          userEvent: "delete.cut"
        });
      };

      handlers.focus = handlers.blur = function (view) {
        setTimeout(function () {
          if (view.hasFocus != view.inputState.notifiedFocused) view.update([]);
        }, 10);
      };

      handlers.beforeprint = function (view) {
        view.viewState.printing = true;
        view.requestMeasure();
        setTimeout(function () {
          view.viewState.printing = false;
          view.requestMeasure();
        }, 2000);
      };

      function forceClearComposition(view, rapid) {
        if (view.docView.compositionDeco.size) {
          view.inputState.rapidCompositionStart = rapid;

          try {
            view.update([]);
          } finally {
            view.inputState.rapidCompositionStart = false;
          }
        }
      }

      handlers.compositionstart = handlers.compositionupdate = function (view) {
        if (view.inputState.compositionFirstChange == null) view.inputState.compositionFirstChange = true;

        if (view.inputState.composing < 0) {
          // FIXME possibly set a timeout to clear it again on Android
          view.inputState.composing = 0;

          if (view.docView.compositionDeco.size) {
            view.observer.flush();
            forceClearComposition(view, true);
          }
        }
      };

      handlers.compositionend = function (view) {
        view.inputState.composing = -1;
        view.inputState.compositionEndedAt = Date.now();
        view.inputState.compositionFirstChange = null;
        setTimeout(function () {
          if (view.inputState.composing < 0) forceClearComposition(view, false);
        }, 50);
      };

      handlers.contextmenu = function (view) {
        view.inputState.lastContextMenu = Date.now();
      };

      handlers.beforeinput = function (view, event) {
        var _a; // Because Chrome Android doesn't fire useful key events, use
        // beforeinput to detect backspace (and possibly enter and delete,
        // but those usually don't even seem to fire beforeinput events at
        // the moment) and fake a key event for it.
        //
        // (preventDefault on beforeinput, though supported in the spec,
        // seems to do nothing at all on Chrome).


        var pending;

        if (browser.chrome && browser.android && (pending = PendingKeys.find(function (key) {
          return key.inputType == event.inputType;
        }))) {
          view.observer.delayAndroidKey(pending.key, pending.keyCode);

          if (pending.key == "Backspace" || pending.key == "Delete") {
            var startViewHeight = ((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0;
            setTimeout(function () {
              var _a; // Backspacing near uneditable nodes on Chrome Android sometimes
              // closes the virtual keyboard. This tries to crudely detect
              // that and refocus to get it back.


              if ((((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0) > startViewHeight + 10 && view.hasFocus) {
                view.contentDOM.blur();
                view.focus();
              }
            }, 100);
          }
        }
      };

      var wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line", "break-spaces"];

      var HeightOracle = /*#__PURE__*/function () {
        function HeightOracle() {
          _classCallCheck(this, HeightOracle);

          this.doc = _codemirror_text__WEBPACK_IMPORTED_MODULE_3__["Text"].empty;
          this.lineWrapping = false;
          this.direction = Direction.LTR;
          this.heightSamples = {};
          this.lineHeight = 14;
          this.charWidth = 7;
          this.lineLength = 30; // Used to track, during updateHeight, if any actual heights changed

          this.heightChanged = false;
        }

        _createClass(HeightOracle, [{
          key: "heightForGap",
          value: function heightForGap(from, to) {
            var lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;
            if (this.lineWrapping) lines += Math.ceil((to - from - lines * this.lineLength * 0.5) / this.lineLength);
            return this.lineHeight * lines;
          }
        }, {
          key: "heightForLine",
          value: function heightForLine(length) {
            if (!this.lineWrapping) return this.lineHeight;
            var lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));
            return lines * this.lineHeight;
          }
        }, {
          key: "setDoc",
          value: function setDoc(doc) {
            this.doc = doc;
            return this;
          }
        }, {
          key: "mustRefreshForStyle",
          value: function mustRefreshForStyle(whiteSpace, direction) {
            return wrappingWhiteSpace.indexOf(whiteSpace) > -1 != this.lineWrapping || this.direction != direction;
          }
        }, {
          key: "mustRefreshForHeights",
          value: function mustRefreshForHeights(lineHeights) {
            var newHeight = false;

            for (var _i104 = 0; _i104 < lineHeights.length; _i104++) {
              var h = lineHeights[_i104];

              if (h < 0) {
                _i104++;
              } else if (!this.heightSamples[Math.floor(h * 10)]) {
                // Round to .1 pixels
                newHeight = true;
                this.heightSamples[Math.floor(h * 10)] = true;
              }
            }

            return newHeight;
          }
        }, {
          key: "refresh",
          value: function refresh(whiteSpace, direction, lineHeight, charWidth, lineLength, knownHeights) {
            var lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
            var changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping || this.direction != direction;
            this.lineWrapping = lineWrapping;
            this.direction = direction;
            this.lineHeight = lineHeight;
            this.charWidth = charWidth;
            this.lineLength = lineLength;

            if (changed) {
              this.heightSamples = {};

              for (var _i105 = 0; _i105 < knownHeights.length; _i105++) {
                var h = knownHeights[_i105];
                if (h < 0) _i105++;else this.heightSamples[Math.floor(h * 10)] = true;
              }
            }

            return changed;
          }
        }]);

        return HeightOracle;
      }(); // This object is used by `updateHeight` to make DOM measurements
      // arrive at the right nides. The `heights` array is a sequence of
      // block heights, starting from position `from`.


      var MeasuredHeights = /*#__PURE__*/function () {
        function MeasuredHeights(from, heights) {
          _classCallCheck(this, MeasuredHeights);

          this.from = from;
          this.heights = heights;
          this.index = 0;
        }

        _createClass(MeasuredHeights, [{
          key: "more",
          get: function get() {
            return this.index < this.heights.length;
          }
        }]);

        return MeasuredHeights;
      }();
      /**
      Record used to represent information about a block-level element
      in the editor view.
      */


      var BlockInfo = /*#__PURE__*/function () {
        /**
        @internal
        */
        function BlockInfo(
        /**
        The start of the element in the document.
        */
        from,
        /**
        The length of the element.
        */
        length,
        /**
        The top position of the element (relative to the top of the
        document).
        */
        top,
        /**
        Its height.
        */
        height,
        /**
        The type of element this is. When querying lines, this may be
        an array of all the blocks that make up the line.
        */
        type) {
          _classCallCheck(this, BlockInfo);

          this.from = from;
          this.length = length;
          this.top = top;
          this.height = height;
          this.type = type;
        }
        /**
        The end of the element as a document position.
        */


        _createClass(BlockInfo, [{
          key: "to",
          get: function get() {
            return this.from + this.length;
          }
          /**
          The bottom position of the element.
          */

        }, {
          key: "bottom",
          get: function get() {
            return this.top + this.height;
          }
          /**
          @internal
          */

        }, {
          key: "join",
          value: function join(other) {
            var detail = (Array.isArray(this.type) ? this.type : [this]).concat(Array.isArray(other.type) ? other.type : [other]);
            return new BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, detail);
          }
          /**
          FIXME remove on next breaking release @internal
          */

        }, {
          key: "moveY",
          value: function moveY(offset) {
            return !offset ? this : new BlockInfo(this.from, this.length, this.top + offset, this.height, Array.isArray(this.type) ? this.type.map(function (b) {
              return b.moveY(offset);
            }) : this.type);
          }
        }]);

        return BlockInfo;
      }();

      var QueryType = /*@__PURE__*/function (QueryType) {
        QueryType[QueryType["ByPos"] = 0] = "ByPos";
        QueryType[QueryType["ByHeight"] = 1] = "ByHeight";
        QueryType[QueryType["ByPosNoHeight"] = 2] = "ByPosNoHeight";
        return QueryType;
      }(QueryType || (QueryType = {}));

      var Epsilon = 1e-3;

      var HeightMap = /*#__PURE__*/function () {
        function HeightMap(length, // The number of characters covered
        height) {
          var flags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;

          _classCallCheck(this, HeightMap);

          this.length = length;
          this.height = height;
          this.flags = flags;
        }

        _createClass(HeightMap, [{
          key: "outdated",
          get: function get() {
            return (this.flags & 2
            /* Outdated */
            ) > 0;
          },
          set: function set(value) {
            this.flags = (value ? 2
            /* Outdated */
            : 0) | this.flags & ~2
            /* Outdated */
            ;
          }
        }, {
          key: "setHeight",
          value: function setHeight(oracle, height) {
            if (this.height != height) {
              if (Math.abs(this.height - height) > Epsilon) oracle.heightChanged = true;
              this.height = height;
            }
          } // Base case is to replace a leaf node, which simply builds a tree
          // from the new nodes and returns that (HeightMapBranch and
          // HeightMapGap override this to actually use from/to)

        }, {
          key: "replace",
          value: function replace(_from, _to, nodes) {
            return HeightMap.of(nodes);
          } // Again, these are base cases, and are overridden for branch and gap nodes.

        }, {
          key: "decomposeLeft",
          value: function decomposeLeft(_to, result) {
            result.push(this);
          }
        }, {
          key: "decomposeRight",
          value: function decomposeRight(_from, result) {
            result.push(this);
          }
        }, {
          key: "applyChanges",
          value: function applyChanges(decorations, oldDoc, oracle, changes) {
            var me = this;

            for (var _i106 = changes.length - 1; _i106 >= 0; _i106--) {
              var _changes$_i2 = changes[_i106],
                  fromA = _changes$_i2.fromA,
                  toA = _changes$_i2.toA,
                  fromB = _changes$_i2.fromB,
                  toB = _changes$_i2.toB;
              var start = me.lineAt(fromA, QueryType.ByPosNoHeight, oldDoc, 0, 0);
              var end = start.to >= toA ? start : me.lineAt(toA, QueryType.ByPosNoHeight, oldDoc, 0, 0);
              toB += end.to - toA;
              toA = end.to;

              while (_i106 > 0 && start.from <= changes[_i106 - 1].toA) {
                fromA = changes[_i106 - 1].fromA;
                fromB = changes[_i106 - 1].fromB;
                _i106--;
                if (fromA < start.from) start = me.lineAt(fromA, QueryType.ByPosNoHeight, oldDoc, 0, 0);
              }

              fromB += start.from - fromA;
              fromA = start.from;
              var nodes = NodeBuilder.build(oracle, decorations, fromB, toB);
              me = me.replace(fromA, toA, nodes);
            }

            return me.updateHeight(oracle, 0);
          }
        }], [{
          key: "empty",
          value: function empty() {
            return new HeightMapText(0, 0);
          } // nodes uses null values to indicate the position of line breaks.
          // There are never line breaks at the start or end of the array, or
          // two line breaks next to each other, and the array isn't allowed
          // to be empty (same restrictions as return value from the builder).

        }, {
          key: "of",
          value: function of(nodes) {
            if (nodes.length == 1) return nodes[0];
            var i = 0,
                j = nodes.length,
                before = 0,
                after = 0;

            for (;;) {
              if (i == j) {
                if (before > after * 2) {
                  var split = nodes[i - 1];
                  if (split["break"]) nodes.splice(--i, 1, split.left, null, split.right);else nodes.splice(--i, 1, split.left, split.right);
                  j += 1 + split["break"];
                  before -= split.size;
                } else if (after > before * 2) {
                  var _split2 = nodes[j];
                  if (_split2["break"]) nodes.splice(j, 1, _split2.left, null, _split2.right);else nodes.splice(j, 1, _split2.left, _split2.right);
                  j += 2 + _split2["break"];
                  after -= _split2.size;
                } else {
                  break;
                }
              } else if (before < after) {
                var next = nodes[i++];
                if (next) before += next.size;
              } else {
                var _next4 = nodes[--j];
                if (_next4) after += _next4.size;
              }
            }

            var brk = 0;

            if (nodes[i - 1] == null) {
              brk = 1;
              i--;
            } else if (nodes[i] == null) {
              brk = 1;
              j++;
            }

            return new HeightMapBranch(HeightMap.of(nodes.slice(0, i)), brk, HeightMap.of(nodes.slice(j)));
          }
        }]);

        return HeightMap;
      }();

      HeightMap.prototype.size = 1;

      var HeightMapBlock = /*#__PURE__*/function (_HeightMap4) {
        _inherits(HeightMapBlock, _HeightMap4);

        var _super42 = _createSuper(HeightMapBlock);

        function HeightMapBlock(length, height, type) {
          var _this82;

          _classCallCheck(this, HeightMapBlock);

          _this82 = _super42.call(this, length, height);
          _this82.type = type;
          return _this82;
        }

        _createClass(HeightMapBlock, [{
          key: "blockAt",
          value: function blockAt(_height, _doc, top, offset) {
            return new BlockInfo(offset, this.length, top, this.height, this.type);
          }
        }, {
          key: "lineAt",
          value: function lineAt(_value, _type, doc, top, offset) {
            return this.blockAt(0, doc, top, offset);
          }
        }, {
          key: "forEachLine",
          value: function forEachLine(_from, _to, doc, top, offset, f) {
            f(this.blockAt(0, doc, top, offset));
          }
        }, {
          key: "updateHeight",
          value: function updateHeight(oracle) {
            var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            var _force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            var measured = arguments.length > 3 ? arguments[3] : undefined;
            if (measured && measured.from <= offset && measured.more) this.setHeight(oracle, measured.heights[measured.index++]);
            this.outdated = false;
            return this;
          }
        }, {
          key: "toString",
          value: function toString() {
            return "block(".concat(this.length, ")");
          }
        }]);

        return HeightMapBlock;
      }(HeightMap);

      var HeightMapText = /*#__PURE__*/function (_HeightMapBlock2) {
        _inherits(HeightMapText, _HeightMapBlock2);

        var _super43 = _createSuper(HeightMapText);

        function HeightMapText(length, height) {
          var _this83;

          _classCallCheck(this, HeightMapText);

          _this83 = _super43.call(this, length, height, BlockType.Text);
          _this83.collapsed = 0; // Amount of collapsed content in the line

          _this83.widgetHeight = 0; // Maximum inline widget height

          return _this83;
        }

        _createClass(HeightMapText, [{
          key: "replace",
          value: function replace(_from, _to, nodes) {
            var node = nodes[0];

            if (nodes.length == 1 && (node instanceof HeightMapText || node instanceof HeightMapGap && node.flags & 4
            /* SingleLine */
            ) && Math.abs(this.length - node.length) < 10) {
              if (node instanceof HeightMapGap) node = new HeightMapText(node.length, this.height);else node.height = this.height;
              if (!this.outdated) node.outdated = false;
              return node;
            } else {
              return HeightMap.of(nodes);
            }
          }
        }, {
          key: "updateHeight",
          value: function updateHeight(oracle) {
            var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            var measured = arguments.length > 3 ? arguments[3] : undefined;
            if (measured && measured.from <= offset && measured.more) this.setHeight(oracle, measured.heights[measured.index++]);else if (force || this.outdated) this.setHeight(oracle, Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)));
            this.outdated = false;
            return this;
          }
        }, {
          key: "toString",
          value: function toString() {
            return "line(".concat(this.length).concat(this.collapsed ? -this.collapsed : "").concat(this.widgetHeight ? ":" + this.widgetHeight : "", ")");
          }
        }]);

        return HeightMapText;
      }(HeightMapBlock);

      var HeightMapGap = /*#__PURE__*/function (_HeightMap5) {
        _inherits(HeightMapGap, _HeightMap5);

        var _super44 = _createSuper(HeightMapGap);

        function HeightMapGap(length) {
          _classCallCheck(this, HeightMapGap);

          return _super44.call(this, length, 0);
        }

        _createClass(HeightMapGap, [{
          key: "lines",
          value: function lines(doc, offset) {
            var firstLine = doc.lineAt(offset).number,
                lastLine = doc.lineAt(offset + this.length).number;
            return {
              firstLine: firstLine,
              lastLine: lastLine,
              lineHeight: this.height / (lastLine - firstLine + 1)
            };
          }
        }, {
          key: "blockAt",
          value: function blockAt(height, doc, top, offset) {
            var _this$lines4 = this.lines(doc, offset),
                firstLine = _this$lines4.firstLine,
                lastLine = _this$lines4.lastLine,
                lineHeight = _this$lines4.lineHeight;

            var line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top) / lineHeight)));

            var _doc$line2 = doc.line(firstLine + line),
                from = _doc$line2.from,
                length = _doc$line2.length;

            return new BlockInfo(from, length, top + lineHeight * line, lineHeight, BlockType.Text);
          }
        }, {
          key: "lineAt",
          value: function lineAt(value, type, doc, top, offset) {
            if (type == QueryType.ByHeight) return this.blockAt(value, doc, top, offset);

            if (type == QueryType.ByPosNoHeight) {
              var _doc$lineAt3 = doc.lineAt(value),
                  _from3 = _doc$lineAt3.from,
                  to = _doc$lineAt3.to;

              return new BlockInfo(_from3, to - _from3, 0, 0, BlockType.Text);
            }

            var _this$lines5 = this.lines(doc, offset),
                firstLine = _this$lines5.firstLine,
                lineHeight = _this$lines5.lineHeight;

            var _doc$lineAt4 = doc.lineAt(value),
                from = _doc$lineAt4.from,
                length = _doc$lineAt4.length,
                number = _doc$lineAt4.number;

            return new BlockInfo(from, length, top + lineHeight * (number - firstLine), lineHeight, BlockType.Text);
          }
        }, {
          key: "forEachLine",
          value: function forEachLine(from, to, doc, top, offset, f) {
            var _this$lines6 = this.lines(doc, offset),
                firstLine = _this$lines6.firstLine,
                lineHeight = _this$lines6.lineHeight;

            for (var pos = Math.max(from, offset), end = Math.min(offset + this.length, to); pos <= end;) {
              var line = doc.lineAt(pos);
              if (pos == from) top += lineHeight * (line.number - firstLine);
              f(new BlockInfo(line.from, line.length, top, lineHeight, BlockType.Text));
              top += lineHeight;
              pos = line.to + 1;
            }
          }
        }, {
          key: "replace",
          value: function replace(from, to, nodes) {
            var after = this.length - to;

            if (after > 0) {
              var last = nodes[nodes.length - 1];
              if (last instanceof HeightMapGap) nodes[nodes.length - 1] = new HeightMapGap(last.length + after);else nodes.push(null, new HeightMapGap(after - 1));
            }

            if (from > 0) {
              var first = nodes[0];
              if (first instanceof HeightMapGap) nodes[0] = new HeightMapGap(from + first.length);else nodes.unshift(new HeightMapGap(from - 1), null);
            }

            return HeightMap.of(nodes);
          }
        }, {
          key: "decomposeLeft",
          value: function decomposeLeft(to, result) {
            result.push(new HeightMapGap(to - 1), null);
          }
        }, {
          key: "decomposeRight",
          value: function decomposeRight(from, result) {
            result.push(null, new HeightMapGap(this.length - from - 1));
          }
        }, {
          key: "updateHeight",
          value: function updateHeight(oracle) {
            var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            var measured = arguments.length > 3 ? arguments[3] : undefined;
            var end = offset + this.length;

            if (measured && measured.from <= offset + this.length && measured.more) {
              // Fill in part of this gap with measured lines. We know there
              // can't be widgets or collapsed ranges in those lines, because
              // they would already have been added to the heightmap (gaps
              // only contain plain text).
              var nodes = [],
                  pos = Math.max(offset, measured.from),
                  singleHeight = -1;
              var wasChanged = oracle.heightChanged;
              if (measured.from > offset) nodes.push(new HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));

              while (pos <= end && measured.more) {
                var len = oracle.doc.lineAt(pos).length;
                if (nodes.length) nodes.push(null);
                var height = measured.heights[measured.index++];
                if (singleHeight == -1) singleHeight = height;else if (Math.abs(height - singleHeight) >= Epsilon) singleHeight = -2;
                var line = new HeightMapText(len, height);
                line.outdated = false;
                nodes.push(line);
                pos += len + 1;
              }

              if (pos <= end) nodes.push(null, new HeightMapGap(end - pos).updateHeight(oracle, pos));
              var result = HeightMap.of(nodes);
              oracle.heightChanged = wasChanged || singleHeight < 0 || Math.abs(result.height - this.height) >= Epsilon || Math.abs(singleHeight - this.lines(oracle.doc, offset).lineHeight) >= Epsilon;
              return result;
            } else if (force || this.outdated) {
              this.setHeight(oracle, oracle.heightForGap(offset, offset + this.length));
              this.outdated = false;
            }

            return this;
          }
        }, {
          key: "toString",
          value: function toString() {
            return "gap(".concat(this.length, ")");
          }
        }]);

        return HeightMapGap;
      }(HeightMap);

      var HeightMapBranch = /*#__PURE__*/function (_HeightMap6) {
        _inherits(HeightMapBranch, _HeightMap6);

        var _super45 = _createSuper(HeightMapBranch);

        function HeightMapBranch(left, brk, right) {
          var _this84;

          _classCallCheck(this, HeightMapBranch);

          _this84 = _super45.call(this, left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2
          /* Outdated */
          : 0));
          _this84.left = left;
          _this84.right = right;
          _this84.size = left.size + right.size;
          return _this84;
        }

        _createClass(HeightMapBranch, [{
          key: "break",
          get: function get() {
            return this.flags & 1
            /* Break */
            ;
          }
        }, {
          key: "blockAt",
          value: function blockAt(height, doc, top, offset) {
            var mid = top + this.left.height;
            return height < mid ? this.left.blockAt(height, doc, top, offset) : this.right.blockAt(height, doc, mid, offset + this.left.length + this["break"]);
          }
        }, {
          key: "lineAt",
          value: function lineAt(value, type, doc, top, offset) {
            var rightTop = top + this.left.height,
                rightOffset = offset + this.left.length + this["break"];
            var left = type == QueryType.ByHeight ? value < rightTop : value < rightOffset;
            var base = left ? this.left.lineAt(value, type, doc, top, offset) : this.right.lineAt(value, type, doc, rightTop, rightOffset);
            if (this["break"] || (left ? base.to < rightOffset : base.from > rightOffset)) return base;
            var subQuery = type == QueryType.ByPosNoHeight ? QueryType.ByPosNoHeight : QueryType.ByPos;
            if (left) return base.join(this.right.lineAt(rightOffset, subQuery, doc, rightTop, rightOffset));else return this.left.lineAt(rightOffset, subQuery, doc, top, offset).join(base);
          }
        }, {
          key: "forEachLine",
          value: function forEachLine(from, to, doc, top, offset, f) {
            var rightTop = top + this.left.height,
                rightOffset = offset + this.left.length + this["break"];

            if (this["break"]) {
              if (from < rightOffset) this.left.forEachLine(from, to, doc, top, offset, f);
              if (to >= rightOffset) this.right.forEachLine(from, to, doc, rightTop, rightOffset, f);
            } else {
              var mid = this.lineAt(rightOffset, QueryType.ByPos, doc, top, offset);
              if (from < mid.from) this.left.forEachLine(from, mid.from - 1, doc, top, offset, f);
              if (mid.to >= from && mid.from <= to) f(mid);
              if (to > mid.to) this.right.forEachLine(mid.to + 1, to, doc, rightTop, rightOffset, f);
            }
          }
        }, {
          key: "replace",
          value: function replace(from, to, nodes) {
            var rightStart = this.left.length + this["break"];
            if (to < rightStart) return this.balanced(this.left.replace(from, to, nodes), this.right);
            if (from > this.left.length) return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));
            var result = [];
            if (from > 0) this.decomposeLeft(from, result);
            var left = result.length;

            var _iterator123 = _createForOfIteratorHelper(nodes),
                _step123;

            try {
              for (_iterator123.s(); !(_step123 = _iterator123.n()).done;) {
                var node = _step123.value;
                result.push(node);
              }
            } catch (err) {
              _iterator123.e(err);
            } finally {
              _iterator123.f();
            }

            if (from > 0) mergeGaps(result, left - 1);

            if (to < this.length) {
              var right = result.length;
              this.decomposeRight(to, result);
              mergeGaps(result, right);
            }

            return HeightMap.of(result);
          }
        }, {
          key: "decomposeLeft",
          value: function decomposeLeft(to, result) {
            var left = this.left.length;
            if (to <= left) return this.left.decomposeLeft(to, result);
            result.push(this.left);

            if (this["break"]) {
              left++;
              if (to >= left) result.push(null);
            }

            if (to > left) this.right.decomposeLeft(to - left, result);
          }
        }, {
          key: "decomposeRight",
          value: function decomposeRight(from, result) {
            var left = this.left.length,
                right = left + this["break"];
            if (from >= right) return this.right.decomposeRight(from - right, result);
            if (from < left) this.left.decomposeRight(from, result);
            if (this["break"] && from < right) result.push(null);
            result.push(this.right);
          }
        }, {
          key: "balanced",
          value: function balanced(left, right) {
            if (left.size > 2 * right.size || right.size > 2 * left.size) return HeightMap.of(this["break"] ? [left, null, right] : [left, right]);
            this.left = left;
            this.right = right;
            this.height = left.height + right.height;
            this.outdated = left.outdated || right.outdated;
            this.size = left.size + right.size;
            this.length = left.length + this["break"] + right.length;
            return this;
          }
        }, {
          key: "updateHeight",
          value: function updateHeight(oracle) {
            var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            var measured = arguments.length > 3 ? arguments[3] : undefined;
            var left = this.left,
                right = this.right,
                rightStart = offset + left.length + this["break"],
                rebalance = null;
            if (measured && measured.from <= offset + left.length && measured.more) rebalance = left = left.updateHeight(oracle, offset, force, measured);else left.updateHeight(oracle, offset, force);
            if (measured && measured.from <= rightStart + right.length && measured.more) rebalance = right = right.updateHeight(oracle, rightStart, force, measured);else right.updateHeight(oracle, rightStart, force);
            if (rebalance) return this.balanced(left, right);
            this.height = this.left.height + this.right.height;
            this.outdated = false;
            return this;
          }
        }, {
          key: "toString",
          value: function toString() {
            return this.left + (this["break"] ? " " : "-") + this.right;
          }
        }]);

        return HeightMapBranch;
      }(HeightMap);

      function mergeGaps(nodes, around) {
        var before, after;
        if (nodes[around] == null && (before = nodes[around - 1]) instanceof HeightMapGap && (after = nodes[around + 1]) instanceof HeightMapGap) nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
      }

      var relevantWidgetHeight = 5;

      var NodeBuilder = /*#__PURE__*/function () {
        function NodeBuilder(pos, oracle) {
          _classCallCheck(this, NodeBuilder);

          this.pos = pos;
          this.oracle = oracle;
          this.nodes = [];
          this.lineStart = -1;
          this.lineEnd = -1;
          this.covering = null;
          this.writtenTo = pos;
        }

        _createClass(NodeBuilder, [{
          key: "isCovered",
          get: function get() {
            return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
          }
        }, {
          key: "span",
          value: function span(_from, to) {
            if (this.lineStart > -1) {
              var end = Math.min(to, this.lineEnd),
                  last = this.nodes[this.nodes.length - 1];
              if (last instanceof HeightMapText) last.length += end - this.pos;else if (end > this.pos || !this.isCovered) this.nodes.push(new HeightMapText(end - this.pos, -1));
              this.writtenTo = end;

              if (to > end) {
                this.nodes.push(null);
                this.writtenTo++;
                this.lineStart = -1;
              }
            }

            this.pos = to;
          }
        }, {
          key: "point",
          value: function point(from, to, deco) {
            if (from < to || deco.heightRelevant) {
              var height = deco.widget ? deco.widget.estimatedHeight : 0;
              if (height < 0) height = this.oracle.lineHeight;
              var len = to - from;

              if (deco.block) {
                this.addBlock(new HeightMapBlock(len, height, deco.type));
              } else if (len || height >= relevantWidgetHeight) {
                this.addLineDeco(height, len);
              }
            } else if (to > from) {
              this.span(from, to);
            }

            if (this.lineEnd > -1 && this.lineEnd < this.pos) this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
          }
        }, {
          key: "enterLine",
          value: function enterLine() {
            if (this.lineStart > -1) return;

            var _this$oracle$doc$line2 = this.oracle.doc.lineAt(this.pos),
                from = _this$oracle$doc$line2.from,
                to = _this$oracle$doc$line2.to;

            this.lineStart = from;
            this.lineEnd = to;

            if (this.writtenTo < from) {
              if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null) this.nodes.push(this.blankContent(this.writtenTo, from - 1));
              this.nodes.push(null);
            }

            if (this.pos > from) this.nodes.push(new HeightMapText(this.pos - from, -1));
            this.writtenTo = this.pos;
          }
        }, {
          key: "blankContent",
          value: function blankContent(from, to) {
            var gap = new HeightMapGap(to - from);
            if (this.oracle.doc.lineAt(from).to == to) gap.flags |= 4
            /* SingleLine */
            ;
            return gap;
          }
        }, {
          key: "ensureLine",
          value: function ensureLine() {
            this.enterLine();
            var last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
            if (last instanceof HeightMapText) return last;
            var line = new HeightMapText(0, -1);
            this.nodes.push(line);
            return line;
          }
        }, {
          key: "addBlock",
          value: function addBlock(block) {
            this.enterLine();
            if (block.type == BlockType.WidgetAfter && !this.isCovered) this.ensureLine();
            this.nodes.push(block);
            this.writtenTo = this.pos = this.pos + block.length;
            if (block.type != BlockType.WidgetBefore) this.covering = block;
          }
        }, {
          key: "addLineDeco",
          value: function addLineDeco(height, length) {
            var line = this.ensureLine();
            line.length += length;
            line.collapsed += length;
            line.widgetHeight = Math.max(line.widgetHeight, height);
            this.writtenTo = this.pos = this.pos + length;
          }
        }, {
          key: "finish",
          value: function finish(from) {
            var last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
            if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered) this.nodes.push(new HeightMapText(0, -1));else if (this.writtenTo < this.pos || last == null) this.nodes.push(this.blankContent(this.writtenTo, this.pos));
            var pos = from;

            var _iterator124 = _createForOfIteratorHelper(this.nodes),
                _step124;

            try {
              for (_iterator124.s(); !(_step124 = _iterator124.n()).done;) {
                var node = _step124.value;
                if (node instanceof HeightMapText) node.updateHeight(this.oracle, pos);
                pos += node ? node.length : 1;
              }
            } catch (err) {
              _iterator124.e(err);
            } finally {
              _iterator124.f();
            }

            return this.nodes;
          } // Always called with a region that on both sides either stretches
          // to a line break or the end of the document.
          // The returned array uses null to indicate line breaks, but never
          // starts or ends in a line break, or has multiple line breaks next
          // to each other.

        }], [{
          key: "build",
          value: function build(oracle, decorations, from, to) {
            var builder = new NodeBuilder(from, oracle);

            _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_2__["RangeSet"].spans(decorations, from, to, builder, 0);

            return builder.finish(from);
          }
        }]);

        return NodeBuilder;
      }();

      function heightRelevantDecoChanges(a, b, diff) {
        var comp = new DecorationComparator();

        _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_2__["RangeSet"].compare(a, b, diff, comp, 0);

        return comp.changes;
      }

      var DecorationComparator = /*#__PURE__*/function () {
        function DecorationComparator() {
          _classCallCheck(this, DecorationComparator);

          this.changes = [];
        }

        _createClass(DecorationComparator, [{
          key: "compareRange",
          value: function compareRange() {}
        }, {
          key: "comparePoint",
          value: function comparePoint(from, to, a, b) {
            if (from < to || a && a.heightRelevant || b && b.heightRelevant) addRange(from, to, this.changes, 5);
          }
        }]);

        return DecorationComparator;
      }();

      function visiblePixelRange(dom, paddingTop) {
        var rect = dom.getBoundingClientRect();
        var left = Math.max(0, rect.left),
            right = Math.min(innerWidth, rect.right);
        var top = Math.max(0, rect.top),
            bottom = Math.min(innerHeight, rect.bottom);
        var body = dom.ownerDocument.body;

        for (var parent = dom.parentNode; parent && parent != body;) {
          if (parent.nodeType == 1) {
            var elt = parent;
            var style = window.getComputedStyle(elt);

            if ((elt.scrollHeight > elt.clientHeight || elt.scrollWidth > elt.clientWidth) && style.overflow != "visible") {
              var parentRect = elt.getBoundingClientRect();
              left = Math.max(left, parentRect.left);
              right = Math.min(right, parentRect.right);
              top = Math.max(top, parentRect.top);
              bottom = Math.min(bottom, parentRect.bottom);
            }

            parent = style.position == "absolute" || style.position == "fixed" ? elt.offsetParent : elt.parentNode;
          } else if (parent.nodeType == 11) {
            // Shadow root
            parent = parent.host;
          } else {
            break;
          }
        }

        return {
          left: left - rect.left,
          right: Math.max(left, right) - rect.left,
          top: top - (rect.top + paddingTop),
          bottom: Math.max(top, bottom) - (rect.top + paddingTop)
        };
      } // Line gaps are placeholder widgets used to hide pieces of overlong
      // lines within the viewport, as a kludge to keep the editor
      // responsive when a ridiculously long line is loaded into it.


      var LineGap = /*#__PURE__*/function () {
        function LineGap(from, to, size) {
          _classCallCheck(this, LineGap);

          this.from = from;
          this.to = to;
          this.size = size;
        }

        _createClass(LineGap, [{
          key: "draw",
          value: function draw(wrapping) {
            return Decoration.replace({
              widget: new LineGapWidget(this.size, wrapping)
            }).range(this.from, this.to);
          }
        }], [{
          key: "same",
          value: function same(a, b) {
            if (a.length != b.length) return false;

            for (var _i107 = 0; _i107 < a.length; _i107++) {
              var gA = a[_i107],
                  gB = b[_i107];
              if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size) return false;
            }

            return true;
          }
        }]);

        return LineGap;
      }();

      var LineGapWidget = /*#__PURE__*/function (_WidgetType11) {
        _inherits(LineGapWidget, _WidgetType11);

        var _super46 = _createSuper(LineGapWidget);

        function LineGapWidget(size, vertical) {
          var _this85;

          _classCallCheck(this, LineGapWidget);

          _this85 = _super46.call(this);
          _this85.size = size;
          _this85.vertical = vertical;
          return _this85;
        }

        _createClass(LineGapWidget, [{
          key: "eq",
          value: function eq(other) {
            return other.size == this.size && other.vertical == this.vertical;
          }
        }, {
          key: "toDOM",
          value: function toDOM() {
            var elt = document.createElement("div");

            if (this.vertical) {
              elt.style.height = this.size + "px";
            } else {
              elt.style.width = this.size + "px";
              elt.style.height = "2px";
              elt.style.display = "inline-block";
            }

            return elt;
          }
        }, {
          key: "estimatedHeight",
          get: function get() {
            return this.vertical ? this.size : -1;
          }
        }]);

        return LineGapWidget;
      }(WidgetType);

      var ViewState = /*#__PURE__*/function () {
        function ViewState(state) {
          _classCallCheck(this, ViewState);

          this.state = state; // These are contentDOM-local coordinates

          this.pixelViewport = {
            left: 0,
            right: window.innerWidth,
            top: 0,
            bottom: 0
          };
          this.inView = true;
          this.paddingTop = 0;
          this.paddingBottom = 0;
          this.contentDOMWidth = 0;
          this.contentDOMHeight = 0;
          this.editorHeight = 0;
          this.heightOracle = new HeightOracle(); // See VP.MaxDOMHeight

          this.scaler = IdScaler;
          this.scrollTarget = null; // Briefly set to true when printing, to disable viewport limiting

          this.printing = false; // Flag set when editor content was redrawn, so that the next
          // measure stage knows it must read DOM layout

          this.mustMeasureContent = true;
          this.visibleRanges = []; // Cursor 'assoc' is only significant when the cursor is on a line
          // wrap point, where it must stick to the character that it is
          // associated with. Since browsers don't provide a reasonable
          // interface to set or query this, when a selection is set that
          // might cause this to be significant, this flag is set. The next
          // measure phase will check whether the cursor is on a line-wrapping
          // boundary and, if so, reset it to make sure it is positioned in
          // the right place.

          this.mustEnforceCursorAssoc = false;
          this.heightMap = HeightMap.empty().applyChanges(state.facet(decorations), _codemirror_text__WEBPACK_IMPORTED_MODULE_3__["Text"].empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);
          this.viewport = this.getViewport(0, null);
          this.updateViewportLines();
          this.updateForViewport();
          this.lineGaps = this.ensureLineGaps([]);
          this.lineGapDeco = Decoration.set(this.lineGaps.map(function (gap) {
            return gap.draw(false);
          }));
          this.computeVisibleRanges();
        }

        _createClass(ViewState, [{
          key: "updateForViewport",
          value: function updateForViewport() {
            var _this86 = this;

            var viewports = [this.viewport],
                main = this.state.selection.main;

            var _loop15 = function _loop15(_i108) {
              var pos = _i108 ? main.head : main.anchor;

              if (!viewports.some(function (_ref24) {
                var from = _ref24.from,
                    to = _ref24.to;
                return pos >= from && pos <= to;
              })) {
                var _this86$lineBlockAt = _this86.lineBlockAt(pos),
                    from = _this86$lineBlockAt.from,
                    to = _this86$lineBlockAt.to;

                viewports.push(new Viewport(from, to));
              }
            };

            for (var _i108 = 0; _i108 <= 1; _i108++) {
              _loop15(_i108);
            }

            this.viewports = viewports.sort(function (a, b) {
              return a.from - b.from;
            });
            this.scaler = this.heightMap.height <= 7000000
            /* MaxDOMHeight */
            ? IdScaler : new BigScaler(this.heightOracle.doc, this.heightMap, this.viewports);
          }
        }, {
          key: "updateViewportLines",
          value: function updateViewportLines() {
            var _this87 = this;

            this.viewportLines = [];
            this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.state.doc, 0, 0, function (block) {
              _this87.viewportLines.push(_this87.scaler.scale == 1 ? block : scaleBlock(block, _this87.scaler));
            });
          }
        }, {
          key: "update",
          value: function update(_update17) {
            var scrollTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var prev = this.state;
            this.state = _update17.state;
            var newDeco = this.state.facet(decorations);
            var contentChanges = _update17.changedRanges;
            var heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(_update17.startState.facet(decorations), newDeco, _update17 ? _update17.changes : _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["ChangeSet"].empty(this.state.doc.length)));
            var prevHeight = this.heightMap.height;
            this.heightMap = this.heightMap.applyChanges(newDeco, prev.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
            if (this.heightMap.height != prevHeight) _update17.flags |= 2
            /* Height */
            ;
            var viewport = heightChanges.length ? this.mapViewport(this.viewport, _update17.changes) : this.viewport;
            if (scrollTarget && (scrollTarget.range.head < viewport.from || scrollTarget.range.head > viewport.to) || !this.viewportIsAppropriate(viewport)) viewport = this.getViewport(0, scrollTarget);
            var updateLines = !_update17.changes.empty || _update17.flags & 2
            /* Height */
            || viewport.from != this.viewport.from || viewport.to != this.viewport.to;
            this.viewport = viewport;
            this.updateForViewport();
            if (updateLines) this.updateViewportLines();
            if (this.lineGaps.length || this.viewport.to - this.viewport.from > 4000
            /* DoubleMargin */
            ) this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, _update17.changes)));
            _update17.flags |= this.computeVisibleRanges();
            if (scrollTarget) this.scrollTarget = scrollTarget;
            if (!this.mustEnforceCursorAssoc && _update17.selectionSet && _update17.view.lineWrapping && _update17.state.selection.main.empty && _update17.state.selection.main.assoc) this.mustEnforceCursorAssoc = true;
          }
        }, {
          key: "measure",
          value: function measure(view) {
            var dom = view.contentDOM,
                style = window.getComputedStyle(dom);
            var oracle = this.heightOracle;
            var whiteSpace = style.whiteSpace,
                direction = style.direction == "rtl" ? Direction.RTL : Direction.LTR;
            var refresh = this.heightOracle.mustRefreshForStyle(whiteSpace, direction);
            var measureContent = refresh || this.mustMeasureContent || this.contentDOMHeight != dom.clientHeight;
            var result = 0,
                bias = 0;

            if (measureContent) {
              this.mustMeasureContent = false;
              this.contentDOMHeight = dom.clientHeight; // Vertical padding

              var paddingTop = parseInt(style.paddingTop) || 0,
                  paddingBottom = parseInt(style.paddingBottom) || 0;

              if (this.paddingTop != paddingTop || this.paddingBottom != paddingBottom) {
                result |= 8
                /* Geometry */
                ;
                this.paddingTop = paddingTop;
                this.paddingBottom = paddingBottom;
              }
            } // Pixel viewport


            var pixelViewport = this.printing ? {
              top: -1e8,
              bottom: 1e8,
              left: -1e8,
              right: 1e8
            } : visiblePixelRange(dom, this.paddingTop);
            var dTop = pixelViewport.top - this.pixelViewport.top,
                dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
            this.pixelViewport = pixelViewport;
            var inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;

            if (inView != this.inView) {
              this.inView = inView;
              if (inView) measureContent = true;
            }

            if (!this.inView) return 0;

            if (measureContent) {
              var lineHeights = view.docView.measureVisibleLineHeights();
              if (oracle.mustRefreshForHeights(lineHeights)) refresh = true;
              var contentWidth = dom.clientWidth;

              if (refresh || oracle.lineWrapping && Math.abs(contentWidth - this.contentDOMWidth) > oracle.charWidth) {
                var _view$docView$measure = view.docView.measureTextSize(),
                    lineHeight = _view$docView$measure.lineHeight,
                    charWidth = _view$docView$measure.charWidth;

                refresh = oracle.refresh(whiteSpace, direction, lineHeight, charWidth, contentWidth / charWidth, lineHeights);

                if (refresh) {
                  view.docView.minWidth = 0;
                  result |= 8
                  /* Geometry */
                  ;
                }
              }

              if (this.contentDOMWidth != contentWidth) {
                this.contentDOMWidth = contentWidth;
                result |= 8
                /* Geometry */
                ;
              }

              if (this.editorHeight != view.scrollDOM.clientHeight) {
                this.editorHeight = view.scrollDOM.clientHeight;
                result |= 8
                /* Geometry */
                ;
              }

              if (dTop > 0 && dBottom > 0) bias = Math.max(dTop, dBottom);else if (dTop < 0 && dBottom < 0) bias = Math.min(dTop, dBottom);
              oracle.heightChanged = false;
              this.heightMap = this.heightMap.updateHeight(oracle, 0, refresh, new MeasuredHeights(this.viewport.from, lineHeights));
              if (oracle.heightChanged) result |= 2
              /* Height */
              ;
            }

            var viewportChange = !this.viewportIsAppropriate(this.viewport, bias) || this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);
            if (viewportChange) this.viewport = this.getViewport(bias, this.scrollTarget);
            this.updateForViewport();
            if (result & 2
            /* Height */
            || viewportChange) this.updateViewportLines();
            if (this.lineGaps.length || this.viewport.to - this.viewport.from > 4000
            /* DoubleMargin */
            ) this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps));
            result |= this.computeVisibleRanges();

            if (this.mustEnforceCursorAssoc) {
              this.mustEnforceCursorAssoc = false; // This is done in the read stage, because moving the selection
              // to a line end is going to trigger a layout anyway, so it
              // can't be a pure write. It should be rare that it does any
              // writing.

              view.docView.enforceCursorAssoc();
            }

            return result;
          }
        }, {
          key: "visibleTop",
          get: function get() {
            return this.scaler.fromDOM(this.pixelViewport.top);
          }
        }, {
          key: "visibleBottom",
          get: function get() {
            return this.scaler.fromDOM(this.pixelViewport.bottom);
          }
        }, {
          key: "getViewport",
          value: function getViewport(bias, scrollTarget) {
            // This will divide VP.Margin between the top and the
            // bottom, depending on the bias (the change in viewport position
            // since the last update). It'll hold a number between 0 and 1
            var marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1000
            /* Margin */
            / 2));
            var map = this.heightMap,
                doc = this.state.doc,
                visibleTop = this.visibleTop,
                visibleBottom = this.visibleBottom;
            var viewport = new Viewport(map.lineAt(visibleTop - marginTop * 1000
            /* Margin */
            , QueryType.ByHeight, doc, 0, 0).from, map.lineAt(visibleBottom + (1 - marginTop) * 1000
            /* Margin */
            , QueryType.ByHeight, doc, 0, 0).to); // If scrollTarget is given, make sure the viewport includes that position

            if (scrollTarget) {
              var head = scrollTarget.range.head,
                  viewHeight = this.editorHeight;

              if (head < viewport.from || head > viewport.to) {
                var block = map.lineAt(head, QueryType.ByPos, doc, 0, 0),
                    topPos;
                if (scrollTarget.y == "center") topPos = (block.top + block.bottom) / 2 - viewHeight / 2;else if (scrollTarget.y == "start" || scrollTarget.y == "nearest" && head < viewport.from) topPos = block.top;else topPos = block.bottom - viewHeight;
                viewport = new Viewport(map.lineAt(topPos - 1000
                /* Margin */
                / 2, QueryType.ByHeight, doc, 0, 0).from, map.lineAt(topPos + viewHeight + 1000
                /* Margin */
                / 2, QueryType.ByHeight, doc, 0, 0).to);
              }
            }

            return viewport;
          }
        }, {
          key: "mapViewport",
          value: function mapViewport(viewport, changes) {
            var from = changes.mapPos(viewport.from, -1),
                to = changes.mapPos(viewport.to, 1);
            return new Viewport(this.heightMap.lineAt(from, QueryType.ByPos, this.state.doc, 0, 0).from, this.heightMap.lineAt(to, QueryType.ByPos, this.state.doc, 0, 0).to);
          } // Checks if a given viewport covers the visible part of the
          // document and not too much beyond that.

        }, {
          key: "viewportIsAppropriate",
          value: function viewportIsAppropriate(_ref25) {
            var from = _ref25.from,
                to = _ref25.to;
            var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            if (!this.inView) return true;

            var _this$heightMap$lineA3 = this.heightMap.lineAt(from, QueryType.ByPos, this.state.doc, 0, 0),
                top = _this$heightMap$lineA3.top;

            var _this$heightMap$lineA4 = this.heightMap.lineAt(to, QueryType.ByPos, this.state.doc, 0, 0),
                bottom = _this$heightMap$lineA4.bottom;

            var visibleTop = this.visibleTop,
                visibleBottom = this.visibleBottom;
            return (from == 0 || top <= visibleTop - Math.max(10
            /* MinCoverMargin */
            , Math.min(-bias, 250
            /* MaxCoverMargin */
            ))) && (to == this.state.doc.length || bottom >= visibleBottom + Math.max(10
            /* MinCoverMargin */
            , Math.min(bias, 250
            /* MaxCoverMargin */
            ))) && top > visibleTop - 2 * 1000
            /* Margin */
            && bottom < visibleBottom + 2 * 1000
            /* Margin */
            ;
          }
        }, {
          key: "mapLineGaps",
          value: function mapLineGaps(gaps, changes) {
            if (!gaps.length || changes.empty) return gaps;
            var mapped = [];

            var _iterator125 = _createForOfIteratorHelper(gaps),
                _step125;

            try {
              for (_iterator125.s(); !(_step125 = _iterator125.n()).done;) {
                var gap = _step125.value;
                if (!changes.touchesRange(gap.from, gap.to)) mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size));
              }
            } catch (err) {
              _iterator125.e(err);
            } finally {
              _iterator125.f();
            }

            return mapped;
          } // Computes positions in the viewport where the start or end of a
          // line should be hidden, trying to reuse existing line gaps when
          // appropriate to avoid unneccesary redraws.
          // Uses crude character-counting for the positioning and sizing,
          // since actual DOM coordinates aren't always available and
          // predictable. Relies on generous margins (see LG.Margin) to hide
          // the artifacts this might produce from the user.

        }, {
          key: "ensureLineGaps",
          value: function ensureLineGaps(current) {
            var _this88 = this;

            var gaps = []; // This won't work at all in predominantly right-to-left text.

            if (this.heightOracle.direction != Direction.LTR) return gaps;

            var _iterator126 = _createForOfIteratorHelper(this.viewportLines),
                _step126;

            try {
              var _loop16 = function _loop16() {
                var line = _step126.value;
                if (line.length < 4000
                /* DoubleMargin */
                ) return "continue";
                var structure = lineStructure(line.from, line.to, _this88.state);
                if (structure.total < 4000
                /* DoubleMargin */
                ) return "continue";
                var viewFrom = void 0,
                    viewTo = void 0;

                if (_this88.heightOracle.lineWrapping) {
                  var marginHeight = 2000
                  /* Margin */
                  / _this88.heightOracle.lineLength * _this88.heightOracle.lineHeight;
                  viewFrom = findPosition(structure, (_this88.visibleTop - line.top - marginHeight) / line.height);
                  viewTo = findPosition(structure, (_this88.visibleBottom - line.top + marginHeight) / line.height);
                } else {
                  var totalWidth = structure.total * _this88.heightOracle.charWidth;
                  var marginWidth = 2000
                  /* Margin */
                  * _this88.heightOracle.charWidth;
                  viewFrom = findPosition(structure, (_this88.pixelViewport.left - marginWidth) / totalWidth);
                  viewTo = findPosition(structure, (_this88.pixelViewport.right + marginWidth) / totalWidth);
                }

                var outside = [];
                if (viewFrom > line.from) outside.push({
                  from: line.from,
                  to: viewFrom
                });
                if (viewTo < line.to) outside.push({
                  from: viewTo,
                  to: line.to
                });
                var sel = _this88.state.selection.main; // Make sure the gaps don't cover a selection end

                if (sel.from >= line.from && sel.from <= line.to) cutRange(outside, sel.from - 10
                /* SelectionMargin */
                , sel.from + 10
                /* SelectionMargin */
                );
                if (!sel.empty && sel.to >= line.from && sel.to <= line.to) cutRange(outside, sel.to - 10
                /* SelectionMargin */
                , sel.to + 10
                /* SelectionMargin */
                );

                var _loop17 = function _loop17() {
                  var _outside$_i = _outside[_i109],
                      from = _outside$_i.from,
                      to = _outside$_i.to;

                  if (to - from > 1000
                  /* HalfMargin */
                  ) {
                    gaps.push(find(current, function (gap) {
                      return gap.from >= line.from && gap.to <= line.to && Math.abs(gap.from - from) < 1000
                      /* HalfMargin */
                      && Math.abs(gap.to - to) < 1000;
                    }
                    /* HalfMargin */
                    ) || new LineGap(from, to, _this88.gapSize(line, from, to, structure)));
                  }
                };

                for (var _i109 = 0, _outside = outside; _i109 < _outside.length; _i109++) {
                  _loop17();
                }
              };

              for (_iterator126.s(); !(_step126 = _iterator126.n()).done;) {
                var _ret2 = _loop16();

                if (_ret2 === "continue") continue;
              }
            } catch (err) {
              _iterator126.e(err);
            } finally {
              _iterator126.f();
            }

            return gaps;
          }
        }, {
          key: "gapSize",
          value: function gapSize(line, from, to, structure) {
            var fraction = findFraction(structure, to) - findFraction(structure, from);

            if (this.heightOracle.lineWrapping) {
              return line.height * fraction;
            } else {
              return structure.total * this.heightOracle.charWidth * fraction;
            }
          }
        }, {
          key: "updateLineGaps",
          value: function updateLineGaps(gaps) {
            var _this89 = this;

            if (!LineGap.same(gaps, this.lineGaps)) {
              this.lineGaps = gaps;
              this.lineGapDeco = Decoration.set(gaps.map(function (gap) {
                return gap.draw(_this89.heightOracle.lineWrapping);
              }));
            }
          }
        }, {
          key: "computeVisibleRanges",
          value: function computeVisibleRanges() {
            var deco = this.state.facet(decorations);
            if (this.lineGaps.length) deco = deco.concat(this.lineGapDeco);
            var ranges = [];

            _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_2__["RangeSet"].spans(deco, this.viewport.from, this.viewport.to, {
              span: function span(from, to) {
                ranges.push({
                  from: from,
                  to: to
                });
              },
              point: function point() {}
            }, 20);

            var changed = ranges.length != this.visibleRanges.length || this.visibleRanges.some(function (r, i) {
              return r.from != ranges[i].from || r.to != ranges[i].to;
            });
            this.visibleRanges = ranges;
            return changed ? 4
            /* Viewport */
            : 0;
          }
        }, {
          key: "lineBlockAt",
          value: function lineBlockAt(pos) {
            return pos >= this.viewport.from && pos <= this.viewport.to && this.viewportLines.find(function (b) {
              return b.from <= pos && b.to >= pos;
            }) || scaleBlock(this.heightMap.lineAt(pos, QueryType.ByPos, this.state.doc, 0, 0), this.scaler);
          }
        }, {
          key: "lineBlockAtHeight",
          value: function lineBlockAtHeight(height) {
            return scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height), QueryType.ByHeight, this.state.doc, 0, 0), this.scaler);
          }
        }, {
          key: "elementAtHeight",
          value: function elementAtHeight(height) {
            return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height), this.state.doc, 0, 0), this.scaler);
          }
        }, {
          key: "docHeight",
          get: function get() {
            return this.scaler.toDOM(this.heightMap.height);
          }
        }, {
          key: "contentHeight",
          get: function get() {
            return this.docHeight + this.paddingTop + this.paddingBottom;
          }
        }]);

        return ViewState;
      }();

      var Viewport = /*#__PURE__*/_createClass(function Viewport(from, to) {
        _classCallCheck(this, Viewport);

        this.from = from;
        this.to = to;
      });

      function lineStructure(from, to, state) {
        var ranges = [],
            pos = from,
            total = 0;

        _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_2__["RangeSet"].spans(state.facet(decorations), from, to, {
          span: function span() {},
          point: function point(from, to) {
            if (from > pos) {
              ranges.push({
                from: pos,
                to: from
              });
              total += from - pos;
            }

            pos = to;
          }
        }, 20); // We're only interested in collapsed ranges of a significant size


        if (pos < to) {
          ranges.push({
            from: pos,
            to: to
          });
          total += to - pos;
        }

        return {
          total: total,
          ranges: ranges
        };
      }

      function findPosition(_ref26, ratio) {
        var total = _ref26.total,
            ranges = _ref26.ranges;
        if (ratio <= 0) return ranges[0].from;
        if (ratio >= 1) return ranges[ranges.length - 1].to;
        var dist = Math.floor(total * ratio);

        for (var _i110 = 0;; _i110++) {
          var _ranges$_i2 = ranges[_i110],
              from = _ranges$_i2.from,
              to = _ranges$_i2.to,
              size = to - from;
          if (dist <= size) return from + dist;
          dist -= size;
        }
      }

      function findFraction(structure, pos) {
        var counted = 0;

        var _iterator127 = _createForOfIteratorHelper(structure.ranges),
            _step127;

        try {
          for (_iterator127.s(); !(_step127 = _iterator127.n()).done;) {
            var _step127$value = _step127.value,
                from = _step127$value.from,
                to = _step127$value.to;

            if (pos <= to) {
              counted += pos - from;
              break;
            }

            counted += to - from;
          }
        } catch (err) {
          _iterator127.e(err);
        } finally {
          _iterator127.f();
        }

        return counted / structure.total;
      }

      function cutRange(ranges, from, to) {
        for (var _i111 = 0; _i111 < ranges.length; _i111++) {
          var _r5 = ranges[_i111];

          if (_r5.from < to && _r5.to > from) {
            var pieces = [];
            if (_r5.from < from) pieces.push({
              from: _r5.from,
              to: from
            });
            if (_r5.to > to) pieces.push({
              from: to,
              to: _r5.to
            });
            ranges.splice.apply(ranges, [_i111, 1].concat(pieces));
            _i111 += pieces.length - 1;
          }
        }
      }

      function find(array, f) {
        var _iterator128 = _createForOfIteratorHelper(array),
            _step128;

        try {
          for (_iterator128.s(); !(_step128 = _iterator128.n()).done;) {
            var val = _step128.value;
            if (f(val)) return val;
          }
        } catch (err) {
          _iterator128.e(err);
        } finally {
          _iterator128.f();
        }

        return undefined;
      } // Don't scale when the document height is within the range of what
      // the DOM can handle.


      var IdScaler = {
        toDOM: function toDOM(n) {
          return n;
        },
        fromDOM: function fromDOM(n) {
          return n;
        },
        scale: 1
      }; // When the height is too big (> VP.MaxDOMHeight), scale down the
      // regions outside the viewports so that the total height is
      // VP.MaxDOMHeight.

      var BigScaler = /*#__PURE__*/function () {
        function BigScaler(doc, heightMap, viewports) {
          _classCallCheck(this, BigScaler);

          var vpHeight = 0,
              base = 0,
              domBase = 0;
          this.viewports = viewports.map(function (_ref27) {
            var from = _ref27.from,
                to = _ref27.to;
            var top = heightMap.lineAt(from, QueryType.ByPos, doc, 0, 0).top;
            var bottom = heightMap.lineAt(to, QueryType.ByPos, doc, 0, 0).bottom;
            vpHeight += bottom - top;
            return {
              from: from,
              to: to,
              top: top,
              bottom: bottom,
              domTop: 0,
              domBottom: 0
            };
          });
          this.scale = (7000000
          /* MaxDOMHeight */
          - vpHeight) / (heightMap.height - vpHeight);

          var _iterator129 = _createForOfIteratorHelper(this.viewports),
              _step129;

          try {
            for (_iterator129.s(); !(_step129 = _iterator129.n()).done;) {
              var obj = _step129.value;
              obj.domTop = domBase + (obj.top - base) * this.scale;
              domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);
              base = obj.bottom;
            }
          } catch (err) {
            _iterator129.e(err);
          } finally {
            _iterator129.f();
          }
        }

        _createClass(BigScaler, [{
          key: "toDOM",
          value: function toDOM(n) {
            for (var _i112 = 0, base = 0, domBase = 0;; _i112++) {
              var vp = _i112 < this.viewports.length ? this.viewports[_i112] : null;
              if (!vp || n < vp.top) return domBase + (n - base) * this.scale;
              if (n <= vp.bottom) return vp.domTop + (n - vp.top);
              base = vp.bottom;
              domBase = vp.domBottom;
            }
          }
        }, {
          key: "fromDOM",
          value: function fromDOM(n) {
            for (var _i113 = 0, base = 0, domBase = 0;; _i113++) {
              var vp = _i113 < this.viewports.length ? this.viewports[_i113] : null;
              if (!vp || n < vp.domTop) return base + (n - domBase) / this.scale;
              if (n <= vp.domBottom) return vp.top + (n - vp.domTop);
              base = vp.bottom;
              domBase = vp.domBottom;
            }
          }
        }]);

        return BigScaler;
      }();

      function scaleBlock(block, scaler) {
        if (scaler.scale == 1) return block;
        var bTop = scaler.toDOM(block.top),
            bBottom = scaler.toDOM(block.bottom);
        return new BlockInfo(block.from, block.length, bTop, bBottom - bTop, Array.isArray(block.type) ? block.type.map(function (b) {
          return scaleBlock(b, scaler);
        }) : block.type);
      }

      var _theme2 = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Facet"].define({
        combine: function combine(strs) {
          return strs.join(" ");
        }
      });

      var darkTheme = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Facet"].define({
        combine: function combine(values) {
          return values.indexOf(true) > -1;
        }
      });

      var baseThemeID = /*@__PURE__*/style_mod__WEBPACK_IMPORTED_MODULE_1__["StyleModule"].newName(),
          baseLightID = /*@__PURE__*/style_mod__WEBPACK_IMPORTED_MODULE_1__["StyleModule"].newName(),
          baseDarkID = /*@__PURE__*/style_mod__WEBPACK_IMPORTED_MODULE_1__["StyleModule"].newName();
      var lightDarkIDs = {
        "&light": "." + baseLightID,
        "&dark": "." + baseDarkID
      };

      function buildTheme(main, spec, scopes) {
        return new style_mod__WEBPACK_IMPORTED_MODULE_1__["StyleModule"](spec, {
          finish: function finish(sel) {
            return /&/.test(sel) ? sel.replace(/&\w*/, function (m) {
              if (m == "&") return main;
              if (!scopes || !scopes[m]) throw new RangeError("Unsupported selector: ".concat(m));
              return scopes[m];
            }) : main + " " + sel;
          }
        });
      }

      var baseTheme = /*@__PURE__*/buildTheme("." + baseThemeID, {
        "&.cm-editor": {
          position: "relative !important",
          boxSizing: "border-box",
          "&.cm-focused": {
            // Provide a simple default outline to make sure a focused
            // editor is visually distinct. Can't leave the default behavior
            // because that will apply to the content element, which is
            // inside the scrollable container and doesn't include the
            // gutters. We also can't use an 'auto' outline, since those
            // are, for some reason, drawn behind the element content, which
            // will cause things like the active line background to cover
            // the outline (#297).
            outline: "1px dotted #212121"
          },
          display: "flex !important",
          flexDirection: "column"
        },
        ".cm-scroller": {
          display: "flex !important",
          alignItems: "flex-start !important",
          fontFamily: "monospace",
          lineHeight: 1.4,
          height: "100%",
          overflowX: "auto",
          position: "relative",
          zIndex: 0
        },
        ".cm-content": {
          margin: 0,
          flexGrow: 2,
          minHeight: "100%",
          display: "block",
          whiteSpace: "pre",
          wordWrap: "normal",
          boxSizing: "border-box",
          padding: "4px 0",
          outline: "none",
          "&[contenteditable=true]": {
            WebkitUserModify: "read-write-plaintext-only"
          }
        },
        ".cm-lineWrapping": {
          whiteSpace_fallback: "pre-wrap",
          whiteSpace: "break-spaces",
          wordBreak: "break-word",
          overflowWrap: "anywhere"
        },
        "&light .cm-content": {
          caretColor: "black"
        },
        "&dark .cm-content": {
          caretColor: "white"
        },
        ".cm-line": {
          display: "block",
          padding: "0 2px 0 4px"
        },
        ".cm-selectionLayer": {
          zIndex: -1,
          contain: "size style"
        },
        ".cm-selectionBackground": {
          position: "absolute"
        },
        "&light .cm-selectionBackground": {
          background: "#d9d9d9"
        },
        "&dark .cm-selectionBackground": {
          background: "#222"
        },
        "&light.cm-focused .cm-selectionBackground": {
          background: "#d7d4f0"
        },
        "&dark.cm-focused .cm-selectionBackground": {
          background: "#233"
        },
        ".cm-cursorLayer": {
          zIndex: 100,
          contain: "size style",
          pointerEvents: "none"
        },
        "&.cm-focused .cm-cursorLayer": {
          animation: "steps(1) cm-blink 1.2s infinite"
        },
        // Two animations defined so that we can switch between them to
        // restart the animation without forcing another style
        // recomputation.
        "@keyframes cm-blink": {
          "0%": {},
          "50%": {
            visibility: "hidden"
          },
          "100%": {}
        },
        "@keyframes cm-blink2": {
          "0%": {},
          "50%": {
            visibility: "hidden"
          },
          "100%": {}
        },
        ".cm-cursor, .cm-dropCursor": {
          position: "absolute",
          borderLeft: "1.2px solid black",
          marginLeft: "-0.6px",
          pointerEvents: "none"
        },
        ".cm-cursor": {
          display: "none"
        },
        "&dark .cm-cursor": {
          borderLeftColor: "#444"
        },
        "&.cm-focused .cm-cursor": {
          display: "block"
        },
        "&light .cm-activeLine": {
          backgroundColor: "#f3f9ff"
        },
        "&dark .cm-activeLine": {
          backgroundColor: "#223039"
        },
        "&light .cm-specialChar": {
          color: "red"
        },
        "&dark .cm-specialChar": {
          color: "#f78"
        },
        ".cm-tab": {
          display: "inline-block",
          overflow: "hidden",
          verticalAlign: "bottom"
        },
        ".cm-placeholder": {
          color: "#888",
          display: "inline-block",
          verticalAlign: "top"
        },
        ".cm-button": {
          verticalAlign: "middle",
          color: "inherit",
          fontSize: "70%",
          padding: ".2em 1em",
          borderRadius: "1px"
        },
        "&light .cm-button": {
          backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
          border: "1px solid #888",
          "&:active": {
            backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
          }
        },
        "&dark .cm-button": {
          backgroundImage: "linear-gradient(#393939, #111)",
          border: "1px solid #888",
          "&:active": {
            backgroundImage: "linear-gradient(#111, #333)"
          }
        },
        ".cm-textfield": {
          verticalAlign: "middle",
          color: "inherit",
          fontSize: "70%",
          border: "1px solid silver",
          padding: ".2em .5em"
        },
        "&light .cm-textfield": {
          backgroundColor: "white"
        },
        "&dark .cm-textfield": {
          border: "1px solid #555",
          backgroundColor: "inherit"
        }
      }, lightDarkIDs);
      var observeOptions = {
        childList: true,
        characterData: true,
        subtree: true,
        attributes: true,
        characterDataOldValue: true
      }; // IE11 has very broken mutation observers, so we also listen to
      // DOMCharacterDataModified there

      var useCharData = browser.ie && browser.ie_version <= 11;

      var DOMObserver = /*#__PURE__*/function () {
        function DOMObserver(view, onChange, onScrollChanged) {
          var _this90 = this;

          _classCallCheck(this, DOMObserver);

          this.view = view;
          this.onChange = onChange;
          this.onScrollChanged = onScrollChanged;
          this.active = false; // The known selection. Kept in our own object, as opposed to just
          // directly accessing the selection because:
          //  - Safari doesn't report the right selection in shadow DOM
          //  - Reading from the selection forces a DOM layout
          //  - This way, we can ignore selectionchange events if we have
          //    already seen the 'new' selection

          this.selectionRange = new DOMSelectionState(); // Set when a selection change is detected, cleared on flush

          this.selectionChanged = false;
          this.delayedFlush = -1;
          this.resizeTimeout = -1;
          this.queue = [];
          this.delayedAndroidKey = null;
          this.scrollTargets = [];
          this.intersection = null;
          this.resize = null;
          this.intersecting = false;
          this.gapIntersection = null;
          this.gaps = []; // Timeout for scheduling check of the parents that need scroll handlers

          this.parentCheck = -1;
          this.dom = view.contentDOM;
          this.observer = new MutationObserver(function (mutations) {
            var _iterator130 = _createForOfIteratorHelper(mutations),
                _step130;

            try {
              for (_iterator130.s(); !(_step130 = _iterator130.n()).done;) {
                var mut = _step130.value;

                _this90.queue.push(mut);
              } // IE11 will sometimes (on typing over a selection or
              // backspacing out a single character text node) call the
              // observer callback before actually updating the DOM.
              //
              // Unrelatedly, iOS Safari will, when ending a composition,
              // sometimes first clear it, deliver the mutations, and then
              // reinsert the finished text. CodeMirror's handling of the
              // deletion will prevent the reinsertion from happening,
              // breaking composition.

            } catch (err) {
              _iterator130.e(err);
            } finally {
              _iterator130.f();
            }

            if ((browser.ie && browser.ie_version <= 11 || browser.ios && view.composing) && mutations.some(function (m) {
              return m.type == "childList" && m.removedNodes.length || m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length;
            })) _this90.flushSoon();else _this90.flush();
          });
          if (useCharData) this.onCharData = function (event) {
            _this90.queue.push({
              target: event.target,
              type: "characterData",
              oldValue: event.prevValue
            });

            _this90.flushSoon();
          };
          this.onSelectionChange = this.onSelectionChange.bind(this);

          if (typeof ResizeObserver == "function") {
            this.resize = new ResizeObserver(function () {
              if (_this90.view.docView.lastUpdate < Date.now() - 75 && _this90.resizeTimeout < 0) _this90.resizeTimeout = setTimeout(function () {
                _this90.resizeTimeout = -1;

                _this90.view.requestMeasure();
              }, 50);
            });
            this.resize.observe(view.scrollDOM);
          }

          this.start();
          this.onScroll = this.onScroll.bind(this);
          window.addEventListener("scroll", this.onScroll);

          if (typeof IntersectionObserver == "function") {
            this.intersection = new IntersectionObserver(function (entries) {
              if (_this90.parentCheck < 0) _this90.parentCheck = setTimeout(_this90.listenForScroll.bind(_this90), 1000);

              if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0 != _this90.intersecting) {
                _this90.intersecting = !_this90.intersecting;
                if (_this90.intersecting != _this90.view.inView) _this90.onScrollChanged(document.createEvent("Event"));
              }
            }, {});
            this.intersection.observe(this.dom);
            this.gapIntersection = new IntersectionObserver(function (entries) {
              if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0) _this90.onScrollChanged(document.createEvent("Event"));
            }, {});
          }

          this.listenForScroll();
          this.readSelectionRange();
          this.dom.ownerDocument.addEventListener("selectionchange", this.onSelectionChange);
        }

        _createClass(DOMObserver, [{
          key: "onScroll",
          value: function onScroll(e) {
            if (this.intersecting) this.flush(false);
            this.onScrollChanged(e);
          }
        }, {
          key: "updateGaps",
          value: function updateGaps(gaps) {
            if (this.gapIntersection && (gaps.length != this.gaps.length || this.gaps.some(function (g, i) {
              return g != gaps[i];
            }))) {
              this.gapIntersection.disconnect();

              var _iterator131 = _createForOfIteratorHelper(gaps),
                  _step131;

              try {
                for (_iterator131.s(); !(_step131 = _iterator131.n()).done;) {
                  var gap = _step131.value;
                  this.gapIntersection.observe(gap);
                }
              } catch (err) {
                _iterator131.e(err);
              } finally {
                _iterator131.f();
              }

              this.gaps = gaps;
            }
          }
        }, {
          key: "onSelectionChange",
          value: function onSelectionChange(event) {
            if (!this.readSelectionRange() || this.delayedAndroidKey) return;
            var view = this.view,
                sel = this.selectionRange;
            if (view.state.facet(editable) ? view.root.activeElement != this.dom : !hasSelection(view.dom, sel)) return;
            var context = sel.anchorNode && view.docView.nearest(sel.anchorNode);
            if (context && context.ignoreEvent(event)) return; // Deletions on IE11 fire their events in the wrong order, giving
            // us a selection change event before the DOM changes are
            // reported.
            // Chrome Android has a similar issue when backspacing out a
            // selection (#645).

            if ((browser.ie && browser.ie_version <= 11 || browser.android && browser.chrome) && !view.state.selection.main.empty && // (Selection.isCollapsed isn't reliable on IE)
            sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset)) this.flushSoon();else this.flush(false);
          }
        }, {
          key: "readSelectionRange",
          value: function readSelectionRange() {
            var root = this.view.root,
                domSel = getSelection(root); // The Selection object is broken in shadow roots in Safari. See
            // https://github.com/codemirror/codemirror.next/issues/414

            var range = browser.safari && root.nodeType == 11 && deepActiveElement() == this.view.contentDOM && safariSelectionRangeHack(this.view) || domSel;
            if (this.selectionRange.eq(range)) return false;
            this.selectionRange.setRange(range);
            return this.selectionChanged = true;
          }
        }, {
          key: "setSelectionRange",
          value: function setSelectionRange(anchor, head) {
            this.selectionRange.set(anchor.node, anchor.offset, head.node, head.offset);
            this.selectionChanged = false;
          }
        }, {
          key: "listenForScroll",
          value: function listenForScroll() {
            this.parentCheck = -1;
            var i = 0,
                changed = null;

            for (var dom = this.dom; dom;) {
              if (dom.nodeType == 1) {
                if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom) i++;else if (!changed) changed = this.scrollTargets.slice(0, i);
                if (changed) changed.push(dom);
                dom = dom.assignedSlot || dom.parentNode;
              } else if (dom.nodeType == 11) {
                // Shadow root
                dom = dom.host;
              } else {
                break;
              }
            }

            if (i < this.scrollTargets.length && !changed) changed = this.scrollTargets.slice(0, i);

            if (changed) {
              var _iterator132 = _createForOfIteratorHelper(this.scrollTargets),
                  _step132;

              try {
                for (_iterator132.s(); !(_step132 = _iterator132.n()).done;) {
                  var _dom4 = _step132.value;

                  _dom4.removeEventListener("scroll", this.onScroll);
                }
              } catch (err) {
                _iterator132.e(err);
              } finally {
                _iterator132.f();
              }

              var _iterator133 = _createForOfIteratorHelper(this.scrollTargets = changed),
                  _step133;

              try {
                for (_iterator133.s(); !(_step133 = _iterator133.n()).done;) {
                  var _dom5 = _step133.value;

                  _dom5.addEventListener("scroll", this.onScroll);
                }
              } catch (err) {
                _iterator133.e(err);
              } finally {
                _iterator133.f();
              }
            }
          }
        }, {
          key: "ignore",
          value: function ignore(f) {
            if (!this.active) return f();

            try {
              this.stop();
              return f();
            } finally {
              this.start();
              this.clear();
            }
          }
        }, {
          key: "start",
          value: function start() {
            if (this.active) return;
            this.observer.observe(this.dom, observeOptions);
            if (useCharData) this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
            this.active = true;
          }
        }, {
          key: "stop",
          value: function stop() {
            if (!this.active) return;
            this.active = false;
            this.observer.disconnect();
            if (useCharData) this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
          } // Throw away any pending changes

        }, {
          key: "clear",
          value: function clear() {
            this.observer.takeRecords();
            this.queue.length = 0;
            this.selectionChanged = false;
          } // Chrome Android, especially in combination with GBoard, not only
          // doesn't reliably fire regular key events, but also often
          // surrounds the effect of enter or backspace with a bunch of
          // composition events that, when interrupted, cause text duplication
          // or other kinds of corruption. This hack makes the editor back off
          // from handling DOM changes for a moment when such a key is
          // detected (via beforeinput or keydown), and then dispatches the
          // key event, throwing away the DOM changes if it gets handled.

        }, {
          key: "delayAndroidKey",
          value: function delayAndroidKey(key, keyCode) {
            var _this91 = this;

            if (!this.delayedAndroidKey) requestAnimationFrame(function () {
              var key = _this91.delayedAndroidKey;
              _this91.delayedAndroidKey = null;
              var startState = _this91.view.state;
              if (dispatchKey(_this91.view.contentDOM, key.key, key.keyCode)) _this91.processRecords();else _this91.flush();
              if (_this91.view.state == startState) _this91.view.update([]);
            }); // Since backspace beforeinput is sometimes signalled spuriously,
            // Enter always takes precedence.

            if (!this.delayedAndroidKey || key == "Enter") this.delayedAndroidKey = {
              key: key,
              keyCode: keyCode
            };
          }
        }, {
          key: "flushSoon",
          value: function flushSoon() {
            var _this92 = this;

            if (this.delayedFlush < 0) this.delayedFlush = window.setTimeout(function () {
              _this92.delayedFlush = -1;

              _this92.flush();
            }, 20);
          }
        }, {
          key: "forceFlush",
          value: function forceFlush() {
            if (this.delayedFlush >= 0) {
              window.clearTimeout(this.delayedFlush);
              this.delayedFlush = -1;
              this.flush();
            }
          }
        }, {
          key: "processRecords",
          value: function processRecords() {
            var records = this.queue;

            var _iterator134 = _createForOfIteratorHelper(this.observer.takeRecords()),
                _step134;

            try {
              for (_iterator134.s(); !(_step134 = _iterator134.n()).done;) {
                var mut = _step134.value;
                records.push(mut);
              }
            } catch (err) {
              _iterator134.e(err);
            } finally {
              _iterator134.f();
            }

            if (records.length) this.queue = [];
            var from = -1,
                to = -1,
                typeOver = false;

            var _iterator135 = _createForOfIteratorHelper(records),
                _step135;

            try {
              for (_iterator135.s(); !(_step135 = _iterator135.n()).done;) {
                var record = _step135.value;
                var range = this.readMutation(record);
                if (!range) continue;
                if (range.typeOver) typeOver = true;

                if (from == -1) {
                  from = range.from;
                  to = range.to;
                } else {
                  from = Math.min(range.from, from);
                  to = Math.max(range.to, to);
                }
              }
            } catch (err) {
              _iterator135.e(err);
            } finally {
              _iterator135.f();
            }

            return {
              from: from,
              to: to,
              typeOver: typeOver
            };
          } // Apply pending changes, if any

        }, {
          key: "flush",
          value: function flush() {
            var readSelection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
            // Completely hold off flushing when pending keys are set—the code
            // managing those will make sure processRecords is called and the
            // view is resynchronized after
            if (this.delayedFlush >= 0 || this.delayedAndroidKey) return;
            if (readSelection) this.readSelectionRange();

            var _this$processRecords = this.processRecords(),
                from = _this$processRecords.from,
                to = _this$processRecords.to,
                typeOver = _this$processRecords.typeOver;

            var newSel = this.selectionChanged && hasSelection(this.dom, this.selectionRange);
            if (from < 0 && !newSel) return;
            this.selectionChanged = false;
            var startState = this.view.state;
            this.onChange(from, to, typeOver); // The view wasn't updated

            if (this.view.state == startState) this.view.update([]);
          }
        }, {
          key: "readMutation",
          value: function readMutation(rec) {
            var cView = this.view.docView.nearest(rec.target);
            if (!cView || cView.ignoreMutation(rec)) return null;
            cView.markDirty(rec.type == "attributes");
            if (rec.type == "attributes") cView.dirty |= 4
            /* Attrs */
            ;

            if (rec.type == "childList") {
              var childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
              var childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
              return {
                from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
                to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd,
                typeOver: false
              };
            } else if (rec.type == "characterData") {
              return {
                from: cView.posAtStart,
                to: cView.posAtEnd,
                typeOver: rec.target.nodeValue == rec.oldValue
              };
            } else {
              return null;
            }
          }
        }, {
          key: "destroy",
          value: function destroy() {
            var _a, _b, _c;

            this.stop();
            (_a = this.intersection) === null || _a === void 0 ? void 0 : _a.disconnect();
            (_b = this.gapIntersection) === null || _b === void 0 ? void 0 : _b.disconnect();
            (_c = this.resize) === null || _c === void 0 ? void 0 : _c.disconnect();

            var _iterator136 = _createForOfIteratorHelper(this.scrollTargets),
                _step136;

            try {
              for (_iterator136.s(); !(_step136 = _iterator136.n()).done;) {
                var dom = _step136.value;
                dom.removeEventListener("scroll", this.onScroll);
              }
            } catch (err) {
              _iterator136.e(err);
            } finally {
              _iterator136.f();
            }

            window.removeEventListener("scroll", this.onScroll);
            this.dom.ownerDocument.removeEventListener("selectionchange", this.onSelectionChange);
            clearTimeout(this.parentCheck);
            clearTimeout(this.resizeTimeout);
          }
        }]);

        return DOMObserver;
      }();

      function findChild(cView, dom, dir) {
        while (dom) {
          var curView = ContentView.get(dom);
          if (curView && curView.parent == cView) return curView;
          var parent = dom.parentNode;
          dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
        }

        return null;
      } // Used to work around a Safari Selection/shadow DOM bug (#414)


      function safariSelectionRangeHack(view) {
        var found = null; // Because Safari (at least in 2018-2021) doesn't provide regular
        // access to the selection inside a shadowroot, we have to perform a
        // ridiculous hack to get at it—using `execCommand` to trigger a
        // `beforeInput` event so that we can read the target range from the
        // event.

        function read(event) {
          event.preventDefault();
          event.stopImmediatePropagation();
          found = event.getTargetRanges()[0];
        }

        view.contentDOM.addEventListener("beforeinput", read, true);
        document.execCommand("indent");
        view.contentDOM.removeEventListener("beforeinput", read, true);
        if (!found) return null;
        var anchorNode = found.startContainer,
            anchorOffset = found.startOffset;
        var focusNode = found.endContainer,
            focusOffset = found.endOffset;
        var curAnchor = view.docView.domAtPos(view.state.selection.main.anchor); // Since such a range doesn't distinguish between anchor and head,
        // use a heuristic that flips it around if its end matches the
        // current anchor.

        if (isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset)) {
          var _ref28 = [focusNode, focusOffset, anchorNode, anchorOffset];
          anchorNode = _ref28[0];
          anchorOffset = _ref28[1];
          focusNode = _ref28[2];
          focusOffset = _ref28[3];
        }

        return {
          anchorNode: anchorNode,
          anchorOffset: anchorOffset,
          focusNode: focusNode,
          focusOffset: focusOffset
        };
      }

      function applyDOMChange(view, start, end, typeOver) {
        var change, newSel;
        var sel = view.state.selection.main;

        if (start > -1) {
          var bounds = view.docView.domBoundsAround(start, end, 0);
          if (!bounds || view.state.readOnly) return;
          var from = bounds.from,
              to = bounds.to;
          var selPoints = view.docView.impreciseHead || view.docView.impreciseAnchor ? [] : selectionPoints(view);
          var reader = new DOMReader(selPoints, view);
          reader.readRange(bounds.startDOM, bounds.endDOM);
          newSel = selectionFromPoints(selPoints, from);
          var preferredPos = sel.from,
              preferredSide = null; // Prefer anchoring to end when Backspace is pressed (or, on
          // Android, when something was deleted)

          if (view.inputState.lastKeyCode === 8 && view.inputState.lastKeyTime > Date.now() - 100 || browser.android && reader.text.length < to - from) {
            preferredPos = sel.to;
            preferredSide = "end";
          }

          var diff = findDiff(view.state.sliceDoc(from, to), reader.text, preferredPos - from, preferredSide);
          if (diff) change = {
            from: from + diff.from,
            to: from + diff.toA,
            insert: view.state.toText(reader.text.slice(diff.from, diff.toB))
          };
        } else if (view.hasFocus || !view.state.facet(editable)) {
          var domSel = view.observer.selectionRange;
          var _view$docView2 = view.docView,
              iHead = _view$docView2.impreciseHead,
              iAnchor = _view$docView2.impreciseAnchor;
          var head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset || !contains(view.contentDOM, domSel.focusNode) ? view.state.selection.main.head : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
          var anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset || !contains(view.contentDOM, domSel.anchorNode) ? view.state.selection.main.anchor : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
          if (head != sel.head || anchor != sel.anchor) newSel = _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].single(anchor, head);
        }

        if (!change && !newSel) return; // Heuristic to notice typing over a selected character

        if (!change && typeOver && !sel.empty && newSel && newSel.main.empty) change = {
          from: sel.from,
          to: sel.to,
          insert: view.state.doc.slice(sel.from, sel.to)
        }; // If the change is inside the selection and covers most of it,
        // assume it is a selection replace (with identical characters at
        // the start/end not included in the diff)
        else if (change && change.from >= sel.from && change.to <= sel.to && (change.from != sel.from || change.to != sel.to) && sel.to - sel.from - (change.to - change.from) <= 4) change = {
          from: sel.from,
          to: sel.to,
          insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))
        };

        if (change) {
          var startState = view.state;
          if (browser.ios && view.inputState.flushIOSKey(view)) return; // Android browsers don't fire reasonable key events for enter,
          // backspace, or delete. So this detects changes that look like
          // they're caused by those keys, and reinterprets them as key
          // events. (Some of these keys are also handled by beforeinput
          // events and the pendingAndroidKey mechanism, but that's not
          // reliable in all situations.)

          if (browser.android && (change.from == sel.from && change.to == sel.to && change.insert.length == 1 && change.insert.lines == 2 && dispatchKey(view.contentDOM, "Enter", 13) || change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 && dispatchKey(view.contentDOM, "Backspace", 8) || change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 && dispatchKey(view.contentDOM, "Delete", 46))) return;
          var text = change.insert.toString();
          if (view.state.facet(inputHandler).some(function (h) {
            return h(view, change.from, change.to, text);
          })) return;
          if (view.inputState.composing >= 0) view.inputState.composing++;
          var tr;

          if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 && (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length)) {
            var before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : "";
            var after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : "";
            tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, undefined, view.state.lineBreak) + after));
          } else {
            var changes = startState.changes(change);
            tr = {
              changes: changes,
              selection: newSel && !startState.selection.main.eq(newSel.main) && newSel.main.to <= changes.newLength ? startState.selection.replaceRange(newSel.main) : undefined
            };
          }

          var userEvent = "input.type";

          if (view.composing) {
            userEvent += ".compose";

            if (view.inputState.compositionFirstChange) {
              userEvent += ".start";
              view.inputState.compositionFirstChange = false;
            }
          }

          view.dispatch(tr, {
            scrollIntoView: true,
            userEvent: userEvent
          });
        } else if (newSel && !newSel.main.eq(sel)) {
          var _scrollIntoView = false,
              _userEvent2 = "select";

          if (view.inputState.lastSelectionTime > Date.now() - 50) {
            if (view.inputState.lastSelectionOrigin == "select") _scrollIntoView = true;
            _userEvent2 = view.inputState.lastSelectionOrigin;
          }

          view.dispatch({
            selection: newSel,
            scrollIntoView: _scrollIntoView,
            userEvent: _userEvent2
          });
        }
      }

      function findDiff(a, b, preferredPos, preferredSide) {
        var minLen = Math.min(a.length, b.length);
        var from = 0;

        while (from < minLen && a.charCodeAt(from) == b.charCodeAt(from)) {
          from++;
        }

        if (from == minLen && a.length == b.length) return null;
        var toA = a.length,
            toB = b.length;

        while (toA > 0 && toB > 0 && a.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {
          toA--;
          toB--;
        }

        if (preferredSide == "end") {
          var adjust = Math.max(0, from - Math.min(toA, toB));
          preferredPos -= toA + adjust - from;
        }

        if (toA < from && a.length < b.length) {
          var move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;
          from -= move;
          toB = from + (toB - toA);
          toA = from;
        } else if (toB < from) {
          var _move2 = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;

          from -= _move2;
          toA = from + (toA - toB);
          toB = from;
        }

        return {
          from: from,
          toA: toA,
          toB: toB
        };
      }

      function selectionPoints(view) {
        var result = [];
        if (view.root.activeElement != view.contentDOM) return result;
        var _view$observer$select2 = view.observer.selectionRange,
            anchorNode = _view$observer$select2.anchorNode,
            anchorOffset = _view$observer$select2.anchorOffset,
            focusNode = _view$observer$select2.focusNode,
            focusOffset = _view$observer$select2.focusOffset;

        if (anchorNode) {
          result.push(new DOMPoint(anchorNode, anchorOffset));
          if (focusNode != anchorNode || focusOffset != anchorOffset) result.push(new DOMPoint(focusNode, focusOffset));
        }

        return result;
      }

      function selectionFromPoints(points, base) {
        if (points.length == 0) return null;
        var anchor = points[0].pos,
            head = points.length == 2 ? points[1].pos : anchor;
        return anchor > -1 && head > -1 ? _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].single(anchor + base, head + base) : null;
      } // The editor's update state machine looks something like this:
      //
      //     Idle → Updating ⇆ Idle (unchecked) → Measuring → Idle
      //                                         ↑      ↓
      //                                         Updating (measure)
      //
      // The difference between 'Idle' and 'Idle (unchecked)' lies in
      // whether a layout check has been scheduled. A regular update through
      // the `update` method updates the DOM in a write-only fashion, and
      // relies on a check (scheduled with `requestAnimationFrame`) to make
      // sure everything is where it should be and the viewport covers the
      // visible code. That check continues to measure and then optionally
      // update until it reaches a coherent state.

      /**
      An editor view represents the editor's user interface. It holds
      the editable DOM surface, and possibly other elements such as the
      line number gutter. It handles events and dispatches state
      transactions for editing actions.
      */


      var EditorView = /*#__PURE__*/function () {
        /**
        Construct a new view. You'll usually want to put `view.dom` into
        your document after creating a view, so that the user can see
        it.
        */
        function EditorView() {
          var _this93 = this;

          var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

          _classCallCheck(this, EditorView);

          this.plugins = [];
          this.pluginMap = new Map();
          this.editorAttrs = {};
          this.contentAttrs = {};
          this.bidiCache = [];
          this.destroyed = false;
          /**
          @internal
          */

          this.updateState = 2
          /* Updating */
          ;
          /**
          @internal
          */

          this.measureScheduled = -1;
          /**
          @internal
          */

          this.measureRequests = [];
          this.contentDOM = document.createElement("div");
          this.scrollDOM = document.createElement("div");
          this.scrollDOM.tabIndex = -1;
          this.scrollDOM.className = "cm-scroller";
          this.scrollDOM.appendChild(this.contentDOM);
          this.announceDOM = document.createElement("div");
          this.announceDOM.style.cssText = "position: absolute; top: -10000px";
          this.announceDOM.setAttribute("aria-live", "polite");
          this.dom = document.createElement("div");
          this.dom.appendChild(this.announceDOM);
          this.dom.appendChild(this.scrollDOM);

          this._dispatch = config.dispatch || function (tr) {
            return _this93.update([tr]);
          };

          this.dispatch = this.dispatch.bind(this);
          this.root = config.root || getRoot(config.parent) || document;
          this.viewState = new ViewState(config.state || _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorState"].create());
          this.plugins = this.state.facet(viewPlugin).map(function (spec) {
            return new PluginInstance(spec);
          });

          var _iterator137 = _createForOfIteratorHelper(this.plugins),
              _step137;

          try {
            for (_iterator137.s(); !(_step137 = _iterator137.n()).done;) {
              var _plugin9 = _step137.value;

              _plugin9.update(this);
            }
          } catch (err) {
            _iterator137.e(err);
          } finally {
            _iterator137.f();
          }

          this.observer = new DOMObserver(this, function (from, to, typeOver) {
            applyDOMChange(_this93, from, to, typeOver);
          }, function (event) {
            _this93.inputState.runScrollHandlers(_this93, event);

            if (_this93.observer.intersecting) _this93.measure();
          });
          this.inputState = new InputState(this);
          this.docView = new DocView(this);
          this.mountStyles();
          this.updateAttrs();
          this.updateState = 0
          /* Idle */
          ;
          ensureGlobalHandler();
          this.requestMeasure();
          if (config.parent) config.parent.appendChild(this.dom);
        }
        /**
        The current editor state.
        */


        _createClass(EditorView, [{
          key: "state",
          get: function get() {
            return this.viewState.state;
          }
          /**
          To be able to display large documents without consuming too much
          memory or overloading the browser, CodeMirror only draws the
          code that is visible (plus a margin around it) to the DOM. This
          property tells you the extent of the current drawn viewport, in
          document positions.
          */

        }, {
          key: "viewport",
          get: function get() {
            return this.viewState.viewport;
          }
          /**
          When there are, for example, large collapsed ranges in the
          viewport, its size can be a lot bigger than the actual visible
          content. Thus, if you are doing something like styling the
          content in the viewport, it is preferable to only do so for
          these ranges, which are the subset of the viewport that is
          actually drawn.
          */

        }, {
          key: "visibleRanges",
          get: function get() {
            return this.viewState.visibleRanges;
          }
          /**
          Returns false when the editor is entirely scrolled out of view
          or otherwise hidden.
          */

        }, {
          key: "inView",
          get: function get() {
            return this.viewState.inView;
          }
          /**
          Indicates whether the user is currently composing text via
          [IME](https://en.wikipedia.org/wiki/Input_method).
          */

        }, {
          key: "composing",
          get: function get() {
            return this.inputState.composing > 0;
          }
        }, {
          key: "dispatch",
          value: function dispatch() {
            var _this$state2;

            this._dispatch(arguments.length == 1 && (arguments.length <= 0 ? undefined : arguments[0]) instanceof _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Transaction"] ? arguments.length <= 0 ? undefined : arguments[0] : (_this$state2 = this.state).update.apply(_this$state2, arguments));
          }
          /**
          Update the view for the given array of transactions. This will
          update the visible document and selection to match the state
          produced by the transactions, and notify view plugins of the
          change. You should usually call
          [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
          as a primitive.
          */

        }, {
          key: "update",
          value: function update(transactions) {
            if (this.updateState != 0
            /* Idle */
            ) throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
            var redrawn = false,
                update;
            var state = this.state;

            var _iterator138 = _createForOfIteratorHelper(transactions),
                _step138;

            try {
              for (_iterator138.s(); !(_step138 = _iterator138.n()).done;) {
                var _tr3 = _step138.value;
                if (_tr3.startState != state) throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
                state = _tr3.state;
              }
            } catch (err) {
              _iterator138.e(err);
            } finally {
              _iterator138.f();
            }

            if (this.destroyed) {
              this.viewState.state = state;
              return;
            } // When the phrases change, redraw the editor


            if (state.facet(_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorState"].phrases) != this.state.facet(_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorState"].phrases)) return this.setState(state);
            update = new ViewUpdate(this, state, transactions);
            var scrollTarget = null;

            try {
              this.updateState = 2
              /* Updating */
              ;

              var _iterator139 = _createForOfIteratorHelper(transactions),
                  _step139;

              try {
                for (_iterator139.s(); !(_step139 = _iterator139.n()).done;) {
                  var tr = _step139.value;
                  if (scrollTarget) scrollTarget = scrollTarget.map(tr.changes);

                  if (tr.scrollIntoView) {
                    var main = tr.state.selection.main;
                    scrollTarget = new ScrollTarget(main.empty ? main : _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(main.head, main.head > main.anchor ? -1 : 1));
                  }

                  var _iterator140 = _createForOfIteratorHelper(tr.effects),
                      _step140;

                  try {
                    for (_iterator140.s(); !(_step140 = _iterator140.n()).done;) {
                      var e = _step140.value;
                      if (e.is(scrollTo)) scrollTarget = new ScrollTarget(e.value);else if (e.is(centerOn)) scrollTarget = new ScrollTarget(e.value, "center");else if (e.is(_scrollIntoView2)) scrollTarget = e.value;
                    }
                  } catch (err) {
                    _iterator140.e(err);
                  } finally {
                    _iterator140.f();
                  }
                }
              } catch (err) {
                _iterator139.e(err);
              } finally {
                _iterator139.f();
              }

              this.viewState.update(update, scrollTarget);
              this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);

              if (!update.empty) {
                this.updatePlugins(update);
                this.inputState.update(update);
              }

              redrawn = this.docView.update(update);
              if (this.state.facet(styleModule) != this.styleModules) this.mountStyles();
              this.updateAttrs();
              this.showAnnouncements(transactions);
              this.docView.updateSelection(redrawn, transactions.some(function (tr) {
                return tr.isUserEvent("select.pointer");
              }));
            } finally {
              this.updateState = 0
              /* Idle */
              ;
            }

            if (redrawn || scrollTarget || this.viewState.mustEnforceCursorAssoc) this.requestMeasure();

            if (!update.empty) {
              var _iterator141 = _createForOfIteratorHelper(this.state.facet(updateListener)),
                  _step141;

              try {
                for (_iterator141.s(); !(_step141 = _iterator141.n()).done;) {
                  var listener = _step141.value;
                  listener(update);
                }
              } catch (err) {
                _iterator141.e(err);
              } finally {
                _iterator141.f();
              }
            }
          }
          /**
          Reset the view to the given state. (This will cause the entire
          document to be redrawn and all view plugins to be reinitialized,
          so you should probably only use it when the new state isn't
          derived from the old state. Otherwise, use
          [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
          */

        }, {
          key: "setState",
          value: function setState(newState) {
            if (this.updateState != 0
            /* Idle */
            ) throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");

            if (this.destroyed) {
              this.viewState.state = newState;
              return;
            }

            this.updateState = 2
            /* Updating */
            ;

            try {
              var _iterator142 = _createForOfIteratorHelper(this.plugins),
                  _step142;

              try {
                for (_iterator142.s(); !(_step142 = _iterator142.n()).done;) {
                  var _plugin10 = _step142.value;

                  _plugin10.destroy(this);
                }
              } catch (err) {
                _iterator142.e(err);
              } finally {
                _iterator142.f();
              }

              this.viewState = new ViewState(newState);
              this.plugins = newState.facet(viewPlugin).map(function (spec) {
                return new PluginInstance(spec);
              });
              this.pluginMap.clear();

              var _iterator143 = _createForOfIteratorHelper(this.plugins),
                  _step143;

              try {
                for (_iterator143.s(); !(_step143 = _iterator143.n()).done;) {
                  var _plugin11 = _step143.value;

                  _plugin11.update(this);
                }
              } catch (err) {
                _iterator143.e(err);
              } finally {
                _iterator143.f();
              }

              this.docView = new DocView(this);
              this.inputState.ensureHandlers(this);
              this.mountStyles();
              this.updateAttrs();
              this.bidiCache = [];
            } finally {
              this.updateState = 0
              /* Idle */
              ;
            }

            this.requestMeasure();
          }
        }, {
          key: "updatePlugins",
          value: function updatePlugins(update) {
            var prevSpecs = update.startState.facet(viewPlugin),
                specs = update.state.facet(viewPlugin);

            if (prevSpecs != specs) {
              var newPlugins = [];

              var _iterator144 = _createForOfIteratorHelper(specs),
                  _step144;

              try {
                for (_iterator144.s(); !(_step144 = _iterator144.n()).done;) {
                  var spec = _step144.value;
                  var found = prevSpecs.indexOf(spec);

                  if (found < 0) {
                    newPlugins.push(new PluginInstance(spec));
                  } else {
                    var _plugin12 = this.plugins[found];
                    _plugin12.mustUpdate = update;
                    newPlugins.push(_plugin12);
                  }
                }
              } catch (err) {
                _iterator144.e(err);
              } finally {
                _iterator144.f();
              }

              var _iterator145 = _createForOfIteratorHelper(this.plugins),
                  _step145;

              try {
                for (_iterator145.s(); !(_step145 = _iterator145.n()).done;) {
                  var _plugin13 = _step145.value;
                  if (_plugin13.mustUpdate != update) _plugin13.destroy(this);
                }
              } catch (err) {
                _iterator145.e(err);
              } finally {
                _iterator145.f();
              }

              this.plugins = newPlugins;
              this.pluginMap.clear();
              this.inputState.ensureHandlers(this);
            } else {
              var _iterator146 = _createForOfIteratorHelper(this.plugins),
                  _step146;

              try {
                for (_iterator146.s(); !(_step146 = _iterator146.n()).done;) {
                  var _p3 = _step146.value;
                  _p3.mustUpdate = update;
                }
              } catch (err) {
                _iterator146.e(err);
              } finally {
                _iterator146.f();
              }
            }

            for (var _i114 = 0; _i114 < this.plugins.length; _i114++) {
              this.plugins[_i114].update(this);
            }
          }
          /**
          @internal
          */

        }, {
          key: "measure",
          value: function measure() {
            var _this94 = this;

            var flush = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
            if (this.destroyed) return;
            if (this.measureScheduled > -1) cancelAnimationFrame(this.measureScheduled);
            this.measureScheduled = 0; // Prevent requestMeasure calls from scheduling another animation frame

            if (flush) this.observer.flush();
            var updated = null;

            try {
              for (var _i115 = 0;; _i115++) {
                this.updateState = 1
                /* Measuring */
                ;
                var oldViewport = this.viewport;
                var changed = this.viewState.measure(this);
                if (!changed && !this.measureRequests.length && this.viewState.scrollTarget == null) break;

                if (_i115 > 5) {
                  console.warn(this.measureRequests.length ? "Measure loop restarted more than 5 times" : "Viewport failed to stabilize");
                  break;
                }

                var measuring = []; // Only run measure requests in this cycle when the viewport didn't change

                if (!(changed & 4
                /* Viewport */
                )) {
                  var _ref29 = [measuring, this.measureRequests];
                  this.measureRequests = _ref29[0];
                  measuring = _ref29[1];
                }

                var measured = measuring.map(function (m) {
                  try {
                    return m.read(_this94);
                  } catch (e) {
                    logException(_this94.state, e);
                    return BadMeasure;
                  }
                });
                var update = new ViewUpdate(this, this.state),
                    redrawn = false;
                update.flags |= changed;
                if (!updated) updated = update;else updated.flags |= changed;
                this.updateState = 2
                /* Updating */
                ;

                if (!update.empty) {
                  this.updatePlugins(update);
                  this.inputState.update(update);
                  this.updateAttrs();
                  redrawn = this.docView.update(update);
                }

                for (var _i116 = 0; _i116 < measuring.length; _i116++) {
                  if (measured[_i116] != BadMeasure) {
                    try {
                      var m = measuring[_i116];
                      if (m.write) m.write(measured[_i116], this);
                    } catch (e) {
                      logException(this.state, e);
                    }
                  }
                }

                if (this.viewState.scrollTarget) {
                  this.docView.scrollIntoView(this.viewState.scrollTarget);
                  this.viewState.scrollTarget = null;
                }

                if (redrawn) this.docView.updateSelection(true);
                if (this.viewport.from == oldViewport.from && this.viewport.to == oldViewport.to && this.measureRequests.length == 0) break;
              }
            } finally {
              this.updateState = 0
              /* Idle */
              ;
              this.measureScheduled = -1;
            }

            if (updated && !updated.empty) {
              var _iterator147 = _createForOfIteratorHelper(this.state.facet(updateListener)),
                  _step147;

              try {
                for (_iterator147.s(); !(_step147 = _iterator147.n()).done;) {
                  var listener = _step147.value;
                  listener(updated);
                }
              } catch (err) {
                _iterator147.e(err);
              } finally {
                _iterator147.f();
              }
            }
          }
          /**
          Get the CSS classes for the currently active editor themes.
          */

        }, {
          key: "themeClasses",
          get: function get() {
            return baseThemeID + " " + (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + " " + this.state.facet(_theme2);
          }
        }, {
          key: "updateAttrs",
          value: function updateAttrs() {
            var _this95 = this;

            var editorAttrs = attrsFromFacet(this, editorAttributes, {
              "class": "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
            });
            var contentAttrs = {
              spellcheck: "false",
              autocorrect: "off",
              autocapitalize: "off",
              translate: "no",
              contenteditable: !this.state.facet(editable) ? "false" : "true",
              "class": "cm-content",
              style: "".concat(browser.tabSize, ": ").concat(this.state.tabSize),
              role: "textbox",
              "aria-multiline": "true"
            };
            if (this.state.readOnly) contentAttrs["aria-readonly"] = "true";
            attrsFromFacet(this, contentAttributes, contentAttrs);
            this.observer.ignore(function () {
              _updateAttrs2(_this95.contentDOM, _this95.contentAttrs, contentAttrs);

              _updateAttrs2(_this95.dom, _this95.editorAttrs, editorAttrs);
            });
            this.editorAttrs = editorAttrs;
            this.contentAttrs = contentAttrs;
          }
        }, {
          key: "showAnnouncements",
          value: function showAnnouncements(trs) {
            var first = true;

            var _iterator148 = _createForOfIteratorHelper(trs),
                _step148;

            try {
              for (_iterator148.s(); !(_step148 = _iterator148.n()).done;) {
                var tr = _step148.value;

                var _iterator149 = _createForOfIteratorHelper(tr.effects),
                    _step149;

                try {
                  for (_iterator149.s(); !(_step149 = _iterator149.n()).done;) {
                    var effect = _step149.value;

                    if (effect.is(EditorView.announce)) {
                      if (first) this.announceDOM.textContent = "";
                      first = false;
                      var div = this.announceDOM.appendChild(document.createElement("div"));
                      div.textContent = effect.value;
                    }
                  }
                } catch (err) {
                  _iterator149.e(err);
                } finally {
                  _iterator149.f();
                }
              }
            } catch (err) {
              _iterator148.e(err);
            } finally {
              _iterator148.f();
            }
          }
        }, {
          key: "mountStyles",
          value: function mountStyles() {
            this.styleModules = this.state.facet(styleModule);
            style_mod__WEBPACK_IMPORTED_MODULE_1__["StyleModule"].mount(this.root, this.styleModules.concat(baseTheme).reverse());
          }
        }, {
          key: "readMeasured",
          value: function readMeasured() {
            if (this.updateState == 2
            /* Updating */
            ) throw new Error("Reading the editor layout isn't allowed during an update");
            if (this.updateState == 0
            /* Idle */
            && this.measureScheduled > -1) this.measure(false);
          }
          /**
          Schedule a layout measurement, optionally providing callbacks to
          do custom DOM measuring followed by a DOM write phase. Using
          this is preferable reading DOM layout directly from, for
          example, an event handler, because it'll make sure measuring and
          drawing done by other components is synchronized, avoiding
          unnecessary DOM layout computations.
          */

        }, {
          key: "requestMeasure",
          value: function requestMeasure(request) {
            var _this96 = this;

            if (this.measureScheduled < 0) this.measureScheduled = requestAnimationFrame(function () {
              return _this96.measure();
            });

            if (request) {
              if (request.key != null) for (var _i117 = 0; _i117 < this.measureRequests.length; _i117++) {
                if (this.measureRequests[_i117].key === request.key) {
                  this.measureRequests[_i117] = request;
                  return;
                }
              }
              this.measureRequests.push(request);
            }
          }
          /**
          Collect all values provided by the active plugins for a given
          field.
          */

        }, {
          key: "pluginField",
          value: function pluginField(field) {
            var result = [];

            var _iterator150 = _createForOfIteratorHelper(this.plugins),
                _step150;

            try {
              for (_iterator150.s(); !(_step150 = _iterator150.n()).done;) {
                var _plugin14 = _step150.value;

                _plugin14.update(this).takeField(field, result);
              }
            } catch (err) {
              _iterator150.e(err);
            } finally {
              _iterator150.f();
            }

            return result;
          }
          /**
          Get the value of a specific plugin, if present. Note that
          plugins that crash can be dropped from a view, so even when you
          know you registered a given plugin, it is recommended to check
          the return value of this method.
          */

        }, {
          key: "plugin",
          value: function plugin(_plugin8) {
            var known = this.pluginMap.get(_plugin8);
            if (known === undefined || known && known.spec != _plugin8) this.pluginMap.set(_plugin8, known = this.plugins.find(function (p) {
              return p.spec == _plugin8;
            }) || null);
            return known && known.update(this).value;
          }
          /**
          The top position of the document, in screen coordinates. This
          may be negative when the editor is scrolled down. Points
          directly to the top of the first line, not above the padding.
          */

        }, {
          key: "documentTop",
          get: function get() {
            return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
          }
          /**
          Reports the padding above and below the document.
          */

        }, {
          key: "documentPadding",
          get: function get() {
            return {
              top: this.viewState.paddingTop,
              bottom: this.viewState.paddingBottom
            };
          }
          /**
          Find the line or block widget at the given vertical position.
          
          By default, this position is interpreted as a screen position,
          meaning `docTop` is set to the DOM top position of the editor
          content (forcing a layout). You can pass a different `docTop`
          value—for example 0 to interpret `height` as a document-relative
          position, or a precomputed document top
          (`view.contentDOM.getBoundingClientRect().top`) to limit layout
          queries.
          
          *Deprecated: use `blockAtHeight` instead.*
          */

        }, {
          key: "blockAtHeight",
          value: function blockAtHeight(height, docTop) {
            var top = ensureTop(docTop, this);
            return this.elementAtHeight(height - top).moveY(top);
          }
          /**
          Find the text line or block widget at the given vertical
          position (which is interpreted as relative to the [top of the
          document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)
          */

        }, {
          key: "elementAtHeight",
          value: function elementAtHeight(height) {
            this.readMeasured();
            return this.viewState.elementAtHeight(height);
          }
          /**
          Find information for the visual line (see
          [`visualLineAt`](https://codemirror.net/6/docs/ref/#view.EditorView.visualLineAt)) at the given
          vertical position. The resulting block info might hold another
          array of block info structs in its `type` field if this line
          consists of more than one block.
          
          Defaults to treating `height` as a screen position. See
          [`blockAtHeight`](https://codemirror.net/6/docs/ref/#view.EditorView.blockAtHeight) for the
          interpretation of the `docTop` parameter.
          
          *Deprecated: use `lineBlockAtHeight` instead.*
          */

        }, {
          key: "visualLineAtHeight",
          value: function visualLineAtHeight(height, docTop) {
            var top = ensureTop(docTop, this);
            return this.lineBlockAtHeight(height - top).moveY(top);
          }
          /**
          Find the line block (see
          [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
          height.
          */

        }, {
          key: "lineBlockAtHeight",
          value: function lineBlockAtHeight(height) {
            this.readMeasured();
            return this.viewState.lineBlockAtHeight(height);
          }
          /**
          Iterate over the height information of the visual lines in the
          viewport. The heights of lines are reported relative to the
          given document top, which defaults to the screen position of the
          document (forcing a layout).
          
          *Deprecated: use `viewportLineBlocks` instead.*
          */

        }, {
          key: "viewportLines",
          value: function viewportLines(f, docTop) {
            var top = ensureTop(docTop, this);

            var _iterator151 = _createForOfIteratorHelper(this.viewportLineBlocks),
                _step151;

            try {
              for (_iterator151.s(); !(_step151 = _iterator151.n()).done;) {
                var line = _step151.value;
                f(line.moveY(top));
              }
            } catch (err) {
              _iterator151.e(err);
            } finally {
              _iterator151.f();
            }
          }
          /**
          Get the extent and vertical position of all [line
          blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
          are relative to the [top of the
          document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
          */

        }, {
          key: "viewportLineBlocks",
          get: function get() {
            return this.viewState.viewportLines;
          }
          /**
          Find the extent and height of the visual line (a range delimited
          on both sides by either non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^range)
          line breaks, or the start/end of the document) at the given position.
          
          Vertical positions are computed relative to the `docTop`
          argument, which defaults to 0 for this method. You can pass
          `view.contentDOM.getBoundingClientRect().top` here to get screen
          coordinates.
          
          *Deprecated: use `lineBlockAt` instead.*
          */

        }, {
          key: "visualLineAt",
          value: function visualLineAt(pos) {
            var docTop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            return this.lineBlockAt(pos).moveY(docTop + this.viewState.paddingTop);
          }
          /**
          Find the line block around the given document position. A line
          block is a range delimited on both sides by either a
          non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^range) line breaks, or the
          start/end of the document. It will usually just hold a line of
          text, but may be broken into multiple textblocks by block
          widgets.
          */

        }, {
          key: "lineBlockAt",
          value: function lineBlockAt(pos) {
            return this.viewState.lineBlockAt(pos);
          }
          /**
          The editor's total content height.
          */

        }, {
          key: "contentHeight",
          get: function get() {
            return this.viewState.contentHeight;
          }
          /**
          Move a cursor position by [grapheme
          cluster](https://codemirror.net/6/docs/ref/#text.findClusterBreak). `forward` determines whether
          the motion is away from the line start, or towards it. Motion in
          bidirectional text is in visual order, in the editor's [text
          direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). When the start
          position was the last one on the line, the returned position
          will be across the line break. If there is no further line, the
          original position is returned.
          
          By default, this method moves over a single cluster. The
          optional `by` argument can be used to move across more. It will
          be called with the first cluster as argument, and should return
          a predicate that determines, for each subsequent cluster,
          whether it should also be moved over.
          */

        }, {
          key: "moveByChar",
          value: function moveByChar(start, forward, by) {
            return skipAtoms(this, start, _moveByChar2(this, start, forward, by));
          }
          /**
          Move a cursor position across the next group of either
          [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
          non-whitespace characters.
          */

        }, {
          key: "moveByGroup",
          value: function moveByGroup(start, forward) {
            var _this97 = this;

            return skipAtoms(this, start, _moveByChar2(this, start, forward, function (initial) {
              return byGroup(_this97, start.head, initial);
            }));
          }
          /**
          Move to the next line boundary in the given direction. If
          `includeWrap` is true, line wrapping is on, and there is a
          further wrap point on the current line, the wrap point will be
          returned. Otherwise this function will return the start or end
          of the line.
          */

        }, {
          key: "moveToLineBoundary",
          value: function moveToLineBoundary(start, forward) {
            var includeWrap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
            return _moveToLineBoundary2(this, start, forward, includeWrap);
          }
          /**
          Move a cursor position vertically. When `distance` isn't given,
          it defaults to moving to the next line (including wrapped
          lines). Otherwise, `distance` should provide a positive distance
          in pixels.
          
          When `start` has a
          [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
          motion will use that as a target horizontal position. Otherwise,
          the cursor's own horizontal position is used. The returned
          cursor will have its goal column set to whichever column was
          used.
          */

        }, {
          key: "moveVertically",
          value: function moveVertically(start, forward, distance) {
            return skipAtoms(this, start, _moveVertically2(this, start, forward, distance));
          } // FIXME remove on next major version

        }, {
          key: "scrollPosIntoView",
          value: function scrollPosIntoView(pos) {
            this.dispatch({
              effects: scrollTo.of(_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(pos))
            });
          }
          /**
          Find the DOM parent node and offset (child offset if `node` is
          an element, character offset when it is a text node) at the
          given document position.
          
          Note that for positions that aren't currently in
          `visibleRanges`, the resulting DOM position isn't necessarily
          meaningful (it may just point before or after a placeholder
          element).
          */

        }, {
          key: "domAtPos",
          value: function domAtPos(pos) {
            return this.docView.domAtPos(pos);
          }
          /**
          Find the document position at the given DOM node. Can be useful
          for associating positions with DOM events. Will raise an error
          when `node` isn't part of the editor content.
          */

        }, {
          key: "posAtDOM",
          value: function posAtDOM(node) {
            var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            return this.docView.posFromDOM(node, offset);
          }
        }, {
          key: "posAtCoords",
          value: function posAtCoords(coords) {
            var precise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            this.readMeasured();
            return _posAtCoords2(this, coords, precise);
          }
          /**
          Get the screen coordinates at the given document position.
          `side` determines whether the coordinates are based on the
          element before (-1) or after (1) the position (if no element is
          available on the given side, the method will transparently use
          another strategy to get reasonable coordinates).
          */

        }, {
          key: "coordsAtPos",
          value: function coordsAtPos(pos) {
            var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
            this.readMeasured();
            var rect = this.docView.coordsAt(pos, side);
            if (!rect || rect.left == rect.right) return rect;
            var line = this.state.doc.lineAt(pos),
                order = this.bidiSpans(line);
            var span = order[BidiSpan.find(order, pos - line.from, -1, side)];
            return flattenRect(rect, span.dir == Direction.LTR == side > 0);
          }
          /**
          The default width of a character in the editor. May not
          accurately reflect the width of all characters (given variable
          width fonts or styling of invididual ranges).
          */

        }, {
          key: "defaultCharacterWidth",
          get: function get() {
            return this.viewState.heightOracle.charWidth;
          }
          /**
          The default height of a line in the editor. May not be accurate
          for all lines.
          */

        }, {
          key: "defaultLineHeight",
          get: function get() {
            return this.viewState.heightOracle.lineHeight;
          }
          /**
          The text direction
          ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
          CSS property) of the editor.
          */

        }, {
          key: "textDirection",
          get: function get() {
            return this.viewState.heightOracle.direction;
          }
          /**
          Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
          (as determined by the
          [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
          CSS property of its content element).
          */

        }, {
          key: "lineWrapping",
          get: function get() {
            return this.viewState.heightOracle.lineWrapping;
          }
          /**
          Returns the bidirectional text structure of the given line
          (which should be in the current document) as an array of span
          objects. The order of these spans matches the [text
          direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
          left-to-right, the leftmost spans come first, otherwise the
          rightmost spans come first.
          */

        }, {
          key: "bidiSpans",
          value: function bidiSpans(line) {
            if (line.length > MaxBidiLine) return trivialOrder(line.length);
            var dir = this.textDirection;

            var _iterator152 = _createForOfIteratorHelper(this.bidiCache),
                _step152;

            try {
              for (_iterator152.s(); !(_step152 = _iterator152.n()).done;) {
                var entry = _step152.value;
                if (entry.from == line.from && entry.dir == dir) return entry.order;
              }
            } catch (err) {
              _iterator152.e(err);
            } finally {
              _iterator152.f();
            }

            var order = computeOrder(line.text, this.textDirection);
            this.bidiCache.push(new CachedOrder(line.from, line.to, dir, order));
            return order;
          }
          /**
          Check whether the editor has focus.
          */

        }, {
          key: "hasFocus",
          get: function get() {
            var _a; // Safari return false for hasFocus when the context menu is open
            // or closing, which leads us to ignore selection changes from the
            // context menu because it looks like the editor isn't focused.
            // This kludges around that.


            return (document.hasFocus() || browser.safari && ((_a = this.inputState) === null || _a === void 0 ? void 0 : _a.lastContextMenu) > Date.now() - 3e4) && this.root.activeElement == this.contentDOM;
          }
          /**
          Put focus on the editor.
          */

        }, {
          key: "focus",
          value: function focus() {
            var _this98 = this;

            this.observer.ignore(function () {
              focusPreventScroll(_this98.contentDOM);

              _this98.docView.updateSelection();
            });
          }
          /**
          Clean up this editor view, removing its element from the
          document, unregistering event handlers, and notifying
          plugins. The view instance can no longer be used after
          calling this.
          */

        }, {
          key: "destroy",
          value: function destroy() {
            var _iterator153 = _createForOfIteratorHelper(this.plugins),
                _step153;

            try {
              for (_iterator153.s(); !(_step153 = _iterator153.n()).done;) {
                var _plugin15 = _step153.value;

                _plugin15.destroy(this);
              }
            } catch (err) {
              _iterator153.e(err);
            } finally {
              _iterator153.f();
            }

            this.plugins = [];
            this.inputState.destroy();
            this.dom.remove();
            this.observer.destroy();
            if (this.measureScheduled > -1) cancelAnimationFrame(this.measureScheduled);
            this.destroyed = true;
          }
          /**
          Returns an effect that can be
          [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
          cause it to scroll the given position or range into view.
          */

        }], [{
          key: "scrollIntoView",
          value: function scrollIntoView(pos) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            return _scrollIntoView2.of(new ScrollTarget(typeof pos == "number" ? _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(pos) : pos, options.y, options.x, options.yMargin, options.xMargin));
          }
          /**
          Facet that can be used to add DOM event handlers. The value
          should be an object mapping event names to handler functions. The
          first such function to return true will be assumed to have handled
          that event, and no other handlers or built-in behavior will be
          activated for it.
          These are registered on the [content
          element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except for `scroll`
          handlers, which will be called any time the editor's [scroll
          element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of its parent nodes
          is scrolled.
          */

        }, {
          key: "domEventHandlers",
          value: function domEventHandlers(handlers) {
            return ViewPlugin.define(function () {
              return {};
            }, {
              eventHandlers: handlers
            });
          }
          /**
          Create a theme extension. The first argument can be a
          [`style-mod`](https://github.com/marijnh/style-mod#documentation)
          style spec providing the styles for the theme. These will be
          prefixed with a generated class for the style.
          
          Because the selectors will be prefixed with a scope class, rule
          that directly match the editor's [wrapper
          element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
          added—need to be explicitly differentiated by adding an `&` to
          the selector for that element—for example
          `&.cm-focused`.
          
          When `dark` is set to true, the theme will be marked as dark,
          which will cause the `&dark` rules from [base
          themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
          `&light` when a light theme is active).
          */

        }, {
          key: "theme",
          value: function theme(spec, options) {
            var prefix = style_mod__WEBPACK_IMPORTED_MODULE_1__["StyleModule"].newName();
            var result = [_theme2.of(prefix), styleModule.of(buildTheme(".".concat(prefix), spec))];
            if (options && options.dark) result.push(darkTheme.of(true));
            return result;
          }
          /**
          Create an extension that adds styles to the base theme. Like
          with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
          place of the editor wrapper element when directly targeting
          that. You can also use `&dark` or `&light` instead to only
          target editors with a dark or light theme.
          */

        }, {
          key: "baseTheme",
          value: function baseTheme(spec) {
            return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Prec"].lowest(styleModule.of(buildTheme("." + baseThemeID, spec, lightDarkIDs)));
          }
        }]);

        return EditorView;
      }();
      /**
      Effect that can be [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a
      transaction to make it scroll the given range into view.
      
      *Deprecated*. Use [`scrollIntoView`](https://codemirror.net/6/docs/ref/#view.EditorView^scrollIntoView) instead.
      */


      EditorView.scrollTo = scrollTo;
      /**
      Effect that makes the editor scroll the given range to the
      center of the visible view.
      
      *Deprecated*. Use [`scrollIntoView`](https://codemirror.net/6/docs/ref/#view.EditorView^scrollIntoView) instead.
      */

      EditorView.centerOn = centerOn;
      /**
      Facet to add a [style
      module](https://github.com/marijnh/style-mod#documentation) to
      an editor view. The view will ensure that the module is
      mounted in its [document
      root](https://codemirror.net/6/docs/ref/#view.EditorView.constructor^config.root).
      */

      EditorView.styleModule = styleModule;
      /**
      An input handler can override the way changes to the editable
      DOM content are handled. Handlers are passed the document
      positions between which the change was found, and the new
      content. When one returns true, no further input handlers are
      called and the default behavior is prevented.
      */

      EditorView.inputHandler = inputHandler;
      /**
      Allows you to provide a function that should be called when the
      library catches an exception from an extension (mostly from view
      plugins, but may be used by other extensions to route exceptions
      from user-code-provided callbacks). This is mostly useful for
      debugging and logging. See [`logException`](https://codemirror.net/6/docs/ref/#view.logException).
      */

      EditorView.exceptionSink = exceptionSink;
      /**
      A facet that can be used to register a function to be called
      every time the view updates.
      */

      EditorView.updateListener = updateListener;
      /**
      Facet that controls whether the editor content DOM is editable.
      When its highest-precedence value is `false`, the element will
      not longer have its `contenteditable` attribute set. (Note that
      this doesn't affect API calls that change the editor content,
      even when those are bound to keys or buttons. See the
      [`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) facet for that.)
      */

      EditorView.editable = editable;
      /**
      Allows you to influence the way mouse selection happens. The
      functions in this facet will be called for a `mousedown` event
      on the editor, and can return an object that overrides the way a
      selection is computed from that mouse click or drag.
      */

      EditorView.mouseSelectionStyle = mouseSelectionStyle;
      /**
      Facet used to configure whether a given selection drag event
      should move or copy the selection. The given predicate will be
      called with the `mousedown` event, and can return `true` when
      the drag should move the content.
      */

      EditorView.dragMovesSelection = dragMovesSelection$1;
      /**
      Facet used to configure whether a given selecting click adds
      a new range to the existing selection or replaces it entirely.
      */

      EditorView.clickAddsSelectionRange = clickAddsSelectionRange;
      /**
      A facet that determines which [decorations](https://codemirror.net/6/docs/ref/#view.Decoration)
      are shown in the view. See also [view
      plugins](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), which have a separate
      mechanism for providing decorations.
      */

      EditorView.decorations = decorations;
      /**
      Facet that provides additional DOM attributes for the editor's
      editable DOM element.
      */

      EditorView.contentAttributes = contentAttributes;
      /**
      Facet that provides DOM attributes for the editor's outer
      element.
      */

      EditorView.editorAttributes = editorAttributes;
      /**
      An extension that enables line wrapping in the editor (by
      setting CSS `white-space` to `pre-wrap` in the content).
      */

      EditorView.lineWrapping = /*@__PURE__*/EditorView.contentAttributes.of({
        "class": "cm-lineWrapping"
      });
      /**
      State effect used to include screen reader announcements in a
      transaction. These will be added to the DOM in a visually hidden
      element with `aria-live="polite"` set, and should be used to
      describe effects that are visually obvious but may not be
      noticed by screen reader users (such as moving to the next
      search match).
      */

      EditorView.announce = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["StateEffect"].define(); // Maximum line length for which we compute accurate bidi info

      var MaxBidiLine = 4096; // FIXME remove this and its callers on next breaking release

      function ensureTop(given, view) {
        return (given == null ? view.contentDOM.getBoundingClientRect().top : given) + view.viewState.paddingTop;
      }

      var resizeDebounce = -1;

      function ensureGlobalHandler() {
        window.addEventListener("resize", function () {
          if (resizeDebounce == -1) resizeDebounce = setTimeout(handleResize, 50);
        });
      }

      function handleResize() {
        resizeDebounce = -1;
        var found = document.querySelectorAll(".cm-content");

        for (var _i118 = 0; _i118 < found.length; _i118++) {
          var docView = ContentView.get(found[_i118]);
          if (docView) docView.editorView.requestMeasure();
        }
      }

      var BadMeasure = {};

      var CachedOrder = /*#__PURE__*/function () {
        function CachedOrder(from, to, dir, order) {
          _classCallCheck(this, CachedOrder);

          this.from = from;
          this.to = to;
          this.dir = dir;
          this.order = order;
        }

        _createClass(CachedOrder, null, [{
          key: "update",
          value: function update(cache, changes) {
            if (changes.empty) return cache;
            var result = [],
                lastDir = cache.length ? cache[cache.length - 1].dir : Direction.LTR;

            for (var _i119 = Math.max(0, cache.length - 10); _i119 < cache.length; _i119++) {
              var entry = cache[_i119];
              if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to)) result.push(new CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.order));
            }

            return result;
          }
        }]);

        return CachedOrder;
      }();

      function attrsFromFacet(view, facet, base) {
        for (var sources = view.state.facet(facet), _i120 = sources.length - 1; _i120 >= 0; _i120--) {
          var source = sources[_i120],
              value = typeof source == "function" ? source(view) : source;
          if (value) combineAttrs(value, base);
        }

        return base;
      }

      var currentPlatform = browser.mac ? "mac" : browser.windows ? "win" : browser.linux ? "linux" : "key";

      function normalizeKeyName(name, platform) {
        var parts = name.split(/-(?!$)/);
        var result = parts[parts.length - 1];
        if (result == "Space") result = " ";
        var alt, ctrl, shift, meta;

        for (var _i121 = 0; _i121 < parts.length - 1; ++_i121) {
          var mod = parts[_i121];
          if (/^(cmd|meta|m)$/i.test(mod)) meta = true;else if (/^a(lt)?$/i.test(mod)) alt = true;else if (/^(c|ctrl|control)$/i.test(mod)) ctrl = true;else if (/^s(hift)?$/i.test(mod)) shift = true;else if (/^mod$/i.test(mod)) {
            if (platform == "mac") meta = true;else ctrl = true;
          } else throw new Error("Unrecognized modifier name: " + mod);
        }

        if (alt) result = "Alt-" + result;
        if (ctrl) result = "Ctrl-" + result;
        if (meta) result = "Meta-" + result;
        if (shift) result = "Shift-" + result;
        return result;
      }

      function modifiers(name, event, shift) {
        if (event.altKey) name = "Alt-" + name;
        if (event.ctrlKey) name = "Ctrl-" + name;
        if (event.metaKey) name = "Meta-" + name;
        if (shift !== false && event.shiftKey) name = "Shift-" + name;
        return name;
      }

      var handleKeyEvents = /*@__PURE__*/EditorView.domEventHandlers({
        keydown: function keydown(event, view) {
          return runHandlers(getKeymap(view.state), event, view, "editor");
        }
      });
      /**
      Facet used for registering keymaps.
      
      You can add multiple keymaps to an editor. Their priorities
      determine their precedence (the ones specified early or with high
      priority get checked first). When a handler has returned `true`
      for a given key, no further handlers are called.
      */

      var keymap = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Facet"].define({
        enables: handleKeyEvents
      });

      var Keymaps = /*@__PURE__*/new WeakMap(); // This is hidden behind an indirection, rather than directly computed
      // by the facet, to keep internal types out of the facet's type.

      function getKeymap(state) {
        var bindings = state.facet(keymap);
        var map = Keymaps.get(bindings);
        if (!map) Keymaps.set(bindings, map = buildKeymap(bindings.reduce(function (a, b) {
          return a.concat(b);
        }, [])));
        return map;
      }
      /**
      Run the key handlers registered for a given scope. The event
      object should be `"keydown"` event. Returns true if any of the
      handlers handled it.
      */


      function runScopeHandlers(view, event, scope) {
        return runHandlers(getKeymap(view.state), event, view, scope);
      }

      var storedPrefix = null;
      var PrefixTimeout = 4000;

      function buildKeymap(bindings) {
        var platform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : currentPlatform;
        var bound = Object.create(null);
        var isPrefix = Object.create(null);

        var checkPrefix = function checkPrefix(name, is) {
          var current = isPrefix[name];
          if (current == null) isPrefix[name] = is;else if (current != is) throw new Error("Key binding " + name + " is used both as a regular binding and as a multi-stroke prefix");
        };

        var add = function add(scope, key, command, preventDefault) {
          var scopeObj = bound[scope] || (bound[scope] = Object.create(null));
          var parts = key.split(/ (?!$)/).map(function (k) {
            return normalizeKeyName(k, platform);
          });

          var _loop18 = function _loop18(_i122) {
            var prefix = parts.slice(0, _i122).join(" ");
            checkPrefix(prefix, true);
            if (!scopeObj[prefix]) scopeObj[prefix] = {
              preventDefault: true,
              commands: [function (view) {
                var ourObj = storedPrefix = {
                  view: view,
                  prefix: prefix,
                  scope: scope
                };
                setTimeout(function () {
                  if (storedPrefix == ourObj) storedPrefix = null;
                }, PrefixTimeout);
                return true;
              }]
            };
          };

          for (var _i122 = 1; _i122 < parts.length; _i122++) {
            _loop18(_i122);
          }

          var full = parts.join(" ");
          checkPrefix(full, false);
          var binding = scopeObj[full] || (scopeObj[full] = {
            preventDefault: false,
            commands: []
          });
          binding.commands.push(command);
          if (preventDefault) binding.preventDefault = true;
        };

        var _iterator154 = _createForOfIteratorHelper(bindings),
            _step154;

        try {
          for (_iterator154.s(); !(_step154 = _iterator154.n()).done;) {
            var b = _step154.value;
            var name = b[platform] || b.key;
            if (!name) continue;

            var _iterator155 = _createForOfIteratorHelper(b.scope ? b.scope.split(" ") : ["editor"]),
                _step155;

            try {
              for (_iterator155.s(); !(_step155 = _iterator155.n()).done;) {
                var scope = _step155.value;
                add(scope, name, b.run, b.preventDefault);
                if (b.shift) add(scope, "Shift-" + name, b.shift, b.preventDefault);
              }
            } catch (err) {
              _iterator155.e(err);
            } finally {
              _iterator155.f();
            }
          }
        } catch (err) {
          _iterator154.e(err);
        } finally {
          _iterator154.f();
        }

        return bound;
      }

      function runHandlers(map, event, view, scope) {
        var name = Object(w3c_keyname__WEBPACK_IMPORTED_MODULE_4__["keyName"])(event),
            isChar = name.length == 1 && name != " ";
        var prefix = "",
            fallthrough = false;

        if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {
          prefix = storedPrefix.prefix + " ";
          if (fallthrough = modifierCodes.indexOf(event.keyCode) < 0) storedPrefix = null;
        }

        var runFor = function runFor(binding) {
          if (binding) {
            var _iterator156 = _createForOfIteratorHelper(binding.commands),
                _step156;

            try {
              for (_iterator156.s(); !(_step156 = _iterator156.n()).done;) {
                var cmd = _step156.value;
                if (cmd(view)) return true;
              }
            } catch (err) {
              _iterator156.e(err);
            } finally {
              _iterator156.f();
            }

            if (binding.preventDefault) fallthrough = true;
          }

          return false;
        };

        var scopeObj = map[scope],
            baseName;

        if (scopeObj) {
          if (runFor(scopeObj[prefix + modifiers(name, event, !isChar)])) return true;

          if (isChar && (event.shiftKey || event.altKey || event.metaKey) && (baseName = w3c_keyname__WEBPACK_IMPORTED_MODULE_4__["base"][event.keyCode]) && baseName != name) {
            if (runFor(scopeObj[prefix + modifiers(baseName, event, true)])) return true;
          } else if (isChar && event.shiftKey) {
            if (runFor(scopeObj[prefix + modifiers(name, event, true)])) return true;
          }
        }

        return fallthrough;
      }

      var CanHidePrimary = !browser.ios; // FIXME test IE

      var selectionConfig = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Facet"].define({
        combine: function combine(configs) {
          return Object(_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["combineConfig"])(configs, {
            cursorBlinkRate: 1200,
            drawRangeCursor: true
          }, {
            cursorBlinkRate: function cursorBlinkRate(a, b) {
              return Math.min(a, b);
            },
            drawRangeCursor: function drawRangeCursor(a, b) {
              return a || b;
            }
          });
        }
      });
      /**
      Returns an extension that hides the browser's native selection and
      cursor, replacing the selection with a background behind the text
      (with the `cm-selectionBackground` class), and the
      cursors with elements overlaid over the code (using
      `cm-cursor-primary` and `cm-cursor-secondary`).
      
      This allows the editor to display secondary selection ranges, and
      tends to produce a type of selection more in line with that users
      expect in a text editor (the native selection styling will often
      leave gaps between lines and won't fill the horizontal space after
      a line when the selection continues past it).
      
      It does have a performance cost, in that it requires an extra DOM
      layout cycle for many updates (the selection is drawn based on DOM
      layout information that's only available after laying out the
      content).
      */


      function drawSelection() {
        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return [selectionConfig.of(config), drawSelectionPlugin, hideNativeSelection];
      }

      var Piece = /*#__PURE__*/function () {
        function Piece(left, top, width, height, className) {
          _classCallCheck(this, Piece);

          this.left = left;
          this.top = top;
          this.width = width;
          this.height = height;
          this.className = className;
        }

        _createClass(Piece, [{
          key: "draw",
          value: function draw() {
            var elt = document.createElement("div");
            elt.className = this.className;
            this.adjust(elt);
            return elt;
          }
        }, {
          key: "adjust",
          value: function adjust(elt) {
            elt.style.left = this.left + "px";
            elt.style.top = this.top + "px";
            if (this.width >= 0) elt.style.width = this.width + "px";
            elt.style.height = this.height + "px";
          }
        }, {
          key: "eq",
          value: function eq(p) {
            return this.left == p.left && this.top == p.top && this.width == p.width && this.height == p.height && this.className == p.className;
          }
        }]);

        return Piece;
      }();

      var drawSelectionPlugin = /*@__PURE__*/ViewPlugin.fromClass( /*#__PURE__*/function () {
        function _class8(view) {
          _classCallCheck(this, _class8);

          this.view = view;
          this.rangePieces = [];
          this.cursors = [];
          this.measureReq = {
            read: this.readPos.bind(this),
            write: this.drawSel.bind(this)
          };
          this.selectionLayer = view.scrollDOM.appendChild(document.createElement("div"));
          this.selectionLayer.className = "cm-selectionLayer";
          this.selectionLayer.setAttribute("aria-hidden", "true");
          this.cursorLayer = view.scrollDOM.appendChild(document.createElement("div"));
          this.cursorLayer.className = "cm-cursorLayer";
          this.cursorLayer.setAttribute("aria-hidden", "true");
          view.requestMeasure(this.measureReq);
          this.setBlinkRate();
        }

        _createClass(_class8, [{
          key: "setBlinkRate",
          value: function setBlinkRate() {
            this.cursorLayer.style.animationDuration = this.view.state.facet(selectionConfig).cursorBlinkRate + "ms";
          }
        }, {
          key: "update",
          value: function update(_update18) {
            var confChanged = _update18.startState.facet(selectionConfig) != _update18.state.facet(selectionConfig);

            if (confChanged || _update18.selectionSet || _update18.geometryChanged || _update18.viewportChanged) this.view.requestMeasure(this.measureReq);
            if (_update18.transactions.some(function (tr) {
              return tr.scrollIntoView;
            })) this.cursorLayer.style.animationName = this.cursorLayer.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink";
            if (confChanged) this.setBlinkRate();
          }
        }, {
          key: "readPos",
          value: function readPos() {
            var _this99 = this;

            var state = this.view.state,
                conf = state.facet(selectionConfig);
            var rangePieces = state.selection.ranges.map(function (r) {
              return r.empty ? [] : measureRange(_this99.view, r);
            }).reduce(function (a, b) {
              return a.concat(b);
            });
            var cursors = [];

            var _iterator157 = _createForOfIteratorHelper(state.selection.ranges),
                _step157;

            try {
              for (_iterator157.s(); !(_step157 = _iterator157.n()).done;) {
                var _r6 = _step157.value;
                var prim = _r6 == state.selection.main;

                if (_r6.empty ? !prim || CanHidePrimary : conf.drawRangeCursor) {
                  var piece = measureCursor(this.view, _r6, prim);
                  if (piece) cursors.push(piece);
                }
              }
            } catch (err) {
              _iterator157.e(err);
            } finally {
              _iterator157.f();
            }

            return {
              rangePieces: rangePieces,
              cursors: cursors
            };
          }
        }, {
          key: "drawSel",
          value: function drawSel(_ref30) {
            var _this100 = this;

            var rangePieces = _ref30.rangePieces,
                cursors = _ref30.cursors;

            if (rangePieces.length != this.rangePieces.length || rangePieces.some(function (p, i) {
              return !p.eq(_this100.rangePieces[i]);
            })) {
              this.selectionLayer.textContent = "";

              var _iterator158 = _createForOfIteratorHelper(rangePieces),
                  _step158;

              try {
                for (_iterator158.s(); !(_step158 = _iterator158.n()).done;) {
                  var _p4 = _step158.value;
                  this.selectionLayer.appendChild(_p4.draw());
                }
              } catch (err) {
                _iterator158.e(err);
              } finally {
                _iterator158.f();
              }

              this.rangePieces = rangePieces;
            }

            if (cursors.length != this.cursors.length || cursors.some(function (c, i) {
              return !c.eq(_this100.cursors[i]);
            })) {
              var oldCursors = this.cursorLayer.children;

              if (oldCursors.length !== cursors.length) {
                this.cursorLayer.textContent = "";

                var _iterator159 = _createForOfIteratorHelper(cursors),
                    _step159;

                try {
                  for (_iterator159.s(); !(_step159 = _iterator159.n()).done;) {
                    var c = _step159.value;
                    this.cursorLayer.appendChild(c.draw());
                  }
                } catch (err) {
                  _iterator159.e(err);
                } finally {
                  _iterator159.f();
                }
              } else {
                cursors.forEach(function (c, idx) {
                  return c.adjust(oldCursors[idx]);
                });
              }

              this.cursors = cursors;
            }
          }
        }, {
          key: "destroy",
          value: function destroy() {
            this.selectionLayer.remove();
            this.cursorLayer.remove();
          }
        }]);

        return _class8;
      }());
      var themeSpec = {
        ".cm-line": {
          "& ::selection": {
            backgroundColor: "transparent !important"
          },
          "&::selection": {
            backgroundColor: "transparent !important"
          }
        }
      };
      if (CanHidePrimary) themeSpec[".cm-line"].caretColor = "transparent !important";

      var hideNativeSelection = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Prec"].highest( /*@__PURE__*/EditorView.theme(themeSpec));

      function getBase(view) {
        var rect = view.scrollDOM.getBoundingClientRect();
        var left = view.textDirection == Direction.LTR ? rect.left : rect.right - view.scrollDOM.clientWidth;
        return {
          left: left - view.scrollDOM.scrollLeft,
          top: rect.top - view.scrollDOM.scrollTop
        };
      }

      function wrappedLine(view, pos, inside) {
        var range = _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(pos);

        return {
          from: Math.max(inside.from, view.moveToLineBoundary(range, false, true).from),
          to: Math.min(inside.to, view.moveToLineBoundary(range, true, true).from),
          type: BlockType.Text
        };
      }

      function blockAt(view, pos) {
        var line = view.lineBlockAt(pos);

        if (Array.isArray(line.type)) {
          var _iterator160 = _createForOfIteratorHelper(line.type),
              _step160;

          try {
            for (_iterator160.s(); !(_step160 = _iterator160.n()).done;) {
              var _l4 = _step160.value;
              if (_l4.to > pos || _l4.to == pos && (_l4.to == line.to || _l4.type == BlockType.Text)) return _l4;
            }
          } catch (err) {
            _iterator160.e(err);
          } finally {
            _iterator160.f();
          }
        }

        return line;
      }

      function measureRange(view, range) {
        if (range.to <= view.viewport.from || range.from >= view.viewport.to) return [];
        var from = Math.max(range.from, view.viewport.from),
            to = Math.min(range.to, view.viewport.to);
        var ltr = view.textDirection == Direction.LTR;
        var content = view.contentDOM,
            contentRect = content.getBoundingClientRect(),
            base = getBase(view);
        var lineStyle = window.getComputedStyle(content.firstChild);
        var leftSide = contentRect.left + parseInt(lineStyle.paddingLeft) + Math.min(0, parseInt(lineStyle.textIndent));
        var rightSide = contentRect.right - parseInt(lineStyle.paddingRight);
        var startBlock = blockAt(view, from),
            endBlock = blockAt(view, to);
        var visualStart = startBlock.type == BlockType.Text ? startBlock : null;
        var visualEnd = endBlock.type == BlockType.Text ? endBlock : null;

        if (view.lineWrapping) {
          if (visualStart) visualStart = wrappedLine(view, from, visualStart);
          if (visualEnd) visualEnd = wrappedLine(view, to, visualEnd);
        }

        if (visualStart && visualEnd && visualStart.from == visualEnd.from) {
          return pieces(drawForLine(range.from, range.to, visualStart));
        } else {
          var top = visualStart ? drawForLine(range.from, null, visualStart) : drawForWidget(startBlock, false);
          var bottom = visualEnd ? drawForLine(null, range.to, visualEnd) : drawForWidget(endBlock, true);
          var between = [];
          if ((visualStart || startBlock).to < (visualEnd || endBlock).from - 1) between.push(piece(leftSide, top.bottom, rightSide, bottom.top));else if (top.bottom < bottom.top && view.elementAtHeight((top.bottom + bottom.top) / 2).type == BlockType.Text) top.bottom = bottom.top = (top.bottom + bottom.top) / 2;
          return pieces(top).concat(between).concat(pieces(bottom));
        }

        function piece(left, top, right, bottom) {
          return new Piece(left - base.left, top - base.top, right - left, bottom - top, "cm-selectionBackground");
        }

        function pieces(_ref31) {
          var top = _ref31.top,
              bottom = _ref31.bottom,
              horizontal = _ref31.horizontal;
          var pieces = [];

          for (var _i123 = 0; _i123 < horizontal.length; _i123 += 2) {
            pieces.push(piece(horizontal[_i123], top, horizontal[_i123 + 1], bottom));
          }

          return pieces;
        } // Gets passed from/to in line-local positions


        function drawForLine(from, to, line) {
          var top = 1e9,
              bottom = -1e9,
              horizontal = [];

          function addSpan(from, fromOpen, to, toOpen, dir) {
            // Passing 2/-2 is a kludge to force the view to return
            // coordinates on the proper side of block widgets, since
            // normalizing the side there, though appropriate for most
            // coordsAtPos queries, would break selection drawing.
            var fromCoords = view.coordsAtPos(from, from == line.to ? -2 : 2);
            var toCoords = view.coordsAtPos(to, to == line.from ? 2 : -2);
            top = Math.min(fromCoords.top, toCoords.top, top);
            bottom = Math.max(fromCoords.bottom, toCoords.bottom, bottom);
            if (dir == Direction.LTR) horizontal.push(ltr && fromOpen ? leftSide : fromCoords.left, ltr && toOpen ? rightSide : toCoords.right);else horizontal.push(!ltr && toOpen ? leftSide : toCoords.left, !ltr && fromOpen ? rightSide : fromCoords.right);
          }

          var start = from !== null && from !== void 0 ? from : line.from,
              end = to !== null && to !== void 0 ? to : line.to; // Split the range by visible range and document line

          var _iterator161 = _createForOfIteratorHelper(view.visibleRanges),
              _step161;

          try {
            for (_iterator161.s(); !(_step161 = _iterator161.n()).done;) {
              var _r7 = _step161.value;

              if (_r7.to > start && _r7.from < end) {
                for (var pos = Math.max(_r7.from, start), endPos = Math.min(_r7.to, end);;) {
                  var docLine = view.state.doc.lineAt(pos);

                  var _iterator162 = _createForOfIteratorHelper(view.bidiSpans(docLine)),
                      _step162;

                  try {
                    for (_iterator162.s(); !(_step162 = _iterator162.n()).done;) {
                      var span = _step162.value;
                      var spanFrom = span.from + docLine.from,
                          spanTo = span.to + docLine.from;
                      if (spanFrom >= endPos) break;
                      if (spanTo > pos) addSpan(Math.max(spanFrom, pos), from == null && spanFrom <= start, Math.min(spanTo, endPos), to == null && spanTo >= end, span.dir);
                    }
                  } catch (err) {
                    _iterator162.e(err);
                  } finally {
                    _iterator162.f();
                  }

                  pos = docLine.to + 1;
                  if (pos >= endPos) break;
                }
              }
            }
          } catch (err) {
            _iterator161.e(err);
          } finally {
            _iterator161.f();
          }

          if (horizontal.length == 0) addSpan(start, from == null, end, to == null, view.textDirection);
          return {
            top: top,
            bottom: bottom,
            horizontal: horizontal
          };
        }

        function drawForWidget(block, top) {
          var y = contentRect.top + (top ? block.top : block.bottom);
          return {
            top: y,
            bottom: y,
            horizontal: []
          };
        }
      }

      function measureCursor(view, cursor, primary) {
        var pos = view.coordsAtPos(cursor.head, cursor.assoc || 1);
        if (!pos) return null;
        var base = getBase(view);
        return new Piece(pos.left - base.left, pos.top - base.top, -1, pos.bottom - pos.top, primary ? "cm-cursor cm-cursor-primary" : "cm-cursor cm-cursor-secondary");
      }

      var setDropCursorPos = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["StateEffect"].define({
        map: function map(pos, mapping) {
          return pos == null ? null : mapping.mapPos(pos);
        }
      });

      var dropCursorPos = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["StateField"].define({
        create: function create() {
          return null;
        },
        update: function update(pos, tr) {
          if (pos != null) pos = tr.changes.mapPos(pos);
          return tr.effects.reduce(function (pos, e) {
            return e.is(setDropCursorPos) ? e.value : pos;
          }, pos);
        }
      });

      var drawDropCursor = /*@__PURE__*/ViewPlugin.fromClass( /*#__PURE__*/function () {
        function _class9(view) {
          _classCallCheck(this, _class9);

          this.view = view;
          this.cursor = null;
          this.measureReq = {
            read: this.readPos.bind(this),
            write: this.drawCursor.bind(this)
          };
        }

        _createClass(_class9, [{
          key: "update",
          value: function update(_update19) {
            var _a;

            var cursorPos = _update19.state.field(dropCursorPos);

            if (cursorPos == null) {
              if (this.cursor != null) {
                (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.remove();
                this.cursor = null;
              }
            } else {
              if (!this.cursor) {
                this.cursor = this.view.scrollDOM.appendChild(document.createElement("div"));
                this.cursor.className = "cm-dropCursor";
              }

              if (_update19.startState.field(dropCursorPos) != cursorPos || _update19.docChanged || _update19.geometryChanged) this.view.requestMeasure(this.measureReq);
            }
          }
        }, {
          key: "readPos",
          value: function readPos() {
            var pos = this.view.state.field(dropCursorPos);
            var rect = pos != null && this.view.coordsAtPos(pos);
            if (!rect) return null;
            var outer = this.view.scrollDOM.getBoundingClientRect();
            return {
              left: rect.left - outer.left + this.view.scrollDOM.scrollLeft,
              top: rect.top - outer.top + this.view.scrollDOM.scrollTop,
              height: rect.bottom - rect.top
            };
          }
        }, {
          key: "drawCursor",
          value: function drawCursor(pos) {
            if (this.cursor) {
              if (pos) {
                this.cursor.style.left = pos.left + "px";
                this.cursor.style.top = pos.top + "px";
                this.cursor.style.height = pos.height + "px";
              } else {
                this.cursor.style.left = "-100000px";
              }
            }
          }
        }, {
          key: "destroy",
          value: function destroy() {
            if (this.cursor) this.cursor.remove();
          }
        }, {
          key: "setDropPos",
          value: function setDropPos(pos) {
            if (this.view.state.field(dropCursorPos) != pos) this.view.dispatch({
              effects: setDropCursorPos.of(pos)
            });
          }
        }]);

        return _class9;
      }(), {
        eventHandlers: {
          dragover: function dragover(event) {
            this.setDropPos(this.view.posAtCoords({
              x: event.clientX,
              y: event.clientY
            }));
          },
          dragleave: function dragleave(event) {
            if (event.target == this.view.contentDOM || !this.view.contentDOM.contains(event.relatedTarget)) this.setDropPos(null);
          },
          dragend: function dragend() {
            this.setDropPos(null);
          },
          drop: function drop() {
            this.setDropPos(null);
          }
        }
      });
      /**
      Draws a cursor at the current drop position when something is
      dragged over the editor.
      */

      function dropCursor() {
        return [dropCursorPos, drawDropCursor];
      }

      function iterMatches(doc, re, from, to, f) {
        re.lastIndex = 0;

        for (var cursor = doc.iterRange(from, to), pos = from, m; !cursor.next().done; pos += cursor.value.length) {
          if (!cursor.lineBreak) while (m = re.exec(cursor.value)) {
            f(pos + m.index, pos + m.index + m[0].length, m);
          }
        }
      }

      function matchRanges(view, maxLength) {
        var visible = view.visibleRanges;
        if (visible.length == 1 && visible[0].from == view.viewport.from && visible[0].to == view.viewport.to) return visible;
        var result = [];

        var _iterator163 = _createForOfIteratorHelper(visible),
            _step163;

        try {
          for (_iterator163.s(); !(_step163 = _iterator163.n()).done;) {
            var _step163$value = _step163.value,
                from = _step163$value.from,
                to = _step163$value.to;
            from = Math.max(view.state.doc.lineAt(from).from, from - maxLength);
            to = Math.min(view.state.doc.lineAt(to).to, to + maxLength);
            if (result.length && result[result.length - 1].to >= from) result[result.length - 1].to = to;else result.push({
              from: from,
              to: to
            });
          }
        } catch (err) {
          _iterator163.e(err);
        } finally {
          _iterator163.f();
        }

        return result;
      }
      /**
      Helper class used to make it easier to maintain decorations on
      visible code that matches a given regular expression. To be used
      in a [view plugin](https://codemirror.net/6/docs/ref/#view.ViewPlugin). Instances of this object
      represent a matching configuration.
      */


      var MatchDecorator = /*#__PURE__*/function () {
        /**
        Create a decorator.
        */
        function MatchDecorator(config) {
          _classCallCheck(this, MatchDecorator);

          var regexp = config.regexp,
              decoration = config.decoration,
              boundary = config.boundary,
              _config$maxLength = config.maxLength,
              maxLength = _config$maxLength === void 0 ? 1000 : _config$maxLength;
          if (!regexp.global) throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
          this.regexp = regexp;
          this.getDeco = typeof decoration == "function" ? decoration : function () {
            return decoration;
          };
          this.boundary = boundary;
          this.maxLength = maxLength;
        }
        /**
        Compute the full set of decorations for matches in the given
        view's viewport. You'll want to call this when initializing your
        plugin.
        */


        _createClass(MatchDecorator, [{
          key: "createDeco",
          value: function createDeco(view) {
            var _this101 = this;

            var build = new _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_2__["RangeSetBuilder"]();

            var _iterator164 = _createForOfIteratorHelper(matchRanges(view, this.maxLength)),
                _step164;

            try {
              for (_iterator164.s(); !(_step164 = _iterator164.n()).done;) {
                var _step164$value = _step164.value,
                    from = _step164$value.from,
                    to = _step164$value.to;
                iterMatches(view.state.doc, this.regexp, from, to, function (a, b, m) {
                  return build.add(a, b, _this101.getDeco(m, view, a));
                });
              }
            } catch (err) {
              _iterator164.e(err);
            } finally {
              _iterator164.f();
            }

            return build.finish();
          }
          /**
          Update a set of decorations for a view update. `deco` _must_ be
          the set of decorations produced by _this_ `MatchDecorator` for
          the view state before the update.
          */

        }, {
          key: "updateDeco",
          value: function updateDeco(update, deco) {
            var changeFrom = 1e9,
                changeTo = -1;
            if (update.docChanged) update.changes.iterChanges(function (_f, _t, from, to) {
              if (to > update.view.viewport.from && from < update.view.viewport.to) {
                changeFrom = Math.min(from, changeFrom);
                changeTo = Math.max(to, changeTo);
              }
            });
            if (update.viewportChanged || changeTo - changeFrom > 1000) return this.createDeco(update.view);
            if (changeTo > -1) return this.updateRange(update.view, deco.map(update.changes), changeFrom, changeTo);
            return deco;
          }
        }, {
          key: "updateRange",
          value: function updateRange(view, deco, updateFrom, updateTo) {
            var _this102 = this;

            var _iterator165 = _createForOfIteratorHelper(view.visibleRanges),
                _step165;

            try {
              for (_iterator165.s(); !(_step165 = _iterator165.n()).done;) {
                var _r8 = _step165.value;
                var from = Math.max(_r8.from, updateFrom),
                    to = Math.min(_r8.to, updateTo);

                if (to > from) {
                  (function () {
                    var fromLine = view.state.doc.lineAt(from),
                        toLine = fromLine.to < to ? view.state.doc.lineAt(to) : fromLine;
                    var start = Math.max(_r8.from, fromLine.from),
                        end = Math.min(_r8.to, toLine.to);

                    if (_this102.boundary) {
                      for (; from > fromLine.from; from--) {
                        if (_this102.boundary.test(fromLine.text[from - 1 - fromLine.from])) {
                          start = from;
                          break;
                        }
                      }

                      for (; to < toLine.to; to++) {
                        if (_this102.boundary.test(toLine.text[to - toLine.from])) {
                          end = to;
                          break;
                        }
                      }
                    }

                    var ranges = [],
                        m = void 0;

                    if (fromLine == toLine) {
                      _this102.regexp.lastIndex = start - fromLine.from;

                      while ((m = _this102.regexp.exec(fromLine.text)) && m.index < end - fromLine.from) {
                        var pos = m.index + fromLine.from;
                        ranges.push(_this102.getDeco(m, view, pos).range(pos, pos + m[0].length));
                      }
                    } else {
                      iterMatches(view.state.doc, _this102.regexp, start, end, function (from, to, m) {
                        return ranges.push(_this102.getDeco(m, view, from).range(from, to));
                      });
                    }

                    deco = deco.update({
                      filterFrom: start,
                      filterTo: end,
                      filter: function filter(from, to) {
                        return from < start || to > end;
                      },
                      add: ranges
                    });
                  })();
                }
              }
            } catch (err) {
              _iterator165.e(err);
            } finally {
              _iterator165.f();
            }

            return deco;
          }
        }]);

        return MatchDecorator;
      }();

      var UnicodeRegexpSupport = /x/.unicode != null ? "gu" : "g";
      var Specials = /*@__PURE__*/new RegExp("[\0-\b\n-\x1F\x7F-\x9F\xAD\u061C\u200B\u200E\u200F\u2028\u2029\u202D\u202E\uFEFF\uFFF9-\uFFFC]", UnicodeRegexpSupport);
      var Names = {
        0: "null",
        7: "bell",
        8: "backspace",
        10: "newline",
        11: "vertical tab",
        13: "carriage return",
        27: "escape",
        8203: "zero width space",
        8204: "zero width non-joiner",
        8205: "zero width joiner",
        8206: "left-to-right mark",
        8207: "right-to-left mark",
        8232: "line separator",
        8237: "left-to-right override",
        8238: "right-to-left override",
        8233: "paragraph separator",
        65279: "zero width no-break space",
        65532: "object replacement"
      };
      var _supportsTabSize = null;

      function supportsTabSize() {
        var _a;

        if (_supportsTabSize == null && typeof document != "undefined" && document.body) {
          var styles = document.body.style;
          _supportsTabSize = ((_a = styles.tabSize) !== null && _a !== void 0 ? _a : styles.MozTabSize) != null;
        }

        return _supportsTabSize || false;
      }

      var specialCharConfig = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Facet"].define({
        combine: function combine(configs) {
          var config = Object(_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["combineConfig"])(configs, {
            render: null,
            specialChars: Specials,
            addSpecialChars: null
          });
          if (config.replaceTabs = !supportsTabSize()) config.specialChars = new RegExp("\t|" + config.specialChars.source, UnicodeRegexpSupport);
          if (config.addSpecialChars) config.specialChars = new RegExp(config.specialChars.source + "|" + config.addSpecialChars.source, UnicodeRegexpSupport);
          return config;
        }
      });
      /**
      Returns an extension that installs highlighting of special
      characters.
      */


      function highlightSpecialChars() {
        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return [specialCharConfig.of(config), specialCharPlugin()];
      }

      var _plugin = null;

      function specialCharPlugin() {
        return _plugin || (_plugin = ViewPlugin.fromClass( /*#__PURE__*/function () {
          function _class10(view) {
            _classCallCheck(this, _class10);

            this.view = view;
            this.decorations = Decoration.none;
            this.decorationCache = Object.create(null);
            this.decorator = this.makeDecorator(view.state.facet(specialCharConfig));
            this.decorations = this.decorator.createDeco(view);
          }

          _createClass(_class10, [{
            key: "makeDecorator",
            value: function makeDecorator(conf) {
              var _this103 = this;

              return new MatchDecorator({
                regexp: conf.specialChars,
                decoration: function decoration(m, view, pos) {
                  var doc = view.state.doc;
                  var code = Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_3__["codePointAt"])(m[0], 0);

                  if (code == 9) {
                    var line = doc.lineAt(pos);
                    var size = view.state.tabSize,
                        col = Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_3__["countColumn"])(line.text, size, pos - line.from);
                    return Decoration.replace({
                      widget: new TabWidget((size - col % size) * _this103.view.defaultCharacterWidth)
                    });
                  }

                  return _this103.decorationCache[code] || (_this103.decorationCache[code] = Decoration.replace({
                    widget: new SpecialCharWidget(conf, code)
                  }));
                },
                boundary: conf.replaceTabs ? undefined : /[^]/
              });
            }
          }, {
            key: "update",
            value: function update(_update20) {
              var conf = _update20.state.facet(specialCharConfig);

              if (_update20.startState.facet(specialCharConfig) != conf) {
                this.decorator = this.makeDecorator(conf);
                this.decorations = this.decorator.createDeco(_update20.view);
              } else {
                this.decorations = this.decorator.updateDeco(_update20, this.decorations);
              }
            }
          }]);

          return _class10;
        }(), {
          decorations: function decorations(v) {
            return v.decorations;
          }
        }));
      }

      var DefaultPlaceholder = "\u2022"; // Assigns placeholder characters from the Control Pictures block to
      // ASCII control characters

      function placeholder$1(code) {
        if (code >= 32) return DefaultPlaceholder;
        if (code == 10) return "\u2424";
        return String.fromCharCode(9216 + code);
      }

      var SpecialCharWidget = /*#__PURE__*/function (_WidgetType12) {
        _inherits(SpecialCharWidget, _WidgetType12);

        var _super47 = _createSuper(SpecialCharWidget);

        function SpecialCharWidget(options, code) {
          var _this104;

          _classCallCheck(this, SpecialCharWidget);

          _this104 = _super47.call(this);
          _this104.options = options;
          _this104.code = code;
          return _this104;
        }

        _createClass(SpecialCharWidget, [{
          key: "eq",
          value: function eq(other) {
            return other.code == this.code;
          }
        }, {
          key: "toDOM",
          value: function toDOM(view) {
            var ph = placeholder$1(this.code);
            var desc = view.state.phrase("Control character") + " " + (Names[this.code] || "0x" + this.code.toString(16));
            var custom = this.options.render && this.options.render(this.code, desc, ph);
            if (custom) return custom;
            var span = document.createElement("span");
            span.textContent = ph;
            span.title = desc;
            span.setAttribute("aria-label", desc);
            span.className = "cm-specialChar";
            return span;
          }
        }, {
          key: "ignoreEvent",
          value: function ignoreEvent() {
            return false;
          }
        }]);

        return SpecialCharWidget;
      }(WidgetType);

      var TabWidget = /*#__PURE__*/function (_WidgetType13) {
        _inherits(TabWidget, _WidgetType13);

        var _super48 = _createSuper(TabWidget);

        function TabWidget(width) {
          var _this105;

          _classCallCheck(this, TabWidget);

          _this105 = _super48.call(this);
          _this105.width = width;
          return _this105;
        }

        _createClass(TabWidget, [{
          key: "eq",
          value: function eq(other) {
            return other.width == this.width;
          }
        }, {
          key: "toDOM",
          value: function toDOM() {
            var span = document.createElement("span");
            span.textContent = "\t";
            span.className = "cm-tab";
            span.style.width = this.width + "px";
            return span;
          }
        }, {
          key: "ignoreEvent",
          value: function ignoreEvent() {
            return false;
          }
        }]);

        return TabWidget;
      }(WidgetType);

      var plugin = /*@__PURE__*/ViewPlugin.fromClass( /*#__PURE__*/function () {
        function _class11() {
          _classCallCheck(this, _class11);

          this.height = 1000;
          this.attrs = {
            style: "padding-bottom: 1000px"
          };
        }

        _createClass(_class11, [{
          key: "update",
          value: function update(_update21) {
            var height = _update21.view.viewState.editorHeight - _update21.view.defaultLineHeight;

            if (height != this.height) {
              this.height = height;
              this.attrs = {
                style: "padding-bottom: ".concat(height, "px")
              };
            }
          }
        }]);

        return _class11;
      }());
      /**
      Returns an extension that makes sure the content has a bottom
      margin equivalent to the height of the editor, minus one line
      height, so that every line in the document can be scrolled to the
      top of the editor.
      
      This is only meaningful when the editor is scrollable, and should
      not be enabled in editors that take the size of their content.
      */

      function scrollPastEnd() {
        return [plugin, contentAttributes.of(function (view) {
          var _a;

          return ((_a = view.plugin(plugin)) === null || _a === void 0 ? void 0 : _a.attrs) || null;
        })];
      }
      /**
      Mark lines that have a cursor on them with the `"cm-activeLine"`
      DOM class.
      */


      function highlightActiveLine() {
        return activeLineHighlighter;
      }

      var lineDeco = /*@__PURE__*/Decoration.line({
        "class": "cm-activeLine"
      });
      var activeLineHighlighter = /*@__PURE__*/ViewPlugin.fromClass( /*#__PURE__*/function () {
        function _class12(view) {
          _classCallCheck(this, _class12);

          this.decorations = this.getDeco(view);
        }

        _createClass(_class12, [{
          key: "update",
          value: function update(_update22) {
            if (_update22.docChanged || _update22.selectionSet) this.decorations = this.getDeco(_update22.view);
          }
        }, {
          key: "getDeco",
          value: function getDeco(view) {
            var lastLineStart = -1,
                deco = [];

            var _iterator166 = _createForOfIteratorHelper(view.state.selection.ranges),
                _step166;

            try {
              for (_iterator166.s(); !(_step166 = _iterator166.n()).done;) {
                var _r9 = _step166.value;
                if (!_r9.empty) return Decoration.none;
                var line = view.lineBlockAt(_r9.head);

                if (line.from > lastLineStart) {
                  deco.push(lineDeco.range(line.from));
                  lastLineStart = line.from;
                }
              }
            } catch (err) {
              _iterator166.e(err);
            } finally {
              _iterator166.f();
            }

            return Decoration.set(deco);
          }
        }]);

        return _class12;
      }(), {
        decorations: function decorations(v) {
          return v.decorations;
        }
      });

      var Placeholder = /*#__PURE__*/function (_WidgetType14) {
        _inherits(Placeholder, _WidgetType14);

        var _super49 = _createSuper(Placeholder);

        function Placeholder(content) {
          var _this106;

          _classCallCheck(this, Placeholder);

          _this106 = _super49.call(this);
          _this106.content = content;
          return _this106;
        }

        _createClass(Placeholder, [{
          key: "toDOM",
          value: function toDOM() {
            var wrap = document.createElement("span");
            wrap.className = "cm-placeholder";
            wrap.style.pointerEvents = "none";
            wrap.appendChild(typeof this.content == "string" ? document.createTextNode(this.content) : this.content);
            if (typeof this.content == "string") wrap.setAttribute("aria-label", "placeholder " + this.content);else wrap.setAttribute("aria-hidden", "true");
            return wrap;
          }
        }, {
          key: "ignoreEvent",
          value: function ignoreEvent() {
            return false;
          }
        }]);

        return Placeholder;
      }(WidgetType);
      /**
      Extension that enables a placeholder—a piece of example content
      to show when the editor is empty.
      */


      function placeholder(content) {
        return ViewPlugin.fromClass( /*#__PURE__*/function () {
          function _class13(view) {
            _classCallCheck(this, _class13);

            this.view = view;
            this.placeholder = Decoration.set([Decoration.widget({
              widget: new Placeholder(content),
              side: 1
            }).range(0)]);
          }

          _createClass(_class13, [{
            key: "decorations",
            get: function get() {
              return this.view.state.doc.length ? Decoration.none : this.placeholder;
            }
          }]);

          return _class13;
        }(), {
          decorations: function decorations(v) {
            return v.decorations;
          }
        });
      }
      /**
      @internal
      */


      var __test = {
        HeightMap: HeightMap,
        HeightOracle: HeightOracle,
        MeasuredHeights: MeasuredHeights,
        QueryType: QueryType,
        ChangedRange: ChangedRange,
        computeOrder: computeOrder,
        moveVisually: moveVisually
      };
      /***/
    },

    /***/
    "ErZk":
    /*!*********************************************************!*\
      !*** ./libs/components/codemirror/codemirror.module.ts ***!
      \*********************************************************/

    /*! exports provided: CodemirrorModule */

    /***/
    function ErZk(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CodemirrorModule", function () {
        return CodemirrorModule;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/common */
      "ofXK");
      /* harmony import */


      var _codemirror_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./codemirror.component */
      "X+Yg");

      var CodemirrorModule = /*#__PURE__*/_createClass(function CodemirrorModule() {
        _classCallCheck(this, CodemirrorModule);
      });

      CodemirrorModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        declarations: [_codemirror_component__WEBPACK_IMPORTED_MODULE_3__["CodemirrorComponent"]],
        exports: [_codemirror_component__WEBPACK_IMPORTED_MODULE_3__["CodemirrorComponent"]],
        imports: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"]],
        providers: []
      })], CodemirrorModule);
      /***/
    },

    /***/
    "I8yF":
    /*!*********************************************************!*\
      !*** ./node_modules/@lezer/javascript/dist/index.es.js ***!
      \*********************************************************/

    /*! exports provided: parser */

    /***/
    function I8yF(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "parser", function () {
        return parser;
      });
      /* harmony import */


      var _lezer_lr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @lezer/lr */
      "LPyM");
      /* harmony import */


      var _lezer_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @lezer/common */
      "lmln"); // This file was generated by lezer-generator. You probably shouldn't edit it.


      var noSemi = 275,
          incdec = 1,
          incdecPrefix = 2,
          templateContent = 276,
          templateDollarBrace = 277,
          templateEnd = 278,
          insertSemi = 279,
          TSExtends = 3,
          spaces = 281,
          newline = 282,
          LineComment = 4,
          BlockComment = 5,
          Dialect_ts = 1;
      /* Hand-written tokenizers for JavaScript tokens that can't be
         expressed by lezer's built-in tokenizer. */

      var space = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288];
      var braceR = 125,
          braceL = 123,
          semicolon = 59,
          slash = 47,
          star = 42,
          plus = 43,
          minus = 45,
          dollar = 36,
          backtick = 96,
          backslash = 92;
      var trackNewline = new _lezer_lr__WEBPACK_IMPORTED_MODULE_0__["ContextTracker"]({
        start: false,
        shift: function shift(context, term) {
          return term == LineComment || term == BlockComment || term == spaces ? context : term == newline;
        },
        strict: false
      });
      var insertSemicolon = new _lezer_lr__WEBPACK_IMPORTED_MODULE_0__["ExternalTokenizer"](function (input, stack) {
        var next = input.next;
        if ((next == braceR || next == -1 || stack.context) && stack.canShift(insertSemi)) input.acceptToken(insertSemi);
      }, {
        contextual: true,
        fallback: true
      });
      var noSemicolon = new _lezer_lr__WEBPACK_IMPORTED_MODULE_0__["ExternalTokenizer"](function (input, stack) {
        var next = input.next,
            after;
        if (space.indexOf(next) > -1) return;
        if (next == slash && ((after = input.peek(1)) == slash || after == star)) return;
        if (next != braceR && next != semicolon && next != -1 && !stack.context && stack.canShift(noSemi)) input.acceptToken(noSemi);
      }, {
        contextual: true
      });
      var incdecToken = new _lezer_lr__WEBPACK_IMPORTED_MODULE_0__["ExternalTokenizer"](function (input, stack) {
        var next = input.next;

        if (next == plus || next == minus) {
          input.advance();

          if (next == input.next) {
            input.advance();
            var mayPostfix = !stack.context && stack.canShift(incdec);
            input.acceptToken(mayPostfix ? incdec : incdecPrefix);
          }
        }
      }, {
        contextual: true
      });
      var template = new _lezer_lr__WEBPACK_IMPORTED_MODULE_0__["ExternalTokenizer"](function (input) {
        for (var afterDollar = false, _i124 = 0;; _i124++) {
          var next = input.next;

          if (next < 0) {
            if (_i124) input.acceptToken(templateContent);
            break;
          } else if (next == backtick) {
            if (_i124) input.acceptToken(templateContent);else input.acceptToken(templateEnd, 1);
            break;
          } else if (next == braceL && afterDollar) {
            if (_i124 == 1) input.acceptToken(templateDollarBrace, 1);else input.acceptToken(templateContent, -1);
            break;
          } else if (next == 10
          /* "\n" */
          && _i124) {
            // Break up template strings on lines, to avoid huge tokens
            input.advance();
            input.acceptToken(templateContent);
            break;
          } else if (next == backslash) {
            input.advance();
          }

          afterDollar = next == dollar;
          input.advance();
        }
      });

      function tsExtends(value, stack) {
        return value == "extends" && stack.dialectEnabled(Dialect_ts) ? TSExtends : -1;
      } // This file was generated by lezer-generator. You probably shouldn't edit it.


      var spec_identifier = {
        __proto__: null,
        "export": 16,
        as: 21,
        from: 25,
        "default": 30,
        async: 35,
        "function": 36,
        "this": 46,
        "true": 54,
        "false": 54,
        "void": 60,
        "typeof": 64,
        "null": 78,
        "super": 80,
        "new": 114,
        "await": 131,
        "yield": 133,
        "delete": 134,
        "class": 144,
        "extends": 146,
        "public": 189,
        "private": 189,
        "protected": 189,
        readonly: 191,
        "instanceof": 212,
        "in": 214,
        "const": 216,
        "import": 248,
        keyof: 299,
        unique: 303,
        infer: 309,
        is: 343,
        "abstract": 363,
        "implements": 365,
        type: 367,
        "let": 370,
        "var": 372,
        "interface": 379,
        "enum": 383,
        namespace: 389,
        module: 391,
        declare: 395,
        global: 399,
        "for": 420,
        of: 429,
        "while": 432,
        "with": 436,
        "do": 440,
        "if": 444,
        "else": 446,
        "switch": 450,
        "case": 456,
        "try": 462,
        "catch": 464,
        "finally": 466,
        "return": 470,
        "throw": 474,
        "break": 478,
        "continue": 482,
        "debugger": 486
      };
      var spec_word = {
        __proto__: null,
        async: 101,
        get: 103,
        set: 105,
        "public": 153,
        "private": 153,
        "protected": 153,
        "static": 155,
        "abstract": 157,
        override: 159,
        readonly: 165,
        "new": 347
      };
      var spec_LessThan = {
        __proto__: null,
        "<": 121
      };

      var parser = _lezer_lr__WEBPACK_IMPORTED_MODULE_0__["LRParser"].deserialize({
        version: 13,
        states: "$1WO`QYOOO'QQ!LdO'#CgO'XOSO'#DSO)dQYO'#DXO)tQYO'#DdO){QYO'#DnO-xQYO'#DtOOQO'#EX'#EXO.]QWO'#EWO.bQWO'#EWOOQ!LS'#Eb'#EbO0aQ!LdO'#IqO2wQ!LdO'#IrO3eQWO'#EvO3jQpO'#F]OOQ!LS'#FO'#FOO3rO!bO'#FOO4QQWO'#FdO5_QWO'#FcOOQ!LS'#Ir'#IrOOQ!LQ'#Iq'#IqOOQQ'#J['#J[O5dQWO'#HjO5iQ!LYO'#HkOOQQ'#Ic'#IcOOQQ'#Hl'#HlQ`QYOOO){QYO'#DfO5qQWO'#GWO5vQ#tO'#ClO6UQWO'#EVO6aQWO'#EcO6fQ#tO'#E}O7QQWO'#GWO7VQWO'#G[O7bQWO'#G[O7pQWO'#G_O7pQWO'#G`O7pQWO'#GbO5qQWO'#GeO8aQWO'#GhO9oQWO'#CcO:PQWO'#GuO:XQWO'#G{O:XQWO'#G}O`QYO'#HPO:XQWO'#HRO:XQWO'#HUO:^QWO'#H[O:cQ!LZO'#H`O){QYO'#HbO:nQ!LZO'#HdO:yQ!LZO'#HfO5iQ!LYO'#HhO){QYO'#IsOOOS'#Hn'#HnO;UOSO,59nOOQ!LS,59n,59nO=gQbO'#CgO=qQYO'#HoO>OQWO'#ItO?}QbO'#ItO'dQYO'#ItO@UQWO,59sO@lQ&jO'#D^OAeQWO'#EXOArQWO'#JPOA}QWO'#JOOBVQWO,5:uOB[QWO'#I}OBcQWO'#DuO5vQ#tO'#EVOBqQWO'#EVOB|Q`O'#E}OOQ!LS,5:O,5:OOCUQYO,5:OOESQ!LdO,5:YOEpQWO,5:`OFZQ!LYO'#I|O7VQWO'#I{OFbQWO'#I{OFjQWO,5:tOFoQWO'#I{OF}QYO,5:rOH}QWO'#ESOJXQWO,5:rOKhQWO'#DhOKoQYO'#DmOKyQ&jO,5:{O){QYO,5:{OOQQ'#En'#EnOOQQ'#Ep'#EpO){QYO,5:}O){QYO,5:}O){QYO,5:}O){QYO,5:}O){QYO,5:}O){QYO,5:}O){QYO,5:}O){QYO,5:}O){QYO,5:}O){QYO,5:}O){QYO,5:}OOQQ'#Et'#EtOLRQYO,5;_OOQ!LS,5;d,5;dOOQ!LS,5;e,5;eONRQWO,5;eOOQ!LS,5;f,5;fO){QYO'#HyONWQ!LYO,5<PONrQWO,5:}O){QYO,5;bO! [QpO'#JTONyQpO'#JTO! cQpO'#JTO! tQpO,5;mOOOO,5;w,5;wO!!SQYO'#F_OOOO'#Hx'#HxO3rO!bO,5;jO!!ZQpO'#FaOOQ!LS,5;j,5;jO!!wQ,UO'#CqOOQ!LS'#Ct'#CtO!#[QWO'#CtO!#aOSO'#CxO!#}Q#tO,5;|O!$UQWO,5<OO!%bQWO'#FnO!%oQWO'#FoO!%tQWO'#FsO!&vQ&jO'#FwO!'iQ,UO'#IlOOQ!LS'#Il'#IlO!'sQWO'#IkO!(RQWO'#IjOOQ!LS'#Cr'#CrOOQ!LS'#Cy'#CyO!(ZQWO'#C{OJ^QWO'#FfOJ^QWO'#FhO!(`QWO'#FjO!(eQWO'#FkO!(jQWO'#FqOJ^QWO'#FvO!(oQWO'#EYO!)WQWO,5;}O`QYO,5>UOOQQ'#If'#IfOOQQ,5>V,5>VOOQQ-E;j-E;jO!+SQ!LdO,5:QOOQ!LQ'#Co'#CoO!+sQ#tO,5<rOOQO'#Ce'#CeO!,UQWO'#CpO!,^Q!LYO'#IgO5_QWO'#IgO:^QWO,59WO!,lQpO,59WO!,tQ#tO,59WO5vQ#tO,59WO!-PQWO,5:rO!-XQWO'#GtO!-dQWO'#J`O){QYO,5;gO!-lQ&jO,5;iO!-qQWO,5=_O!-vQWO,5=_O!-{QWO,5=_O5iQ!LYO,5=_O5qQWO,5<rO!.ZQWO'#EZO!.lQ&jO'#E[OOQ!LQ'#I}'#I}O!.}Q!LYO'#J]O5iQ!LYO,5<vO7pQWO,5<|OOQO'#Cq'#CqO!/YQpO,5<yO!/bQ#tO,5<zO!/mQWO,5<|O!/rQ`O,5=PO:^QWO'#GjO5qQWO'#GlO!/zQWO'#GlO5vQ#tO'#GoO!0PQWO'#GoOOQQ,5=S,5=SO!0UQWO'#GpO!0^QWO'#ClO!0cQWO,58}O!0mQWO,58}O!2oQYO,58}OOQQ,58},58}O!2|Q!LYO,58}O){QYO,58}O!3XQYO'#GwOOQQ'#Gx'#GxOOQQ'#Gy'#GyO`QYO,5=aO!3iQWO,5=aO){QYO'#DtO`QYO,5=gO`QYO,5=iO!3nQWO,5=kO`QYO,5=mO!3sQWO,5=pO!3xQYO,5=vOOQQ,5=z,5=zO){QYO,5=zO5iQ!LYO,5=|OOQQ,5>O,5>OO!7yQWO,5>OOOQQ,5>Q,5>QO!7yQWO,5>QOOQQ,5>S,5>SO!8OQ`O,5?_OOOS-E;l-E;lOOQ!LS1G/Y1G/YO!8TQbO,5>ZO){QYO,5>ZOOQO-E;m-E;mO!8_QWO,5?`O!8gQbO,5?`O!8nQWO,5?jOOQ!LS1G/_1G/_O!8vQpO'#DQOOQO'#Iv'#IvO){QYO'#IvO!9eQpO'#IvO!:SQpO'#D_O!:eQ&jO'#D_O!<pQYO'#D_O!<wQWO'#IuO!=PQWO,59xO!=UQWO'#E]O!=dQWO'#JQO!=lQWO,5:vO!>SQ&jO'#D_O){QYO,5?kO!>^QWO'#HtO!8nQWO,5?jOOQ!LQ1G0a1G0aO!?jQ&jO'#DxOOQ!LS,5:a,5:aO){QYO,5:aOH}QWO,5:aO!?qQWO,5:aO:^QWO,5:qO!,lQpO,5:qO!,tQ#tO,5:qO5vQ#tO,5:qOOQ!LS1G/j1G/jOOQ!LS1G/z1G/zOOQ!LQ'#ER'#ERO){QYO,5?hO!?|Q!LYO,5?hO!@_Q!LYO,5?hO!@fQWO,5?gO!@nQWO'#HvO!@fQWO,5?gOOQ!LQ1G0`1G0`O7VQWO,5?gOOQ!LS1G0^1G0^O!AYQ!LdO1G0^O!AyQ!LbO,5:nOOQ!LS'#Fm'#FmO!BgQ!LdO'#IlOF}QYO1G0^O!DfQ#tO'#IwO!DpQWO,5:SO!DuQbO'#IxO){QYO'#IxO!EPQWO,5:XOOQ!LS'#DQ'#DQOOQ!LS1G0g1G0gO!EUQWO1G0gO!GgQ!LdO1G0iO!GnQ!LdO1G0iO!JRQ!LdO1G0iO!JYQ!LdO1G0iO!LaQ!LdO1G0iO!LtQ!LdO1G0iO# eQ!LdO1G0iO# lQ!LdO1G0iO#$PQ!LdO1G0iO#$WQ!LdO1G0iO#%{Q!LdO1G0iO#(uQ7^O'#CgO#*pQ7^O1G0yO#,kQ7^O'#IrOOQ!LS1G1P1G1PO#-OQ!LdO,5>eOOQ!LQ-E;w-E;wO#-oQ!LdO1G0iOOQ!LS1G0i1G0iO#/qQ!LdO1G0|O#0bQpO,5;oO#0gQpO,5;pO#0lQpO'#FWO#1QQWO'#FVOOQO'#JU'#JUOOQO'#Hw'#HwO#1VQpO1G1XOOQ!LS1G1X1G1XOOOO1G1b1G1bO#1eQ7^O'#IqO#1oQWO,5;yOLRQYO,5;yOOOO-E;v-E;vOOQ!LS1G1U1G1UOOQ!LS,5;{,5;{O#1tQpO,5;{OOQ!LS,59`,59`OH}QWO'#InOOOS'#Hm'#HmO#1yOSO,59dOOQ!LS,59d,59dO){QYO1G1hO!(eQWO'#H{O#2UQWO,5<aOOQ!LS,5<^,5<^OOQO'#GR'#GROJ^QWO,5<lOOQO'#GT'#GTOJ^QWO,5<nOJ^QWO,5<pOOQO1G1j1G1jO#2aQ`O'#CoO#2tQ`O,5<YO#2{QWO'#JXO5qQWO'#JXO#3ZQWO,5<[OJ^QWO,5<ZO#3`Q`O'#FmO#3mQ`O'#JYO#3wQWO'#JYOH}QWO'#JYO#3|QWO,5<_OOQ!LQ'#Dc'#DcO#4RQWO'#FpO#4^QpO'#FxO!&qQ&jO'#FxO!&qQ&jO'#FzO#4oQWO'#F{O!(jQWO'#GOOOQO'#H}'#H}O#4tQ&jO,5<cOOQ!LS,5<c,5<cO#4{Q&jO'#FxO#5ZQ&jO'#FyO#5cQ&jO'#FyOOQ!LS,5<q,5<qOJ^QWO,5?VOJ^QWO,5?VO#5hQWO'#IOO#5sQWO,5?UOOQ!LS'#Cg'#CgO#6gQ#tO,59gOOQ!LS,59g,59gO#7YQ#tO,5<QO#7{Q#tO,5<SO#8VQWO,5<UOOQ!LS,5<V,5<VO#8[QWO,5<]O#8aQ#tO,5<bOF}QYO1G1iO#8qQWO1G1iOOQQ1G3p1G3pOOQ!LS1G/l1G/lONRQWO1G/lOOQQ1G2^1G2^OH}QWO1G2^O){QYO1G2^OH}QWO1G2^O#8vQWO1G2^O#9UQWO,59[O#:_QWO'#ESOOQ!LQ,5?R,5?RO#:iQ!LYO,5?ROOQQ1G.r1G.rO:^QWO1G.rO!,lQpO1G.rO!,tQ#tO1G.rO#:wQWO1G0^O#:|QWO'#CgO#;XQWO'#JaO#;aQWO,5=`O#;fQWO'#JaO#;kQWO'#JaO#;pQWO'#IWO#<OQWO,5?zO#<WQbO1G1ROOQ!LS1G1T1G1TO5qQWO1G2yO#<_QWO1G2yO#<dQWO1G2yO#<iQWO1G2yOOQQ1G2y1G2yO#<nQ#tO1G2^O7VQWO'#JOO7VQWO'#E]O7VQWO'#IQO#=PQ!LYO,5?wOOQQ1G2b1G2bO!/mQWO1G2hOH}QWO1G2eO#=[QWO1G2eOOQQ1G2f1G2fOH}QWO1G2fO#=aQWO1G2fO#=iQ&jO'#GdOOQQ1G2h1G2hO!&qQ&jO'#ISO!/rQ`O1G2kOOQQ1G2k1G2kOOQQ,5=U,5=UO#=qQ#tO,5=WO5qQWO,5=WO#4oQWO,5=ZO5_QWO,5=ZO!,lQpO,5=ZO!,tQ#tO,5=ZO5vQ#tO,5=ZO#>SQWO'#J_O#>_QWO,5=[OOQQ1G.i1G.iO#>dQ!LYO1G.iO#>oQWO1G.iO!(ZQWO1G.iO5iQ!LYO1G.iO#>tQbO,5?|O#?OQWO,5?|O#?ZQYO,5=cO#?bQWO,5=cO7VQWO,5?|OOQQ1G2{1G2{O`QYO1G2{OOQQ1G3R1G3ROOQQ1G3T1G3TO:XQWO1G3VO#?gQYO1G3XO#CbQYO'#HWOOQQ1G3[1G3[O:^QWO1G3bO#CoQWO1G3bO5iQ!LYO1G3fOOQQ1G3h1G3hOOQ!LQ'#Ft'#FtO5iQ!LYO1G3jO5iQ!LYO1G3lOOOS1G4y1G4yO#CwQ`O,5<PO#DPQbO1G3uO#DZQWO1G4zO#DcQWO1G5UO#DkQWO,5?bOLRQYO,5:wO7VQWO,5:wO:^QWO,59yOLRQYO,59yO!,lQpO,59yO#DpQ7^O,59yOOQO,5:w,5:wO#DzQ&jO'#HpO#EbQWO,5?aOOQ!LS1G/d1G/dO#EjQ&jO'#HuO#FOQWO,5?lOOQ!LQ1G0b1G0bO!:eQ&jO,59yO#FWQbO1G5VOOQO,5>`,5>`O7VQWO,5>`OOQO-E;r-E;rOOQ!LQ'#EO'#EOO#FbQ!LrO'#EPO!?bQ&jO'#DyOOQO'#Hs'#HsO#F|Q&jO,5:dOOQ!LS,5:d,5:dO#GTQ&jO'#DyO#GfQ&jO'#DyO#GmQ&jO'#EUO#GpQ&jO'#EPO#G}Q&jO'#EPO!?bQ&jO'#EPO#HbQWO1G/{O#HgQ`O1G/{OOQ!LS1G/{1G/{O){QYO1G/{OH}QWO1G/{OOQ!LS1G0]1G0]O:^QWO1G0]O!,lQpO1G0]O!,tQ#tO1G0]O#HnQ!LdO1G5SO){QYO1G5SO#IOQ!LYO1G5SO#IaQWO1G5RO7VQWO,5>bOOQO,5>b,5>bO#IiQWO,5>bOOQO-E;t-E;tO#IaQWO1G5RO#IwQ!LdO,59gO#KvQ!LdO,5<QO#MxQ!LdO,5<SO$ zQ!LdO,5<bOOQ!LS7+%x7+%xO$$SQ!LdO7+%xO$$sQWO'#HqO$$}QWO,5?cOOQ!LS1G/n1G/nO$%VQYO'#HrO$%dQWO,5?dO$%lQbO,5?dOOQ!LS1G/s1G/sOOQ!LS7+&R7+&RO$%vQ7^O,5:YO){QYO7+&eO$&QQ7^O,5:QOOQO1G1Z1G1ZOOQO1G1[1G1[O$&_QMhO,5;rOLRQYO,5;qOOQO-E;u-E;uOOQ!LS7+&s7+&sOOOO7+&|7+&|OOOO1G1e1G1eO$&jQWO1G1eOOQ!LS1G1g1G1gO$&oQ`O,5?YOOOS-E;k-E;kOOQ!LS1G/O1G/OO$&vQ!LdO7+'SOOQ!LS,5>g,5>gO$'gQWO,5>gOOQ!LS1G1{1G1{P$'lQWO'#H{POQ!LS-E;y-E;yO$(]Q#tO1G2WO$)OQ#tO1G2YO$)YQ#tO1G2[OOQ!LS1G1t1G1tO$)aQWO'#HzO$)oQWO,5?sO$)oQWO,5?sO$)wQWO,5?sO$*SQWO,5?sOOQO1G1v1G1vO$*bQ#tO1G1uO$*rQWO'#H|O$+SQWO,5?tOH}QWO,5?tO$+[Q`O,5?tOOQ!LS1G1y1G1yO5iQ!LYO,5<dO5iQ!LYO,5<eO$+fQWO,5<eO#4jQWO,5<eO!,lQpO,5<dO$+kQWO,5<fO5iQ!LYO,5<gO$+fQWO,5<jOOQO-E;{-E;{OOQ!LS1G1}1G1}O!&qQ&jO,5<dO$+sQWO,5<eO!&qQ&jO,5<fO!&qQ&jO,5<eO$,OQ#tO1G4qO$,YQ#tO1G4qOOQO,5>j,5>jOOQO-E;|-E;|O!-lQ&jO,59iO){QYO,59iO$,gQWO1G1pOJ^QWO1G1wO$,lQ!LdO7+'TOOQ!LS7+'T7+'TOF}QYO7+'TOOQ!LS7+%W7+%WO$-]Q`O'#JZO#HbQWO7+'xO$-gQWO7+'xO$-oQ`O7+'xOOQQ7+'x7+'xOH}QWO7+'xO){QYO7+'xOH}QWO7+'xOOQO1G.v1G.vO$-yQ!LbO'#CgO$.ZQ!LbO,5<hO$.xQWO,5<hOOQ!LQ1G4m1G4mOOQQ7+$^7+$^O:^QWO7+$^O!,lQpO7+$^OF}QYO7+%xO$.}QWO'#IVO$/]QWO,5?{OOQO1G2z1G2zO5qQWO,5?{O$/]QWO,5?{O$/eQWO,5?{OOQO,5>r,5>rOOQO-E<U-E<UOOQ!LS7+&m7+&mO$/jQWO7+(eO5iQ!LYO7+(eO5qQWO7+(eO$/oQWO7+(eO$/tQWO7+'xOOQ!LQ,5>l,5>lOOQ!LQ-E<O-E<OOOQQ7+(S7+(SO$0SQ!LbO7+(POH}QWO7+(PO$0^Q`O7+(QOOQQ7+(Q7+(QOH}QWO7+(QO$0eQWO'#J^O$0pQWO,5=OOOQO,5>n,5>nOOQO-E<Q-E<QOOQQ7+(V7+(VO$1jQ&jO'#GmOOQQ1G2r1G2rOH}QWO1G2rO){QYO1G2rOH}QWO1G2rO$1qQWO1G2rO$2PQ#tO1G2rO5iQ!LYO1G2uO#4oQWO1G2uO5_QWO1G2uO!,lQpO1G2uO!,tQ#tO1G2uO$2bQWO'#IUO$2mQWO,5?yO$2uQ&jO,5?yOOQ!LQ1G2v1G2vOOQQ7+$T7+$TO$2zQWO7+$TO5iQ!LYO7+$TO$3PQWO7+$TO){QYO1G5hO){QYO1G5iO$3UQYO1G2}O$3]QWO1G2}O$3bQYO1G2}O$3iQ!LYO1G5hOOQQ7+(g7+(gO5iQ!LYO7+(qO`QYO7+(sOOQQ'#Jd'#JdOOQQ'#IX'#IXO$3sQYO,5=rOOQQ,5=r,5=rO){QYO'#HXO$4QQWO'#HZOOQQ7+(|7+(|O$4VQYO7+(|O7VQWO7+(|OOQQ7+)Q7+)QOOQQ7+)U7+)UOOQQ7+)W7+)WOOQO1G4|1G4|O$8TQ7^O1G0cO$8_QWO1G0cOOQO1G/e1G/eO$8jQ7^O1G/eO:^QWO1G/eOLRQYO'#D_OOQO,5>[,5>[OOQO-E;n-E;nOOQO,5>a,5>aOOQO-E;s-E;sO!,lQpO1G/eOOQO1G3z1G3zO:^QWO,5:eOOQO,5:k,5:kO){QYO,5:kO$8tQ!LYO,5:kO$9PQ!LYO,5:kO!,lQpO,5:eOOQO-E;q-E;qOOQ!LS1G0O1G0OO!?bQ&jO,5:eO$9_Q&jO,5:eO$9pQ!LrO,5:kO$:[Q&jO,5:eO!?bQ&jO,5:kOOQO,5:p,5:pO$:cQ&jO,5:kO$:pQ!LYO,5:kOOQ!LS7+%g7+%gO#HbQWO7+%gO#HgQ`O7+%gOOQ!LS7+%w7+%wO:^QWO7+%wO!,lQpO7+%wO$;UQ!LdO7+*nO){QYO7+*nOOQO1G3|1G3|O7VQWO1G3|O$;fQWO7+*mO$;nQ!LdO1G2WO$=pQ!LdO1G2YO$?rQ!LdO1G1uO$AzQ#tO,5>]OOQO-E;o-E;oO$BUQbO,5>^O){QYO,5>^OOQO-E;p-E;pO$B`QWO1G5OO$BhQ7^O1G0^O$DoQ7^O1G0iO$DvQ7^O1G0iO$FwQ7^O1G0iO$GOQ7^O1G0iO$HsQ7^O1G0iO$IWQ7^O1G0iO$KeQ7^O1G0iO$KlQ7^O1G0iO$MmQ7^O1G0iO$MtQ7^O1G0iO% iQ7^O1G0iO% |Q!LdO<<JPO%!mQ7^O1G0iO%$]Q7^O'#IlO%&YQ7^O1G0|OLRQYO'#FYOOQO'#JV'#JVOOQO1G1^1G1^O%&gQWO1G1]O%&lQ7^O,5>eOOOO7+'P7+'POOOS1G4t1G4tOOQ!LS1G4R1G4ROJ^QWO7+'vO%&vQWO,5>fO5qQWO,5>fOOQO-E;x-E;xO%'UQWO1G5_O%'UQWO1G5_O%'^QWO1G5_O%'iQ`O,5>hO%'sQWO,5>hOH}QWO,5>hOOQO-E;z-E;zO%'xQ`O1G5`O%(SQWO1G5`OOQO1G2O1G2OOOQO1G2P1G2PO5iQ!LYO1G2PO$+fQWO1G2PO5iQ!LYO1G2OO%([QWO1G2QOH}QWO1G2QOOQO1G2R1G2RO5iQ!LYO1G2UO!,lQpO1G2OO#4jQWO1G2PO%(aQWO1G2QO%(iQWO1G2POJ^QWO7+*]OOQ!LS1G/T1G/TO%(tQWO1G/TOOQ!LS7+'[7+'[O%(yQ#tO7+'cO%)ZQ!LdO<<JoOOQ!LS<<Jo<<JoOH}QWO'#IPO%)zQWO,5?uOOQQ<<Kd<<KdOH}QWO<<KdO#HbQWO<<KdO%*SQWO<<KdO%*[Q`O<<KdOH}QWO1G2SOOQQ<<Gx<<GxO:^QWO<<GxO%*fQ!LdO<<IdOOQ!LS<<Id<<IdOOQO,5>q,5>qO%+VQWO,5>qO#;kQWO,5>qOOQO-E<T-E<TO%+[QWO1G5gO%+[QWO1G5gO5qQWO1G5gO%+dQWO<<LPOOQQ<<LP<<LPO%+iQWO<<LPO5iQ!LYO<<LPO){QYO<<KdOH}QWO<<KdOOQQ<<Kk<<KkO$0SQ!LbO<<KkOOQQ<<Kl<<KlO$0^Q`O<<KlO%+nQ&jO'#IRO%+yQWO,5?xOLRQYO,5?xOOQQ1G2j1G2jO#FbQ!LrO'#EPO!?bQ&jO'#GnOOQO'#IT'#ITO%,RQ&jO,5=XOOQQ,5=X,5=XO%,YQ&jO'#EPO%,eQ&jO'#EPO%,|Q&jO'#EPO%-WQ&jO'#GnO%-iQWO7+(^O%-nQWO7+(^O%-vQ`O7+(^OOQQ7+(^7+(^OH}QWO7+(^O){QYO7+(^OH}QWO7+(^O%.QQWO7+(^OOQQ7+(a7+(aO5iQ!LYO7+(aO#4oQWO7+(aO5_QWO7+(aO!,lQpO7+(aO%.`QWO,5>pOOQO-E<S-E<SOOQO'#Gq'#GqO%.kQWO1G5eO5iQ!LYO<<GoOOQQ<<Go<<GoO%.sQWO<<GoO%.xQWO7++SO%.}QWO7++TOOQQ7+(i7+(iO%/SQWO7+(iO%/XQYO7+(iO%/`QWO7+(iO){QYO7++SO){QYO7++TOOQQ<<L]<<L]OOQQ<<L_<<L_OOQQ-E<V-E<VOOQQ1G3^1G3^O%/eQWO,5=sOOQQ,5=u,5=uO:^QWO<<LhO%/jQWO<<LhOLRQYO7+%}OOQO7+%P7+%PO%/oQ7^O1G5VO:^QWO7+%POOQO1G0P1G0PO%/yQ!LdO1G0VOOQO1G0V1G0VO){QYO1G0VO%0TQ!LYO1G0VO:^QWO1G0PO!,lQpO1G0PO!?bQ&jO1G0PO%0`Q!LYO1G0VO%0nQ&jO1G0PO%1PQ!LYO1G0VO%1eQ!LrO1G0VO%1oQ&jO1G0PO!?bQ&jO1G0VOOQ!LS<<IR<<IROOQ!LS<<Ic<<IcO:^QWO<<IcO%1vQ!LdO<<NYOOQO7+)h7+)hO%2WQ!LdO7+'cO%4`QbO1G3xO%4jQ7^O7+%xO%4wQ7^O,59gO%6tQ7^O,5<QO%8qQ7^O,5<SO%:nQ7^O,5<bO%<^Q7^O7+'SO%<kQ7^O7+'TO%<xQWO,5;tOOQO7+&w7+&wO%<}Q#tO<<KbOOQO1G4Q1G4QO%=_QWO1G4QO%=jQWO1G4QO%=xQWO7+*yO%=xQWO7+*yOH}QWO1G4SO%>QQ`O1G4SO%>[QWO7+*zOOQO7+'k7+'kO5iQ!LYO7+'kOOQO7+'j7+'jO$+fQWO7+'lO%>dQ`O7+'lOOQO7+'p7+'pO5iQ!LYO7+'jO$+fQWO7+'kO%>kQWO7+'lOH}QWO7+'lO#4jQWO7+'kO%>pQ#tO<<MwOOQ!LS7+$o7+$oO%>zQ`O,5>kOOQO-E;}-E;}O#HbQWOANAOOOQQANAOANAOOH}QWOANAOO%?UQ!LbO7+'nOOQQAN=dAN=dO5qQWO1G4]OOQO1G4]1G4]O%?cQWO1G4]O%?hQWO7++RO%?hQWO7++RO5iQ!LYOANAkO%?pQWOANAkOOQQANAkANAkO%?uQWOANAOO%?}Q`OANAOOOQQANAVANAVOOQQANAWANAWO%@XQWO,5>mOOQO-E<P-E<PO%@dQ7^O1G5dO#4oQWO,5=YO5_QWO,5=YO!,lQpO,5=YOOQO-E<R-E<ROOQQ1G2s1G2sO$9pQ!LrO,5:kO!?bQ&jO,5=YO%@nQ&jO,5=YO%APQ&jO,5:kOOQQ<<Kx<<KxOH}QWO<<KxO%-iQWO<<KxO%AZQWO<<KxO%AcQ`O<<KxO){QYO<<KxOH}QWO<<KxOOQQ<<K{<<K{O5iQ!LYO<<K{O#4oQWO<<K{O5_QWO<<K{O%AmQ&jO1G4[O%ArQWO7++POOQQAN=ZAN=ZO5iQ!LYOAN=ZOOQQ<<Nn<<NnOOQQ<<No<<NoOOQQ<<LT<<LTO%AzQWO<<LTO%BPQYO<<LTO%BWQWO<<NnO%B]QWO<<NoOOQQ1G3_1G3_OOQQANBSANBSO:^QWOANBSO%BbQ7^O<<IiOOQO<<Hk<<HkOOQO7+%q7+%qO%/yQ!LdO7+%qO){QYO7+%qOOQO7+%k7+%kO:^QWO7+%kO!,lQpO7+%kO%BlQ!LYO7+%qO!?bQ&jO7+%kO%BwQ!LYO7+%qO%CVQ&jO7+%kO%ChQ!LYO7+%qOOQ!LSAN>}AN>}O%C|Q!LdO<<KbO%FUQ7^O<<JPO%FcQ7^O1G1uO%HRQ7^O1G2WO%JOQ7^O1G2YO%K{Q7^O<<JoO%LYQ7^O<<IdOOQO1G1`1G1`OOQO7+)l7+)lO%LgQWO7+)lO%LrQWO<<NeO%LzQ`O7+)nOOQO<<KV<<KVO5iQ!LYO<<KWO$+fQWO<<KWOOQO<<KU<<KUO5iQ!LYO<<KVO%MUQ`O<<KWO$+fQWO<<KVOOQQG26jG26jO#HbQWOG26jOOQO7+)w7+)wO5qQWO7+)wO%M]QWO<<NmOOQQG27VG27VO5iQ!LYOG27VOH}QWOG26jOLRQYO1G4XO%MeQWO7++OO5iQ!LYO1G2tO#4oQWO1G2tO5_QWO1G2tO!,lQpO1G2tO!?bQ&jO1G2tO%1eQ!LrO1G0VO%MmQ&jO1G2tO%-iQWOANAdOOQQANAdANAdOH}QWOANAdO%NOQWOANAdO%NWQ`OANAdOOQQANAgANAgO5iQ!LYOANAgO#4oQWOANAgOOQO'#Gr'#GrOOQO7+)v7+)vOOQQG22uG22uOOQQANAoANAoO%NbQWOANAoOOQQANDYANDYOOQQANDZANDZO%NgQYOG27nOOQO<<I]<<I]O%/yQ!LdO<<I]OOQO<<IV<<IVO:^QWO<<IVO){QYO<<I]O!,lQpO<<IVO&$eQ!LYO<<I]O!?bQ&jO<<IVO&$pQ!LYO<<I]O&%OQ7^O7+'cOOQO<<MW<<MWOOQOAN@rAN@rO5iQ!LYOAN@rOOQOAN@qAN@qO$+fQWOAN@rO5iQ!LYOAN@qOOQQLD,ULD,UOOQO<<Mc<<McOOQQLD,qLD,qO#HbQWOLD,UO&&nQ7^O7+)sOOQO7+(`7+(`O5iQ!LYO7+(`O#4oQWO7+(`O5_QWO7+(`O!,lQpO7+(`O!?bQ&jO7+(`OOQQG27OG27OO%-iQWOG27OOH}QWOG27OOOQQG27RG27RO5iQ!LYOG27ROOQQG27ZG27ZO:^QWOLD-YOOQOAN>wAN>wOOQOAN>qAN>qO%/yQ!LdOAN>wO:^QWOAN>qO){QYOAN>wO!,lQpOAN>qO&&xQ!LYOAN>wO&'TQ7^O<<KbOOQOG26^G26^O5iQ!LYOG26^OOQOG26]G26]OOQQ!$( p!$( pOOQO<<Kz<<KzO5iQ!LYO<<KzO#4oQWO<<KzO5_QWO<<KzO!,lQpO<<KzOOQQLD,jLD,jO%-iQWOLD,jOOQQLD,mLD,mOOQQ!$(!t!$(!tOOQOG24cG24cOOQOG24]G24]O%/yQ!LdOG24cO:^QWOG24]O){QYOG24cOOQOLD+xLD+xOOQOANAfANAfO5iQ!LYOANAfO#4oQWOANAfO5_QWOANAfOOQQ!$(!U!$(!UOOQOLD)}LD)}OOQOLD)wLD)wO%/yQ!LdOLD)}OOQOG27QG27QO5iQ!LYOG27QO#4oQWOG27QOOQO!$'Mi!$'MiOOQOLD,lLD,lO5iQ!LYOLD,lOOQO!$(!W!$(!WOLRQYO'#DnO&(sQbO'#IqOLRQYO'#DfO&(zQ!LdO'#CgO&)eQbO'#CgO&)uQYO,5:rOLRQYO,5:}OLRQYO,5:}OLRQYO,5:}OLRQYO,5:}OLRQYO,5:}OLRQYO,5:}OLRQYO,5:}OLRQYO,5:}OLRQYO,5:}OLRQYO,5:}OLRQYO,5:}OLRQYO'#HyO&+uQWO,5<PO&-XQWO,5:}OLRQYO,5;bO!(ZQWO'#C{O!(ZQWO'#C{OH}QWO'#FfO&+}QWO'#FfOH}QWO'#FhO&+}QWO'#FhOH}QWO'#FvO&+}QWO'#FvOLRQYO,5?kO&)uQYO1G0^O&-`Q7^O'#CgOLRQYO1G1hOH}QWO,5<lO&+}QWO,5<lOH}QWO,5<nO&+}QWO,5<nOH}QWO,5<ZO&+}QWO,5<ZO&)uQYO1G1iOLRQYO7+&eOH}QWO1G1wO&+}QWO1G1wO&)uQYO7+'TO&)uQYO7+%xOH}QWO7+'vO&+}QWO7+'vO&-jQWO'#EWO&-oQWO'#EWO&-wQWO'#EvO&-|QWO'#EcO&.RQWO'#JPO&.^QWO'#I}O&.iQWO,5:rO&.nQ#tO,5;|O&.uQWO'#FoO&.zQWO'#FoO&/PQWO,5;}O&/XQWO,5:rO&/aQ7^O1G0yO&/hQWO,5<]O&/mQWO,5<]O&/rQWO1G1iO&/wQWO1G0^O&/|Q#tO1G2[O&0TQ#tO1G2[O4QQWO'#FdO5_QWO'#FcOBqQWO'#EVOLRQYO,5;_O!(jQWO'#FqO!(jQWO'#FqOJ^QWO,5<pOJ^QWO,5<p",
        stateData: "&1Q~O'TOS'UOSSOSTOS~OPTOQTOWyO]cO^hOanObmOgcOiTOjcOkcOnTOpTOuROwcOxcOycO!PSO!ZkO!`UO!cTO!dTO!eTO!fTO!gTO!jlO#`sO#ppO#t^O${qO$}tO%PrO%QrO%TuO%VvO%YwO%ZwO%]xO%jzO%p{O%r|O%t}O%v!OO%y!PO&P!QO&T!RO&V!SO&X!TO&Z!UO&]!VO'WPO'aQO'mYO'zaO~OPZXYZX^ZXiZXrZXsZXuZX}ZX!]ZX!^ZX!`ZX!fZX!wZX#ScX#WZX#XZX#YZX#ZZX#[ZX#]ZX#^ZX#_ZX#aZX#cZX#eZX#fZX#kZX'RZX'aZX'nZX'uZX'vZX~O!X$hX~P$zO'O!XO'P!WO'Q!ZO~OPTOQTO]cOa!jOb!iOgcOiTOjcOkcOnTOpTOuROwcOxcOycO!P!bO!ZkO!`UO!cTO!dTO!eTO!fTO!gTO!j!hO#p!kO#t^O'W![O'aQO'mYO'zaO~O|!`O}!]Oz'hPz'rP~P'dO!O!lO~P`OPTOQTO]cOa!jOb!iOgcOiTOjcOkcOnTOpTOuROwcOxcOycO!P!bO!ZkO!`UO!cTO!dTO!eTO!fTO!gTO!j!hO#p!kO#t^O'W9VO'aQO'mYO'zaO~OPTOQTO]cOa!jOb!iOgcOiTOjcOkcOnTOpTOuROwcOxcOycO!P!bO!ZkO!`UO!cTO!dTO!eTO!fTO!gTO!j!hO#p!kO#t^O'aQO'mYO'zaO~O|!qO#Q!tO#R!qO'W9WO!_'oP~P+{O#S!uO~O!X!vO#S!uO~OP#]OY#cOi#QOr!zOs!zOu!{O}#aO!]#SO!^!xO!`!yO!f#]O#W#OO#X#PO#Y#PO#Z#PO#[#RO#]#SO#^#SO#_#SO#a#TO#c#VO#e#XO#f#YO'aQO'n#ZO'u!|O'v!}O~O^'eX'R'eX!_'eXz'eX!P'eX$|'eX!X'eX~P.jO!w#dO#k#dOP'fXY'fX^'fXi'fXr'fXs'fXu'fX}'fX!]'fX!^'fX!`'fX!f'fX#W'fX#X'fX#Y'fX#Z'fX#['fX#]'fX#^'fX#a'fX#c'fX#e'fX#f'fX'a'fX'n'fX'u'fX'v'fX~O#_'fX'R'fXz'fX!_'fX'c'fX!P'fX$|'fX!X'fX~P0zO!w#dO~O#v#eO#}#iO~O!P#jO#t^O$Q#kO$S#mO~O]#pOg#}Oi#qOj#pOk#pOn$OOp$POu#wO!P#xO!Z$UO!`#uO#R$VO#p$SO$Z$QO$]$RO$`$TO'W#oO'a#rO'['^P~O!`$WO~O!X$YO~O^$ZO'R$ZO~O'W$_O~O!`$WO'W$_O'X$aO']$bO~Ob$hO!`$WO'W$_O~O#_#SO~O]$qOr$mO!P$jO!`$lO$}$pO'W$_O'X$aO[(SP~O!j$rO~Ou$sO!P$tO'W$_O~Ou$sO!P$tO%V$xO'W$_O~O'W$yO~O#`sO$}tO%PrO%QrO%TuO%VvO%YwO%ZwO~Oa%SOb%RO!j%PO${%QO%_%OO~P7uOa%VObmO!P%UO!jlO#`sO${qO%PrO%QrO%TuO%VvO%YwO%ZwO%]xO~O_%YO!w%]O$}%WO'X$aO~P8tO!`%^O!c%bO~O!`%cO~O!PSO~O^$ZO&}%kO'R$ZO~O^$ZO&}%nO'R$ZO~O^$ZO&}%pO'R$ZO~O'O!XO'P!WO'Q%tO~OPZXYZXiZXrZXsZXuZX}ZX}cX!]ZX!^ZX!`ZX!fZX!wZX!wcX#ScX#WZX#XZX#YZX#ZZX#[ZX#]ZX#^ZX#_ZX#aZX#cZX#eZX#fZX#kZX'aZX'nZX'uZX'vZX~OzZXzcX~P;aO|%vOz&cX}&cX~P){O}!]Oz'hX~OP#]OY#cOi#QOr!zOs!zOu!{O}!]O!]#SO!^!xO!`!yO!f#]O#W#OO#X#PO#Y#PO#Z#PO#[#RO#]#SO#^#SO#_#SO#a#TO#c#VO#e#XO#f#YO'aQO'n#ZO'u!|O'v!}O~Oz'hX~P>WOz%{O~Ou&OO!S&YO!T&RO!U&RO'X$aO~O]&POj&PO|&SO'd%|O!O'iP!O'tP~P@ZOz'qX}'qX!X'qX!_'qX'n'qX~O!w'qX#S!{X!O'qX~PASO!w&ZOz'sX}'sX~O}&[Oz'rX~Oz&^O~O!w#dO~PASOR&bO!P&_O!k&aO'W$_O~Ob&gO!`$WO'W$_O~Or$mO!`$lO~O!O&hO~P`Or!zOs!zOu!{O!^!xO!`!yO'aQOP!baY!bai!ba}!ba!]!ba!f!ba#W!ba#X!ba#Y!ba#Z!ba#[!ba#]!ba#^!ba#_!ba#a!ba#c!ba#e!ba#f!ba'n!ba'u!ba'v!ba~O^!ba'R!baz!ba!_!ba'c!ba!P!ba$|!ba!X!ba~PC]O!_&iO~O!X!vO!w&kO'n&jO}'pX^'pX'R'pX~O!_'pX~PEuO}&oO!_'oX~O!_&qO~Ou$sO!P$tO#R&rO'W$_O~OPTOQTO]cOa!jOb!iOgcOiTOjcOkcOnTOpTOuROwcOxcOycO!PSO!ZkO!`UO!cTO!dTO!eTO!fTO!gTO!j!hO#p!kO#t^O'W9VO'aQO'mYO'zaO~O]#pOg#}Oi#qOj#pOk#pOn$OOp9iOu#wO!P#xO!Z:lO!`#uO#R9oO#p$SO$Z9kO$]9mO$`$TO'W&vO'a#rO~O#S&xO~O]#pOg#}Oi#qOj#pOk#pOn$OOp$POu#wO!P#xO!Z$UO!`#uO#R$VO#p$SO$Z$QO$]$RO$`$TO'W&vO'a#rO~O'['kP~PJ^O|&|O!_'lP~P){O'd'OO'mYO~OP9SOQ9SO]cOa:jOb!iOgcOi9SOjcOkcOn9SOp9SOuROwcOxcOycO!P!bO!Z9UO!`UO!c9SO!d9SO!e9SO!f9SO!g9SO!j!hO#p!kO#t^O'W'^O'aQO'mYO'z:hO~O!`!yO~O}#aO^$Xa'R$Xa!_$Xaz$Xa!P$Xa$|$Xa!X$Xa~O#`'eO~PH}O!X'gO!P'wX#s'wX#v'wX#}'wX~Or'hO~PNyOr'hO!P'wX#s'wX#v'wX#}'wX~O!P'jO#s'nO#v'iO#}'oO~O|'rO~PLRO#v#eO#}'uO~Or$aXu$aX!^$aX'n$aX'u$aX'v$aX~OReX}eX!weX'[eX'[$aX~P!!cOj'wO~O'O'yO'P'xO'Q'{O~Or'}Ou(OO'n#ZO'u(QO'v(SO~O'['|O~P!#lO'[(VO~O]#pOg#}Oi#qOj#pOk#pOn$OOp9iOu#wO!P#xO!Z:lO!`#uO#R9oO#p$SO$Z9kO$]9mO$`$TO'a#rO~O|(ZO'W(WO!_'{P~P!$ZO#S(]O~O|(aO'W(^Oz'|P~P!$ZO^(jOi(oOu(gO!S(mO!T(fO!U(fO!`(dO!t(nO$s(iO'X$aO'd(cO~O!O(lO~P!&RO!^!xOr'`Xu'`X'n'`X'u'`X'v'`X}'`X!w'`X~O'['`X#i'`X~P!&}OR(rO!w(qO}'_X'['_X~O}(sO'['^X~O'W(uO~O!`(zO~O'W&vO~O!`(dO~Ou$sO|!qO!P$tO#Q!tO#R!qO'W$_O!_'oP~O!X!vO#S)OO~OP#]OY#cOi#QOr!zOs!zOu!{O!]#SO!^!xO!`!yO!f#]O#W#OO#X#PO#Y#PO#Z#PO#[#RO#]#SO#^#SO#_#SO#a#TO#c#VO#e#XO#f#YO'aQO'n#ZO'u!|O'v!}O~O^!Ya}!Ya'R!Yaz!Ya!_!Ya'c!Ya!P!Ya$|!Ya!X!Ya~P!)`OR)WO!P&_O!k)VO$|)UO']$bO~O'W$yO'['^P~O!X)ZO!P'ZX^'ZX'R'ZX~O!`$WO']$bO~O!`$WO'W$_O']$bO~O!X!vO#S&xO~O$})gO'W)cO!O(TP~O})hO[(SX~O'd'OO~OY)lO~O[)mO~O!P$jO'W$_O'X$aO[(SP~Ou$sO|)rO!P$tO'W$_Oz'rP~O]&VOj&VO|)sO'd'OO!O'tP~O})tO^(PX'R(PX~O!w)xO']$bO~OR){O!P#xO']$bO~O!P)}O~Or*PO!PSO~O!j*UO~Ob*ZO~O'W(uO!O(RP~Ob$hO~O$}tO'W$yO~P8tOY*aO[*`O~OPTOQTO]cOanObmOgcOiTOjcOkcOnTOpTOuROwcOxcOycO!ZkO!`UO!cTO!dTO!eTO!fTO!gTO!jlO#t^O${qO'aQO'mYO'zaO~O!P!bO#p!kO'W9VO~P!0uO[*`O^$ZO'R$ZO~O^*eO#`*gO%P*gO%Q*gO~P){O!`%^O~O%p*lO~O!P*nO~O&Q*qO&R*pOP&OaQ&OaW&Oa]&Oa^&Oaa&Oab&Oag&Oai&Oaj&Oak&Oan&Oap&Oau&Oaw&Oax&Oay&Oa!P&Oa!Z&Oa!`&Oa!c&Oa!d&Oa!e&Oa!f&Oa!g&Oa!j&Oa#`&Oa#p&Oa#t&Oa${&Oa$}&Oa%P&Oa%Q&Oa%T&Oa%V&Oa%Y&Oa%Z&Oa%]&Oa%j&Oa%p&Oa%r&Oa%t&Oa%v&Oa%y&Oa&P&Oa&T&Oa&V&Oa&X&Oa&Z&Oa&]&Oa&|&Oa'W&Oa'a&Oa'm&Oa'z&Oa!O&Oa%w&Oa_&Oa%|&Oa~O'W*tO~O'c*wO~Oz&ca}&ca~P!)`O}!]Oz'ha~Oz'ha~P>WO}&[Oz'ra~O}tX}!VX!OtX!O!VX!XtX!X!VX!`!VX!wtX']!VX~O!X+OO!w*}O}#PX}'jX!O#PX!O'jX!X'jX!`'jX']'jX~O!X+QO!`$WO']$bO}!RX!O!RX~O]%}Oj%}Ou&OO'd(cO~OP9SOQ9SO]cOa:jOb!iOgcOi9SOjcOkcOn9SOp9SOuROwcOxcOycO!P!bO!Z9UO!`UO!c9SO!d9SO!e9SO!f9SO!g9SO!j!hO#p!kO#t^O'aQO'mYO'z:hO~O'W9sO~P!:sO}+UO!O'iX~O!O+WO~O!X+OO!w*}O}#PX!O#PX~O}+XO!O'tX~O!O+ZO~O]%}Oj%}Ou&OO'X$aO'd(cO~O!T+[O!U+[O~P!=qOu$sO|+_O!P$tO'W$_Oz&hX}&hX~O^+dO!S+gO!T+cO!U+cO!n+kO!o+iO!p+jO!q+hO!t+lO'X$aO'd(cO'm+aO~O!O+fO~P!>rOR+qO!P&_O!k+pO~O!w+wO}'pa!_'pa^'pa'R'pa~O!X!vO~P!?|O}&oO!_'oa~Ou$sO|+zO!P$tO#Q+|O#R+zO'W$_O}&jX!_&jX~O^!zi}!zi'R!ziz!zi!_!zi'c!zi!P!zi$|!zi!X!zi~P!)`O#S!va}!va!_!va!w!va!P!va^!va'R!vaz!va~P!#lO#S'`XP'`XY'`X^'`Xi'`Xs'`X!]'`X!`'`X!f'`X#W'`X#X'`X#Y'`X#Z'`X#['`X#]'`X#^'`X#_'`X#a'`X#c'`X#e'`X#f'`X'R'`X'a'`X!_'`Xz'`X!P'`X'c'`X$|'`X!X'`X~P!&}O},VO'['kX~P!#lO'[,XO~O},YO!_'lX~P!)`O!_,]O~Oz,^O~OP#]Or!zOs!zOu!{O!^!xO!`!yO!f#]O'aQOY#Vi^#Vii#Vi}#Vi!]#Vi#X#Vi#Y#Vi#Z#Vi#[#Vi#]#Vi#^#Vi#_#Vi#a#Vi#c#Vi#e#Vi#f#Vi'R#Vi'n#Vi'u#Vi'v#Viz#Vi!_#Vi'c#Vi!P#Vi$|#Vi!X#Vi~O#W#Vi~P!EZO#W#OO~P!EZOP#]Or!zOs!zOu!{O!^!xO!`!yO!f#]O#W#OO#X#PO#Y#PO#Z#PO'aQOY#Vi^#Vi}#Vi!]#Vi#[#Vi#]#Vi#^#Vi#_#Vi#a#Vi#c#Vi#e#Vi#f#Vi'R#Vi'n#Vi'u#Vi'v#Viz#Vi!_#Vi'c#Vi!P#Vi$|#Vi!X#Vi~Oi#Vi~P!GuOi#QO~P!GuOP#]Oi#QOr!zOs!zOu!{O!^!xO!`!yO!f#]O#W#OO#X#PO#Y#PO#Z#PO#[#RO'aQO^#Vi}#Vi#a#Vi#c#Vi#e#Vi#f#Vi'R#Vi'n#Vi'u#Vi'v#Viz#Vi!_#Vi'c#Vi!P#Vi$|#Vi!X#Vi~OY#Vi!]#Vi#]#Vi#^#Vi#_#Vi~P!JaOY#cO!]#SO#]#SO#^#SO#_#SO~P!JaOP#]OY#cOi#QOr!zOs!zOu!{O!]#SO!^!xO!`!yO!f#]O#W#OO#X#PO#Y#PO#Z#PO#[#RO#]#SO#^#SO#_#SO#a#TO'aQO^#Vi}#Vi#c#Vi#e#Vi#f#Vi'R#Vi'n#Vi'v#Viz#Vi!_#Vi'c#Vi!P#Vi$|#Vi!X#Vi~O'u#Vi~P!MXO'u!|O~P!MXOP#]OY#cOi#QOr!zOs!zOu!{O!]#SO!^!xO!`!yO!f#]O#W#OO#X#PO#Y#PO#Z#PO#[#RO#]#SO#^#SO#_#SO#a#TO#c#VO'aQO'u!|O^#Vi}#Vi#e#Vi#f#Vi'R#Vi'n#Viz#Vi!_#Vi'c#Vi!P#Vi$|#Vi!X#Vi~O'v#Vi~P# sO'v!}O~P# sOP#]OY#cOi#QOr!zOs!zOu!{O!]#SO!^!xO!`!yO!f#]O#W#OO#X#PO#Y#PO#Z#PO#[#RO#]#SO#^#SO#_#SO#a#TO#c#VO#e#XO'aQO'u!|O'v!}O~O^#Vi}#Vi#f#Vi'R#Vi'n#Viz#Vi!_#Vi'c#Vi!P#Vi$|#Vi!X#Vi~P#$_OPZXYZXiZXrZXsZXuZX!]ZX!^ZX!`ZX!fZX!wZX#ScX#WZX#XZX#YZX#ZZX#[ZX#]ZX#^ZX#_ZX#aZX#cZX#eZX#fZX#kZX'aZX'nZX'uZX'vZX}ZX!OZX~O#iZX~P#&rOP#]OY9gOi9[Or!zOs!zOu!{O!]9^O!^!xO!`!yO!f#]O#W9YO#X9ZO#Y9ZO#Z9ZO#[9]O#]9^O#^9^O#_9^O#a9_O#c9aO#e9cO#f9dO'aQO'n#ZO'u!|O'v!}O~O#i,`O~P#(|OP'fXY'fXi'fXr'fXs'fXu'fX!]'fX!^'fX!`'fX!f'fX#W'fX#X'fX#Y'fX#Z'fX#['fX#]'fX#^'fX#a'fX#c'fX#e'fX#f'fX'a'fX'n'fX'u'fX'v'fX}'fX~O!w9hO#k9hO#_'fX#i'fX!O'fX~P#*wO^&ma}&ma'R&ma!_&ma'c&maz&ma!P&ma$|&ma!X&ma~P!)`OP#ViY#Vi^#Vii#Vis#Vi}#Vi!]#Vi!^#Vi!`#Vi!f#Vi#W#Vi#X#Vi#Y#Vi#Z#Vi#[#Vi#]#Vi#^#Vi#_#Vi#a#Vi#c#Vi#e#Vi#f#Vi'R#Vi'a#Viz#Vi!_#Vi'c#Vi!P#Vi$|#Vi!X#Vi~P!#lO^#ji}#ji'R#jiz#ji!_#ji'c#ji!P#ji$|#ji!X#ji~P!)`O#v,bO~O#v,cO~O!X'gO!w,dO!P#zX#s#zX#v#zX#}#zX~O|,eO~O!P'jO#s,gO#v'iO#},hO~O}9eO!O'eX~P#(|O!O,iO~O#},kO~O'O'yO'P'xO'Q,nO~O],qOj,qOz,rO~O}cX!XcX!_cX!_$aX'ncX~P!!cO!_,xO~P!#lO},yO!X!vO'n&jO!_'{X~O!_-OO~Oz$aX}$aX!X$hX~P!!cO}-QOz'|X~P!#lO!X-SO~Oz-UO~O|(ZO'W$_O!_'{P~Oi-YO!X!vO!`$WO']$bO'n&jO~O!X)ZO~O!O-`O~P!&RO!T-aO!U-aO'X$aO'd(cO~Ou-cO'd(cO~O!t-dO~O'W$yO}&rX'[&rX~O}(sO'['^a~Or-iOs-iOu-jO'noa'uoa'voa}oa!woa~O'[oa#ioa~P#5{Or'}Ou(OO'n$Ya'u$Ya'v$Ya}$Ya!w$Ya~O'[$Ya#i$Ya~P#6qOr'}Ou(OO'n$[a'u$[a'v$[a}$[a!w$[a~O'[$[a#i$[a~P#7dO]-kO~O#S-lO~O'[$ja}$ja#i$ja!w$ja~P!#lO#S-oO~OR-xO!P&_O!k-wO$|-vO~O'[-yO~O]#pOi#qOj#pOk#pOn$OOp9iOu#wO!P#xO!Z:lO!`#uO#R9oO#p$SO$Z9kO$]9mO$`$TO'a#rO~Og-{O'W-zO~P#9ZO!X)ZO!P'Za^'Za'R'Za~O#S.RO~OYZX}cX!OcX~O}.SO!O(TX~O!O.UO~OY.VO~O'W)cO~O!P$jO'W$_O[&zX}&zX~O})hO[(Sa~O!_.[O~P!)`O].^O~OY._O~O[.`O~OR-xO!P&_O!k-wO$|-vO']$bO~O})tO^(Pa'R(Pa~O!w.fO~OR.iO!P#xO~O'd'OO!O(QP~OR.sO!P.oO!k.rO$|.qO']$bO~OY.}O}.{O!O(RX~O!O/OO~O[/QO^$ZO'R$ZO~O]/RO~O#_/TO%n/UO~P0zO!w#dO#_/TO%n/UO~O^/VO~P){O^/XO~O%w/]OP%uiQ%uiW%ui]%ui^%uia%uib%uig%uii%uij%uik%uin%uip%uiu%uiw%uix%uiy%ui!P%ui!Z%ui!`%ui!c%ui!d%ui!e%ui!f%ui!g%ui!j%ui#`%ui#p%ui#t%ui${%ui$}%ui%P%ui%Q%ui%T%ui%V%ui%Y%ui%Z%ui%]%ui%j%ui%p%ui%r%ui%t%ui%v%ui%y%ui&P%ui&T%ui&V%ui&X%ui&Z%ui&]%ui&|%ui'W%ui'a%ui'm%ui'z%ui!O%ui_%ui%|%ui~O_/cO!O/aO%|/bO~P`O!PSO!`/fO~O}#aO'c$Xa~Oz&ci}&ci~P!)`O}!]Oz'hi~O}&[Oz'ri~Oz/jO~O}!Ra!O!Ra~P#(|O]%}Oj%}O|/pO'd(cO}&dX!O&dX~P@ZO}+UO!O'ia~O]&VOj&VO|)sO'd'OO}&iX!O&iX~O}+XO!O'ta~Oz'si}'si~P!)`O^$ZO!X!vO!`$WO!f/{O!w/yO'R$ZO']$bO'n&jO~O!O0OO~P!>rO!T0PO!U0PO'X$aO'd(cO'm+aO~O!S0QO~P#GTO!PSO!S0QO!q0SO!t0TO~P#GTO!S0QO!o0VO!p0VO!q0SO!t0TO~P#GTO!P&_O~O!P&_O~P!#lO}'pi!_'pi^'pi'R'pi~P!)`O!w0`O}'pi!_'pi^'pi'R'pi~O}&oO!_'oi~Ou$sO!P$tO#R0bO'W$_O~O#SoaPoaYoa^oaioa!]oa!^oa!`oa!foa#Woa#Xoa#Yoa#Zoa#[oa#]oa#^oa#_oa#aoa#coa#eoa#foa'Roa'aoa!_oazoa!Poa'coa$|oa!Xoa~P#5{O#S$YaP$YaY$Ya^$Yai$Yas$Ya!]$Ya!^$Ya!`$Ya!f$Ya#W$Ya#X$Ya#Y$Ya#Z$Ya#[$Ya#]$Ya#^$Ya#_$Ya#a$Ya#c$Ya#e$Ya#f$Ya'R$Ya'a$Ya!_$Yaz$Ya!P$Ya'c$Ya$|$Ya!X$Ya~P#6qO#S$[aP$[aY$[a^$[ai$[as$[a!]$[a!^$[a!`$[a!f$[a#W$[a#X$[a#Y$[a#Z$[a#[$[a#]$[a#^$[a#_$[a#a$[a#c$[a#e$[a#f$[a'R$[a'a$[a!_$[az$[a!P$[a'c$[a$|$[a!X$[a~P#7dO#S$jaP$jaY$ja^$jai$jas$ja}$ja!]$ja!^$ja!`$ja!f$ja#W$ja#X$ja#Y$ja#Z$ja#[$ja#]$ja#^$ja#_$ja#a$ja#c$ja#e$ja#f$ja'R$ja'a$ja!_$jaz$ja!P$ja!w$ja'c$ja$|$ja!X$ja~P!#lO^!zq}!zq'R!zqz!zq!_!zq'c!zq!P!zq$|!zq!X!zq~P!)`O}&eX'[&eX~PJ^O},VO'['ka~O|0jO}&fX!_&fX~P){O},YO!_'la~O},YO!_'la~P!)`O#i!ba!O!ba~PC]O#i!Ya}!Ya!O!Ya~P#(|O!P0}O#t^O#{1OO~O!O1SO~O'c1TO~P!#lO^$Uq}$Uq'R$Uqz$Uq!_$Uq'c$Uq!P$Uq$|$Uq!X$Uq~P!)`Oz1UO~O],qOj,qO~Or'}Ou(OO'v(SO'n$ti'u$ti}$ti!w$ti~O'[$ti#i$ti~P$'tOr'}Ou(OO'n$vi'u$vi'v$vi}$vi!w$vi~O'[$vi#i$vi~P$(gO#i1VO~P!#lO|1XO'W$_O}&nX!_&nX~O},yO!_'{a~O},yO!X!vO!_'{a~O},yO!X!vO'n&jO!_'{a~O'[$ci}$ci#i$ci!w$ci~P!#lO|1`O'W(^Oz&pX}&pX~P!$ZO}-QOz'|a~O}-QOz'|a~P!#lO!X!vO~O!X!vO#_1jO~Oi1nO!X!vO'n&jO~O}'_i'['_i~P!#lO!w1qO}'_i'['_i~P!#lO!_1tO~O^$Vq}$Vq'R$Vqz$Vq!_$Vq'c$Vq!P$Vq$|$Vq!X$Vq~P!)`O}1xO!P'}X~P!#lO!P&_O$|1{O~O!P&_O$|1{O~P!#lO!P$aX$qZX^$aX'R$aX~P!!cO$q2POrfXufX!PfX'nfX'ufX'vfX^fX'RfX~O$q2PO~O$}2WO'W)cO}&yX!O&yX~O}.SO!O(Ta~OY2[O~O[2]O~O]2`O~OR2bO!P&_O!k2aO$|1{O~O^$ZO'R$ZO~P!#lO!P#xO~P!#lO}2gO!w2iO!O(QX~O!O2jO~Ou(gO!S2sO!T2lO!U2lO!n2rO!o2qO!p2qO!t2pO'X$aO'd(cO'm+aO~O!O2oO~P$0uOR2zO!P.oO!k2yO$|2xO~OR2zO!P.oO!k2yO$|2xO']$bO~O'W(uO}&xX!O&xX~O}.{O!O(Ra~O'd3TO~O]3VO~O[3XO~O!_3[O~P){O^3^O~O^3^O~P){O#_3`O%n3aO~PEuO_/cO!O3eO%|/bO~P`O!X3gO~O&R3hOP&OqQ&OqW&Oq]&Oq^&Oqa&Oqb&Oqg&Oqi&Oqj&Oqk&Oqn&Oqp&Oqu&Oqw&Oqx&Oqy&Oq!P&Oq!Z&Oq!`&Oq!c&Oq!d&Oq!e&Oq!f&Oq!g&Oq!j&Oq#`&Oq#p&Oq#t&Oq${&Oq$}&Oq%P&Oq%Q&Oq%T&Oq%V&Oq%Y&Oq%Z&Oq%]&Oq%j&Oq%p&Oq%r&Oq%t&Oq%v&Oq%y&Oq&P&Oq&T&Oq&V&Oq&X&Oq&Z&Oq&]&Oq&|&Oq'W&Oq'a&Oq'm&Oq'z&Oq!O&Oq%w&Oq_&Oq%|&Oq~O}#Pi!O#Pi~P#(|O!w3jO}#Pi!O#Pi~O}!Ri!O!Ri~P#(|O^$ZO!w3qO'R$ZO~O^$ZO!X!vO!w3qO'R$ZO~O!T3uO!U3uO'X$aO'd(cO'm+aO~O^$ZO!X!vO!`$WO!f3vO!w3qO'R$ZO']$bO'n&jO~O!S3wO~P$9_O!S3wO!q3zO!t3{O~P$9_O^$ZO!X!vO!f3vO!w3qO'R$ZO'n&jO~O}'pq!_'pq^'pq'R'pq~P!)`O}&oO!_'oq~O#S$tiP$tiY$ti^$tii$tis$ti!]$ti!^$ti!`$ti!f$ti#W$ti#X$ti#Y$ti#Z$ti#[$ti#]$ti#^$ti#_$ti#a$ti#c$ti#e$ti#f$ti'R$ti'a$ti!_$tiz$ti!P$ti'c$ti$|$ti!X$ti~P$'tO#S$viP$viY$vi^$vii$vis$vi!]$vi!^$vi!`$vi!f$vi#W$vi#X$vi#Y$vi#Z$vi#[$vi#]$vi#^$vi#_$vi#a$vi#c$vi#e$vi#f$vi'R$vi'a$vi!_$viz$vi!P$vi'c$vi$|$vi!X$vi~P$(gO#S$ciP$ciY$ci^$cii$cis$ci}$ci!]$ci!^$ci!`$ci!f$ci#W$ci#X$ci#Y$ci#Z$ci#[$ci#]$ci#^$ci#_$ci#a$ci#c$ci#e$ci#f$ci'R$ci'a$ci!_$ciz$ci!P$ci!w$ci'c$ci$|$ci!X$ci~P!#lO}&ea'[&ea~P!#lO}&fa!_&fa~P!)`O},YO!_'li~O#i!zi}!zi!O!zi~P#(|OP#]Or!zOs!zOu!{O!^!xO!`!yO!f#]O'aQOY#Vii#Vi!]#Vi#X#Vi#Y#Vi#Z#Vi#[#Vi#]#Vi#^#Vi#_#Vi#a#Vi#c#Vi#e#Vi#f#Vi#i#Vi'n#Vi'u#Vi'v#Vi}#Vi!O#Vi~O#W#Vi~P$BuO#W9YO~P$BuOP#]Or!zOs!zOu!{O!^!xO!`!yO!f#]O#W9YO#X9ZO#Y9ZO#Z9ZO'aQOY#Vi!]#Vi#[#Vi#]#Vi#^#Vi#_#Vi#a#Vi#c#Vi#e#Vi#f#Vi#i#Vi'n#Vi'u#Vi'v#Vi}#Vi!O#Vi~Oi#Vi~P$D}Oi9[O~P$D}OP#]Oi9[Or!zOs!zOu!{O!^!xO!`!yO!f#]O#W9YO#X9ZO#Y9ZO#Z9ZO#[9]O'aQO#a#Vi#c#Vi#e#Vi#f#Vi#i#Vi'n#Vi'u#Vi'v#Vi}#Vi!O#Vi~OY#Vi!]#Vi#]#Vi#^#Vi#_#Vi~P$GVOY9gO!]9^O#]9^O#^9^O#_9^O~P$GVOP#]OY9gOi9[Or!zOs!zOu!{O!]9^O!^!xO!`!yO!f#]O#W9YO#X9ZO#Y9ZO#Z9ZO#[9]O#]9^O#^9^O#_9^O#a9_O'aQO#c#Vi#e#Vi#f#Vi#i#Vi'n#Vi'v#Vi}#Vi!O#Vi~O'u#Vi~P$IkO'u!|O~P$IkOP#]OY9gOi9[Or!zOs!zOu!{O!]9^O!^!xO!`!yO!f#]O#W9YO#X9ZO#Y9ZO#Z9ZO#[9]O#]9^O#^9^O#_9^O#a9_O#c9aO'aQO'u!|O#e#Vi#f#Vi#i#Vi'n#Vi}#Vi!O#Vi~O'v#Vi~P$KsO'v!}O~P$KsOP#]OY9gOi9[Or!zOs!zOu!{O!]9^O!^!xO!`!yO!f#]O#W9YO#X9ZO#Y9ZO#Z9ZO#[9]O#]9^O#^9^O#_9^O#a9_O#c9aO#e9cO'aQO'u!|O'v!}O~O#f#Vi#i#Vi'n#Vi}#Vi!O#Vi~P$M{O^#gy}#gy'R#gyz#gy!_#gy'c#gy!P#gy$|#gy!X#gy~P!)`OP#ViY#Vii#Vis#Vi!]#Vi!^#Vi!`#Vi!f#Vi#W#Vi#X#Vi#Y#Vi#Z#Vi#[#Vi#]#Vi#^#Vi#_#Vi#a#Vi#c#Vi#e#Vi#f#Vi#i#Vi'a#Vi}#Vi!O#Vi~P!#lO!^!xOP'`XY'`Xi'`Xr'`Xs'`Xu'`X!]'`X!`'`X!f'`X#W'`X#X'`X#Y'`X#Z'`X#['`X#]'`X#^'`X#_'`X#a'`X#c'`X#e'`X#f'`X#i'`X'a'`X'n'`X'u'`X'v'`X}'`X!O'`X~O#i#ji}#ji!O#ji~P#(|O!O4]O~O}&ma!O&ma~P#(|O!X!vO'n&jO}&na!_&na~O},yO!_'{i~O},yO!X!vO!_'{i~Oz&pa}&pa~P!#lO!X4dO~O}-QOz'|i~P!#lO}-QOz'|i~Oz4jO~O!X!vO#_4pO~Oi4qO!X!vO'n&jO~Oz4sO~O'[$eq}$eq#i$eq!w$eq~P!#lO^$Vy}$Vy'R$Vyz$Vy!_$Vy'c$Vy!P$Vy$|$Vy!X$Vy~P!)`O}1xO!P'}a~O!P&_O$|4xO~O!P&_O$|4xO~P!#lO^!zy}!zy'R!zyz!zy!_!zy'c!zy!P!zy$|!zy!X!zy~P!)`OY4{O~O}.SO!O(Ti~O]5QO~O[5RO~O'd'OO}&uX!O&uX~O}2gO!O(Qa~O!O5`O~P$0uOu-cO'd(cO'm+aO~O!S5cO!T5bO!U5bO!t0TO'X$aO'd(cO'm+aO~O!o5dO!p5dO~P%,eO!T5bO!U5bO'X$aO'd(cO'm+aO~O!P.oO~O!P.oO$|5fO~O!P.oO$|5fO~P!#lOR5kO!P.oO!k5jO$|5fO~OY5pO}&xa!O&xa~O}.{O!O(Ri~O]5sO~O!_5tO~O!_5uO~O!_5vO~O!_5vO~P){O^5xO~O!X5{O~O!_5}O~O}'si!O'si~P#(|O^$ZO'R$ZO~P!)`O^$ZO!w6SO'R$ZO~O^$ZO!X!vO!w6SO'R$ZO~O!T6XO!U6XO'X$aO'd(cO'm+aO~O^$ZO!X!vO!f6YO!w6SO'R$ZO'n&jO~O!`$WO']$bO~P%1PO!S6ZO~P%0nO}'py!_'py^'py'R'py~P!)`O#S$eqP$eqY$eq^$eqi$eqs$eq}$eq!]$eq!^$eq!`$eq!f$eq#W$eq#X$eq#Y$eq#Z$eq#[$eq#]$eq#^$eq#_$eq#a$eq#c$eq#e$eq#f$eq'R$eq'a$eq!_$eqz$eq!P$eq!w$eq'c$eq$|$eq!X$eq~P!#lO}&fi!_&fi~P!)`O#i!zq}!zq!O!zq~P#(|Or-iOs-iOu-jOPoaYoaioa!]oa!^oa!`oa!foa#Woa#Xoa#Yoa#Zoa#[oa#]oa#^oa#_oa#aoa#coa#eoa#foa#ioa'aoa'noa'uoa'voa}oa!Ooa~Or'}Ou(OOP$YaY$Yai$Yas$Ya!]$Ya!^$Ya!`$Ya!f$Ya#W$Ya#X$Ya#Y$Ya#Z$Ya#[$Ya#]$Ya#^$Ya#_$Ya#a$Ya#c$Ya#e$Ya#f$Ya#i$Ya'a$Ya'n$Ya'u$Ya'v$Ya}$Ya!O$Ya~Or'}Ou(OOP$[aY$[ai$[as$[a!]$[a!^$[a!`$[a!f$[a#W$[a#X$[a#Y$[a#Z$[a#[$[a#]$[a#^$[a#_$[a#a$[a#c$[a#e$[a#f$[a#i$[a'a$[a'n$[a'u$[a'v$[a}$[a!O$[a~OP$jaY$jai$jas$ja!]$ja!^$ja!`$ja!f$ja#W$ja#X$ja#Y$ja#Z$ja#[$ja#]$ja#^$ja#_$ja#a$ja#c$ja#e$ja#f$ja#i$ja'a$ja}$ja!O$ja~P!#lO#i$Uq}$Uq!O$Uq~P#(|O#i$Vq}$Vq!O$Vq~P#(|O!O6eO~O'[$xy}$xy#i$xy!w$xy~P!#lO!X!vO}&ni!_&ni~O!X!vO'n&jO}&ni!_&ni~O},yO!_'{q~Oz&pi}&pi~P!#lO}-QOz'|q~Oz6lO~P!#lOz6lO~O}'_y'['_y~P!#lO}&sa!P&sa~P!#lO!P$pq^$pq'R$pq~P!#lOY6tO~O}.SO!O(Tq~O]6wO~O!P&_O$|6xO~O!P&_O$|6xO~P!#lO!w6yO}&ua!O&ua~O}2gO!O(Qi~P#(|O!T7PO!U7PO'X$aO'd(cO'm+aO~O!S7RO!t3{O~P%@nO!P.oO$|7UO~O!P.oO$|7UO~P!#lO'd7[O~O}.{O!O(Rq~O!_7_O~O!_7_O~P){O!_7aO~O!_7bO~O}#Py!O#Py~P#(|O^$ZO!w7hO'R$ZO~O^$ZO!X!vO!w7hO'R$ZO~O!T7kO!U7kO'X$aO'd(cO'm+aO~O^$ZO!X!vO!f7lO!w7hO'R$ZO'n&jO~O#S$xyP$xyY$xy^$xyi$xys$xy}$xy!]$xy!^$xy!`$xy!f$xy#W$xy#X$xy#Y$xy#Z$xy#[$xy#]$xy#^$xy#_$xy#a$xy#c$xy#e$xy#f$xy'R$xy'a$xy!_$xyz$xy!P$xy!w$xy'c$xy$|$xy!X$xy~P!#lO#i#gy}#gy!O#gy~P#(|OP$ciY$cii$cis$ci!]$ci!^$ci!`$ci!f$ci#W$ci#X$ci#Y$ci#Z$ci#[$ci#]$ci#^$ci#_$ci#a$ci#c$ci#e$ci#f$ci#i$ci'a$ci}$ci!O$ci~P!#lOr'}Ou(OO'v(SOP$tiY$tii$tis$ti!]$ti!^$ti!`$ti!f$ti#W$ti#X$ti#Y$ti#Z$ti#[$ti#]$ti#^$ti#_$ti#a$ti#c$ti#e$ti#f$ti#i$ti'a$ti'n$ti'u$ti}$ti!O$ti~Or'}Ou(OOP$viY$vii$vis$vi!]$vi!^$vi!`$vi!f$vi#W$vi#X$vi#Y$vi#Z$vi#[$vi#]$vi#^$vi#_$vi#a$vi#c$vi#e$vi#f$vi#i$vi'a$vi'n$vi'u$vi'v$vi}$vi!O$vi~O#i$Vy}$Vy!O$Vy~P#(|O#i!zy}!zy!O!zy~P#(|O!X!vO}&nq!_&nq~O},yO!_'{y~Oz&pq}&pq~P!#lOz7rO~P!#lO}.SO!O(Ty~O}2gO!O(Qq~O!T8OO!U8OO'X$aO'd(cO'm+aO~O!P.oO$|8RO~O!P.oO$|8RO~P!#lO!_8UO~O&R8VOP&O!ZQ&O!ZW&O!Z]&O!Z^&O!Za&O!Zb&O!Zg&O!Zi&O!Zj&O!Zk&O!Zn&O!Zp&O!Zu&O!Zw&O!Zx&O!Zy&O!Z!P&O!Z!Z&O!Z!`&O!Z!c&O!Z!d&O!Z!e&O!Z!f&O!Z!g&O!Z!j&O!Z#`&O!Z#p&O!Z#t&O!Z${&O!Z$}&O!Z%P&O!Z%Q&O!Z%T&O!Z%V&O!Z%Y&O!Z%Z&O!Z%]&O!Z%j&O!Z%p&O!Z%r&O!Z%t&O!Z%v&O!Z%y&O!Z&P&O!Z&T&O!Z&V&O!Z&X&O!Z&Z&O!Z&]&O!Z&|&O!Z'W&O!Z'a&O!Z'm&O!Z'z&O!Z!O&O!Z%w&O!Z_&O!Z%|&O!Z~O^$ZO!w8[O'R$ZO~O^$ZO!X!vO!w8[O'R$ZO~OP$eqY$eqi$eqs$eq!]$eq!^$eq!`$eq!f$eq#W$eq#X$eq#Y$eq#Z$eq#[$eq#]$eq#^$eq#_$eq#a$eq#c$eq#e$eq#f$eq#i$eq'a$eq}$eq!O$eq~P!#lO}&uq!O&uq~P#(|O^$ZO!w8qO'R$ZO~OP$xyY$xyi$xys$xy!]$xy!^$xy!`$xy!f$xy#W$xy#X$xy#Y$xy#Z$xy#[$xy#]$xy#^$xy#_$xy#a$xy#c$xy#e$xy#f$xy#i$xy'a$xy}$xy!O$xy~P!#lO'c'eX~P.jO'cZXzZX!_ZX%nZX!PZX$|ZX!XZX~P$zO!XcX!_ZX!_cX'ncX~P;aOP9SOQ9SO]cOa:jOb!iOgcOi9SOjcOkcOn9SOp9SOuROwcOxcOycO!PSO!Z9UO!`UO!c9SO!d9SO!e9SO!f9SO!g9SO!j!hO#p!kO#t^O'W'^O'aQO'mYO'z:hO~O}9eO!O$Xa~O]#pOg#}Oi#qOj#pOk#pOn$OOp9jOu#wO!P#xO!Z:mO!`#uO#R9pO#p$SO$Z9lO$]9nO$`$TO'W&vO'a#rO~O#`'eO~P&+}O!OZX!OcX~P;aO#S9XO~O!X!vO#S9XO~O!w9hO~O#_9^O~O!w9qO}'sX!O'sX~O!w9hO}'qX!O'qX~O#S9rO~O'[9tO~P!#lO#S9yO~O#S9zO~O!X!vO#S9{O~O!X!vO#S9rO~O#i9|O~P#(|O#S9}O~O#S:OO~O#S:PO~O#S:QO~O#i:RO~P!#lO#i:SO~P!#lO#t~!^!n!p!q#Q#R'z$Z$]$`$q${$|$}%T%V%Y%Z%]%_~TS#t'z#Xy'T'U#v'T'W'd~",
        "goto": "#Dk(XPPPPPPP(YP(jP*^PPPP-sPP.Y3j5^5qP5qPPP5q5qP5qP7_PP7dP7xPPPP<XPPPP<X>wPPP>}AYP<XPCsPPPPEk<XPPPPPGd<XPPJcK`PPPPKdL|PMUNVPK`<X<X!#^!&V!*v!*v!.TPPP!.[!1O<XPPPPPPPPPP!3sP!5UPP<X!6cP<XP<X<X<X<XP<X!8vPP!;mP!>`!>h!>l!>lP!;jP!>p!>pP!AcP!Ag<X<X!Am!D_5qP5qP5q5qP!Eb5q5q!GY5q!I[5q!J|5q5q!Kj!Md!Md!Mh!Md!MpP!MdP5q!Nl5q# v5q5q-sPPP##TPP##m##mP##mP#$S##mPP#$YP#$PP#$P#$lMQ#$P#%Z#%a#%d(Y#%g(YP#%n#%n#%nP(YP(YP(YP(YPP(YP#%t#%wP#%w(YPPP(YP(YP(YP(YP(YP(Y(Y#%{#&V#&]#&c#&q#&w#&}#'X#'_#'i#'o#'}#(T#(Z#(i#)O#*b#*p#*v#*|#+S#+Y#+d#+j#+p#+z#,^#,dPPPPPPPPP#,jPP#-^#1[PP#2r#2y#3RP#7_PP#7c#9v#?p#?t#?w#?z#@V#@YPP#@]#@a#AO#As#Aw#BZPP#B_#Be#BiP#Bl#Bp#Bs#Cc#Cy#DO#DR#DU#D[#D_#Dc#DgmhOSj}!m$Y%a%d%e%g*i*n/]/`Q$gmQ$npQ%XyS&R!b+UQ&f!iS(f#x(kQ)a$hQ)n$pQ*Y%RQ+[&YS+c&_+eQ+u&gQ-a(mQ.z*ZY0P+g+h+i+j+kS2l.o2nU3u0Q0S0VU5b2q2r2sS6X3w3zS7P5c5dQ7k6ZR8O7R$l[ORSTUjk}!S!W!]!`!m!u!y!{#O#P#Q#R#S#T#U#V#W#X#Y#a#d$Y$l%Y%]%a%c%d%e%g%k%v&O&Z&a&k&x&|'|)O)V*e*i*n+p+w,Y,`-j-o-w.R.r/T/U/V/X/]/`/b/y0`0j2a2y3^3`3a3q5j5x6S7h8[8q!j'`#[#j&S'r*}+Q,e/p0}2i3j6y9S9U9X9Y9Z9[9]9^9_9`9a9b9c9d9e9h9q9r9t9{9|:P:Q:kQ(v$PQ)f$jQ*[%UQ*c%^Q,P9iQ-|)ZQ.X)gQ/S*aQ2V.SQ3R.{Q4U9jR4}2WpeOSjy}!m$Y%W%a%d%e%g*i*n/]/`R*^%Y&WVOSTjkn}!S!W!]!j!m!u!y!{#O#P#Q#R#S#T#U#V#W#X#Y#[#a#d#j$Y$l%Y%]%^%a%c%d%e%g%k%v&O&Z&a&k&x&|'r'|)O)V*e*i*n*}+Q+p+w,Y,`,e-j-o-w.R.r/T/U/V/X/]/`/b/p/y0`0j0}2a2i2y3^3`3a3j3q5j5x6S6y7h8[8q9S9U9X9Y9Z9[9]9^9_9`9a9b9c9d9e9h9q9r9t9{9|:P:Q:j:kW!cRU!`&SQ$`lQ$fmS$kp$pv$urs!q!t$W$s&[&o&r)r)s)t*g+O+_+z+|/f0bQ$}wQ&c!hQ&e!iS(Y#u(dS)`$g$hQ)d$jQ)q$rQ*T%PQ*X%RS+t&f&gQ,}(ZQ.Q)aQ.W)gQ.Y)hQ.])lQ.u*US.y*Y*ZQ0^+uQ1W,yQ2U.SQ2Y.VQ2_._Q3Q.zQ4a1XQ4|2WQ5P2[Q6s4{R7u6t!Y$dm!i$f$g$h&Q&e&f&g(e)`)a+R+b+t+u-Z.Q/u/|0R0^1m3t3y6V7i8]Q)X$`Q)y$zQ)|${Q*W%RQ.a)qQ.t*TU.x*X*Y*ZQ2{.uS3P.y.zQ5]2kQ5o3QS6}5^5aS7|7O7QQ8g7}R8v8hW#{a$b(s:hS$zt%WQ${uQ$|vR)w$x$V#za!v!x#c#u#w$Q$R$V&b'x(R(T(U(](a(q(r)U)W)Z)x){+q,V-Q-S-l-v-x.f.i.q.s1V1`1j1q1x1{2P2b2x2z4d4p4x5f5k6x7U8R9g9k9l9m9n9o9p9u9v9w9x9y9z9}:O:R:S:h:n:oV(w$P9i9jU&V!b$t+XQ'P!zQ)k$mQ.j)}Q1r-iR5X2g&YcORSTUjk}!S!W!]!`!m!u!y!{#O#P#Q#R#S#T#U#V#W#X#Y#[#a#d#j$Y$l%Y%]%^%a%c%d%e%g%k%v&O&S&Z&a&k&x&|'r'|)O)V*e*i*n*}+Q+p+w,Y,`,e-j-o-w.R.r/T/U/V/X/]/`/b/p/y0`0j0}2a2i2y3^3`3a3j3q5j5x6S6y7h8[8q9S9U9X9Y9Z9[9]9^9_9`9a9b9c9d9e9h9q9r9t9{9|:P:Q:k$]#`Z!_!n$^%u%y&t&{'R'S'T'U'V'W'X'Y'Z'[']'_'b'f'p)j*y+S+]+v,U,[,_,a,o-m/k/n0_0i0m0n0o0p0q0r0s0t0u0v0w0x0y0|1R1v2S3l3o4P4S4T4Y4Z5Z6O6R6_6c6d7e7x8Y8o8z9T:a&ZcORSTUjk}!S!W!]!`!m!u!y!{#O#P#Q#R#S#T#U#V#W#X#Y#[#a#d#j$Y$l%Y%]%^%a%c%d%e%g%k%v&O&S&Z&a&k&x&|'r'|)O)V*e*i*n*}+Q+p+w,Y,`,e-j-o-w.R.r/T/U/V/X/]/`/b/p/y0`0j0}2a2i2y3^3`3a3j3q5j5x6S6y7h8[8q9S9U9X9Y9Z9[9]9^9_9`9a9b9c9d9e9h9q9r9t9{9|:P:Q:kQ&T!bR/q+UY%}!b&R&Y+U+[S(e#x(kS+b&_+eS-Z(f(mQ-[(gQ-b(nQ.l*PU/|+c+g+hU0R+i+j+kS0W+l2pQ1m-aQ1o-cQ1p-dS2k.o2nU3t0P0Q0SQ3x0TQ3y0VS5^2l2sS5a2q2rU6V3u3w3zQ6[3{S7O5b5cQ7Q5dS7i6X6ZS7}7P7RQ8]7kR8h8OlhOSj}!m$Y%a%d%e%g*i*n/]/`Q%i!QS&s!u9XQ)^$eQ*R$}Q*S%OQ+r&dS,T&x9rS-n)O9{Q.O)_Q.n*QQ/d*pQ/e*qQ/m+PQ0U+iQ0[+sS1w-o:PQ2Q.PS2T.R:QQ3k/oQ3n/wQ3}0]Q4z2RQ5|3hQ6P3mQ6T3sQ6]4OQ7c5}Q7f6UQ8X7gQ8l8VQ8n8ZR8y8p$W#_Z!_!n%u%y&t&{'R'S'T'U'V'W'X'Y'Z'[']'_'b'f'p)j*y+S+]+v,U,[,_,o-m/k/n0_0i0m0n0o0p0q0r0s0t0u0v0w0x0y0|1R1v2S3l3o4P4S4T4Y4Z5Z6O6R6_6c6d7e7x8Y8o8z9T:aU(p#y&w0{T)S$^,a$W#^Z!_!n%u%y&t&{'R'S'T'U'V'W'X'Y'Z'[']'_'b'f'p)j*y+S+]+v,U,[,_,o-m/k/n0_0i0m0n0o0p0q0r0s0t0u0v0w0x0y0|1R1v2S3l3o4P4S4T4Y4Z5Z6O6R6_6c6d7e7x8Y8o8z9T:aQ'a#_S)R$^,aR-p)S&YcORSTUjk}!S!W!]!`!m!u!y!{#O#P#Q#R#S#T#U#V#W#X#Y#[#a#d#j$Y$l%Y%]%^%a%c%d%e%g%k%v&O&S&Z&a&k&x&|'r'|)O)V*e*i*n*}+Q+p+w,Y,`,e-j-o-w.R.r/T/U/V/X/]/`/b/p/y0`0j0}2a2i2y3^3`3a3j3q5j5x6S6y7h8[8q9S9U9X9Y9Z9[9]9^9_9`9a9b9c9d9e9h9q9r9t9{9|:P:Q:kQ%d{Q%e|Q%g!OQ%h!PR/[*lQ&`!hQ)T$`Q+o&cS-u)X)qS0X+m+nW1z-r-s-t.aS3|0Y0ZU4w1|1}2OU6q4v5T5UQ7t6rR8c7wT+d&_+eS+b&_+eU/|+c+g+hU0R+i+j+kS0W+l2pS2k.o2nU3t0P0Q0SQ3x0TQ3y0VS5^2l2sS5a2q2rU6V3u3w3zQ6[3{S7O5b5cQ7Q5dS7i6X6ZS7}7P7RQ8]7kR8h8OS+d&_+eT2m.o2nS&m!p/YQ,|(YQ-X(eS/{+b2kQ1],}S1g-Y-bU3v0R0W5aQ4`1WS4n1n1pU6Y3x3y7QQ6g4aQ6p4qR7l6[Q!wXS&l!p/YQ)P$XQ)[$cQ)b$iQ+x&mQ,{(YQ-W(eQ-](hQ-})]Q.v*VS/z+b2kS1[,|,}S1f-X-bQ1i-[Q1l-^Q2}.wW3r/{0R0W5aQ4_1WQ4c1]S4h1g1pQ4o1oQ5m3OW6W3v3x3y7QS6f4`4aQ6k4jQ6n4nQ6{5[Q7Y5nS7j6Y6[Q7n6gQ7p6lQ7s6pQ7z6|Q8T7ZQ8^7lQ8a7rQ8e7{Q8t8fQ8|8uQ9Q8}Q:Z:UQ:d:_R:e:`$nWORSTUjk}!S!W!]!`!m!u!y!{#O#P#Q#R#S#T#U#V#W#X#Y#a#d$Y$l%Y%]%^%a%c%d%e%g%k%v&O&Z&a&k&x&|'|)O)V*e*i*n+p+w,Y,`-j-o-w.R.r/T/U/V/X/]/`/b/y0`0j2a2y3^3`3a3q5j5x6S7h8[8qS!wn!j!j:T#[#j&S'r*}+Q,e/p0}2i3j6y9S9U9X9Y9Z9[9]9^9_9`9a9b9c9d9e9h9q9r9t9{9|:P:Q:kR:Z:j$nXORSTUjk}!S!W!]!`!m!u!y!{#O#P#Q#R#S#T#U#V#W#X#Y#a#d$Y$l%Y%]%^%a%c%d%e%g%k%v&O&Z&a&k&x&|'|)O)V*e*i*n+p+w,Y,`-j-o-w.R.r/T/U/V/X/]/`/b/y0`0j2a2y3^3`3a3q5j5x6S7h8[8qQ$Xb!Y$cm!i$f$g$h&Q&e&f&g(e)`)a+R+b+t+u-Z.Q/u/|0R0^1m3t3y6V7i8]S$in!jQ)]$dQ*V%RW.w*W*X*Y*ZU3O.x.y.zQ5[2kS5n3P3QU6|5]5^5aQ7Z5oU7{6}7O7QS8f7|7}S8u8g8hQ8}8v!j:U#[#j&S'r*}+Q,e/p0}2i3j6y9S9U9X9Y9Z9[9]9^9_9`9a9b9c9d9e9h9q9r9t9{9|:P:Q:kQ:_:iR:`:j$f]OSTjk}!S!W!]!m!u!y!{#O#P#Q#R#S#T#U#V#W#X#Y#a#d$Y$l%Y%]%a%c%d%e%g%k%v&O&Z&a&k&x&|'|)O)V*e*i*n+p+w,Y,`-j-o-w.R.r/T/U/V/X/]/`/b/y0`0j2a2y3^3`3a3q5j5x6S7h8[8qU!gRU!`v$urs!q!t$W$s&[&o&r)r)s)t*g+O+_+z+|/f0bQ*d%^!h:V#[#j'r*}+Q,e/p0}2i3j6y9S9U9X9Y9Z9[9]9^9_9`9a9b9c9d9e9h9q9r9t9{9|:P:Q:kR:Y&SS&W!b$tR/s+X$l[ORSTUjk}!S!W!]!`!m!u!y!{#O#P#Q#R#S#T#U#V#W#X#Y#a#d$Y$l%Y%]%a%c%d%e%g%k%v&O&Z&a&k&x&|'|)O)V*e*i*n+p+w,Y,`-j-o-w.R.r/T/U/V/X/]/`/b/y0`0j2a2y3^3`3a3q5j5x6S7h8[8q!j'`#[#j&S'r*}+Q,e/p0}2i3j6y9S9U9X9Y9Z9[9]9^9_9`9a9b9c9d9e9h9q9r9t9{9|:P:Q:kR*c%^$noORSTUjk}!S!W!]!`!m!u!y!{#O#P#Q#R#S#T#U#V#W#X#Y#a#d$Y$l%Y%]%^%a%c%d%e%g%k%v&O&Z&a&k&x&|'|)O)V*e*i*n+p+w,Y,`-j-o-w.R.r/T/U/V/X/]/`/b/y0`0j2a2y3^3`3a3q5j5x6S7h8[8qQ'P!z!k:W#[#j&S'r*}+Q,e/p0}2i3j6y9S9U9X9Y9Z9[9]9^9_9`9a9b9c9d9e9h9q9r9t9{9|:P:Q:k!h#UZ!_$^%u%y&t&{'Y'Z'[']'b'f)j*y+]+v,U,[,o-m0_0i0y1v2S3o4P4S6R7e8Y8o8z9T!R9`'_'p+S,a/k/n0m0u0v0w0x0|1R3l4T4Y4Z5Z6O6_6c6d7x:a!d#WZ!_$^%u%y&t&{'[']'b'f)j*y+]+v,U,[,o-m0_0i0y1v2S3o4P4S6R7e8Y8o8z9T}9b'_'p+S,a/k/n0m0w0x0|1R3l4T4Y4Z5Z6O6_6c6d7x:a!`#[Z!_$^%u%y&t&{'b'f)j*y+]+v,U,[,o-m0_0i0y1v2S3o4P4S6R7e8Y8o8z9Tl(U#s&y(},w-P-e-f0g1u4^4r:[:f:gx:k'_'p+S,a/k/n0m0|1R3l4T4Y4Z5Z6O6_6c6d7x:a!`:n&u'd(X(_+n,S,l-T-q-t.e.g0Z0f1^1b2O2d2f2v4R4e4k4t4y5U5i6^6i6o7WZ:o0z4X6`7m8_&YcORSTUjk}!S!W!]!`!m!u!y!{#O#P#Q#R#S#T#U#V#W#X#Y#[#a#d#j$Y$l%Y%]%^%a%c%d%e%g%k%v&O&S&Z&a&k&x&|'r'|)O)V*e*i*n*}+Q+p+w,Y,`,e-j-o-w.R.r/T/U/V/X/]/`/b/p/y0`0j0}2a2i2y3^3`3a3j3q5j5x6S6y7h8[8q9S9U9X9Y9Z9[9]9^9_9`9a9b9c9d9e9h9q9r9t9{9|:P:Q:kS#k`#lR1O,d&a_ORSTU`jk}!S!W!]!`!m!u!y!{#O#P#Q#R#S#T#U#V#W#X#Y#[#a#d#j#l$Y$l%Y%]%^%a%c%d%e%g%k%v&O&S&Z&a&k&x&|'r'|)O)V*e*i*n*}+Q+p+w,Y,`,d,e-j-o-w.R.r/T/U/V/X/]/`/b/p/y0`0j0}2a2i2y3^3`3a3j3q5j5x6S6y7h8[8q9S9U9X9Y9Z9[9]9^9_9`9a9b9c9d9e9h9q9r9t9{9|:P:Q:kS#f^#mT'i#h'mT#g^#mT'k#h'm&a`ORSTU`jk}!S!W!]!`!m!u!y!{#O#P#Q#R#S#T#U#V#W#X#Y#[#a#d#j#l$Y$l%Y%]%^%a%c%d%e%g%k%v&O&S&Z&a&k&x&|'r'|)O)V*e*i*n*}+Q+p+w,Y,`,d,e-j-o-w.R.r/T/U/V/X/]/`/b/p/y0`0j0}2a2i2y3^3`3a3j3q5j5x6S6y7h8[8q9S9U9X9Y9Z9[9]9^9_9`9a9b9c9d9e9h9q9r9t9{9|:P:Q:kT#k`#lQ#n`R't#l$nbORSTUjk}!S!W!]!`!m!u!y!{#O#P#Q#R#S#T#U#V#W#X#Y#a#d$Y$l%Y%]%^%a%c%d%e%g%k%v&O&Z&a&k&x&|'|)O)V*e*i*n+p+w,Y,`-j-o-w.R.r/T/U/V/X/]/`/b/y0`0j2a2y3^3`3a3q5j5x6S7h8[8q!k:i#[#j&S'r*}+Q,e/p0}2i3j6y9S9U9X9Y9Z9[9]9^9_9`9a9b9c9d9e9h9q9r9t9{9|:P:Q:k#RdOSUj}!S!W!m!{#j$Y%Y%]%^%a%c%d%e%g%k&O&a'r)V*e*i*n+p,e-j-w.r/T/U/V/X/]/`/b0}2a2y3^3`3a5j5xt#ya!x$Q$R$V(R(T(U(](q(r,V-l1V1q:h:n:o!|&w!v#c#u#w&b'x(a)U)W)Z)x){+q-Q-S-v-x.f.i.q.s1`1j1x1{2P2b2x2z4d4p4x5f5k6x7U8R9k9m9o9u9w9y9}:RQ({$TQ,p'}c0{9g9l9n9p9v9x9z:O:St#va!x$Q$R$V(R(T(U(](q(r,V-l1V1q:h:n:oS(h#x(kQ(|$UQ-^(i!|:]!v#c#u#w&b'x(a)U)W)Z)x){+q-Q-S-v-x.f.i.q.s1`1j1x1{2P2b2x2z4d4p4x5f5k6x7U8R9k9m9o9u9w9y9}:Rb:^9g9l9n9p9v9x9z:O:SQ:b:lR:c:mt#ya!x$Q$R$V(R(T(U(](q(r,V-l1V1q:h:n:o!|&w!v#c#u#w&b'x(a)U)W)Z)x){+q-Q-S-v-x.f.i.q.s1`1j1x1{2P2b2x2z4d4p4x5f5k6x7U8R9k9m9o9u9w9y9}:Rc0{9g9l9n9p9v9x9z:O:SlfOSj}!m$Y%a%d%e%g*i*n/]/`Q(`#wQ*u%nQ*v%pR1_-Q$U#za!v!x#c#u#w$Q$R$V&b'x(R(T(U(](a(q(r)U)W)Z)x){+q,V-Q-S-l-v-x.f.i.q.s1V1`1j1q1x1{2P2b2x2z4d4p4x5f5k6x7U8R9g9k9l9m9n9o9p9u9v9w9x9y9z9}:O:R:S:h:n:oQ)z${Q.h)|Q2e.gR5W2fT(j#x(kS(j#x(kT2m.o2nQ)[$cQ-](hQ-})]Q.v*VQ2}.wQ5m3OQ6{5[Q7Y5nQ7z6|Q8T7ZQ8e7{Q8t8fQ8|8uR9Q8}l(R#s&y(},w-P-e-f0g1u4^4r:[:f:g!`9u&u'd(X(_+n,S,l-T-q-t.e.g0Z0f1^1b2O2d2f2v4R4e4k4t4y5U5i6^6i6o7WZ9v0z4X6`7m8_n(T#s&y(},u,w-P-e-f0g1u4^4r:[:f:g!b9w&u'd(X(_+n,S,l-T-q-t.e.g0Z0d0f1^1b2O2d2f2v4R4e4k4t4y5U5i6^6i6o7W]9x0z4X6`6a7m8_peOSjy}!m$Y%W%a%d%e%g*i*n/]/`Q%TxR*e%^peOSjy}!m$Y%W%a%d%e%g*i*n/]/`R%TxQ*O$|R.d)wqeOSjy}!m$Y%W%a%d%e%g*i*n/]/`Q.p*TS2w.t.uW5e2t2u2v2{U7T5g5h5iU8P7S7V7WQ8i8QR8w8jQ%[yR*_%WR3U.}R7]5pS$kp$pR.Y)hQ%azR*i%bR*o%hT/^*n/`QjOQ!mST$]j!mQ'z#rR,m'zQ!YQR%s!YQ!^RU%w!^%x*zQ%x!_R*z%yQ+V&TR/r+VQ,W&yR0h,WQ,Z&{S0k,Z0lR0l,[Q+e&_R/}+eQ&]!eQ*{%zT+`&]*{Q+Y&WR/t+YQ&p!rQ+y&nU+}&p+y0cR0c,OQ'm#hR,f'mQ#l`R's#lQ#bZU'c#b*x9fQ*x9TR9f'pQ,z(YW1Y,z1Z4b6hU1Z,{,|,}S4b1[1]R6h4c#q(P#s&u&y'd(X(_(x(y(}+n,Q,R,S,l,u,v,w-P-T-e-f-q-t.e.g0Z0d0e0f0g0z1^1b1u2O2d2f2v4R4V4W4X4^4e4k4r4t4y5U5i6^6`6a6b6i6o7W7m8_:[:f:gQ-R(_U1a-R1c4fQ1c-TR4f1bQ(k#xR-_(kQ(t#|R-h(tQ1y-qR4u1yQ)u$vR.c)uQ2h.jS5Y2h6zR6z5ZQ*Q$}R.m*QQ2n.oR5_2nQ.|*[S3S.|5qR5q3UQ.T)dW2X.T2Z5O6uQ2Z.WQ5O2YR6u5PQ)i$kR.Z)iQ/`*nR3d/`WiOSj!mQ%f}Q)Q$YQ*h%aQ*j%dQ*k%eQ*m%gQ/Z*iS/^*n/`R3c/]Q$[gQ%j!RQ%m!TQ%o!UQ%q!VQ)p$qQ)v$wQ*^%[Q*s%lS/P*_*bQ/g*rQ/h*uQ/i*vS/x+b2kQ1d-VQ1e-WQ1k-]Q2^.^Q2c.eQ2|.vQ3W/RQ3b/[Y3p/z/{0R0W5aQ4g1fQ4i1hQ4l1lQ5S2`Q5V2dQ5l2}Q5r3V[6Q3o3r3v3x3y7QQ6j4hQ6m4mQ6v5QQ7X5mQ7^5sW7d6R6W6Y6[Q7o6kQ7q6nQ7v6wQ7y6{Q8S7YU8W7e7j7lQ8`7pQ8b7sQ8d7zQ8k8TS8m8Y8^Q8r8aQ8s8eQ8x8oQ8{8tQ9O8zQ9P8|R9R9QQ$emQ&d!iU)_$f$g$hQ+P&QU+s&e&f&gQ-V(eS.P)`)aQ/o+RQ/w+bS0]+t+uQ1h-ZQ2R.QQ3m/uS3s/|0RQ4O0^Q4m1mS6U3t3yQ7g6VQ8Z7iR8p8]S#ta:hR)Y$bU#|a$b:hR-g(sQ#saS&u!v)ZQ&y!xQ'd#cQ(X#uQ(_#wQ(x$QQ(y$RQ(}$VQ+n&bQ,Q9kQ,R9mQ,S9oQ,l'xQ,u(RQ,v(TQ,w(UQ-P(]Q-T(aQ-e(qQ-f(rd-q)U-v.q1{2x4x5f6x7U8RQ-t)WQ.e)xQ.g){Q0Z+qQ0d9uQ0e9wQ0f9yQ0g,VQ0z9gQ1^-QQ1b-SQ1u-lQ2O-xQ2d.fQ2f.iQ2v.sQ4R9}Q4V9lQ4W9nQ4X9pQ4^1VQ4e1`Q4k1jQ4r1qQ4t1xQ4y2PQ5U2bQ5i2zQ6^:RQ6`9zQ6a9vQ6b9xQ6i4dQ6o4pQ7W5kQ7m:OQ8_:SQ:[:hQ:f:nR:g:oT'y#r'zlgOSj}!m$Y%a%d%e%g*i*n/]/`S!oU%cQ%l!SQ%r!WQ'Q!{Q'q#jS*b%Y%]Q*f%^Q*r%kQ*|&OQ+m&aQ,j'rQ-s)VQ/W*eQ0Y+pQ1Q,eQ1s-jQ1}-wQ2u.rQ3Y/TQ3Z/UQ3]/VQ3_/XQ3f/bQ4[0}Q5T2aQ5h2yQ5w3^Q5y3`Q5z3aQ7V5jR7`5x!vZOSUj}!S!m!{$Y%Y%]%^%a%c%d%e%g%k&O&a)V*e*i*n+p-j-w.r/T/U/V/X/]/`/b2a2y3^3`3a5j5xQ!_RQ!nTQ$^kQ%u!]Q%y!`Q&t!uQ&{!yQ'R#OQ'S#PQ'T#QQ'U#RQ'V#SQ'W#TQ'X#UQ'Y#VQ'Z#WQ'[#XQ']#YQ'_#[Q'b#aQ'f#dW'p#j'r,e0}Q)j$lQ*y%vS+S&S/pQ+]&ZQ+v&kQ,U&xQ,[&|Q,_9SQ,a9UQ,o'|Q-m)OQ/k*}Q/n+QQ0_+wQ0i,YQ0m9XQ0n9YQ0o9ZQ0p9[Q0q9]Q0r9^Q0s9_Q0t9`Q0u9aQ0v9bQ0w9cQ0x9dQ0y,`Q0|9hQ1R9eQ1v-oQ2S.RQ3l9qQ3o/yQ4P0`Q4S0jQ4T9rQ4Y9tQ4Z9{Q5Z2iQ6O3jQ6R3qQ6_9|Q6c:PQ6d:QQ7e6SQ7x6yQ8Y7hQ8o8[Q8z8qQ9T!WR:a:kT!XQ!YR!aRR&U!bS&Q!b+US+R&R&YR/u+[R&z!xR&}!yT!sU$WS!rU$WU$vrs*gS&n!q!tQ+{&oQ,O&rQ.b)tS0a+z+|R4Q0b[!dR!`$s&[)r+_h!pUrs!q!t$W&o&r)t+z+|0bQ/Y*gQ/l+OQ3i/fT:X&S)sT!fR$sS!eR$sS%z!`)rS+T&S)sQ+^&[R/v+_T&X!b$tQ#h^R'v#mT'l#h'mR1P,dT([#u(dR(b#wQ-r)UQ1|-vQ2t.qQ4v1{Q5g2xQ6r4xQ7S5fQ7w6xQ8Q7UR8j8RlhOSj}!m$Y%a%d%e%g*i*n/]/`Q%ZyR*^%WV$wrs*gR.k)}R*]%UQ$opR)o$pR)e$jT%_z%bT%`z%bT/_*n/`",
        nodeNames: "⚠ ArithOp ArithOp extends LineComment BlockComment Script ExportDeclaration export Star as VariableName from String ; default FunctionDeclaration async function VariableDefinition TypeParamList TypeDefinition ThisType this LiteralType ArithOp Number BooleanLiteral TemplateType VoidType void TypeofType typeof MemberExpression . ?. PropertyName [ TemplateString null super RegExp ] ArrayExpression Spread , } { ObjectExpression Property async get set PropertyDefinition Block : NewExpression new TypeArgList CompareOp < ) ( ArgList UnaryExpression await yield delete LogicOp BitOp ParenthesizedExpression ClassExpression class extends ClassBody MethodDeclaration Privacy static abstract override PrivatePropertyDefinition PropertyDeclaration readonly Optional TypeAnnotation Equals StaticBlock FunctionExpression ArrowFunction ParamList ParamList ArrayPattern ObjectPattern PatternProperty Privacy readonly Arrow MemberExpression PrivatePropertyName BinaryExpression ArithOp ArithOp ArithOp ArithOp BitOp CompareOp instanceof in const CompareOp BitOp BitOp BitOp LogicOp LogicOp ConditionalExpression LogicOp LogicOp AssignmentExpression UpdateOp PostfixExpression CallExpression TaggedTemplateExpression DynamicImport import ImportMeta JSXElement JSXSelfCloseEndTag JSXStartTag JSXSelfClosingTag JSXIdentifier JSXNamespacedName JSXMemberExpression JSXSpreadAttribute JSXAttribute JSXAttributeValue JSXEscape JSXEndTag JSXOpenTag JSXFragmentTag JSXText JSXEscape JSXStartCloseTag JSXCloseTag PrefixCast ArrowFunction TypeParamList SequenceExpression KeyofType keyof UniqueType unique ImportType InferredType infer TypeName ParenthesizedType FunctionSignature ParamList NewSignature IndexedType TupleType Label ArrayType ReadonlyType ObjectType MethodType PropertyType IndexSignature CallSignature TypePredicate is NewSignature new UnionType LogicOp IntersectionType LogicOp ConditionalType ParameterizedType ClassDeclaration abstract implements type VariableDeclaration let var TypeAliasDeclaration InterfaceDeclaration interface EnumDeclaration enum EnumBody NamespaceDeclaration namespace module AmbientDeclaration declare GlobalDeclaration global ClassDeclaration ClassBody MethodDeclaration AmbientFunctionDeclaration ExportGroup VariableName VariableName ImportDeclaration ImportGroup ForStatement for ForSpec ForInSpec ForOfSpec of WhileStatement while WithStatement with DoStatement do IfStatement if else SwitchStatement switch SwitchBody CaseLabel case DefaultLabel TryStatement try catch finally ReturnStatement return ThrowStatement throw BreakStatement break ContinueStatement continue DebuggerStatement debugger LabeledStatement ExpressionStatement",
        maxTerm: 330,
        context: trackNewline,
        nodeProps: [[_lezer_common__WEBPACK_IMPORTED_MODULE_1__["NodeProp"].group, -26, 7, 14, 16, 54, 180, 184, 187, 188, 190, 193, 196, 207, 209, 215, 217, 219, 221, 224, 230, 234, 236, 238, 240, 242, 244, 245, "Statement", -30, 11, 13, 23, 26, 27, 38, 39, 40, 41, 43, 48, 56, 64, 70, 71, 87, 88, 97, 99, 115, 118, 120, 121, 122, 123, 125, 126, 144, 145, 147, "Expression", -22, 22, 24, 28, 29, 31, 148, 150, 152, 153, 155, 156, 157, 159, 160, 161, 163, 164, 165, 174, 176, 178, 179, "Type", -3, 75, 81, 86, "ClassItem"], [_lezer_common__WEBPACK_IMPORTED_MODULE_1__["NodeProp"].closedBy, 37, "]", 47, "}", 62, ")", 128, "JSXSelfCloseEndTag JSXEndTag", 142, "JSXEndTag"], [_lezer_common__WEBPACK_IMPORTED_MODULE_1__["NodeProp"].openedBy, 42, "[", 46, "{", 61, "(", 127, "JSXStartTag", 137, "JSXStartTag JSXStartCloseTag"]],
        skippedNodes: [0, 4, 5],
        repeatNodeCount: 28,
        tokenData: "!C}~R!`OX%TXY%cYZ'RZ[%c[]%T]^'R^p%Tpq%cqr'crs(kst0htu2`uv4pvw5ewx6cxy<yyz=Zz{=k{|>k|}?O}!O>k!O!P?`!P!QCl!Q!R!0[!R![!1q![!]!7s!]!^!8V!^!_!8g!_!`!9d!`!a!:[!a!b!<R!b!c%T!c!}2`!}#O!=d#O#P%T#P#Q!=t#Q#R!>U#R#S2`#S#T!>i#T#o2`#o#p!>y#p#q!?O#q#r!?f#r#s!?x#s$f%T$f$g%c$g#BY2`#BY#BZ!@Y#BZ$IS2`$IS$I_!@Y$I_$I|2`$I|$I}!Bq$I}$JO!Bq$JO$JT2`$JT$JU!@Y$JU$KV2`$KV$KW!@Y$KW&FU2`&FU&FV!@Y&FV?HT2`?HT?HU!@Y?HU~2`W%YR$QWO!^%T!_#o%T#p~%T,T%jg$QW'T+{OX%TXY%cYZ%TZ[%c[p%Tpq%cq!^%T!_#o%T#p$f%T$f$g%c$g#BY%T#BY#BZ%c#BZ$IS%T$IS$I_%c$I_$JT%T$JT$JU%c$JU$KV%T$KV$KW%c$KW&FU%T&FU&FV%c&FV?HT%T?HT?HU%c?HU~%T,T'YR$QW'U+{O!^%T!_#o%T#p~%T$T'jS$QW!f#{O!^%T!_!`'v!`#o%T#p~%T$O'}S#a#v$QWO!^%T!_!`(Z!`#o%T#p~%T$O(bR#a#v$QWO!^%T!_#o%T#p~%T'u(rZ$QW]!ROY(kYZ)eZr(krs*rs!^(k!^!_+U!_#O(k#O#P-b#P#o(k#o#p+U#p~(k&r)jV$QWOr)ers*Ps!^)e!^!_*a!_#o)e#o#p*a#p~)e&r*WR#{&j$QWO!^%T!_#o%T#p~%T&j*dROr*ars*ms~*a&j*rO#{&j'u*{R#{&j$QW]!RO!^%T!_#o%T#p~%T'm+ZV]!ROY+UYZ*aZr+Urs+ps#O+U#O#P+w#P~+U'm+wO#{&j]!R'm+zROr+Urs,Ts~+U'm,[U#{&j]!ROY,nZr,nrs-Vs#O,n#O#P-[#P~,n!R,sU]!ROY,nZr,nrs-Vs#O,n#O#P-[#P~,n!R-[O]!R!R-_PO~,n'u-gV$QWOr(krs-|s!^(k!^!_+U!_#o(k#o#p+U#p~(k'u.VZ#{&j$QW]!ROY.xYZ%TZr.xrs/rs!^.x!^!_,n!_#O.x#O#P0S#P#o.x#o#p,n#p~.x!Z/PZ$QW]!ROY.xYZ%TZr.xrs/rs!^.x!^!_,n!_#O.x#O#P0S#P#o.x#o#p,n#p~.x!Z/yR$QW]!RO!^%T!_#o%T#p~%T!Z0XT$QWO!^.x!^!_,n!_#o.x#o#p,n#p~.xy0mZ$QWOt%Ttu1`u!^%T!_!c%T!c!}1`!}#R%T#R#S1`#S#T%T#T#o1`#p$g%T$g~1`y1g]$QW'mqOt%Ttu1`u!Q%T!Q![1`![!^%T!_!c%T!c!}1`!}#R%T#R#S1`#S#T%T#T#o1`#p$g%T$g~1`&i2k_$QW#vS'W%k'dpOt%Ttu2`u}%T}!O3j!O!Q%T!Q![2`![!^%T!_!c%T!c!}2`!}#R%T#R#S2`#S#T%T#T#o2`#p$g%T$g~2`[3q_$QW#vSOt%Ttu3ju}%T}!O3j!O!Q%T!Q![3j![!^%T!_!c%T!c!}3j!}#R%T#R#S3j#S#T%T#T#o3j#p$g%T$g~3j$O4wS#Y#v$QWO!^%T!_!`5T!`#o%T#p~%T$O5[R$QW#k#vO!^%T!_#o%T#p~%T%r5lU'v%j$QWOv%Tvw6Ow!^%T!_!`5T!`#o%T#p~%T$O6VS$QW#e#vO!^%T!_!`5T!`#o%T#p~%T'u6jZ$QW]!ROY6cYZ7]Zw6cwx*rx!^6c!^!_8T!_#O6c#O#P:T#P#o6c#o#p8T#p~6c&r7bV$QWOw7]wx*Px!^7]!^!_7w!_#o7]#o#p7w#p~7]&j7zROw7wwx*mx~7w'm8YV]!ROY8TYZ7wZw8Twx+px#O8T#O#P8o#P~8T'm8rROw8Twx8{x~8T'm9SU#{&j]!ROY9fZw9fwx-Vx#O9f#O#P9}#P~9f!R9kU]!ROY9fZw9fwx-Vx#O9f#O#P9}#P~9f!R:QPO~9f'u:YV$QWOw6cwx:ox!^6c!^!_8T!_#o6c#o#p8T#p~6c'u:xZ#{&j$QW]!ROY;kYZ%TZw;kwx/rx!^;k!^!_9f!_#O;k#O#P<e#P#o;k#o#p9f#p~;k!Z;rZ$QW]!ROY;kYZ%TZw;kwx/rx!^;k!^!_9f!_#O;k#O#P<e#P#o;k#o#p9f#p~;k!Z<jT$QWO!^;k!^!_9f!_#o;k#o#p9f#p~;k%V=QR!`$}$QWO!^%T!_#o%T#p~%TZ=bR!_R$QWO!^%T!_#o%T#p~%T%R=tU'X!R#Z#v$QWOz%Tz{>W{!^%T!_!`5T!`#o%T#p~%T$O>_S#W#v$QWO!^%T!_!`5T!`#o%T#p~%T$u>rSi$m$QWO!^%T!_!`5T!`#o%T#p~%T&i?VR}&a$QWO!^%T!_#o%T#p~%T&i?gVr%n$QWO!O%T!O!P?|!P!Q%T!Q![@r![!^%T!_#o%T#p~%Ty@RT$QWO!O%T!O!P@b!P!^%T!_#o%T#p~%Ty@iR|q$QWO!^%T!_#o%T#p~%Ty@yZ$QWjqO!Q%T!Q![@r![!^%T!_!g%T!g!hAl!h#R%T#R#S@r#S#X%T#X#YAl#Y#o%T#p~%TyAqZ$QWO{%T{|Bd|}%T}!OBd!O!Q%T!Q![CO![!^%T!_#R%T#R#SCO#S#o%T#p~%TyBiV$QWO!Q%T!Q![CO![!^%T!_#R%T#R#SCO#S#o%T#p~%TyCVV$QWjqO!Q%T!Q![CO![!^%T!_#R%T#R#SCO#S#o%T#p~%T,TCs`$QW#X#vOYDuYZ%TZzDuz{Jl{!PDu!P!Q!-e!Q!^Du!^!_Fx!_!`!.^!`!a!/]!a!}Du!}#OHq#O#PJQ#P#oDu#o#pFx#p~DuXD|[$QWyPOYDuYZ%TZ!PDu!P!QEr!Q!^Du!^!_Fx!_!}Du!}#OHq#O#PJQ#P#oDu#o#pFx#p~DuXEy_$QWyPO!^%T!_#Z%T#Z#[Er#[#]%T#]#^Er#^#a%T#a#bEr#b#g%T#g#hEr#h#i%T#i#jEr#j#m%T#m#nEr#n#o%T#p~%TPF}VyPOYFxZ!PFx!P!QGd!Q!}Fx!}#OG{#O#PHh#P~FxPGiUyP#Z#[Gd#]#^Gd#a#bGd#g#hGd#i#jGd#m#nGdPHOTOYG{Z#OG{#O#PH_#P#QFx#Q~G{PHbQOYG{Z~G{PHkQOYFxZ~FxXHvY$QWOYHqYZ%TZ!^Hq!^!_G{!_#OHq#O#PIf#P#QDu#Q#oHq#o#pG{#p~HqXIkV$QWOYHqYZ%TZ!^Hq!^!_G{!_#oHq#o#pG{#p~HqXJVV$QWOYDuYZ%TZ!^Du!^!_Fx!_#oDu#o#pFx#p~Du,TJs^$QWyPOYJlYZKoZzJlz{NQ{!PJl!P!Q!,R!Q!^Jl!^!_!!]!_!}Jl!}#O!'|#O#P!+a#P#oJl#o#p!!]#p~Jl,TKtV$QWOzKoz{LZ{!^Ko!^!_M]!_#oKo#o#pM]#p~Ko,TL`X$QWOzKoz{LZ{!PKo!P!QL{!Q!^Ko!^!_M]!_#oKo#o#pM]#p~Ko,TMSR$QWT+{O!^%T!_#o%T#p~%T+{M`ROzM]z{Mi{~M]+{MlTOzM]z{Mi{!PM]!P!QM{!Q~M]+{NQOT+{,TNX^$QWyPOYJlYZKoZzJlz{NQ{!PJl!P!Q! T!Q!^Jl!^!_!!]!_!}Jl!}#O!'|#O#P!+a#P#oJl#o#p!!]#p~Jl,T! ^_$QWT+{yPO!^%T!_#Z%T#Z#[Er#[#]%T#]#^Er#^#a%T#a#bEr#b#g%T#g#hEr#h#i%T#i#jEr#j#m%T#m#nEr#n#o%T#p~%T+{!!bYyPOY!!]YZM]Zz!!]z{!#Q{!P!!]!P!Q!&x!Q!}!!]!}#O!$`#O#P!&f#P~!!]+{!#VYyPOY!!]YZM]Zz!!]z{!#Q{!P!!]!P!Q!#u!Q!}!!]!}#O!$`#O#P!&f#P~!!]+{!#|UT+{yP#Z#[Gd#]#^Gd#a#bGd#g#hGd#i#jGd#m#nGd+{!$cWOY!$`YZM]Zz!$`z{!${{#O!$`#O#P!&S#P#Q!!]#Q~!$`+{!%OYOY!$`YZM]Zz!$`z{!${{!P!$`!P!Q!%n!Q#O!$`#O#P!&S#P#Q!!]#Q~!$`+{!%sTT+{OYG{Z#OG{#O#PH_#P#QFx#Q~G{+{!&VTOY!$`YZM]Zz!$`z{!${{~!$`+{!&iTOY!!]YZM]Zz!!]z{!#Q{~!!]+{!&}_yPOzM]z{Mi{#ZM]#Z#[!&x#[#]M]#]#^!&x#^#aM]#a#b!&x#b#gM]#g#h!&x#h#iM]#i#j!&x#j#mM]#m#n!&x#n~M],T!(R[$QWOY!'|YZKoZz!'|z{!(w{!^!'|!^!_!$`!_#O!'|#O#P!*o#P#QJl#Q#o!'|#o#p!$`#p~!'|,T!(|^$QWOY!'|YZKoZz!'|z{!(w{!P!'|!P!Q!)x!Q!^!'|!^!_!$`!_#O!'|#O#P!*o#P#QJl#Q#o!'|#o#p!$`#p~!'|,T!*PY$QWT+{OYHqYZ%TZ!^Hq!^!_G{!_#OHq#O#PIf#P#QDu#Q#oHq#o#pG{#p~Hq,T!*tX$QWOY!'|YZKoZz!'|z{!(w{!^!'|!^!_!$`!_#o!'|#o#p!$`#p~!'|,T!+fX$QWOYJlYZKoZzJlz{NQ{!^Jl!^!_!!]!_#oJl#o#p!!]#p~Jl,T!,Yc$QWyPOzKoz{LZ{!^Ko!^!_M]!_#ZKo#Z#[!,R#[#]Ko#]#^!,R#^#aKo#a#b!,R#b#gKo#g#h!,R#h#iKo#i#j!,R#j#mKo#m#n!,R#n#oKo#o#pM]#p~Ko,T!-lV$QWS+{OY!-eYZ%TZ!^!-e!^!_!.R!_#o!-e#o#p!.R#p~!-e+{!.WQS+{OY!.RZ~!.R$P!.g[$QW#k#vyPOYDuYZ%TZ!PDu!P!QEr!Q!^Du!^!_Fx!_!}Du!}#OHq#O#PJQ#P#oDu#o#pFx#p~Du]!/f[#sS$QWyPOYDuYZ%TZ!PDu!P!QEr!Q!^Du!^!_Fx!_!}Du!}#OHq#O#PJQ#P#oDu#o#pFx#p~Duy!0cd$QWjqO!O%T!O!P@r!P!Q%T!Q![!1q![!^%T!_!g%T!g!hAl!h#R%T#R#S!1q#S#U%T#U#V!3X#V#X%T#X#YAl#Y#b%T#b#c!2w#c#d!4m#d#l%T#l#m!5{#m#o%T#p~%Ty!1x_$QWjqO!O%T!O!P@r!P!Q%T!Q![!1q![!^%T!_!g%T!g!hAl!h#R%T#R#S!1q#S#X%T#X#YAl#Y#b%T#b#c!2w#c#o%T#p~%Ty!3OR$QWjqO!^%T!_#o%T#p~%Ty!3^W$QWO!Q%T!Q!R!3v!R!S!3v!S!^%T!_#R%T#R#S!3v#S#o%T#p~%Ty!3}Y$QWjqO!Q%T!Q!R!3v!R!S!3v!S!^%T!_#R%T#R#S!3v#S#b%T#b#c!2w#c#o%T#p~%Ty!4rV$QWO!Q%T!Q!Y!5X!Y!^%T!_#R%T#R#S!5X#S#o%T#p~%Ty!5`X$QWjqO!Q%T!Q!Y!5X!Y!^%T!_#R%T#R#S!5X#S#b%T#b#c!2w#c#o%T#p~%Ty!6QZ$QWO!Q%T!Q![!6s![!^%T!_!c%T!c!i!6s!i#R%T#R#S!6s#S#T%T#T#Z!6s#Z#o%T#p~%Ty!6z]$QWjqO!Q%T!Q![!6s![!^%T!_!c%T!c!i!6s!i#R%T#R#S!6s#S#T%T#T#Z!6s#Z#b%T#b#c!2w#c#o%T#p~%T%w!7|R!XV$QW#i%hO!^%T!_#o%T#p~%T!P!8^R^w$QWO!^%T!_#o%T#p~%T+c!8rR']d!]%Y#t&s'zP!P!Q!8{!^!_!9Q!_!`!9_W!9QO$SW#v!9VP#[#v!_!`!9Y#v!9_O#k#v#v!9dO#]#v%w!9kT!w%o$QWO!^%T!_!`'v!`!a!9z!a#o%T#p~%T$P!:RR#S#w$QWO!^%T!_#o%T#p~%T%w!:gT'[!s#]#v#}S$QWO!^%T!_!`!:v!`!a!;W!a#o%T#p~%T$O!:}R#]#v$QWO!^%T!_#o%T#p~%T$O!;_T#[#v$QWO!^%T!_!`5T!`!a!;n!a#o%T#p~%T$O!;uS#[#v$QWO!^%T!_!`5T!`#o%T#p~%T%w!<YV'n%o$QWO!O%T!O!P!<o!P!^%T!_!a%T!a!b!=P!b#o%T#p~%T$`!<vRs$W$QWO!^%T!_#o%T#p~%T$O!=WS$QW#f#vO!^%T!_!`5T!`#o%T#p~%T&e!=kRu&]$QWO!^%T!_#o%T#p~%TZ!={RzR$QWO!^%T!_#o%T#p~%T$O!>]S#c#v$QWO!^%T!_!`5T!`#o%T#p~%T$P!>pR$QW'a#wO!^%T!_#o%T#p~%T~!?OO!P~%r!?VT'u%j$QWO!^%T!_!`5T!`#o%T#p#q!=P#q~%T$u!?oR!O$k$QW'cQO!^%T!_#o%T#p~%TX!@PR!gP$QWO!^%T!_#o%T#p~%T,T!@gr$QW'T+{#vS'W%k'dpOX%TXY%cYZ%TZ[%c[p%Tpq%cqt%Ttu2`u}%T}!O3j!O!Q%T!Q![2`![!^%T!_!c%T!c!}2`!}#R%T#R#S2`#S#T%T#T#o2`#p$f%T$f$g%c$g#BY2`#BY#BZ!@Y#BZ$IS2`$IS$I_!@Y$I_$JT2`$JT$JU!@Y$JU$KV2`$KV$KW!@Y$KW&FU2`&FU&FV!@Y&FV?HT2`?HT?HU!@Y?HU~2`,T!CO_$QW'U+{#vS'W%k'dpOt%Ttu2`u}%T}!O3j!O!Q%T!Q![2`![!^%T!_!c%T!c!}2`!}#R%T#R#S2`#S#T%T#T#o2`#p$g%T$g~2`",
        tokenizers: [noSemicolon, incdecToken, template, 0, 1, 2, 3, 4, 5, 6, 7, 8, insertSemicolon],
        topRules: {
          "Script": [0, 6]
        },
        dialects: {
          jsx: 11282,
          ts: 11284
        },
        dynamicPrecedences: {
          "145": 1,
          "172": 1
        },
        specialized: [{
          term: 284,
          get: function get(value, stack) {
            return tsExtends(value, stack) << 1;
          }
        }, {
          term: 284,
          get: function get(value) {
            return spec_identifier[value] || -1;
          }
        }, {
          term: 296,
          get: function get(value) {
            return spec_word[value] || -1;
          }
        }, {
          term: 59,
          get: function get(value) {
            return spec_LessThan[value] || -1;
          }
        }],
        tokenPrec: 11305
      });
      /***/

    },

    /***/
    "KV2Y":
    /*!****************************************!*\
      !*** ./node_modules/crelt/index.es.js ***!
      \****************************************/

    /*! exports provided: default */

    /***/
    function KV2Y(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "default", function () {
        return crelt;
      });

      function crelt() {
        var elt = arguments[0];
        if (typeof elt == "string") elt = document.createElement(elt);
        var i = 1,
            next = arguments[1];

        if (next && typeof next == "object" && next.nodeType == null && !Array.isArray(next)) {
          for (var name in next) {
            if (Object.prototype.hasOwnProperty.call(next, name)) {
              var value = next[name];
              if (typeof value == "string") elt.setAttribute(name, value);else if (value != null) elt[name] = value;
            }
          }

          i++;
        }

        for (; i < arguments.length; i++) {
          add(elt, arguments[i]);
        }

        return elt;
      }

      function add(elt, child) {
        if (typeof child == "string") {
          elt.appendChild(document.createTextNode(child));
        } else if (child == null) {} else if (child.nodeType != null) {
          elt.appendChild(child);
        } else if (Array.isArray(child)) {
          for (var i = 0; i < child.length; i++) {
            add(elt, child[i]);
          }
        } else {
          throw new RangeError("Unsupported child node: " + child);
        }
      }
      /***/

    },

    /***/
    "Kcil":
    /*!****************************************************************************************!*\
      !*** ./apps/demo/src/app/examples/codemirror-example/codemirror-example.component.css ***!
      \****************************************************************************************/

    /*! exports provided: default */

    /***/
    function Kcil(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJjb2RlbWlycm9yLWV4YW1wbGUuY29tcG9uZW50LmNzcyJ9 */";
      /***/
    },

    /***/
    "L4B9":
    /*!*********************************************************!*\
      !*** ./node_modules/@codemirror/commands/dist/index.js ***!
      \*********************************************************/

    /*! exports provided: copyLineDown, copyLineUp, cursorCharBackward, cursorCharForward, cursorCharLeft, cursorCharRight, cursorDocEnd, cursorDocStart, cursorGroupBackward, cursorGroupForward, cursorGroupLeft, cursorGroupRight, cursorLineBoundaryBackward, cursorLineBoundaryForward, cursorLineDown, cursorLineEnd, cursorLineStart, cursorLineUp, cursorMatchingBracket, cursorPageDown, cursorPageUp, cursorSubwordBackward, cursorSubwordForward, cursorSyntaxLeft, cursorSyntaxRight, defaultKeymap, deleteCharBackward, deleteCharForward, deleteGroupBackward, deleteGroupForward, deleteLine, deleteToLineEnd, deleteToLineStart, deleteTrailingWhitespace, emacsStyleKeymap, indentLess, indentMore, indentSelection, indentWithTab, insertNewline, insertNewlineAndIndent, insertTab, moveLineDown, moveLineUp, selectAll, selectCharBackward, selectCharForward, selectCharLeft, selectCharRight, selectDocEnd, selectDocStart, selectGroupBackward, selectGroupForward, selectGroupLeft, selectGroupRight, selectLine, selectLineBoundaryBackward, selectLineBoundaryForward, selectLineDown, selectLineEnd, selectLineStart, selectLineUp, selectMatchingBracket, selectPageDown, selectPageUp, selectParentSyntax, selectSubwordBackward, selectSubwordForward, selectSyntaxLeft, selectSyntaxRight, simplifySelection, splitLine, standardKeymap, transposeChars */

    /***/
    function L4B9(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "copyLineDown", function () {
        return copyLineDown;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "copyLineUp", function () {
        return copyLineUp;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "cursorCharBackward", function () {
        return cursorCharBackward;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "cursorCharForward", function () {
        return cursorCharForward;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "cursorCharLeft", function () {
        return cursorCharLeft;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "cursorCharRight", function () {
        return cursorCharRight;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "cursorDocEnd", function () {
        return cursorDocEnd;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "cursorDocStart", function () {
        return cursorDocStart;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "cursorGroupBackward", function () {
        return cursorGroupBackward;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "cursorGroupForward", function () {
        return cursorGroupForward;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "cursorGroupLeft", function () {
        return cursorGroupLeft;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "cursorGroupRight", function () {
        return cursorGroupRight;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "cursorLineBoundaryBackward", function () {
        return cursorLineBoundaryBackward;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "cursorLineBoundaryForward", function () {
        return cursorLineBoundaryForward;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "cursorLineDown", function () {
        return cursorLineDown;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "cursorLineEnd", function () {
        return cursorLineEnd;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "cursorLineStart", function () {
        return cursorLineStart;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "cursorLineUp", function () {
        return cursorLineUp;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "cursorMatchingBracket", function () {
        return cursorMatchingBracket;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "cursorPageDown", function () {
        return cursorPageDown;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "cursorPageUp", function () {
        return cursorPageUp;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "cursorSubwordBackward", function () {
        return cursorSubwordBackward;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "cursorSubwordForward", function () {
        return cursorSubwordForward;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "cursorSyntaxLeft", function () {
        return cursorSyntaxLeft;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "cursorSyntaxRight", function () {
        return cursorSyntaxRight;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "defaultKeymap", function () {
        return defaultKeymap;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "deleteCharBackward", function () {
        return deleteCharBackward;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "deleteCharForward", function () {
        return deleteCharForward;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "deleteGroupBackward", function () {
        return deleteGroupBackward;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "deleteGroupForward", function () {
        return deleteGroupForward;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "deleteLine", function () {
        return deleteLine;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "deleteToLineEnd", function () {
        return deleteToLineEnd;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "deleteToLineStart", function () {
        return deleteToLineStart;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "deleteTrailingWhitespace", function () {
        return deleteTrailingWhitespace;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "emacsStyleKeymap", function () {
        return emacsStyleKeymap;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "indentLess", function () {
        return indentLess;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "indentMore", function () {
        return indentMore;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "indentSelection", function () {
        return indentSelection;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "indentWithTab", function () {
        return indentWithTab;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "insertNewline", function () {
        return insertNewline;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "insertNewlineAndIndent", function () {
        return insertNewlineAndIndent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "insertTab", function () {
        return insertTab;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "moveLineDown", function () {
        return moveLineDown;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "moveLineUp", function () {
        return moveLineUp;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "selectAll", function () {
        return selectAll;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "selectCharBackward", function () {
        return selectCharBackward;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "selectCharForward", function () {
        return selectCharForward;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "selectCharLeft", function () {
        return selectCharLeft;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "selectCharRight", function () {
        return selectCharRight;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "selectDocEnd", function () {
        return selectDocEnd;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "selectDocStart", function () {
        return selectDocStart;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "selectGroupBackward", function () {
        return selectGroupBackward;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "selectGroupForward", function () {
        return selectGroupForward;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "selectGroupLeft", function () {
        return selectGroupLeft;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "selectGroupRight", function () {
        return selectGroupRight;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "selectLine", function () {
        return selectLine;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "selectLineBoundaryBackward", function () {
        return selectLineBoundaryBackward;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "selectLineBoundaryForward", function () {
        return selectLineBoundaryForward;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "selectLineDown", function () {
        return selectLineDown;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "selectLineEnd", function () {
        return selectLineEnd;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "selectLineStart", function () {
        return selectLineStart;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "selectLineUp", function () {
        return selectLineUp;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "selectMatchingBracket", function () {
        return selectMatchingBracket;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "selectPageDown", function () {
        return selectPageDown;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "selectPageUp", function () {
        return selectPageUp;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "selectParentSyntax", function () {
        return selectParentSyntax;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "selectSubwordBackward", function () {
        return selectSubwordBackward;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "selectSubwordForward", function () {
        return selectSubwordForward;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "selectSyntaxLeft", function () {
        return selectSyntaxLeft;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "selectSyntaxRight", function () {
        return selectSyntaxRight;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "simplifySelection", function () {
        return simplifySelection;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "splitLine", function () {
        return splitLine;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "standardKeymap", function () {
        return standardKeymap;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "transposeChars", function () {
        return transposeChars;
      });
      /* harmony import */


      var _codemirror_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @codemirror/state */
      "4eob");
      /* harmony import */


      var _codemirror_text__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @codemirror/text */
      "uZp5");
      /* harmony import */


      var _codemirror_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @codemirror/view */
      "AtEE");
      /* harmony import */


      var _codemirror_matchbrackets__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @codemirror/matchbrackets */
      "WYGy");
      /* harmony import */


      var _codemirror_language__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @codemirror/language */
      "yqQ+");
      /* harmony import */


      var _lezer_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @lezer/common */
      "lmln");

      function updateSel(sel, by) {
        return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].create(sel.ranges.map(by), sel.mainIndex);
      }

      function setSel(state, selection) {
        return state.update({
          selection: selection,
          scrollIntoView: true,
          userEvent: "select"
        });
      }

      function moveSel(_ref32, how) {
        var state = _ref32.state,
            dispatch = _ref32.dispatch;
        var selection = updateSel(state.selection, how);
        if (selection.eq(state.selection)) return false;
        dispatch(setSel(state, selection));
        return true;
      }

      function rangeEnd(range, forward) {
        return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(forward ? range.to : range.from);
      }

      function cursorByChar(view, forward) {
        return moveSel(view, function (range) {
          return range.empty ? view.moveByChar(range, forward) : rangeEnd(range, forward);
        });
      }
      /**
      Move the selection one character to the left (which is backward in
      left-to-right text, forward in right-to-left text).
      */


      var cursorCharLeft = function cursorCharLeft(view) {
        return cursorByChar(view, view.textDirection != _codemirror_view__WEBPACK_IMPORTED_MODULE_2__["Direction"].LTR);
      };
      /**
      Move the selection one character to the right.
      */


      var cursorCharRight = function cursorCharRight(view) {
        return cursorByChar(view, view.textDirection == _codemirror_view__WEBPACK_IMPORTED_MODULE_2__["Direction"].LTR);
      };
      /**
      Move the selection one character forward.
      */


      var cursorCharForward = function cursorCharForward(view) {
        return cursorByChar(view, true);
      };
      /**
      Move the selection one character backward.
      */


      var cursorCharBackward = function cursorCharBackward(view) {
        return cursorByChar(view, false);
      };

      function cursorByGroup(view, forward) {
        return moveSel(view, function (range) {
          return range.empty ? view.moveByGroup(range, forward) : rangeEnd(range, forward);
        });
      }
      /**
      Move the selection to the left across one group of word or
      non-word (but also non-space) characters.
      */


      var cursorGroupLeft = function cursorGroupLeft(view) {
        return cursorByGroup(view, view.textDirection != _codemirror_view__WEBPACK_IMPORTED_MODULE_2__["Direction"].LTR);
      };
      /**
      Move the selection one group to the right.
      */


      var cursorGroupRight = function cursorGroupRight(view) {
        return cursorByGroup(view, view.textDirection == _codemirror_view__WEBPACK_IMPORTED_MODULE_2__["Direction"].LTR);
      };
      /**
      Move the selection one group forward.
      */


      var cursorGroupForward = function cursorGroupForward(view) {
        return cursorByGroup(view, true);
      };
      /**
      Move the selection one group backward.
      */


      var cursorGroupBackward = function cursorGroupBackward(view) {
        return cursorByGroup(view, false);
      };

      function moveBySubword(view, range, forward) {
        var categorize = view.state.charCategorizer(range.from);
        return view.moveByChar(range, forward, function (start) {
          var cat = _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["CharCategory"].Space,
              pos = range.from;
          var done = false,
              sawUpper = false,
              sawLower = false;

          var step = function step(next) {
            if (done) return false;
            pos += forward ? next.length : -next.length;
            var nextCat = categorize(next),
                ahead;
            if (cat == _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["CharCategory"].Space) cat = nextCat;
            if (cat != nextCat) return false;

            if (cat == _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["CharCategory"].Word) {
              if (next.toLowerCase() == next) {
                if (!forward && sawUpper) return false;
                sawLower = true;
              } else if (sawLower) {
                if (forward) return false;
                done = true;
              } else {
                if (sawUpper && forward && categorize(ahead = view.state.sliceDoc(pos, pos + 1)) == _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["CharCategory"].Word && ahead.toLowerCase() == ahead) return false;
                sawUpper = true;
              }
            }

            return true;
          };

          step(start);
          return step;
        });
      }

      function cursorBySubword(view, forward) {
        return moveSel(view, function (range) {
          return range.empty ? moveBySubword(view, range, forward) : rangeEnd(range, forward);
        });
      }
      /**
      Move the selection one group or camel-case subword forward.
      */


      var cursorSubwordForward = function cursorSubwordForward(view) {
        return cursorBySubword(view, true);
      };
      /**
      Move the selection one group or camel-case subword backward.
      */


      var cursorSubwordBackward = function cursorSubwordBackward(view) {
        return cursorBySubword(view, false);
      };

      function interestingNode(state, node, bracketProp) {
        if (node.type.prop(bracketProp)) return true;
        var len = node.to - node.from;
        return len && (len > 2 || /[^\s,.;:]/.test(state.sliceDoc(node.from, node.to))) || node.firstChild;
      }

      function moveBySyntax(state, start, forward) {
        var pos = Object(_codemirror_language__WEBPACK_IMPORTED_MODULE_4__["syntaxTree"])(state).resolveInner(start.head);
        var bracketProp = forward ? _lezer_common__WEBPACK_IMPORTED_MODULE_5__["NodeProp"].closedBy : _lezer_common__WEBPACK_IMPORTED_MODULE_5__["NodeProp"].openedBy; // Scan forward through child nodes to see if there's an interesting
        // node ahead.

        for (var at = start.head;;) {
          var next = forward ? pos.childAfter(at) : pos.childBefore(at);
          if (!next) break;
          if (interestingNode(state, next, bracketProp)) pos = next;else at = forward ? next.to : next.from;
        }

        var bracket = pos.type.prop(bracketProp),
            match,
            newPos;
        if (bracket && (match = forward ? Object(_codemirror_matchbrackets__WEBPACK_IMPORTED_MODULE_3__["matchBrackets"])(state, pos.from, 1) : Object(_codemirror_matchbrackets__WEBPACK_IMPORTED_MODULE_3__["matchBrackets"])(state, pos.to, -1)) && match.matched) newPos = forward ? match.end.to : match.end.from;else newPos = forward ? pos.to : pos.from;
        return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(newPos, forward ? -1 : 1);
      }
      /**
      Move the cursor over the next syntactic element to the left.
      */


      var cursorSyntaxLeft = function cursorSyntaxLeft(view) {
        return moveSel(view, function (range) {
          return moveBySyntax(view.state, range, view.textDirection != _codemirror_view__WEBPACK_IMPORTED_MODULE_2__["Direction"].LTR);
        });
      };
      /**
      Move the cursor over the next syntactic element to the right.
      */


      var cursorSyntaxRight = function cursorSyntaxRight(view) {
        return moveSel(view, function (range) {
          return moveBySyntax(view.state, range, view.textDirection == _codemirror_view__WEBPACK_IMPORTED_MODULE_2__["Direction"].LTR);
        });
      };

      function cursorByLine(view, forward) {
        return moveSel(view, function (range) {
          if (!range.empty) return rangeEnd(range, forward);
          var moved = view.moveVertically(range, forward);
          return moved.head != range.head ? moved : view.moveToLineBoundary(range, forward);
        });
      }
      /**
      Move the selection one line up.
      */


      var cursorLineUp = function cursorLineUp(view) {
        return cursorByLine(view, false);
      };
      /**
      Move the selection one line down.
      */


      var cursorLineDown = function cursorLineDown(view) {
        return cursorByLine(view, true);
      };

      function cursorByPage(view, forward) {
        return moveSel(view, function (range) {
          return range.empty ? view.moveVertically(range, forward, view.dom.clientHeight) : rangeEnd(range, forward);
        });
      }
      /**
      Move the selection one page up.
      */


      var cursorPageUp = function cursorPageUp(view) {
        return cursorByPage(view, false);
      };
      /**
      Move the selection one page down.
      */


      var cursorPageDown = function cursorPageDown(view) {
        return cursorByPage(view, true);
      };

      function moveByLineBoundary(view, start, forward) {
        var line = view.visualLineAt(start.head),
            moved = view.moveToLineBoundary(start, forward);
        if (moved.head == start.head && moved.head != (forward ? line.to : line.from)) moved = view.moveToLineBoundary(start, forward, false);

        if (!forward && moved.head == line.from && line.length) {
          var space = /^\s*/.exec(view.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;
          if (space && start.head != line.from + space) moved = _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(line.from + space);
        }

        return moved;
      }
      /**
      Move the selection to the next line wrap point, or to the end of
      the line if there isn't one left on this line.
      */


      var cursorLineBoundaryForward = function cursorLineBoundaryForward(view) {
        return moveSel(view, function (range) {
          return moveByLineBoundary(view, range, true);
        });
      };
      /**
      Move the selection to previous line wrap point, or failing that to
      the start of the line. If the line is indented, and the cursor
      isn't already at the end of the indentation, this will move to the
      end of the indentation instead of the start of the line.
      */


      var cursorLineBoundaryBackward = function cursorLineBoundaryBackward(view) {
        return moveSel(view, function (range) {
          return moveByLineBoundary(view, range, false);
        });
      };
      /**
      Move the selection to the start of the line.
      */


      var cursorLineStart = function cursorLineStart(view) {
        return moveSel(view, function (range) {
          return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(view.visualLineAt(range.head).from, 1);
        });
      };
      /**
      Move the selection to the end of the line.
      */


      var cursorLineEnd = function cursorLineEnd(view) {
        return moveSel(view, function (range) {
          return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(view.visualLineAt(range.head).to, -1);
        });
      };

      function toMatchingBracket(state, dispatch, extend) {
        var found = false,
            selection = updateSel(state.selection, function (range) {
          var matching = Object(_codemirror_matchbrackets__WEBPACK_IMPORTED_MODULE_3__["matchBrackets"])(state, range.head, -1) || Object(_codemirror_matchbrackets__WEBPACK_IMPORTED_MODULE_3__["matchBrackets"])(state, range.head, 1) || range.head > 0 && Object(_codemirror_matchbrackets__WEBPACK_IMPORTED_MODULE_3__["matchBrackets"])(state, range.head - 1, 1) || range.head < state.doc.length && Object(_codemirror_matchbrackets__WEBPACK_IMPORTED_MODULE_3__["matchBrackets"])(state, range.head + 1, -1);
          if (!matching || !matching.end) return range;
          found = true;
          var head = matching.start.from == range.head ? matching.end.to : matching.end.from;
          return extend ? _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].range(range.anchor, head) : _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(head);
        });
        if (!found) return false;
        dispatch(setSel(state, selection));
        return true;
      }
      /**
      Move the selection to the bracket matching the one it is currently
      on, if any.
      */


      var cursorMatchingBracket = function cursorMatchingBracket(_ref33) {
        var state = _ref33.state,
            dispatch = _ref33.dispatch;
        return toMatchingBracket(state, dispatch, false);
      };
      /**
      Extend the selection to the bracket matching the one the selection
      head is currently on, if any.
      */


      var selectMatchingBracket = function selectMatchingBracket(_ref34) {
        var state = _ref34.state,
            dispatch = _ref34.dispatch;
        return toMatchingBracket(state, dispatch, true);
      };

      function extendSel(view, how) {
        var selection = updateSel(view.state.selection, function (range) {
          var head = how(range);
          return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].range(range.anchor, head.head, head.goalColumn);
        });
        if (selection.eq(view.state.selection)) return false;
        view.dispatch(setSel(view.state, selection));
        return true;
      }

      function selectByChar(view, forward) {
        return extendSel(view, function (range) {
          return view.moveByChar(range, forward);
        });
      }
      /**
      Move the selection head one character to the left, while leaving
      the anchor in place.
      */


      var selectCharLeft = function selectCharLeft(view) {
        return selectByChar(view, view.textDirection != _codemirror_view__WEBPACK_IMPORTED_MODULE_2__["Direction"].LTR);
      };
      /**
      Move the selection head one character to the right.
      */


      var selectCharRight = function selectCharRight(view) {
        return selectByChar(view, view.textDirection == _codemirror_view__WEBPACK_IMPORTED_MODULE_2__["Direction"].LTR);
      };
      /**
      Move the selection head one character forward.
      */


      var selectCharForward = function selectCharForward(view) {
        return selectByChar(view, true);
      };
      /**
      Move the selection head one character backward.
      */


      var selectCharBackward = function selectCharBackward(view) {
        return selectByChar(view, false);
      };

      function selectByGroup(view, forward) {
        return extendSel(view, function (range) {
          return view.moveByGroup(range, forward);
        });
      }
      /**
      Move the selection head one [group](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) to
      the left.
      */


      var selectGroupLeft = function selectGroupLeft(view) {
        return selectByGroup(view, view.textDirection != _codemirror_view__WEBPACK_IMPORTED_MODULE_2__["Direction"].LTR);
      };
      /**
      Move the selection head one group to the right.
      */


      var selectGroupRight = function selectGroupRight(view) {
        return selectByGroup(view, view.textDirection == _codemirror_view__WEBPACK_IMPORTED_MODULE_2__["Direction"].LTR);
      };
      /**
      Move the selection head one group forward.
      */


      var selectGroupForward = function selectGroupForward(view) {
        return selectByGroup(view, true);
      };
      /**
      Move the selection head one group backward.
      */


      var selectGroupBackward = function selectGroupBackward(view) {
        return selectByGroup(view, false);
      };

      function selectBySubword(view, forward) {
        return extendSel(view, function (range) {
          return moveBySubword(view, range, forward);
        });
      }
      /**
      Move the selection head one group or camel-case subword forward.
      */


      var selectSubwordForward = function selectSubwordForward(view) {
        return selectBySubword(view, true);
      };
      /**
      Move the selection head one group or subword backward.
      */


      var selectSubwordBackward = function selectSubwordBackward(view) {
        return selectBySubword(view, false);
      };
      /**
      Move the selection head over the next syntactic element to the left.
      */


      var selectSyntaxLeft = function selectSyntaxLeft(view) {
        return extendSel(view, function (range) {
          return moveBySyntax(view.state, range, view.textDirection != _codemirror_view__WEBPACK_IMPORTED_MODULE_2__["Direction"].LTR);
        });
      };
      /**
      Move the selection head over the next syntactic element to the right.
      */


      var selectSyntaxRight = function selectSyntaxRight(view) {
        return extendSel(view, function (range) {
          return moveBySyntax(view.state, range, view.textDirection == _codemirror_view__WEBPACK_IMPORTED_MODULE_2__["Direction"].LTR);
        });
      };

      function selectByLine(view, forward) {
        return extendSel(view, function (range) {
          return view.moveVertically(range, forward);
        });
      }
      /**
      Move the selection head one line up.
      */


      var selectLineUp = function selectLineUp(view) {
        return selectByLine(view, false);
      };
      /**
      Move the selection head one line down.
      */


      var selectLineDown = function selectLineDown(view) {
        return selectByLine(view, true);
      };

      function selectByPage(view, forward) {
        return extendSel(view, function (range) {
          return view.moveVertically(range, forward, view.dom.clientHeight);
        });
      }
      /**
      Move the selection head one page up.
      */


      var selectPageUp = function selectPageUp(view) {
        return selectByPage(view, false);
      };
      /**
      Move the selection head one page down.
      */


      var selectPageDown = function selectPageDown(view) {
        return selectByPage(view, true);
      };
      /**
      Move the selection head to the next line boundary.
      */


      var selectLineBoundaryForward = function selectLineBoundaryForward(view) {
        return extendSel(view, function (range) {
          return moveByLineBoundary(view, range, true);
        });
      };
      /**
      Move the selection head to the previous line boundary.
      */


      var selectLineBoundaryBackward = function selectLineBoundaryBackward(view) {
        return extendSel(view, function (range) {
          return moveByLineBoundary(view, range, false);
        });
      };
      /**
      Move the selection head to the start of the line.
      */


      var selectLineStart = function selectLineStart(view) {
        return extendSel(view, function (range) {
          return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(view.visualLineAt(range.head).from);
        });
      };
      /**
      Move the selection head to the end of the line.
      */


      var selectLineEnd = function selectLineEnd(view) {
        return extendSel(view, function (range) {
          return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(view.visualLineAt(range.head).to);
        });
      };
      /**
      Move the selection to the start of the document.
      */


      var cursorDocStart = function cursorDocStart(_ref35) {
        var state = _ref35.state,
            dispatch = _ref35.dispatch;
        dispatch(setSel(state, {
          anchor: 0
        }));
        return true;
      };
      /**
      Move the selection to the end of the document.
      */


      var cursorDocEnd = function cursorDocEnd(_ref36) {
        var state = _ref36.state,
            dispatch = _ref36.dispatch;
        dispatch(setSel(state, {
          anchor: state.doc.length
        }));
        return true;
      };
      /**
      Move the selection head to the start of the document.
      */


      var selectDocStart = function selectDocStart(_ref37) {
        var state = _ref37.state,
            dispatch = _ref37.dispatch;
        dispatch(setSel(state, {
          anchor: state.selection.main.anchor,
          head: 0
        }));
        return true;
      };
      /**
      Move the selection head to the end of the document.
      */


      var selectDocEnd = function selectDocEnd(_ref38) {
        var state = _ref38.state,
            dispatch = _ref38.dispatch;
        dispatch(setSel(state, {
          anchor: state.selection.main.anchor,
          head: state.doc.length
        }));
        return true;
      };
      /**
      Select the entire document.
      */


      var selectAll = function selectAll(_ref39) {
        var state = _ref39.state,
            dispatch = _ref39.dispatch;
        dispatch(state.update({
          selection: {
            anchor: 0,
            head: state.doc.length
          },
          userEvent: "select"
        }));
        return true;
      };
      /**
      Expand the selection to cover entire lines.
      */


      var selectLine = function selectLine(_ref40) {
        var state = _ref40.state,
            dispatch = _ref40.dispatch;
        var ranges = selectedLineBlocks(state).map(function (_ref41) {
          var from = _ref41.from,
              to = _ref41.to;
          return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].range(from, Math.min(to + 1, state.doc.length));
        });
        dispatch(state.update({
          selection: _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].create(ranges),
          userEvent: "select"
        }));
        return true;
      };
      /**
      Select the next syntactic construct that is larger than the
      selection. Note that this will only work insofar as the language
      [provider](https://codemirror.net/6/docs/ref/#language.language) you use builds up a full
      syntax tree.
      */


      var selectParentSyntax = function selectParentSyntax(_ref42) {
        var state = _ref42.state,
            dispatch = _ref42.dispatch;
        var selection = updateSel(state.selection, function (range) {
          var _a;

          var context = Object(_codemirror_language__WEBPACK_IMPORTED_MODULE_4__["syntaxTree"])(state).resolveInner(range.head, 1);

          while (!(context.from < range.from && context.to >= range.to || context.to > range.to && context.from <= range.from || !((_a = context.parent) === null || _a === void 0 ? void 0 : _a.parent))) {
            context = context.parent;
          }

          return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].range(context.to, context.from);
        });
        dispatch(setSel(state, selection));
        return true;
      };
      /**
      Simplify the current selection. When multiple ranges are selected,
      reduce it to its main range. Otherwise, if the selection is
      non-empty, convert it to a cursor selection.
      */


      var simplifySelection = function simplifySelection(_ref43) {
        var state = _ref43.state,
            dispatch = _ref43.dispatch;
        var cur = state.selection,
            selection = null;
        if (cur.ranges.length > 1) selection = _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].create([cur.main]);else if (!cur.main.empty) selection = _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].create([_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(cur.main.head)]);
        if (!selection) return false;
        dispatch(setSel(state, selection));
        return true;
      };

      function deleteBy(_ref44, by) {
        var state = _ref44.state,
            dispatch = _ref44.dispatch;
        if (state.readOnly) return false;
        var event = "delete.selection";
        var changes = state.changeByRange(function (range) {
          var from = range.from,
              to = range.to;

          if (from == to) {
            var towards = by(from);
            if (towards < from) event = "delete.backward";else if (towards > from) event = "delete.forward";
            from = Math.min(from, towards);
            to = Math.max(to, towards);
          }

          return from == to ? {
            range: range
          } : {
            changes: {
              from: from,
              to: to
            },
            range: _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(from)
          };
        });
        if (changes.changes.empty) return false;
        dispatch(state.update(changes, {
          scrollIntoView: true,
          userEvent: event
        }));
        return true;
      }

      function skipAtomic(target, pos, forward) {
        if (target instanceof _codemirror_view__WEBPACK_IMPORTED_MODULE_2__["EditorView"]) {
          var _iterator167 = _createForOfIteratorHelper(target.pluginField(_codemirror_view__WEBPACK_IMPORTED_MODULE_2__["PluginField"].atomicRanges)),
              _step167;

          try {
            for (_iterator167.s(); !(_step167 = _iterator167.n()).done;) {
              var ranges = _step167.value;
              ranges.between(pos, pos, function (from, to) {
                if (from < pos && to > pos) pos = forward ? to : from;
              });
            }
          } catch (err) {
            _iterator167.e(err);
          } finally {
            _iterator167.f();
          }
        }

        return pos;
      }

      var deleteByChar = function deleteByChar(target, forward) {
        return deleteBy(target, function (pos) {
          var state = target.state,
              line = state.doc.lineAt(pos),
              before,
              targetPos;

          if (!forward && pos > line.from && pos < line.from + 200 && !/[^ \t]/.test(before = line.text.slice(0, pos - line.from))) {
            if (before[before.length - 1] == "\t") return pos - 1;
            var col = Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_1__["countColumn"])(before, state.tabSize),
                drop = col % Object(_codemirror_language__WEBPACK_IMPORTED_MODULE_4__["getIndentUnit"])(state) || Object(_codemirror_language__WEBPACK_IMPORTED_MODULE_4__["getIndentUnit"])(state);

            for (var _i125 = 0; _i125 < drop && before[before.length - 1 - _i125] == " "; _i125++) {
              pos--;
            }

            targetPos = pos;
          } else {
            targetPos = Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_1__["findClusterBreak"])(line.text, pos - line.from, forward) + line.from;
            if (targetPos == pos && line.number != (forward ? state.doc.lines : 1)) targetPos += forward ? 1 : -1;
          }

          return skipAtomic(target, targetPos, forward);
        });
      };
      /**
      Delete the selection, or, for cursor selections, the character
      before the cursor.
      */


      var deleteCharBackward = function deleteCharBackward(view) {
        return deleteByChar(view, false);
      };
      /**
      Delete the selection or the character after the cursor.
      */


      var deleteCharForward = function deleteCharForward(view) {
        return deleteByChar(view, true);
      };

      var deleteByGroup = function deleteByGroup(target, forward) {
        return deleteBy(target, function (start) {
          var pos = start,
              state = target.state,
              line = state.doc.lineAt(pos);
          var categorize = state.charCategorizer(pos);

          for (var cat = null;;) {
            if (pos == (forward ? line.to : line.from)) {
              if (pos == start && line.number != (forward ? state.doc.lines : 1)) pos += forward ? 1 : -1;
              break;
            }

            var next = Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_1__["findClusterBreak"])(line.text, pos - line.from, forward) + line.from;
            var nextChar = line.text.slice(Math.min(pos, next) - line.from, Math.max(pos, next) - line.from);
            var nextCat = categorize(nextChar);
            if (cat != null && nextCat != cat) break;
            if (nextChar != " " || pos != start) cat = nextCat;
            pos = next;
          }

          return skipAtomic(target, pos, forward);
        });
      };
      /**
      Delete the selection or backward until the end of the next
      [group](https://codemirror.net/6/docs/ref/#view.EditorView.moveByGroup), only skipping groups of
      whitespace when they consist of a single space.
      */


      var deleteGroupBackward = function deleteGroupBackward(target) {
        return deleteByGroup(target, false);
      };
      /**
      Delete the selection or forward until the end of the next group.
      */


      var deleteGroupForward = function deleteGroupForward(target) {
        return deleteByGroup(target, true);
      };
      /**
      Delete the selection, or, if it is a cursor selection, delete to
      the end of the line. If the cursor is directly at the end of the
      line, delete the line break after it.
      */


      var deleteToLineEnd = function deleteToLineEnd(view) {
        return deleteBy(view, function (pos) {
          var lineEnd = view.visualLineAt(pos).to;
          return skipAtomic(view, pos < lineEnd ? lineEnd : Math.min(view.state.doc.length, pos + 1), true);
        });
      };
      /**
      Delete the selection, or, if it is a cursor selection, delete to
      the start of the line. If the cursor is directly at the start of the
      line, delete the line break before it.
      */


      var deleteToLineStart = function deleteToLineStart(view) {
        return deleteBy(view, function (pos) {
          var lineStart = view.visualLineAt(pos).from;
          return skipAtomic(view, pos > lineStart ? lineStart : Math.max(0, pos - 1), false);
        });
      };
      /**
      Delete all whitespace directly before a line end from the
      document.
      */


      var deleteTrailingWhitespace = function deleteTrailingWhitespace(_ref45) {
        var state = _ref45.state,
            dispatch = _ref45.dispatch;
        if (state.readOnly) return false;
        var changes = [];

        for (var pos = 0, prev = "", iter = state.doc.iter();;) {
          iter.next();

          if (iter.lineBreak || iter.done) {
            var trailing = prev.search(/\s+$/);
            if (trailing > -1) changes.push({
              from: pos - (prev.length - trailing),
              to: pos
            });
            if (iter.done) break;
            prev = "";
          } else {
            prev = iter.value;
          }

          pos += iter.value.length;
        }

        if (!changes.length) return false;
        dispatch(state.update({
          changes: changes,
          userEvent: "delete"
        }));
        return true;
      };
      /**
      Replace each selection range with a line break, leaving the cursor
      on the line before the break.
      */


      var splitLine = function splitLine(_ref46) {
        var state = _ref46.state,
            dispatch = _ref46.dispatch;
        if (state.readOnly) return false;
        var changes = state.changeByRange(function (range) {
          return {
            changes: {
              from: range.from,
              to: range.to,
              insert: _codemirror_text__WEBPACK_IMPORTED_MODULE_1__["Text"].of(["", ""])
            },
            range: _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(range.from)
          };
        });
        dispatch(state.update(changes, {
          scrollIntoView: true,
          userEvent: "input"
        }));
        return true;
      };
      /**
      Flip the characters before and after the cursor(s).
      */


      var transposeChars = function transposeChars(_ref47) {
        var state = _ref47.state,
            dispatch = _ref47.dispatch;
        if (state.readOnly) return false;
        var changes = state.changeByRange(function (range) {
          if (!range.empty || range.from == 0 || range.from == state.doc.length) return {
            range: range
          };
          var pos = range.from,
              line = state.doc.lineAt(pos);
          var from = pos == line.from ? pos - 1 : Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_1__["findClusterBreak"])(line.text, pos - line.from, false) + line.from;
          var to = pos == line.to ? pos + 1 : Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_1__["findClusterBreak"])(line.text, pos - line.from, true) + line.from;
          return {
            changes: {
              from: from,
              to: to,
              insert: state.doc.slice(pos, to).append(state.doc.slice(from, pos))
            },
            range: _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(to)
          };
        });
        if (changes.changes.empty) return false;
        dispatch(state.update(changes, {
          scrollIntoView: true,
          userEvent: "move.character"
        }));
        return true;
      };

      function selectedLineBlocks(state) {
        var blocks = [],
            upto = -1;

        var _iterator168 = _createForOfIteratorHelper(state.selection.ranges),
            _step168;

        try {
          for (_iterator168.s(); !(_step168 = _iterator168.n()).done;) {
            var range = _step168.value;
            var startLine = state.doc.lineAt(range.from),
                endLine = state.doc.lineAt(range.to);
            if (!range.empty && range.to == endLine.from) endLine = state.doc.lineAt(range.to - 1);

            if (upto >= startLine.number) {
              var prev = blocks[blocks.length - 1];
              prev.to = endLine.to;
              prev.ranges.push(range);
            } else {
              blocks.push({
                from: startLine.from,
                to: endLine.to,
                ranges: [range]
              });
            }

            upto = endLine.number + 1;
          }
        } catch (err) {
          _iterator168.e(err);
        } finally {
          _iterator168.f();
        }

        return blocks;
      }

      function moveLine(state, dispatch, forward) {
        if (state.readOnly) return false;
        var changes = [],
            ranges = [];

        var _iterator169 = _createForOfIteratorHelper(selectedLineBlocks(state)),
            _step169;

        try {
          for (_iterator169.s(); !(_step169 = _iterator169.n()).done;) {
            var block = _step169.value;
            if (forward ? block.to == state.doc.length : block.from == 0) continue;
            var nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1);
            var size = nextLine.length + 1;

            if (forward) {
              changes.push({
                from: block.to,
                to: nextLine.to
              }, {
                from: block.from,
                insert: nextLine.text + state.lineBreak
              });

              var _iterator170 = _createForOfIteratorHelper(block.ranges),
                  _step170;

              try {
                for (_iterator170.s(); !(_step170 = _iterator170.n()).done;) {
                  var r = _step170.value;
                  ranges.push(_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].range(Math.min(state.doc.length, r.anchor + size), Math.min(state.doc.length, r.head + size)));
                }
              } catch (err) {
                _iterator170.e(err);
              } finally {
                _iterator170.f();
              }
            } else {
              changes.push({
                from: nextLine.from,
                to: block.from
              }, {
                from: block.to,
                insert: state.lineBreak + nextLine.text
              });

              var _iterator171 = _createForOfIteratorHelper(block.ranges),
                  _step171;

              try {
                for (_iterator171.s(); !(_step171 = _iterator171.n()).done;) {
                  var _r10 = _step171.value;
                  ranges.push(_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].range(_r10.anchor - size, _r10.head - size));
                }
              } catch (err) {
                _iterator171.e(err);
              } finally {
                _iterator171.f();
              }
            }
          }
        } catch (err) {
          _iterator169.e(err);
        } finally {
          _iterator169.f();
        }

        if (!changes.length) return false;
        dispatch(state.update({
          changes: changes,
          scrollIntoView: true,
          selection: _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].create(ranges, state.selection.mainIndex),
          userEvent: "move.line"
        }));
        return true;
      }
      /**
      Move the selected lines up one line.
      */


      var moveLineUp = function moveLineUp(_ref48) {
        var state = _ref48.state,
            dispatch = _ref48.dispatch;
        return moveLine(state, dispatch, false);
      };
      /**
      Move the selected lines down one line.
      */


      var moveLineDown = function moveLineDown(_ref49) {
        var state = _ref49.state,
            dispatch = _ref49.dispatch;
        return moveLine(state, dispatch, true);
      };

      function copyLine(state, dispatch, forward) {
        if (state.readOnly) return false;
        var changes = [];

        var _iterator172 = _createForOfIteratorHelper(selectedLineBlocks(state)),
            _step172;

        try {
          for (_iterator172.s(); !(_step172 = _iterator172.n()).done;) {
            var block = _step172.value;
            if (forward) changes.push({
              from: block.from,
              insert: state.doc.slice(block.from, block.to) + state.lineBreak
            });else changes.push({
              from: block.to,
              insert: state.lineBreak + state.doc.slice(block.from, block.to)
            });
          }
        } catch (err) {
          _iterator172.e(err);
        } finally {
          _iterator172.f();
        }

        dispatch(state.update({
          changes: changes,
          scrollIntoView: true,
          userEvent: "input.copyline"
        }));
        return true;
      }
      /**
      Create a copy of the selected lines. Keep the selection in the top copy.
      */


      var copyLineUp = function copyLineUp(_ref50) {
        var state = _ref50.state,
            dispatch = _ref50.dispatch;
        return copyLine(state, dispatch, false);
      };
      /**
      Create a copy of the selected lines. Keep the selection in the bottom copy.
      */


      var copyLineDown = function copyLineDown(_ref51) {
        var state = _ref51.state,
            dispatch = _ref51.dispatch;
        return copyLine(state, dispatch, true);
      };
      /**
      Delete selected lines.
      */


      var deleteLine = function deleteLine(view) {
        if (view.state.readOnly) return false;
        var state = view.state,
            changes = state.changes(selectedLineBlocks(state).map(function (_ref52) {
          var from = _ref52.from,
              to = _ref52.to;
          if (from > 0) from--;else if (to < state.doc.length) to++;
          return {
            from: from,
            to: to
          };
        }));
        var selection = updateSel(state.selection, function (range) {
          return view.moveVertically(range, true);
        }).map(changes);
        view.dispatch({
          changes: changes,
          selection: selection,
          scrollIntoView: true,
          userEvent: "delete.line"
        });
        return true;
      };
      /**
      Replace the selection with a newline.
      */


      var insertNewline = function insertNewline(_ref53) {
        var state = _ref53.state,
            dispatch = _ref53.dispatch;
        dispatch(state.update(state.replaceSelection(state.lineBreak), {
          scrollIntoView: true,
          userEvent: "input"
        }));
        return true;
      };

      function isBetweenBrackets(state, pos) {
        if (/\(\)|\[\]|\{\}/.test(state.sliceDoc(pos - 1, pos + 1))) return {
          from: pos,
          to: pos
        };
        var context = Object(_codemirror_language__WEBPACK_IMPORTED_MODULE_4__["syntaxTree"])(state).resolveInner(pos);
        var before = context.childBefore(pos),
            after = context.childAfter(pos),
            closedBy;
        if (before && after && before.to <= pos && after.from >= pos && (closedBy = before.type.prop(_lezer_common__WEBPACK_IMPORTED_MODULE_5__["NodeProp"].closedBy)) && closedBy.indexOf(after.name) > -1 && state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from) return {
          from: before.to,
          to: after.from
        };
        return null;
      }
      /**
      Replace the selection with a newline and indent the newly created
      line(s). If the current line consists only of whitespace, this
      will also delete that whitespace. When the cursor is between
      matching brackets, an additional newline will be inserted after
      the cursor.
      */


      var insertNewlineAndIndent = function insertNewlineAndIndent(_ref54) {
        var state = _ref54.state,
            dispatch = _ref54.dispatch;
        if (state.readOnly) return false;
        var changes = state.changeByRange(function (_ref55) {
          var from = _ref55.from,
              to = _ref55.to;
          var explode = from == to && isBetweenBrackets(state, from);
          var cx = new _codemirror_language__WEBPACK_IMPORTED_MODULE_4__["IndentContext"](state, {
            simulateBreak: from,
            simulateDoubleBreak: !!explode
          });
          var indent = Object(_codemirror_language__WEBPACK_IMPORTED_MODULE_4__["getIndentation"])(cx, from);
          if (indent == null) indent = /^\s*/.exec(state.doc.lineAt(from).text)[0].length;
          var line = state.doc.lineAt(from);

          while (to < line.to && /\s/.test(line.text[to - line.from])) {
            to++;
          }

          if (explode) {
            from = explode.from;
            to = explode.to;
          } else if (from > line.from && from < line.from + 100 && !/\S/.test(line.text.slice(0, from))) from = line.from;

          var insert = ["", Object(_codemirror_language__WEBPACK_IMPORTED_MODULE_4__["indentString"])(state, indent)];
          if (explode) insert.push(Object(_codemirror_language__WEBPACK_IMPORTED_MODULE_4__["indentString"])(state, cx.lineIndent(line.from, -1)));
          return {
            changes: {
              from: from,
              to: to,
              insert: _codemirror_text__WEBPACK_IMPORTED_MODULE_1__["Text"].of(insert)
            },
            range: _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].cursor(from + 1 + insert[1].length)
          };
        });
        dispatch(state.update(changes, {
          scrollIntoView: true,
          userEvent: "input"
        }));
        return true;
      };

      function changeBySelectedLine(state, f) {
        var atLine = -1;
        return state.changeByRange(function (range) {
          var changes = [];

          for (var pos = range.from; pos <= range.to;) {
            var line = state.doc.lineAt(pos);

            if (line.number > atLine && (range.empty || range.to > line.from)) {
              f(line, changes, range);
              atLine = line.number;
            }

            pos = line.to + 1;
          }

          var changeSet = state.changes(changes);
          return {
            changes: changes,
            range: _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1))
          };
        });
      }
      /**
      Auto-indent the selected lines. This uses the [indentation service
      facet](https://codemirror.net/6/docs/ref/#language.indentService) as source for auto-indent
      information.
      */


      var indentSelection = function indentSelection(_ref56) {
        var state = _ref56.state,
            dispatch = _ref56.dispatch;
        if (state.readOnly) return false;
        var updated = Object.create(null);
        var context = new _codemirror_language__WEBPACK_IMPORTED_MODULE_4__["IndentContext"](state, {
          overrideIndentation: function overrideIndentation(start) {
            var found = updated[start];
            return found == null ? -1 : found;
          }
        });
        var changes = changeBySelectedLine(state, function (line, changes, range) {
          var indent = Object(_codemirror_language__WEBPACK_IMPORTED_MODULE_4__["getIndentation"])(context, line.from);
          if (indent == null) return;
          if (!/\S/.test(line.text)) indent = 0;
          var cur = /^\s*/.exec(line.text)[0];
          var norm = Object(_codemirror_language__WEBPACK_IMPORTED_MODULE_4__["indentString"])(state, indent);

          if (cur != norm || range.from < line.from + cur.length) {
            updated[line.from] = indent;
            changes.push({
              from: line.from,
              to: line.from + cur.length,
              insert: norm
            });
          }
        });
        if (!changes.changes.empty) dispatch(state.update(changes, {
          userEvent: "indent"
        }));
        return true;
      };
      /**
      Add a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation to all selected
      lines.
      */


      var indentMore = function indentMore(_ref57) {
        var state = _ref57.state,
            dispatch = _ref57.dispatch;
        if (state.readOnly) return false;
        dispatch(state.update(changeBySelectedLine(state, function (line, changes) {
          changes.push({
            from: line.from,
            insert: state.facet(_codemirror_language__WEBPACK_IMPORTED_MODULE_4__["indentUnit"])
          });
        }), {
          userEvent: "input.indent"
        }));
        return true;
      };
      /**
      Remove a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation from all
      selected lines.
      */


      var indentLess = function indentLess(_ref58) {
        var state = _ref58.state,
            dispatch = _ref58.dispatch;
        if (state.readOnly) return false;
        dispatch(state.update(changeBySelectedLine(state, function (line, changes) {
          var space = /^\s*/.exec(line.text)[0];
          if (!space) return;
          var col = Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_1__["countColumn"])(space, state.tabSize),
              keep = 0;
          var insert = Object(_codemirror_language__WEBPACK_IMPORTED_MODULE_4__["indentString"])(state, Math.max(0, col - Object(_codemirror_language__WEBPACK_IMPORTED_MODULE_4__["getIndentUnit"])(state)));

          while (keep < space.length && keep < insert.length && space.charCodeAt(keep) == insert.charCodeAt(keep)) {
            keep++;
          }

          changes.push({
            from: line.from + keep,
            to: line.from + space.length,
            insert: insert.slice(keep)
          });
        }), {
          userEvent: "delete.dedent"
        }));
        return true;
      };
      /**
      Insert a tab character at the cursor or, if something is selected,
      use [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore) to indent the entire
      selection.
      */


      var insertTab = function insertTab(_ref59) {
        var state = _ref59.state,
            dispatch = _ref59.dispatch;
        if (state.selection.ranges.some(function (r) {
          return !r.empty;
        })) return indentMore({
          state: state,
          dispatch: dispatch
        });
        dispatch(state.update(state.replaceSelection("\t"), {
          scrollIntoView: true,
          userEvent: "input"
        }));
        return true;
      };
      /**
      Array of key bindings containing the Emacs-style bindings that are
      available on macOS by default.
      
       - Ctrl-b: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
       - Ctrl-f: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
       - Ctrl-p: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
       - Ctrl-n: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
       - Ctrl-a: [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
       - Ctrl-e: [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
       - Ctrl-d: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
       - Ctrl-h: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
       - Ctrl-k: [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd)
       - Ctrl-Alt-h: [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
       - Ctrl-o: [`splitLine`](https://codemirror.net/6/docs/ref/#commands.splitLine)
       - Ctrl-t: [`transposeChars`](https://codemirror.net/6/docs/ref/#commands.transposeChars)
       - Alt-<: [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart)
       - Alt->: [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd)
       - Ctrl-v: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown)
       - Alt-v: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp)
      */


      var emacsStyleKeymap = [{
        key: "Ctrl-b",
        run: cursorCharLeft,
        shift: selectCharLeft,
        preventDefault: true
      }, {
        key: "Ctrl-f",
        run: cursorCharRight,
        shift: selectCharRight
      }, {
        key: "Ctrl-p",
        run: cursorLineUp,
        shift: selectLineUp
      }, {
        key: "Ctrl-n",
        run: cursorLineDown,
        shift: selectLineDown
      }, {
        key: "Ctrl-a",
        run: cursorLineStart,
        shift: selectLineStart
      }, {
        key: "Ctrl-e",
        run: cursorLineEnd,
        shift: selectLineEnd
      }, {
        key: "Ctrl-d",
        run: deleteCharForward
      }, {
        key: "Ctrl-h",
        run: deleteCharBackward
      }, {
        key: "Ctrl-k",
        run: deleteToLineEnd
      }, {
        key: "Ctrl-Alt-h",
        run: deleteGroupBackward
      }, {
        key: "Ctrl-o",
        run: splitLine
      }, {
        key: "Ctrl-t",
        run: transposeChars
      }, {
        key: "Alt-<",
        run: cursorDocStart
      }, {
        key: "Alt->",
        run: cursorDocEnd
      }, {
        key: "Ctrl-v",
        run: cursorPageDown
      }, {
        key: "Alt-v",
        run: cursorPageUp
      }];
      /**
      An array of key bindings closely sticking to platform-standard or
      widely used bindings. (This includes the bindings from
      [`emacsStyleKeymap`](https://codemirror.net/6/docs/ref/#commands.emacsStyleKeymap), with their `key`
      property changed to `mac`.)
      
       - ArrowLeft: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
       - ArrowRight: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
       - Ctrl-ArrowLeft (Alt-ArrowLeft on macOS): [`cursorGroupLeft`](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) ([`selectGroupLeft`](https://codemirror.net/6/docs/ref/#commands.selectGroupLeft) with Shift)
       - Ctrl-ArrowRight (Alt-ArrowRight on macOS): [`cursorGroupRight`](https://codemirror.net/6/docs/ref/#commands.cursorGroupRight) ([`selectGroupRight`](https://codemirror.net/6/docs/ref/#commands.selectGroupRight) with Shift)
       - Cmd-ArrowLeft (on macOS): [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
       - Cmd-ArrowRight (on macOS): [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
       - ArrowUp: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
       - ArrowDown: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
       - Cmd-ArrowUp (on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
       - Cmd-ArrowDown (on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
       - Ctrl-ArrowUp (on macOS): [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
       - Ctrl-ArrowDown (on macOS): [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
       - PageUp: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
       - PageDown: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
       - Home: [`cursorLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryBackward) ([`selectLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryBackward) with Shift)
       - End: [`cursorLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryForward) ([`selectLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryForward) with Shift)
       - Ctrl-Home (Cmd-Home on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
       - Ctrl-End (Cmd-Home on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
       - Enter: [`insertNewlineAndIndent`](https://codemirror.net/6/docs/ref/#commands.insertNewlineAndIndent)
       - Ctrl-a (Cmd-a on macOS): [`selectAll`](https://codemirror.net/6/docs/ref/#commands.selectAll)
       - Backspace: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
       - Delete: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
       - Ctrl-Backspace (Alt-Backspace on macOS): [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
       - Ctrl-Delete (Alt-Delete on macOS): [`deleteGroupForward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupForward)
       - Cmd-Backspace (macOS): [`deleteToLineStart`](https://codemirror.net/6/docs/ref/#commands.deleteToLineStart).
       - Cmd-Delete (macOS): [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd).
      */

      var standardKeymap = /*@__PURE__*/[{
        key: "ArrowLeft",
        run: cursorCharLeft,
        shift: selectCharLeft,
        preventDefault: true
      }, {
        key: "Mod-ArrowLeft",
        mac: "Alt-ArrowLeft",
        run: cursorGroupLeft,
        shift: selectGroupLeft
      }, {
        mac: "Cmd-ArrowLeft",
        run: cursorLineBoundaryBackward,
        shift: selectLineBoundaryBackward
      }, {
        key: "ArrowRight",
        run: cursorCharRight,
        shift: selectCharRight,
        preventDefault: true
      }, {
        key: "Mod-ArrowRight",
        mac: "Alt-ArrowRight",
        run: cursorGroupRight,
        shift: selectGroupRight
      }, {
        mac: "Cmd-ArrowRight",
        run: cursorLineBoundaryForward,
        shift: selectLineBoundaryForward
      }, {
        key: "ArrowUp",
        run: cursorLineUp,
        shift: selectLineUp,
        preventDefault: true
      }, {
        mac: "Cmd-ArrowUp",
        run: cursorDocStart,
        shift: selectDocStart
      }, {
        mac: "Ctrl-ArrowUp",
        run: cursorPageUp,
        shift: selectPageUp
      }, {
        key: "ArrowDown",
        run: cursorLineDown,
        shift: selectLineDown,
        preventDefault: true
      }, {
        mac: "Cmd-ArrowDown",
        run: cursorDocEnd,
        shift: selectDocEnd
      }, {
        mac: "Ctrl-ArrowDown",
        run: cursorPageDown,
        shift: selectPageDown
      }, {
        key: "PageUp",
        run: cursorPageUp,
        shift: selectPageUp
      }, {
        key: "PageDown",
        run: cursorPageDown,
        shift: selectPageDown
      }, {
        key: "Home",
        run: cursorLineBoundaryBackward,
        shift: selectLineBoundaryBackward
      }, {
        key: "Mod-Home",
        run: cursorDocStart,
        shift: selectDocStart
      }, {
        key: "End",
        run: cursorLineBoundaryForward,
        shift: selectLineBoundaryForward
      }, {
        key: "Mod-End",
        run: cursorDocEnd,
        shift: selectDocEnd
      }, {
        key: "Enter",
        run: insertNewlineAndIndent
      }, {
        key: "Mod-a",
        run: selectAll
      }, {
        key: "Backspace",
        run: deleteCharBackward,
        shift: deleteCharBackward
      }, {
        key: "Delete",
        run: deleteCharForward,
        shift: deleteCharForward
      }, {
        key: "Mod-Backspace",
        mac: "Alt-Backspace",
        run: deleteGroupBackward
      }, {
        key: "Mod-Delete",
        mac: "Alt-Delete",
        run: deleteGroupForward
      }, {
        mac: "Mod-Backspace",
        run: deleteToLineStart
      }, {
        mac: "Mod-Delete",
        run: deleteToLineEnd
      }].concat( /*@__PURE__*/emacsStyleKeymap.map(function (b) {
        return {
          mac: b.key,
          run: b.run,
          shift: b.shift
        };
      }));
      /**
      The default keymap. Includes all bindings from
      [`standardKeymap`](https://codemirror.net/6/docs/ref/#commands.standardKeymap) plus the following:
      
      - Alt-ArrowLeft (Ctrl-ArrowLeft on macOS): [`cursorSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxLeft) ([`selectSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxLeft) with Shift)
      - Alt-ArrowRight (Ctrl-ArrowRight on macOS): [`cursorSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxRight) ([`selectSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxRight) with Shift)
      - Alt-ArrowUp: [`moveLineUp`](https://codemirror.net/6/docs/ref/#commands.moveLineUp)
      - Alt-ArrowDown: [`moveLineDown`](https://codemirror.net/6/docs/ref/#commands.moveLineDown)
      - Shift-Alt-ArrowUp: [`copyLineUp`](https://codemirror.net/6/docs/ref/#commands.copyLineUp)
      - Shift-Alt-ArrowDown: [`copyLineDown`](https://codemirror.net/6/docs/ref/#commands.copyLineDown)
      - Escape: [`simplifySelection`](https://codemirror.net/6/docs/ref/#commands.simplifySelection)
      - Alt-l (Ctrl-l on macOS): [`selectLine`](https://codemirror.net/6/docs/ref/#commands.selectLine)
      - Ctrl-i (Cmd-i on macOS): [`selectParentSyntax`](https://codemirror.net/6/docs/ref/#commands.selectParentSyntax)
      - Ctrl-[ (Cmd-[ on macOS): [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess)
      - Ctrl-] (Cmd-] on macOS): [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore)
      - Ctrl-Alt-\\ (Cmd-Alt-\\ on macOS): [`indentSelection`](https://codemirror.net/6/docs/ref/#commands.indentSelection)
      - Shift-Ctrl-k (Shift-Cmd-k on macOS): [`deleteLine`](https://codemirror.net/6/docs/ref/#commands.deleteLine)
      - Shift-Ctrl-\\ (Shift-Cmd-\\ on macOS): [`cursorMatchingBracket`](https://codemirror.net/6/docs/ref/#commands.cursorMatchingBracket)
      */

      var defaultKeymap = /*@__PURE__*/[{
        key: "Alt-ArrowLeft",
        mac: "Ctrl-ArrowLeft",
        run: cursorSyntaxLeft,
        shift: selectSyntaxLeft
      }, {
        key: "Alt-ArrowRight",
        mac: "Ctrl-ArrowRight",
        run: cursorSyntaxRight,
        shift: selectSyntaxRight
      }, {
        key: "Alt-ArrowUp",
        run: moveLineUp
      }, {
        key: "Shift-Alt-ArrowUp",
        run: copyLineUp
      }, {
        key: "Alt-ArrowDown",
        run: moveLineDown
      }, {
        key: "Shift-Alt-ArrowDown",
        run: copyLineDown
      }, {
        key: "Escape",
        run: simplifySelection
      }, {
        key: "Alt-l",
        mac: "Ctrl-l",
        run: selectLine
      }, {
        key: "Mod-i",
        run: selectParentSyntax,
        preventDefault: true
      }, {
        key: "Mod-[",
        run: indentLess
      }, {
        key: "Mod-]",
        run: indentMore
      }, {
        key: "Mod-Alt-\\",
        run: indentSelection
      }, {
        key: "Shift-Mod-k",
        run: deleteLine
      }, {
        key: "Shift-Mod-\\",
        run: cursorMatchingBracket
      }].concat(standardKeymap);
      /**
      A binding that binds Tab to [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore) and
      Shift-Tab to [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess).
      Please see the [Tab example](../../examples/tab/) before using
      this.
      */

      var indentWithTab = {
        key: "Tab",
        run: indentMore,
        shift: indentLess
      };
      /***/
    },

    /***/
    "L6lZ":
    /*!**************************************************!*\
      !*** ./libs/components/codemirror/public_api.ts ***!
      \**************************************************/

    /*! exports provided: CodemirrorComponent, CodemirrorModule */

    /***/
    function L6lZ(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony import */


      var _codemirror_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./codemirror.component */
      "X+Yg");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "CodemirrorComponent", function () {
        return _codemirror_component__WEBPACK_IMPORTED_MODULE_0__["CodemirrorComponent"];
      });
      /* harmony import */


      var _codemirror_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./codemirror.module */
      "ErZk");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "CodemirrorModule", function () {
        return _codemirror_module__WEBPACK_IMPORTED_MODULE_1__["CodemirrorModule"];
      });
      /***/

    },

    /***/
    "LPyM":
    /*!**********************************************!*\
      !*** ./node_modules/@lezer/lr/dist/index.js ***!
      \**********************************************/

    /*! exports provided: ContextTracker, ExternalTokenizer, InputStream, LRParser, Stack */

    /***/
    function LPyM(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ContextTracker", function () {
        return ContextTracker;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ExternalTokenizer", function () {
        return ExternalTokenizer;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "InputStream", function () {
        return InputStream;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "LRParser", function () {
        return LRParser;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Stack", function () {
        return Stack;
      });
      /* harmony import */


      var _lezer_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @lezer/common */
      "lmln"); /// A parse stack. These are used internally by the parser to track
      /// parsing progress. They also provide some properties and methods
      /// that external code such as a tokenizer can use to get information
      /// about the parse state.


      var Stack = /*#__PURE__*/function () {
        /// @internal
        function Stack( /// The parse that this stack is part of @internal
        p, /// Holds state, input pos, buffer index triplets for all but the
        /// top state @internal
        stack, /// The current parse state @internal
        state, // The position at which the next reduce should take place. This
        // can be less than `this.pos` when skipped expressions have been
        // added to the stack (which should be moved outside of the next
        // reduction)
        /// @internal
        reducePos, /// The input position up to which this stack has parsed.
        pos, /// The dynamic score of the stack, including dynamic precedence
        /// and error-recovery penalties
        /// @internal
        score, // The output buffer. Holds (type, start, end, size) quads
        // representing nodes created by the parser, where `size` is
        // amount of buffer array entries covered by this node.
        /// @internal
        buffer, // The base offset of the buffer. When stacks are split, the split
        // instance shared the buffer history with its parent up to
        // `bufferBase`, which is the absolute offset (including the
        // offset of previous splits) into the buffer at which this stack
        // starts writing.
        /// @internal
        bufferBase, /// @internal
        curContext) {
          var lookAhead = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;
          var // A parent stack from which this was split off, if any. This is
          // set up so that it always points to a stack that has some
          // additional buffer content, never to a stack with an equal
          // `bufferBase`.
          /// @internal
          parent = arguments.length > 10 ? arguments[10] : undefined;

          _classCallCheck(this, Stack);

          this.p = p;
          this.stack = stack;
          this.state = state;
          this.reducePos = reducePos;
          this.pos = pos;
          this.score = score;
          this.buffer = buffer;
          this.bufferBase = bufferBase;
          this.curContext = curContext;
          this.lookAhead = lookAhead;
          this.parent = parent;
        } /// @internal


        _createClass(Stack, [{
          key: "toString",
          value: function toString() {
            return "[".concat(this.stack.filter(function (_, i) {
              return i % 3 == 0;
            }).concat(this.state), "]@").concat(this.pos).concat(this.score ? "!" + this.score : "");
          } // Start an empty stack
          /// @internal

        }, {
          key: "context",
          get: /// The stack's current [context](#lr.ContextTracker) value, if
          /// any. Its type will depend on the context tracker's type
          /// parameter, or it will be `null` if there is no context
          /// tracker.
          function get() {
            return this.curContext ? this.curContext.context : null;
          } // Push a state onto the stack, tracking its start position as well
          // as the buffer base at that point.
          /// @internal

        }, {
          key: "pushState",
          value: function pushState(state, start) {
            this.stack.push(this.state, start, this.bufferBase + this.buffer.length);
            this.state = state;
          } // Apply a reduce action
          /// @internal

        }, {
          key: "reduce",
          value: function reduce(action) {
            var depth = action >> 19
            /* ReduceDepthShift */
            ,
                type = action & 65535
            /* ValueMask */
            ;
            var parser = this.p.parser;
            var dPrec = parser.dynamicPrecedence(type);
            if (dPrec) this.score += dPrec;

            if (depth == 0) {
              // Zero-depth reductions are a special case—they add stuff to
              // the stack without popping anything off.
              if (type < parser.minRepeatTerm) this.storeNode(type, this.reducePos, this.reducePos, 4, true);
              this.pushState(parser.getGoto(this.state, type, true), this.reducePos);
              this.reduceContext(type, this.reducePos);
              return;
            } // Find the base index into `this.stack`, content after which will
            // be dropped. Note that with `StayFlag` reductions we need to
            // consume two extra frames (the dummy parent node for the skipped
            // expression and the state that we'll be staying in, which should
            // be moved to `this.state`).


            var base = this.stack.length - (depth - 1) * 3 - (action & 262144
            /* StayFlag */
            ? 6 : 0);
            var start = this.stack[base - 2];
            var bufferBase = this.stack[base - 1],
                count = this.bufferBase + this.buffer.length - bufferBase; // Store normal terms or `R -> R R` repeat reductions

            if (type < parser.minRepeatTerm || action & 131072
            /* RepeatFlag */
            ) {
              var pos = parser.stateFlag(this.state, 1
              /* Skipped */
              ) ? this.pos : this.reducePos;
              this.storeNode(type, start, pos, count + 4, true);
            }

            if (action & 262144
            /* StayFlag */
            ) {
              this.state = this.stack[base];
            } else {
              var baseStateID = this.stack[base - 3];
              this.state = parser.getGoto(baseStateID, type, true);
            }

            while (this.stack.length > base) {
              this.stack.pop();
            }

            this.reduceContext(type, start);
          } // Shift a value into the buffer
          /// @internal

        }, {
          key: "storeNode",
          value: function storeNode(term, start, end) {
            var size = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 4;
            var isReduce = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

            if (term == 0
            /* Err */
            ) {
              // Try to omit/merge adjacent error nodes
              var cur = this,
                  top = this.buffer.length;

              if (top == 0 && cur.parent) {
                top = cur.bufferBase - cur.parent.bufferBase;
                cur = cur.parent;
              }

              if (top > 0 && cur.buffer[top - 4] == 0
              /* Err */
              && cur.buffer[top - 1] > -1) {
                if (start == end) return;

                if (cur.buffer[top - 2] >= start) {
                  cur.buffer[top - 2] = end;
                  return;
                }
              }
            }

            if (!isReduce || this.pos == end) {
              // Simple case, just append
              this.buffer.push(term, start, end, size);
            } else {
              // There may be skipped nodes that have to be moved forward
              var index = this.buffer.length;
              if (index > 0 && this.buffer[index - 4] != 0
              /* Err */
              ) while (index > 0 && this.buffer[index - 2] > end) {
                // Move this record forward
                this.buffer[index] = this.buffer[index - 4];
                this.buffer[index + 1] = this.buffer[index - 3];
                this.buffer[index + 2] = this.buffer[index - 2];
                this.buffer[index + 3] = this.buffer[index - 1];
                index -= 4;
                if (size > 4) size -= 4;
              }
              this.buffer[index] = term;
              this.buffer[index + 1] = start;
              this.buffer[index + 2] = end;
              this.buffer[index + 3] = size;
            }
          } // Apply a shift action
          /// @internal

        }, {
          key: "shift",
          value: function shift(action, next, nextEnd) {
            var start = this.pos;

            if (action & 131072
            /* GotoFlag */
            ) {
              this.pushState(action & 65535
              /* ValueMask */
              , this.pos);
            } else if ((action & 262144
            /* StayFlag */
            ) == 0) {
              // Regular shift
              var nextState = action,
                  parser = this.p.parser;

              if (nextEnd > this.pos || next <= parser.maxNode) {
                this.pos = nextEnd;
                if (!parser.stateFlag(nextState, 1
                /* Skipped */
                )) this.reducePos = nextEnd;
              }

              this.pushState(nextState, start);
              this.shiftContext(next, start);
              if (next <= parser.maxNode) this.buffer.push(next, start, nextEnd, 4);
            } else {
              // Shift-and-stay, which means this is a skipped token
              this.pos = nextEnd;
              this.shiftContext(next, start);
              if (next <= this.p.parser.maxNode) this.buffer.push(next, start, nextEnd, 4);
            }
          } // Apply an action
          /// @internal

        }, {
          key: "apply",
          value: function apply(action, next, nextEnd) {
            if (action & 65536
            /* ReduceFlag */
            ) this.reduce(action);else this.shift(action, next, nextEnd);
          } // Add a prebuilt (reused) node into the buffer. @internal

        }, {
          key: "useNode",
          value: function useNode(value, next) {
            var index = this.p.reused.length - 1;

            if (index < 0 || this.p.reused[index] != value) {
              this.p.reused.push(value);
              index++;
            }

            var start = this.pos;
            this.reducePos = this.pos = start + value.length;
            this.pushState(next, start);
            this.buffer.push(index, start, this.reducePos, -1
            /* size == -1 means this is a reused value */
            );
            if (this.curContext) this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));
          } // Split the stack. Due to the buffer sharing and the fact
          // that `this.stack` tends to stay quite shallow, this isn't very
          // expensive.
          /// @internal

        }, {
          key: "split",
          value: function split() {
            var parent = this;
            var off = parent.buffer.length; // Because the top of the buffer (after this.pos) may be mutated
            // to reorder reductions and skipped tokens, and shared buffers
            // should be immutable, this copies any outstanding skipped tokens
            // to the new buffer, and puts the base pointer before them.

            while (off > 0 && parent.buffer[off - 2] > parent.reducePos) {
              off -= 4;
            }

            var buffer = parent.buffer.slice(off),
                base = parent.bufferBase + off; // Make sure parent points to an actual parent with content, if there is such a parent.

            while (parent && base == parent.bufferBase) {
              parent = parent.parent;
            }

            return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);
          } // Try to recover from an error by 'deleting' (ignoring) one token.
          /// @internal

        }, {
          key: "recoverByDelete",
          value: function recoverByDelete(next, nextEnd) {
            var isNode = next <= this.p.parser.maxNode;
            if (isNode) this.storeNode(next, this.pos, nextEnd, 4);
            this.storeNode(0
            /* Err */
            , this.pos, nextEnd, isNode ? 8 : 4);
            this.pos = this.reducePos = nextEnd;
            this.score -= 190
            /* Delete */
            ;
          } /// Check if the given term would be able to be shifted (optionally
          /// after some reductions) on this stack. This can be useful for
          /// external tokenizers that want to make sure they only provide a
          /// given token when it applies.

        }, {
          key: "canShift",
          value: function canShift(term) {
            for (var sim = new SimulatedStack(this);;) {
              var action = this.p.parser.stateSlot(sim.state, 4
              /* DefaultReduce */
              ) || this.p.parser.hasAction(sim.state, term);
              if ((action & 65536
              /* ReduceFlag */
              ) == 0) return true;
              if (action == 0) return false;
              sim.reduce(action);
            }
          } // Apply up to Recover.MaxNext recovery actions that conceptually
          // inserts some missing token or rule.
          /// @internal

        }, {
          key: "recoverByInsert",
          value: function recoverByInsert(next) {
            if (this.stack.length >= 300
            /* MaxInsertStackDepth */
            ) return [];
            var nextStates = this.p.parser.nextStates(this.state);

            if (nextStates.length > 4
            /* MaxNext */
            << 1 || this.stack.length >= 120
            /* DampenInsertStackDepth */
            ) {
              var best = [];

              for (var _i126 = 0, s; _i126 < nextStates.length; _i126 += 2) {
                if ((s = nextStates[_i126 + 1]) != this.state && this.p.parser.hasAction(s, next)) best.push(nextStates[_i126], s);
              }

              if (this.stack.length < 120
              /* DampenInsertStackDepth */
              ) {
                var _loop19 = function _loop19(_i127) {
                  var s = nextStates[_i127 + 1];
                  if (!best.some(function (v, i) {
                    return i & 1 && v == s;
                  })) best.push(nextStates[_i127], s);
                };

                for (var _i127 = 0; best.length < 4
                /* MaxNext */
                << 1 && _i127 < nextStates.length; _i127 += 2) {
                  _loop19(_i127);
                }
              }

              nextStates = best;
            }

            var result = [];

            for (var _i128 = 0; _i128 < nextStates.length && result.length < 4
            /* MaxNext */
            ; _i128 += 2) {
              var _s2 = nextStates[_i128 + 1];
              if (_s2 == this.state) continue;
              var stack = this.split();
              stack.storeNode(0
              /* Err */
              , stack.pos, stack.pos, 4, true);
              stack.pushState(_s2, this.pos);
              stack.shiftContext(nextStates[_i128], this.pos);
              stack.score -= 200
              /* Insert */
              ;
              result.push(stack);
            }

            return result;
          } // Force a reduce, if possible. Return false if that can't
          // be done.
          /// @internal

        }, {
          key: "forceReduce",
          value: function forceReduce() {
            var reduce = this.p.parser.stateSlot(this.state, 5
            /* ForcedReduce */
            );
            if ((reduce & 65536
            /* ReduceFlag */
            ) == 0) return false;
            var parser = this.p.parser;

            if (!parser.validAction(this.state, reduce)) {
              var depth = reduce >> 19
              /* ReduceDepthShift */
              ,
                  term = reduce & 65535
              /* ValueMask */
              ;
              var target = this.stack.length - depth * 3;
              if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0) return false;
              this.storeNode(0
              /* Err */
              , this.reducePos, this.reducePos, 4, true);
              this.score -= 100
              /* Reduce */
              ;
            }

            this.reduce(reduce);
            return true;
          } /// @internal

        }, {
          key: "forceAll",
          value: function forceAll() {
            while (!this.p.parser.stateFlag(this.state, 2
            /* Accepting */
            )) {
              if (!this.forceReduce()) {
                this.storeNode(0
                /* Err */
                , this.pos, this.pos, 4, true);
                break;
              }
            }

            return this;
          } /// Check whether this state has no further actions (assumed to be a direct descendant of the
          /// top state, since any other states must be able to continue
          /// somehow). @internal

        }, {
          key: "deadEnd",
          get: function get() {
            if (this.stack.length != 3) return false;
            var parser = this.p.parser;
            return parser.data[parser.stateSlot(this.state, 1
            /* Actions */
            )] == 65535
            /* End */
            && !parser.stateSlot(this.state, 4
            /* DefaultReduce */
            );
          } /// Restart the stack (put it back in its start state). Only safe
          /// when this.stack.length == 3 (state is directly below the top
          /// state). @internal

        }, {
          key: "restart",
          value: function restart() {
            this.state = this.stack[0];
            this.stack.length = 0;
          } /// @internal

        }, {
          key: "sameState",
          value: function sameState(other) {
            if (this.state != other.state || this.stack.length != other.stack.length) return false;

            for (var _i129 = 0; _i129 < this.stack.length; _i129 += 3) {
              if (this.stack[_i129] != other.stack[_i129]) return false;
            }

            return true;
          } /// Get the parser used by this stack.

        }, {
          key: "parser",
          get: function get() {
            return this.p.parser;
          } /// Test whether a given dialect (by numeric ID, as exported from
          /// the terms file) is enabled.

        }, {
          key: "dialectEnabled",
          value: function dialectEnabled(dialectID) {
            return this.p.parser.dialect.flags[dialectID];
          }
        }, {
          key: "shiftContext",
          value: function shiftContext(term, start) {
            if (this.curContext) this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));
          }
        }, {
          key: "reduceContext",
          value: function reduceContext(term, start) {
            if (this.curContext) this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));
          } /// @internal

        }, {
          key: "emitContext",
          value: function emitContext() {
            var last = this.buffer.length - 1;
            if (last < 0 || this.buffer[last] != -3) this.buffer.push(this.curContext.hash, this.reducePos, this.reducePos, -3);
          } /// @internal

        }, {
          key: "emitLookAhead",
          value: function emitLookAhead() {
            var last = this.buffer.length - 1;
            if (last < 0 || this.buffer[last] != -4) this.buffer.push(this.lookAhead, this.reducePos, this.reducePos, -4);
          }
        }, {
          key: "updateContext",
          value: function updateContext(context) {
            if (context != this.curContext.context) {
              var newCx = new StackContext(this.curContext.tracker, context);
              if (newCx.hash != this.curContext.hash) this.emitContext();
              this.curContext = newCx;
            }
          } /// @internal

        }, {
          key: "setLookAhead",
          value: function setLookAhead(lookAhead) {
            if (lookAhead > this.lookAhead) {
              this.emitLookAhead();
              this.lookAhead = lookAhead;
            }
          } /// @internal

        }, {
          key: "close",
          value: function close() {
            if (this.curContext && this.curContext.tracker.strict) this.emitContext();
            if (this.lookAhead > 0) this.emitLookAhead();
          }
        }], [{
          key: "start",
          value: function start(p, state) {
            var pos = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
            var cx = p.parser.context;
            return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);
          }
        }]);

        return Stack;
      }();

      var StackContext = /*#__PURE__*/_createClass(function StackContext(tracker, context) {
        _classCallCheck(this, StackContext);

        this.tracker = tracker;
        this.context = context;
        this.hash = tracker.strict ? tracker.hash(context) : 0;
      });

      var Recover;

      (function (Recover) {
        Recover[Recover["Insert"] = 200] = "Insert";
        Recover[Recover["Delete"] = 190] = "Delete";
        Recover[Recover["Reduce"] = 100] = "Reduce";
        Recover[Recover["MaxNext"] = 4] = "MaxNext";
        Recover[Recover["MaxInsertStackDepth"] = 300] = "MaxInsertStackDepth";
        Recover[Recover["DampenInsertStackDepth"] = 120] = "DampenInsertStackDepth";
      })(Recover || (Recover = {})); // Used to cheaply run some reductions to scan ahead without mutating
      // an entire stack


      var SimulatedStack = /*#__PURE__*/function () {
        function SimulatedStack(start) {
          _classCallCheck(this, SimulatedStack);

          this.start = start;
          this.state = start.state;
          this.stack = start.stack;
          this.base = this.stack.length;
        }

        _createClass(SimulatedStack, [{
          key: "reduce",
          value: function reduce(action) {
            var term = action & 65535
            /* ValueMask */
            ,
                depth = action >> 19
            /* ReduceDepthShift */
            ;

            if (depth == 0) {
              if (this.stack == this.start.stack) this.stack = this.stack.slice();
              this.stack.push(this.state, 0, 0);
              this.base += 3;
            } else {
              this.base -= (depth - 1) * 3;
            }

            var _goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);

            this.state = _goto;
          }
        }]);

        return SimulatedStack;
      }(); // This is given to `Tree.build` to build a buffer, and encapsulates
      // the parent-stack-walking necessary to read the nodes.


      var StackBufferCursor = /*#__PURE__*/function () {
        function StackBufferCursor(stack, pos, index) {
          _classCallCheck(this, StackBufferCursor);

          this.stack = stack;
          this.pos = pos;
          this.index = index;
          this.buffer = stack.buffer;
          if (this.index == 0) this.maybeNext();
        }

        _createClass(StackBufferCursor, [{
          key: "maybeNext",
          value: function maybeNext() {
            var next = this.stack.parent;

            if (next != null) {
              this.index = this.stack.bufferBase - next.bufferBase;
              this.stack = next;
              this.buffer = next.buffer;
            }
          }
        }, {
          key: "id",
          get: function get() {
            return this.buffer[this.index - 4];
          }
        }, {
          key: "start",
          get: function get() {
            return this.buffer[this.index - 3];
          }
        }, {
          key: "end",
          get: function get() {
            return this.buffer[this.index - 2];
          }
        }, {
          key: "size",
          get: function get() {
            return this.buffer[this.index - 1];
          }
        }, {
          key: "next",
          value: function next() {
            this.index -= 4;
            this.pos -= 4;
            if (this.index == 0) this.maybeNext();
          }
        }, {
          key: "fork",
          value: function fork() {
            return new StackBufferCursor(this.stack, this.pos, this.index);
          }
        }], [{
          key: "create",
          value: function create(stack) {
            var pos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : stack.bufferBase + stack.buffer.length;
            return new StackBufferCursor(stack, pos, pos - stack.bufferBase);
          }
        }]);

        return StackBufferCursor;
      }();

      var CachedToken = /*#__PURE__*/_createClass(function CachedToken() {
        _classCallCheck(this, CachedToken);

        this.start = -1;
        this.value = -1;
        this.end = -1;
        this.extended = -1;
        this.lookAhead = 0;
        this.mask = 0;
        this.context = 0;
      });

      var nullToken = new CachedToken(); /// [Tokenizers](#lr.ExternalTokenizer) interact with the input
      /// through this interface. It presents the input as a stream of
      /// characters, tracking lookahead and hiding the complexity of
      /// [ranges](#common.Parser.parse^ranges) from tokenizer code.

      var InputStream = /*#__PURE__*/function () {
        /// @internal
        function InputStream( /// @internal
        input, /// @internal
        ranges) {
          _classCallCheck(this, InputStream);

          this.input = input;
          this.ranges = ranges; /// @internal

          this.chunk = ""; /// @internal

          this.chunkOff = 0; /// Backup chunk

          this.chunk2 = "";
          this.chunk2Pos = 0; /// The character code of the next code unit in the input, or -1
          /// when the stream is at the end of the input.

          this.next = -1; /// @internal

          this.token = nullToken;
          this.rangeIndex = 0;
          this.pos = this.chunkPos = ranges[0].from;
          this.range = ranges[0];
          this.end = ranges[ranges.length - 1].to;
          this.readNext();
        }

        _createClass(InputStream, [{
          key: "resolveOffset",
          value: function resolveOffset(offset, assoc) {
            var range = this.range,
                index = this.rangeIndex;
            var pos = this.pos + offset;

            while (pos < range.from) {
              if (!index) return null;
              var next = this.ranges[--index];
              pos -= range.from - next.to;
              range = next;
            }

            while (assoc < 0 ? pos > range.to : pos >= range.to) {
              if (index == this.ranges.length - 1) return null;
              var _next5 = this.ranges[++index];
              pos += _next5.from - range.to;
              range = _next5;
            }

            return pos;
          } /// Look at a code unit near the stream position. `.peek(0)` equals
          /// `.next`, `.peek(-1)` gives you the previous character, and so
          /// on.
          ///
          /// Note that looking around during tokenizing creates dependencies
          /// on potentially far-away content, which may reduce the
          /// effectiveness incremental parsing—when looking forward—or even
          /// cause invalid reparses when looking backward more than 25 code
          /// units, since the library does not track lookbehind.

        }, {
          key: "peek",
          value: function peek(offset) {
            var idx = this.chunkOff + offset,
                pos,
                result;

            if (idx >= 0 && idx < this.chunk.length) {
              pos = this.pos + offset;
              result = this.chunk.charCodeAt(idx);
            } else {
              var resolved = this.resolveOffset(offset, 1);
              if (resolved == null) return -1;
              pos = resolved;

              if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {
                result = this.chunk2.charCodeAt(pos - this.chunk2Pos);
              } else {
                var _i130 = this.rangeIndex,
                    range = this.range;

                while (range.to <= pos) {
                  range = this.ranges[++_i130];
                }

                this.chunk2 = this.input.chunk(this.chunk2Pos = pos);
                if (pos + this.chunk2.length > range.to) this.chunk2 = this.chunk2.slice(0, range.to - pos);
                result = this.chunk2.charCodeAt(0);
              }
            }

            if (pos >= this.token.lookAhead) this.token.lookAhead = pos + 1;
            return result;
          } /// Accept a token. By default, the end of the token is set to the
          /// current stream position, but you can pass an offset (relative to
          /// the stream position) to change that.

        }, {
          key: "acceptToken",
          value: function acceptToken(token) {
            var endOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;
            if (end == null || end < this.token.start) throw new RangeError("Token end out of bounds");
            this.token.value = token;
            this.token.end = end;
          }
        }, {
          key: "getChunk",
          value: function getChunk() {
            if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {
              var chunk = this.chunk,
                  chunkPos = this.chunkPos;
              this.chunk = this.chunk2;
              this.chunkPos = this.chunk2Pos;
              this.chunk2 = chunk;
              this.chunk2Pos = chunkPos;
              this.chunkOff = this.pos - this.chunkPos;
            } else {
              this.chunk2 = this.chunk;
              this.chunk2Pos = this.chunkPos;
              var nextChunk = this.input.chunk(this.pos);
              var end = this.pos + nextChunk.length;
              this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;
              this.chunkPos = this.pos;
              this.chunkOff = 0;
            }
          }
        }, {
          key: "readNext",
          value: function readNext() {
            if (this.chunkOff >= this.chunk.length) {
              this.getChunk();
              if (this.chunkOff == this.chunk.length) return this.next = -1;
            }

            return this.next = this.chunk.charCodeAt(this.chunkOff);
          } /// Move the stream forward N (defaults to 1) code units. Returns
          /// the new value of [`next`](#lr.InputStream.next).

        }, {
          key: "advance",
          value: function advance() {
            var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
            this.chunkOff += n;

            while (this.pos + n >= this.range.to) {
              if (this.rangeIndex == this.ranges.length - 1) return this.setDone();
              n -= this.range.to - this.pos;
              this.range = this.ranges[++this.rangeIndex];
              this.pos = this.range.from;
            }

            this.pos += n;
            if (this.pos >= this.token.lookAhead) this.token.lookAhead = this.pos + 1;
            return this.readNext();
          }
        }, {
          key: "setDone",
          value: function setDone() {
            this.pos = this.chunkPos = this.end;
            this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];
            this.chunk = "";
            return this.next = -1;
          } /// @internal

        }, {
          key: "reset",
          value: function reset(pos, token) {
            if (token) {
              this.token = token;
              token.start = pos;
              token.lookAhead = pos + 1;
              token.value = token.extended = -1;
            } else {
              this.token = nullToken;
            }

            if (this.pos != pos) {
              this.pos = pos;

              if (pos == this.end) {
                this.setDone();
                return this;
              }

              while (pos < this.range.from) {
                this.range = this.ranges[--this.rangeIndex];
              }

              while (pos >= this.range.to) {
                this.range = this.ranges[++this.rangeIndex];
              }

              if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {
                this.chunkOff = pos - this.chunkPos;
              } else {
                this.chunk = "";
                this.chunkOff = 0;
              }

              this.readNext();
            }

            return this;
          } /// @internal

        }, {
          key: "read",
          value: function read(from, to) {
            if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length) return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);
            if (from >= this.range.from && to <= this.range.to) return this.input.read(from, to);
            var result = "";

            var _iterator173 = _createForOfIteratorHelper(this.ranges),
                _step173;

            try {
              for (_iterator173.s(); !(_step173 = _iterator173.n()).done;) {
                var r = _step173.value;
                if (r.from >= to) break;
                if (r.to > from) result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));
              }
            } catch (err) {
              _iterator173.e(err);
            } finally {
              _iterator173.f();
            }

            return result;
          }
        }]);

        return InputStream;
      }(); /// @internal


      var TokenGroup = /*#__PURE__*/function () {
        function TokenGroup(data, id) {
          _classCallCheck(this, TokenGroup);

          this.data = data;
          this.id = id;
        }

        _createClass(TokenGroup, [{
          key: "token",
          value: function token(input, stack) {
            readToken(this.data, input, stack, this.id);
          }
        }]);

        return TokenGroup;
      }();

      TokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false; /// `@external tokens` declarations in the grammar should resolve to
      /// an instance of this class.

      var ExternalTokenizer = /*#__PURE__*/_createClass( /// Create a tokenizer. The first argument is the function that,
      /// given an input stream, scans for the types of tokens it
      /// recognizes at the stream's position, and calls
      /// [`acceptToken`](#lr.InputStream.acceptToken) when it finds
      /// one.
      function ExternalTokenizer( /// @internal
      token) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        _classCallCheck(this, ExternalTokenizer);

        this.token = token;
        this.contextual = !!options.contextual;
        this.fallback = !!options.fallback;
        this.extend = !!options.extend;
      }); // Tokenizer data is stored a big uint16 array containing, for each
      // state:
      //
      //  - A group bitmask, indicating what token groups are reachable from
      //    this state, so that paths that can only lead to tokens not in
      //    any of the current groups can be cut off early.
      //
      //  - The position of the end of the state's sequence of accepting
      //    tokens
      //
      //  - The number of outgoing edges for the state
      //
      //  - The accepting tokens, as (token id, group mask) pairs
      //
      //  - The outgoing edges, as (start character, end character, state
      //    index) triples, with end character being exclusive
      //
      // This function interprets that data, running through a stream as
      // long as new states with the a matching group mask can be reached,
      // and updating `token` when it matches a token.


      function readToken(data, input, stack, group) {
        var state = 0,
            groupMask = 1 << group,
            parser = stack.p.parser,
            dialect = parser.dialect;

        scan: for (;;) {
          if ((groupMask & data[state]) == 0) break;
          var accEnd = data[state + 1]; // Check whether this state can lead to a token in the current group
          // Accept tokens in this state, possibly overwriting
          // lower-precedence / shorter tokens

          for (var _i131 = state + 3; _i131 < accEnd; _i131 += 2) {
            if ((data[_i131 + 1] & groupMask) > 0) {
              var term = data[_i131];

              if (dialect.allows(term) && (input.token.value == -1 || input.token.value == term || parser.overrides(term, input.token.value))) {
                input.acceptToken(term);
                break;
              }
            }
          } // Do a binary search on the state's edges


          for (var next = input.next, low = 0, high = data[state + 2]; low < high;) {
            var mid = low + high >> 1;
            var index = accEnd + mid + (mid << 1);
            var from = data[index],
                to = data[index + 1];
            if (next < from) high = mid;else if (next >= to) low = mid + 1;else {
              state = data[index + 2];
              input.advance();
              continue scan;
            }
          }

          break;
        }
      } // See lezer-generator/src/encode.ts for comments about the encoding
      // used here


      function decodeArray(input) {
        var Type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Uint16Array;
        if (typeof input != "string") return input;
        var array = null;

        for (var pos = 0, out = 0; pos < input.length;) {
          var value = 0;

          for (;;) {
            var next = input.charCodeAt(pos++),
                stop = false;

            if (next == 126
            /* BigValCode */
            ) {
              value = 65535
              /* BigVal */
              ;
              break;
            }

            if (next >= 92
            /* Gap2 */
            ) next--;
            if (next >= 34
            /* Gap1 */
            ) next--;
            var digit = next - 32
            /* Start */
            ;

            if (digit >= 46
            /* Base */
            ) {
              digit -= 46
              /* Base */
              ;
              stop = true;
            }

            value += digit;
            if (stop) break;
            value *= 46
            /* Base */
            ;
          }

          if (array) array[out++] = value;else array = new Type(value);
        }

        return array;
      } // FIXME find some way to reduce recovery work done when the input
      // doesn't match the grammar at all.
      // Environment variable used to control console output


      var verbose = typeof process != "undefined" && /\bparse\b/.test(process.env.LOG);
      var stackIDs = null;
      var Safety;

      (function (Safety) {
        Safety[Safety["Margin"] = 25] = "Margin";
      })(Safety || (Safety = {}));

      function cutAt(tree, pos, side) {
        var cursor = tree.fullCursor();
        cursor.moveTo(pos);

        for (;;) {
          if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos))) for (;;) {
            if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError) return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25
            /* Margin */
            )) : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25
            /* Margin */
            ));
            if (side < 0 ? cursor.prevSibling() : cursor.nextSibling()) break;
            if (!cursor.parent()) return side < 0 ? 0 : tree.length;
          }
        }
      }

      var FragmentCursor = /*#__PURE__*/function () {
        function FragmentCursor(fragments, nodeSet) {
          _classCallCheck(this, FragmentCursor);

          this.fragments = fragments;
          this.nodeSet = nodeSet;
          this.i = 0;
          this.fragment = null;
          this.safeFrom = -1;
          this.safeTo = -1;
          this.trees = [];
          this.start = [];
          this.index = [];
          this.nextFragment();
        }

        _createClass(FragmentCursor, [{
          key: "nextFragment",
          value: function nextFragment() {
            var fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];

            if (fr) {
              this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;
              this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;

              while (this.trees.length) {
                this.trees.pop();
                this.start.pop();
                this.index.pop();
              }

              this.trees.push(fr.tree);
              this.start.push(-fr.offset);
              this.index.push(0);
              this.nextStart = this.safeFrom;
            } else {
              this.nextStart = 1e9;
            }
          } // `pos` must be >= any previously given `pos` for this cursor

        }, {
          key: "nodeAt",
          value: function nodeAt(pos) {
            if (pos < this.nextStart) return null;

            while (this.fragment && this.safeTo <= pos) {
              this.nextFragment();
            }

            if (!this.fragment) return null;

            for (;;) {
              var last = this.trees.length - 1;

              if (last < 0) {
                // End of tree
                this.nextFragment();
                return null;
              }

              var top = this.trees[last],
                  index = this.index[last];

              if (index == top.children.length) {
                this.trees.pop();
                this.start.pop();
                this.index.pop();
                continue;
              }

              var next = top.children[index];
              var start = this.start[last] + top.positions[index];

              if (start > pos) {
                this.nextStart = start;
                return null;
              }

              if (next instanceof _lezer_common__WEBPACK_IMPORTED_MODULE_0__["Tree"]) {
                if (start == pos) {
                  if (start < this.safeFrom) return null;
                  var end = start + next.length;

                  if (end <= this.safeTo) {
                    var lookAhead = next.prop(_lezer_common__WEBPACK_IMPORTED_MODULE_0__["NodeProp"].lookAhead);
                    if (!lookAhead || end + lookAhead < this.fragment.to) return next;
                  }
                }

                this.index[last]++;

                if (start + next.length >= Math.max(this.safeFrom, pos)) {
                  // Enter this node
                  this.trees.push(next);
                  this.start.push(start);
                  this.index.push(0);
                }
              } else {
                this.index[last]++;
                this.nextStart = start + next.length;
              }
            }
          }
        }]);

        return FragmentCursor;
      }();

      var TokenCache = /*#__PURE__*/function () {
        function TokenCache(parser, stream) {
          _classCallCheck(this, TokenCache);

          this.stream = stream;
          this.tokens = [];
          this.mainToken = null;
          this.actions = [];
          this.tokens = parser.tokenizers.map(function (_) {
            return new CachedToken();
          });
        }

        _createClass(TokenCache, [{
          key: "getActions",
          value: function getActions(stack) {
            var actionIndex = 0;
            var main = null;
            var parser = stack.p.parser,
                tokenizers = parser.tokenizers;
            var mask = parser.stateSlot(stack.state, 3
            /* TokenizerMask */
            );
            var context = stack.curContext ? stack.curContext.hash : 0;
            var lookAhead = 0;

            for (var _i132 = 0; _i132 < tokenizers.length; _i132++) {
              if ((1 << _i132 & mask) == 0) continue;
              var tokenizer = tokenizers[_i132],
                  token = this.tokens[_i132];
              if (main && !tokenizer.fallback) continue;

              if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {
                this.updateCachedToken(token, tokenizer, stack);
                token.mask = mask;
                token.context = context;
              }

              if (token.lookAhead > token.end + 25
              /* Margin */
              ) lookAhead = Math.max(token.lookAhead, lookAhead);

              if (token.value != 0
              /* Err */
              ) {
                var startIndex = actionIndex;
                if (token.extended > -1) actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);
                actionIndex = this.addActions(stack, token.value, token.end, actionIndex);

                if (!tokenizer.extend) {
                  main = token;
                  if (actionIndex > startIndex) break;
                }
              }
            }

            while (this.actions.length > actionIndex) {
              this.actions.pop();
            }

            if (lookAhead) stack.setLookAhead(lookAhead);

            if (!main && stack.pos == this.stream.end) {
              main = new CachedToken();
              main.value = stack.p.parser.eofTerm;
              main.start = main.end = stack.pos;
              actionIndex = this.addActions(stack, main.value, main.end, actionIndex);
            }

            this.mainToken = main;
            return this.actions;
          }
        }, {
          key: "getMainToken",
          value: function getMainToken(stack) {
            if (this.mainToken) return this.mainToken;
            var main = new CachedToken(),
                pos = stack.pos,
                p = stack.p;
            main.start = pos;
            main.end = Math.min(pos + 1, p.stream.end);
            main.value = pos == p.stream.end ? p.parser.eofTerm : 0
            /* Err */
            ;
            return main;
          }
        }, {
          key: "updateCachedToken",
          value: function updateCachedToken(token, tokenizer, stack) {
            tokenizer.token(this.stream.reset(stack.pos, token), stack);

            if (token.value > -1) {
              var parser = stack.p.parser;

              for (var _i133 = 0; _i133 < parser.specialized.length; _i133++) {
                if (parser.specialized[_i133] == token.value) {
                  var result = parser.specializers[_i133](this.stream.read(token.start, token.end), stack);

                  if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {
                    if ((result & 1) == 0
                    /* Specialize */
                    ) token.value = result >> 1;else token.extended = result >> 1;
                    break;
                  }
                }
              }
            } else {
              token.value = 0
              /* Err */
              ;
              token.end = Math.min(stack.p.stream.end, stack.pos + 1);
            }
          }
        }, {
          key: "putAction",
          value: function putAction(action, token, end, index) {
            // Don't add duplicate actions
            for (var _i134 = 0; _i134 < index; _i134 += 3) {
              if (this.actions[_i134] == action) return index;
            }

            this.actions[index++] = action;
            this.actions[index++] = token;
            this.actions[index++] = end;
            return index;
          }
        }, {
          key: "addActions",
          value: function addActions(stack, token, end, index) {
            var state = stack.state,
                parser = stack.p.parser,
                data = parser.data;

            for (var set = 0; set < 2; set++) {
              for (var _i135 = parser.stateSlot(state, set ? 2
              /* Skip */
              : 1
              /* Actions */
              );; _i135 += 3) {
                if (data[_i135] == 65535
                /* End */
                ) {
                  if (data[_i135 + 1] == 1
                  /* Next */
                  ) {
                    _i135 = pair(data, _i135 + 2);
                  } else {
                    if (index == 0 && data[_i135 + 1] == 2
                    /* Other */
                    ) index = this.putAction(pair(data, _i135 + 1), token, end, index);
                    break;
                  }
                }

                if (data[_i135] == token) index = this.putAction(pair(data, _i135 + 1), token, end, index);
              }
            }

            return index;
          }
        }]);

        return TokenCache;
      }();

      var Rec;

      (function (Rec) {
        Rec[Rec["Distance"] = 5] = "Distance";
        Rec[Rec["MaxRemainingPerStep"] = 3] = "MaxRemainingPerStep";
        Rec[Rec["MinBufferLengthPrune"] = 200] = "MinBufferLengthPrune";
        Rec[Rec["ForceReduceLimit"] = 10] = "ForceReduceLimit";
      })(Rec || (Rec = {}));

      var Parse = /*#__PURE__*/function () {
        function Parse(parser, input, fragments, ranges) {
          _classCallCheck(this, Parse);

          this.parser = parser;
          this.input = input;
          this.ranges = ranges;
          this.recovering = 0;
          this.nextStackID = 0x2654; // ♔, ♕, ♖, ♗, ♘, ♙, ♠, ♡, ♢, ♣, ♤, ♥, ♦, ♧

          this.minStackPos = 0;
          this.reused = [];
          this.stoppedAt = null;
          this.stream = new InputStream(input, ranges);
          this.tokens = new TokenCache(parser, this.stream);
          this.topTerm = parser.top[1];
          var from = ranges[0].from;
          this.stacks = [Stack.start(this, parser.top[0], from)];
          this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4 ? new FragmentCursor(fragments, parser.nodeSet) : null;
        }

        _createClass(Parse, [{
          key: "parsedPos",
          get: function get() {
            return this.minStackPos;
          } // Move the parser forward. This will process all parse stacks at
          // `this.pos` and try to advance them to a further position. If no
          // stack for such a position is found, it'll start error-recovery.
          //
          // When the parse is finished, this will return a syntax tree. When
          // not, it returns `null`.

        }, {
          key: "advance",
          value: function advance() {
            var stacks = this.stacks,
                pos = this.minStackPos; // This will hold stacks beyond `pos`.

            var newStacks = this.stacks = [];
            var stopped, stoppedTokens; // Keep advancing any stacks at `pos` until they either move
            // forward or can't be advanced. Gather stacks that can't be
            // advanced further in `stopped`.

            for (var _i136 = 0; _i136 < stacks.length; _i136++) {
              var stack = stacks[_i136];

              for (;;) {
                this.tokens.mainToken = null;

                if (stack.pos > pos) {
                  newStacks.push(stack);
                } else if (this.advanceStack(stack, newStacks, stacks)) {
                  continue;
                } else {
                  if (!stopped) {
                    stopped = [];
                    stoppedTokens = [];
                  }

                  stopped.push(stack);
                  var tok = this.tokens.getMainToken(stack);
                  stoppedTokens.push(tok.value, tok.end);
                }

                break;
              }
            }

            if (!newStacks.length) {
              var finished = stopped && findFinished(stopped);
              if (finished) return this.stackToTree(finished);

              if (this.parser.strict) {
                if (verbose && stopped) console.log("Stuck with token " + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : "none"));
                throw new SyntaxError("No parse at " + pos);
              }

              if (!this.recovering) this.recovering = 5
              /* Distance */
              ;
            }

            if (this.recovering && stopped) {
              var _finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0] : this.runRecovery(stopped, stoppedTokens, newStacks);

              if (_finished) return this.stackToTree(_finished.forceAll());
            }

            if (this.recovering) {
              var maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3
              /* MaxRemainingPerStep */
              ;

              if (newStacks.length > maxRemaining) {
                newStacks.sort(function (a, b) {
                  return b.score - a.score;
                });

                while (newStacks.length > maxRemaining) {
                  newStacks.pop();
                }
              }

              if (newStacks.some(function (s) {
                return s.reducePos > pos;
              })) this.recovering--;
            } else if (newStacks.length > 1) {
              // Prune stacks that are in the same state, or that have been
              // running without splitting for a while, to avoid getting stuck
              // with multiple successful stacks running endlessly on.
              outer: for (var _i137 = 0; _i137 < newStacks.length - 1; _i137++) {
                var _stack = newStacks[_i137];

                for (var j = _i137 + 1; j < newStacks.length; j++) {
                  var other = newStacks[j];

                  if (_stack.sameState(other) || _stack.buffer.length > 200
                  /* MinBufferLengthPrune */
                  && other.buffer.length > 200
                  /* MinBufferLengthPrune */
                  ) {
                    if ((_stack.score - other.score || _stack.buffer.length - other.buffer.length) > 0) {
                      newStacks.splice(j--, 1);
                    } else {
                      newStacks.splice(_i137--, 1);
                      continue outer;
                    }
                  }
                }
              }
            }

            this.minStackPos = newStacks[0].pos;

            for (var _i138 = 1; _i138 < newStacks.length; _i138++) {
              if (newStacks[_i138].pos < this.minStackPos) this.minStackPos = newStacks[_i138].pos;
            }

            return null;
          }
        }, {
          key: "stopAt",
          value: function stopAt(pos) {
            if (this.stoppedAt != null && this.stoppedAt < pos) throw new RangeError("Can't move stoppedAt forward");
            this.stoppedAt = pos;
          } // Returns an updated version of the given stack, or null if the
          // stack can't advance normally. When `split` and `stacks` are
          // given, stacks split off by ambiguous operations will be pushed to
          // `split`, or added to `stacks` if they move `pos` forward.

        }, {
          key: "advanceStack",
          value: function advanceStack(stack, stacks, split) {
            var start = stack.pos,
                parser = this.parser;
            var base = verbose ? this.stackID(stack) + " -> " : "";
            if (this.stoppedAt != null && start > this.stoppedAt) return stack.forceReduce() ? stack : null;

            if (this.fragments) {
              var strictCx = stack.curContext && stack.curContext.tracker.strict,
                  cxHash = strictCx ? stack.curContext.hash : 0;

              for (var cached = this.fragments.nodeAt(start); cached;) {
                var match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;

                if (match > -1 && cached.length && (!strictCx || (cached.prop(_lezer_common__WEBPACK_IMPORTED_MODULE_0__["NodeProp"].contextHash) || 0) == cxHash)) {
                  stack.useNode(cached, match);
                  if (verbose) console.log(base + this.stackID(stack) + " (via reuse of ".concat(parser.getName(cached.type.id), ")"));
                  return true;
                }

                if (!(cached instanceof _lezer_common__WEBPACK_IMPORTED_MODULE_0__["Tree"]) || cached.children.length == 0 || cached.positions[0] > 0) break;
                var inner = cached.children[0];
                if (inner instanceof _lezer_common__WEBPACK_IMPORTED_MODULE_0__["Tree"] && cached.positions[0] == 0) cached = inner;else break;
              }
            }

            var defaultReduce = parser.stateSlot(stack.state, 4
            /* DefaultReduce */
            );

            if (defaultReduce > 0) {
              stack.reduce(defaultReduce);
              if (verbose) console.log(base + this.stackID(stack) + " (via always-reduce ".concat(parser.getName(defaultReduce & 65535
              /* ValueMask */
              ), ")"));
              return true;
            }

            var actions = this.tokens.getActions(stack);

            for (var _i139 = 0; _i139 < actions.length;) {
              var action = actions[_i139++],
                  term = actions[_i139++],
                  end = actions[_i139++];
              var last = _i139 == actions.length || !split;
              var localStack = last ? stack : stack.split();
              localStack.apply(action, term, end);
              if (verbose) console.log(base + this.stackID(localStack) + " (via ".concat((action & 65536
              /* ReduceFlag */
              ) == 0 ? "shift" : "reduce of ".concat(parser.getName(action & 65535
              /* ValueMask */
              )), " for ").concat(parser.getName(term), " @ ").concat(start).concat(localStack == stack ? "" : ", split", ")"));
              if (last) return true;else if (localStack.pos > start) stacks.push(localStack);else split.push(localStack);
            }

            return false;
          } // Advance a given stack forward as far as it will go. Returns the
          // (possibly updated) stack if it got stuck, or null if it moved
          // forward and was given to `pushStackDedup`.

        }, {
          key: "advanceFully",
          value: function advanceFully(stack, newStacks) {
            var pos = stack.pos;

            for (;;) {
              if (!this.advanceStack(stack, null, null)) return false;

              if (stack.pos > pos) {
                pushStackDedup(stack, newStacks);
                return true;
              }
            }
          }
        }, {
          key: "runRecovery",
          value: function runRecovery(stacks, tokens, newStacks) {
            var finished = null,
                restarted = false;

            for (var _i140 = 0; _i140 < stacks.length; _i140++) {
              var stack = stacks[_i140],
                  token = tokens[_i140 << 1],
                  tokenEnd = tokens[(_i140 << 1) + 1];
              var base = verbose ? this.stackID(stack) + " -> " : "";

              if (stack.deadEnd) {
                if (restarted) continue;
                restarted = true;
                stack.restart();
                if (verbose) console.log(base + this.stackID(stack) + " (restarted)");
                var done = this.advanceFully(stack, newStacks);
                if (done) continue;
              }

              var force = stack.split(),
                  forceBase = base;

              for (var j = 0; force.forceReduce() && j < 10
              /* ForceReduceLimit */
              ; j++) {
                if (verbose) console.log(forceBase + this.stackID(force) + " (via force-reduce)");

                var _done = this.advanceFully(force, newStacks);

                if (_done) break;
                if (verbose) forceBase = this.stackID(force) + " -> ";
              }

              var _iterator174 = _createForOfIteratorHelper(stack.recoverByInsert(token)),
                  _step174;

              try {
                for (_iterator174.s(); !(_step174 = _iterator174.n()).done;) {
                  var insert = _step174.value;
                  if (verbose) console.log(base + this.stackID(insert) + " (via recover-insert)");
                  this.advanceFully(insert, newStacks);
                }
              } catch (err) {
                _iterator174.e(err);
              } finally {
                _iterator174.f();
              }

              if (this.stream.end > stack.pos) {
                if (tokenEnd == stack.pos) {
                  tokenEnd++;
                  token = 0
                  /* Err */
                  ;
                }

                stack.recoverByDelete(token, tokenEnd);
                if (verbose) console.log(base + this.stackID(stack) + " (via recover-delete ".concat(this.parser.getName(token), ")"));
                pushStackDedup(stack, newStacks);
              } else if (!finished || finished.score < stack.score) {
                finished = stack;
              }
            }

            return finished;
          } // Convert the stack's buffer to a syntax tree.

        }, {
          key: "stackToTree",
          value: function stackToTree(stack) {
            stack.close();
            return _lezer_common__WEBPACK_IMPORTED_MODULE_0__["Tree"].build({
              buffer: StackBufferCursor.create(stack),
              nodeSet: this.parser.nodeSet,
              topID: this.topTerm,
              maxBufferLength: this.parser.bufferLength,
              reused: this.reused,
              start: this.ranges[0].from,
              length: stack.pos - this.ranges[0].from,
              minRepeatType: this.parser.minRepeatTerm
            });
          }
        }, {
          key: "stackID",
          value: function stackID(stack) {
            var id = (stackIDs || (stackIDs = new WeakMap())).get(stack);
            if (!id) stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));
            return id + stack;
          }
        }]);

        return Parse;
      }();

      function pushStackDedup(stack, newStacks) {
        for (var _i141 = 0; _i141 < newStacks.length; _i141++) {
          var other = newStacks[_i141];

          if (other.pos == stack.pos && other.sameState(stack)) {
            if (newStacks[_i141].score < stack.score) newStacks[_i141] = stack;
            return;
          }
        }

        newStacks.push(stack);
      }

      var Dialect = /*#__PURE__*/function () {
        function Dialect(source, flags, disabled) {
          _classCallCheck(this, Dialect);

          this.source = source;
          this.flags = flags;
          this.disabled = disabled;
        }

        _createClass(Dialect, [{
          key: "allows",
          value: function allows(term) {
            return !this.disabled || this.disabled[term] == 0;
          }
        }]);

        return Dialect;
      }();

      var id = function id(x) {
        return x;
      }; /// Context trackers are used to track stateful context (such as
      /// indentation in the Python grammar, or parent elements in the XML
      /// grammar) needed by external tokenizers. You declare them in a
      /// grammar file as `@context exportName from "module"`.
      ///
      /// Context values should be immutable, and can be updated (replaced)
      /// on shift or reduce actions.
      ///
      /// The export used in a `@context` declaration should be of this
      /// type.


      var ContextTracker = /*#__PURE__*/_createClass( /// Define a context tracker.
      function ContextTracker(spec) {
        _classCallCheck(this, ContextTracker);

        this.start = spec.start;
        this.shift = spec.shift || id;
        this.reduce = spec.reduce || id;
        this.reuse = spec.reuse || id;

        this.hash = spec.hash || function () {
          return 0;
        };

        this.strict = spec.strict !== false;
      }); /// A parser holds the parse tables for a given grammar, as generated
      /// by `lezer-generator`.


      var LRParser = /*#__PURE__*/function (_lezer_common__WEBPAC) {
        _inherits(LRParser, _lezer_common__WEBPAC);

        var _super50 = _createSuper(LRParser);

        /// @internal
        function LRParser(spec) {
          var _this107;

          _classCallCheck(this, LRParser);

          _this107 = _super50.call(this); /// @internal

          _this107.wrappers = [];
          if (spec.version != 13
          /* Version */
          ) throw new RangeError("Parser version (".concat(spec.version, ") doesn't match runtime version (", 13
          /* Version */
          , ")"));
          var nodeNames = spec.nodeNames.split(" ");
          _this107.minRepeatTerm = nodeNames.length;

          for (var _i142 = 0; _i142 < spec.repeatNodeCount; _i142++) {
            nodeNames.push("");
          }

          var topTerms = Object.keys(spec.topRules).map(function (r) {
            return spec.topRules[r][1];
          });
          var nodeProps = [];

          for (var _i143 = 0; _i143 < nodeNames.length; _i143++) {
            nodeProps.push([]);
          }

          function setProp(nodeID, prop, value) {
            nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);
          }

          if (spec.nodeProps) {
            var _iterator175 = _createForOfIteratorHelper(spec.nodeProps),
                _step175;

            try {
              for (_iterator175.s(); !(_step175 = _iterator175.n()).done;) {
                var propSpec = _step175.value;
                var prop = propSpec[0];

                for (var _i144 = 1; _i144 < propSpec.length;) {
                  var next = propSpec[_i144++];

                  if (next >= 0) {
                    setProp(next, prop, propSpec[_i144++]);
                  } else {
                    var value = propSpec[_i144 + -next];

                    for (var j = -next; j > 0; j--) {
                      setProp(propSpec[_i144++], prop, value);
                    }

                    _i144++;
                  }
                }
              }
            } catch (err) {
              _iterator175.e(err);
            } finally {
              _iterator175.f();
            }
          }

          _this107.nodeSet = new _lezer_common__WEBPACK_IMPORTED_MODULE_0__["NodeSet"](nodeNames.map(function (name, i) {
            return _lezer_common__WEBPACK_IMPORTED_MODULE_0__["NodeType"].define({
              name: i >= _this107.minRepeatTerm ? undefined : name,
              id: i,
              props: nodeProps[i],
              top: topTerms.indexOf(i) > -1,
              error: i == 0,
              skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1
            });
          }));
          _this107.strict = false;
          _this107.bufferLength = _lezer_common__WEBPACK_IMPORTED_MODULE_0__["DefaultBufferLength"];
          var tokenArray = decodeArray(spec.tokenData);
          _this107.context = spec.context;
          _this107.specialized = new Uint16Array(spec.specialized ? spec.specialized.length : 0);
          _this107.specializers = [];
          if (spec.specialized) for (var _i145 = 0; _i145 < spec.specialized.length; _i145++) {
            _this107.specialized[_i145] = spec.specialized[_i145].term;
            _this107.specializers[_i145] = spec.specialized[_i145].get;
          }
          _this107.states = decodeArray(spec.states, Uint32Array);
          _this107.data = decodeArray(spec.stateData);
          _this107["goto"] = decodeArray(spec["goto"]);
          _this107.maxTerm = spec.maxTerm;
          _this107.tokenizers = spec.tokenizers.map(function (value) {
            return typeof value == "number" ? new TokenGroup(tokenArray, value) : value;
          });
          _this107.topRules = spec.topRules;
          _this107.dialects = spec.dialects || {};
          _this107.dynamicPrecedences = spec.dynamicPrecedences || null;
          _this107.tokenPrecTable = spec.tokenPrec;
          _this107.termNames = spec.termNames || null;
          _this107.maxNode = _this107.nodeSet.types.length - 1;
          _this107.dialect = _this107.parseDialect();
          _this107.top = _this107.topRules[Object.keys(_this107.topRules)[0]];
          return _this107;
        }

        _createClass(LRParser, [{
          key: "createParse",
          value: function createParse(input, fragments, ranges) {
            var parse = new Parse(this, input, fragments, ranges);

            var _iterator176 = _createForOfIteratorHelper(this.wrappers),
                _step176;

            try {
              for (_iterator176.s(); !(_step176 = _iterator176.n()).done;) {
                var w = _step176.value;
                parse = w(parse, input, fragments, ranges);
              }
            } catch (err) {
              _iterator176.e(err);
            } finally {
              _iterator176.f();
            }

            return parse;
          } /// Get a goto table entry @internal

        }, {
          key: "getGoto",
          value: function getGoto(state, term) {
            var loose = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            var table = this["goto"];
            if (term >= table[0]) return -1;

            for (var pos = table[term + 1];;) {
              var groupTag = table[pos++],
                  last = groupTag & 1;
              var target = table[pos++];
              if (last && loose) return target;

              for (var end = pos + (groupTag >> 1); pos < end; pos++) {
                if (table[pos] == state) return target;
              }

              if (last) return -1;
            }
          } /// Check if this state has an action for a given terminal @internal

        }, {
          key: "hasAction",
          value: function hasAction(state, terminal) {
            var data = this.data;

            for (var set = 0; set < 2; set++) {
              for (var _i146 = this.stateSlot(state, set ? 2
              /* Skip */
              : 1
              /* Actions */
              ), next;; _i146 += 3) {
                if ((next = data[_i146]) == 65535
                /* End */
                ) {
                  if (data[_i146 + 1] == 1
                  /* Next */
                  ) next = data[_i146 = pair(data, _i146 + 2)];else if (data[_i146 + 1] == 2
                  /* Other */
                  ) return pair(data, _i146 + 2);else break;
                }

                if (next == terminal || next == 0
                /* Err */
                ) return pair(data, _i146 + 1);
              }
            }

            return 0;
          } /// @internal

        }, {
          key: "stateSlot",
          value: function stateSlot(state, slot) {
            return this.states[state * 6
            /* Size */
            + slot];
          } /// @internal

        }, {
          key: "stateFlag",
          value: function stateFlag(state, flag) {
            return (this.stateSlot(state, 0
            /* Flags */
            ) & flag) > 0;
          } /// @internal

        }, {
          key: "validAction",
          value: function validAction(state, action) {
            if (action == this.stateSlot(state, 4
            /* DefaultReduce */
            )) return true;

            for (var _i147 = this.stateSlot(state, 1
            /* Actions */
            );; _i147 += 3) {
              if (this.data[_i147] == 65535
              /* End */
              ) {
                if (this.data[_i147 + 1] == 1
                /* Next */
                ) _i147 = pair(this.data, _i147 + 2);else return false;
              }

              if (action == pair(this.data, _i147 + 1)) return true;
            }
          } /// Get the states that can follow this one through shift actions or
          /// goto jumps. @internal

        }, {
          key: "nextStates",
          value: function nextStates(state) {
            var _this108 = this;

            var result = [];

            for (var _i148 = this.stateSlot(state, 1
            /* Actions */
            );; _i148 += 3) {
              if (this.data[_i148] == 65535
              /* End */
              ) {
                if (this.data[_i148 + 1] == 1
                /* Next */
                ) _i148 = pair(this.data, _i148 + 2);else break;
              }

              if ((this.data[_i148 + 2] & 65536
              /* ReduceFlag */
              >> 16) == 0) {
                (function () {
                  var value = _this108.data[_i148 + 1];
                  if (!result.some(function (v, i) {
                    return i & 1 && v == value;
                  })) result.push(_this108.data[_i148], value);
                })();
              }
            }

            return result;
          } /// @internal

        }, {
          key: "overrides",
          value: function overrides(token, prev) {
            var iPrev = findOffset(this.data, this.tokenPrecTable, prev);
            return iPrev < 0 || findOffset(this.data, this.tokenPrecTable, token) < iPrev;
          } /// Configure the parser. Returns a new parser instance that has the
          /// given settings modified. Settings not provided in `config` are
          /// kept from the original parser.

        }, {
          key: "configure",
          value: function configure(config) {
            var _this$nodeSet;

            // Hideous reflection-based kludge to make it easy to create a
            // slightly modified copy of a parser.
            var copy = Object.assign(Object.create(LRParser.prototype), this);
            if (config.props) copy.nodeSet = (_this$nodeSet = this.nodeSet).extend.apply(_this$nodeSet, _toConsumableArray(config.props));

            if (config.top) {
              var info = this.topRules[config.top];
              if (!info) throw new RangeError("Invalid top rule name ".concat(config.top));
              copy.top = info;
            }

            if (config.tokenizers) copy.tokenizers = this.tokenizers.map(function (t) {
              var found = config.tokenizers.find(function (r) {
                return r.from == t;
              });
              return found ? found.to : t;
            });
            if (config.contextTracker) copy.context = config.contextTracker;
            if (config.dialect) copy.dialect = this.parseDialect(config.dialect);
            if (config.strict != null) copy.strict = config.strict;
            if (config.wrap) copy.wrappers = copy.wrappers.concat(config.wrap);
            if (config.bufferLength != null) copy.bufferLength = config.bufferLength;
            return copy;
          } /// Returns the name associated with a given term. This will only
          /// work for all terms when the parser was generated with the
          /// `--names` option. By default, only the names of tagged terms are
          /// stored.

        }, {
          key: "getName",
          value: function getName(term) {
            return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);
          } /// The eof term id is always allocated directly after the node
          /// types. @internal

        }, {
          key: "eofTerm",
          get: function get() {
            return this.maxNode + 1;
          } /// The type of top node produced by the parser.

        }, {
          key: "topNode",
          get: function get() {
            return this.nodeSet.types[this.top[1]];
          } /// @internal

        }, {
          key: "dynamicPrecedence",
          value: function dynamicPrecedence(term) {
            var prec = this.dynamicPrecedences;
            return prec == null ? 0 : prec[term] || 0;
          } /// @internal

        }, {
          key: "parseDialect",
          value: function parseDialect(dialect) {
            var values = Object.keys(this.dialects),
                flags = values.map(function () {
              return false;
            });

            if (dialect) {
              var _iterator177 = _createForOfIteratorHelper(dialect.split(" ")),
                  _step177;

              try {
                for (_iterator177.s(); !(_step177 = _iterator177.n()).done;) {
                  var part = _step177.value;

                  var _id = values.indexOf(part);

                  if (_id >= 0) flags[_id] = true;
                }
              } catch (err) {
                _iterator177.e(err);
              } finally {
                _iterator177.f();
              }
            }

            var disabled = null;

            for (var _i149 = 0; _i149 < values.length; _i149++) {
              if (!flags[_i149]) {
                for (var j = this.dialects[values[_i149]], _id2; (_id2 = this.data[j++]) != 65535
                /* End */
                ;) {
                  (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[_id2] = 1;
                }
              }
            }

            return new Dialect(dialect, flags, disabled);
          } /// (used by the output of the parser generator) @internal

        }], [{
          key: "deserialize",
          value: function deserialize(spec) {
            return new LRParser(spec);
          }
        }]);

        return LRParser;
      }(_lezer_common__WEBPACK_IMPORTED_MODULE_0__["Parser"]);

      function pair(data, off) {
        return data[off] | data[off + 1] << 16;
      }

      function findOffset(data, start, term) {
        for (var _i150 = start, next; (next = data[_i150]) != 65535
        /* End */
        ; _i150++) {
          if (next == term) return _i150 - start;
        }

        return -1;
      }

      function findFinished(stacks) {
        var best = null;

        var _iterator178 = _createForOfIteratorHelper(stacks),
            _step178;

        try {
          for (_iterator178.s(); !(_step178 = _iterator178.n()).done;) {
            var stack = _step178.value;
            var stopped = stack.p.stoppedAt;
            if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) && stack.p.parser.stateFlag(stack.state, 2
            /* Accepting */
            ) && (!best || best.score < stack.score)) best = stack;
          }
        } catch (err) {
          _iterator178.e(err);
        } finally {
          _iterator178.f();
        }

        return best;
      }
      /***/

    },

    /***/
    "NlmI":
    /*!***************************************************************************************!*\
      !*** ./apps/demo/src/app/examples/codemirror-example/codemirror-example.component.ts ***!
      \***************************************************************************************/

    /*! exports provided: CodemirrorExampleComponent */

    /***/
    function NlmI(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CodemirrorExampleComponent", function () {
        return CodemirrorExampleComponent;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _raw_loader_codemirror_example_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! raw-loader!./codemirror-example.component.html */
      "mKli");
      /* harmony import */


      var _codemirror_example_component_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./codemirror-example.component.css */
      "Kcil");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _example_emoji_list__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ../../example-emoji-list */
      "AqwI");
      /* harmony import */


      var _codemirror_theme_one_dark__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @codemirror/theme-one-dark */
      "P0tQ");
      /* harmony import */


      var _codemirror_lang_javascript__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @codemirror/lang-javascript */
      "tzg4");
      /* harmony import */


      var _codemirror_autocomplete__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @codemirror/autocomplete */
      "1FcE");
      /* harmony import */


      var _codemirror_view__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! @codemirror/view */
      "AtEE");
      /* harmony import */


      var _codemirror_basic_setup__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! @codemirror/basic-setup */
      "tFVh");

      var sharedExtensions = [_codemirror_theme_one_dark__WEBPACK_IMPORTED_MODULE_5__["oneDark"], _codemirror_lang_javascript__WEBPACK_IMPORTED_MODULE_6__["javascriptLanguage"], Object(_codemirror_lang_javascript__WEBPACK_IMPORTED_MODULE_6__["javascript"])()];

      var CodemirrorExampleComponent = /*#__PURE__*/function () {
        function CodemirrorExampleComponent(cd) {
          _classCallCheck(this, CodemirrorExampleComponent);

          this.cd = cd;
          this.emojiList = _example_emoji_list__WEBPACK_IMPORTED_MODULE_4__["emojiExampleList"];
          this.exampleJsText = "\nexport const some = 'string';\n\nexport function test() {\n   return 42;\n}\n  ".trim();
          this.visibleJsCode = this.exampleJsText;
          this.longExampleText = "\n// long code example\nexport const some = 'string';\n\nexport function test() {\n   return 42;\n}\n\nexport const some = 'string';\n\nexport function test() {\n   return 42;\n}\n\nexport const some = 'string';\n\nexport function test() {\n   return 42;\n}\n\nexport const some = 'string';\n\nexport function test() {\n   return 42;\n}\n  ".trim();
          this.normalExtensions = [].concat(sharedExtensions);
          this.extensions = [_codemirror_basic_setup__WEBPACK_IMPORTED_MODULE_9__["basicSetup"]].concat(sharedExtensions, [Object(_codemirror_autocomplete__WEBPACK_IMPORTED_MODULE_7__["autocompletion"])(), _codemirror_view__WEBPACK_IMPORTED_MODULE_8__["keymap"].of(_toConsumableArray(_codemirror_autocomplete__WEBPACK_IMPORTED_MODULE_7__["completionKeymap"]))]);
        }

        _createClass(CodemirrorExampleComponent, [{
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.subscription.unsubscribe();
          }
        }, {
          key: "updateCodemirror",
          value: function updateCodemirror(codemirror, textarea) {
            codemirror.value = textarea.value;
            this.cd.detectChanges();
          }
        }, {
          key: "insertText",
          value: function insertText(codemirror) {
            codemirror.insertText(codemirror.selectedRange.from, codemirror.selectedRange.to, 'test');
            codemirror.codeMirrorView.focus();
          }
        }, {
          key: "replaceCode",
          value: function replaceCode() {
            this.visibleJsCode = "\n      function thisIs() {\n        areplacedText.shouldWork();\n      }\n    ";
          }
        }]);

        return CodemirrorExampleComponent;
      }();

      CodemirrorExampleComponent.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectorRef"]
        }];
      };

      CodemirrorExampleComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["Component"])({
        selector: 'gewd-codemirror-example',
        template: _raw_loader_codemirror_example_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_codemirror_example_component_css__WEBPACK_IMPORTED_MODULE_2__["default"]]
      }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_angular_core__WEBPACK_IMPORTED_MODULE_3__["ChangeDetectorRef"]])], CodemirrorExampleComponent);
      /***/
    },

    /***/
    "OZn6":
    /*!********************************************************!*\
      !*** ./node_modules/@codemirror/comment/dist/index.js ***!
      \********************************************************/

    /*! exports provided: blockComment, blockUncomment, commentKeymap, lineComment, lineUncomment, toggleBlockComment, toggleComment, toggleLineComment */

    /***/
    function OZn6(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "blockComment", function () {
        return blockComment;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "blockUncomment", function () {
        return blockUncomment;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "commentKeymap", function () {
        return commentKeymap;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "lineComment", function () {
        return lineComment;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "lineUncomment", function () {
        return lineUncomment;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "toggleBlockComment", function () {
        return toggleBlockComment;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "toggleComment", function () {
        return toggleComment;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "toggleLineComment", function () {
        return toggleLineComment;
      });
      /* harmony import */


      var _codemirror_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @codemirror/state */
      "4eob");
      /**
      Comment or uncomment the current selection. Will use line comments
      if available, otherwise falling back to block comments.
      */


      var toggleComment = function toggleComment(target) {
        var config = getConfig(target.state);
        return config.line ? toggleLineComment(target) : config.block ? toggleBlockComment(target) : false;
      };

      function command(f, option) {
        return function (_ref60) {
          var state = _ref60.state,
              dispatch = _ref60.dispatch;
          var tr = f(option, state.selection.ranges, state);
          if (!tr) return false;
          dispatch(state.update(tr));
          return true;
        };
      }
      /**
      Comment or uncomment the current selection using line comments.
      The line comment syntax is taken from the
      [`commentTokens`](https://codemirror.net/6/docs/ref/#comment.CommentTokens) [language
      data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
      */


      var toggleLineComment = /*@__PURE__*/command(changeLineComment, 0
      /* Toggle */
      );
      /**
      Comment the current selection using line comments.
      */

      var lineComment = /*@__PURE__*/command(changeLineComment, 1
      /* Comment */
      );
      /**
      Uncomment the current selection using line comments.
      */

      var lineUncomment = /*@__PURE__*/command(changeLineComment, 2
      /* Uncomment */
      );
      /**
      Comment or uncomment the current selection using block comments.
      The block comment syntax is taken from the
      [`commentTokens`](https://codemirror.net/6/docs/ref/#comment.CommentTokens) [language
      data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
      */

      var toggleBlockComment = /*@__PURE__*/command(changeBlockComment, 0
      /* Toggle */
      );
      /**
      Comment the current selection using block comments.
      */

      var blockComment = /*@__PURE__*/command(changeBlockComment, 1
      /* Comment */
      );
      /**
      Uncomment the current selection using block comments.
      */

      var blockUncomment = /*@__PURE__*/command(changeBlockComment, 2
      /* Uncomment */
      );
      /**
      Default key bindings for this package.
      
       - Ctrl-/ (Cmd-/ on macOS): [`toggleComment`](https://codemirror.net/6/docs/ref/#comment.toggleComment).
       - Shift-Alt-a: [`toggleBlockComment`](https://codemirror.net/6/docs/ref/#comment.toggleBlockComment).
      */

      var commentKeymap = [{
        key: "Mod-/",
        run: toggleComment
      }, {
        key: "Alt-A",
        run: toggleBlockComment
      }];

      function getConfig(state) {
        var pos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : state.selection.main.head;
        var data = state.languageDataAt("commentTokens", pos);
        return data.length ? data[0] : {};
      }

      var SearchMargin = 50;
      /**
      Determines if the given range is block-commented in the given
      state.
      */

      function findBlockComment(state, _ref61, from, to) {
        var open = _ref61.open,
            close = _ref61.close;
        var textBefore = state.sliceDoc(from - SearchMargin, from);
        var textAfter = state.sliceDoc(to, to + SearchMargin);
        var spaceBefore = /\s*$/.exec(textBefore)[0].length,
            spaceAfter = /^\s*/.exec(textAfter)[0].length;
        var beforeOff = textBefore.length - spaceBefore;

        if (textBefore.slice(beforeOff - open.length, beforeOff) == open && textAfter.slice(spaceAfter, spaceAfter + close.length) == close) {
          return {
            open: {
              pos: from - spaceBefore,
              margin: spaceBefore && 1
            },
            close: {
              pos: to + spaceAfter,
              margin: spaceAfter && 1
            }
          };
        }

        var startText, endText;

        if (to - from <= 2 * SearchMargin) {
          startText = endText = state.sliceDoc(from, to);
        } else {
          startText = state.sliceDoc(from, from + SearchMargin);
          endText = state.sliceDoc(to - SearchMargin, to);
        }

        var startSpace = /^\s*/.exec(startText)[0].length,
            endSpace = /\s*$/.exec(endText)[0].length;
        var endOff = endText.length - endSpace - close.length;

        if (startText.slice(startSpace, startSpace + open.length) == open && endText.slice(endOff, endOff + close.length) == close) {
          return {
            open: {
              pos: from + startSpace + open.length,
              margin: /\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0
            },
            close: {
              pos: to - endSpace - close.length,
              margin: /\s/.test(endText.charAt(endOff - 1)) ? 1 : 0
            }
          };
        }

        return null;
      } // Performs toggle, comment and uncomment of block comments in
      // languages that support them.


      function changeBlockComment(option, ranges, state) {
        var tokens = ranges.map(function (r) {
          return getConfig(state, r.from).block;
        });
        if (!tokens.every(function (c) {
          return c;
        })) return null;
        var comments = ranges.map(function (r, i) {
          return findBlockComment(state, tokens[i], r.from, r.to);
        });

        if (option != 2
        /* Uncomment */
        && !comments.every(function (c) {
          return c;
        })) {
          var index = 0;
          return state.changeByRange(function (range) {
            var _tokens$index = tokens[index++],
                open = _tokens$index.open,
                close = _tokens$index.close;
            if (comments[index]) return {
              range: range
            };
            var shift = open.length + 1;
            return {
              changes: [{
                from: range.from,
                insert: open + " "
              }, {
                from: range.to,
                insert: " " + close
              }],
              range: _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].range(range.anchor + shift, range.head + shift)
            };
          });
        } else if (option != 1
        /* Comment */
        && comments.some(function (c) {
          return c;
        })) {
          var changes = [];

          for (var _i151 = 0, comment; _i151 < comments.length; _i151++) {
            if (comment = comments[_i151]) {
              var token = tokens[_i151],
                  _comment = comment,
                  open = _comment.open,
                  close = _comment.close;
              changes.push({
                from: open.pos - token.open.length,
                to: open.pos + open.margin
              }, {
                from: close.pos - close.margin,
                to: close.pos + token.close.length
              });
            }
          }

          return {
            changes: changes
          };
        }

        return null;
      } // Performs toggle, comment and uncomment of line comments.


      function changeLineComment(option, ranges, state) {
        var lines = [];
        var prevLine = -1;

        var _iterator179 = _createForOfIteratorHelper(ranges),
            _step179;

        try {
          for (_iterator179.s(); !(_step179 = _iterator179.n()).done;) {
            var _step179$value = _step179.value,
                _from4 = _step179$value.from,
                _to2 = _step179$value.to;
            var startI = lines.length,
                minIndent = 1e9;

            for (var pos = _from4; pos <= _to2;) {
              var _line3 = state.doc.lineAt(pos);

              if (_line3.from > prevLine && (_from4 == _to2 || _to2 > _line3.from)) {
                prevLine = _line3.from;
                var _token2 = getConfig(state, pos).line;
                if (!_token2) continue;
                var _indent = /^\s*/.exec(_line3.text)[0].length;

                var _empty = _indent == _line3.length;

                var _comment2 = _line3.text.slice(_indent, _indent + _token2.length) == _token2 ? _indent : -1;

                if (_indent < _line3.text.length && _indent < minIndent) minIndent = _indent;
                lines.push({
                  line: _line3,
                  comment: _comment2,
                  token: _token2,
                  indent: _indent,
                  empty: _empty,
                  single: false
                });
              }

              pos = _line3.to + 1;
            }

            if (minIndent < 1e9) for (var _i152 = startI; _i152 < lines.length; _i152++) {
              if (lines[_i152].indent < lines[_i152].line.text.length) lines[_i152].indent = minIndent;
            }
            if (lines.length == startI + 1) lines[startI].single = true;
          }
        } catch (err) {
          _iterator179.e(err);
        } finally {
          _iterator179.f();
        }

        if (option != 2
        /* Uncomment */
        && lines.some(function (l) {
          return l.comment < 0 && (!l.empty || l.single);
        })) {
          var changes = [];

          var _iterator180 = _createForOfIteratorHelper(lines),
              _step180;

          try {
            for (_iterator180.s(); !(_step180 = _iterator180.n()).done;) {
              var _step180$value = _step180.value,
                  line = _step180$value.line,
                  token = _step180$value.token,
                  indent = _step180$value.indent,
                  empty = _step180$value.empty,
                  single = _step180$value.single;
              if (single || !empty) changes.push({
                from: line.from + indent,
                insert: token + " "
              });
            }
          } catch (err) {
            _iterator180.e(err);
          } finally {
            _iterator180.f();
          }

          var changeSet = state.changes(changes);
          return {
            changes: changeSet,
            selection: state.selection.map(changeSet, 1)
          };
        } else if (option != 1
        /* Comment */
        && lines.some(function (l) {
          return l.comment >= 0;
        })) {
          var _changes = [];

          var _iterator181 = _createForOfIteratorHelper(lines),
              _step181;

          try {
            for (_iterator181.s(); !(_step181 = _iterator181.n()).done;) {
              var _step181$value = _step181.value,
                  _line2 = _step181$value.line,
                  comment = _step181$value.comment,
                  _token = _step181$value.token;

              if (comment >= 0) {
                var from = _line2.from + comment,
                    to = from + _token.length;
                if (_line2.text[to - _line2.from] == " ") to++;

                _changes.push({
                  from: from,
                  to: to
                });
              }
            }
          } catch (err) {
            _iterator181.e(err);
          } finally {
            _iterator181.f();
          }

          return {
            changes: _changes
          };
        }

        return null;
      }
      /***/

    },

    /***/
    "P0tQ":
    /*!***************************************************************!*\
      !*** ./node_modules/@codemirror/theme-one-dark/dist/index.js ***!
      \***************************************************************/

    /*! exports provided: oneDark, oneDarkHighlightStyle, oneDarkTheme */

    /***/
    function P0tQ(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "oneDark", function () {
        return oneDark;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "oneDarkHighlightStyle", function () {
        return oneDarkHighlightStyle;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "oneDarkTheme", function () {
        return oneDarkTheme;
      });
      /* harmony import */


      var _codemirror_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @codemirror/view */
      "AtEE");
      /* harmony import */


      var _codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @codemirror/highlight */
      "ubVE"); // Using https://github.com/one-dark/vscode-one-dark-theme/ as reference for the colors


      var chalky = "#e5c07b",
          coral = "#e06c75",
          cyan = "#56b6c2",
          invalid = "#ffffff",
          ivory = "#abb2bf",
          stone = "#7d8799",
          // Brightened compared to original to increase contrast
      malibu = "#61afef",
          sage = "#98c379",
          whiskey = "#d19a66",
          violet = "#c678dd",
          darkBackground = "#21252b",
          highlightBackground = "#2c313a",
          background = "#282c34",
          selection = "#3E4451",
          cursor = "#528bff";
      /**
      The editor theme styles for One Dark.
      */

      var oneDarkTheme = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_0__["EditorView"].theme({
        "&": {
          color: ivory,
          backgroundColor: background
        },
        ".cm-content": {
          caretColor: cursor
        },
        "&.cm-focused .cm-cursor": {
          borderLeftColor: cursor
        },
        "&.cm-focused .cm-selectionBackground, .cm-selectionBackground, ::selection": {
          backgroundColor: selection
        },
        ".cm-panels": {
          backgroundColor: darkBackground,
          color: ivory
        },
        ".cm-panels.cm-panels-top": {
          borderBottom: "2px solid black"
        },
        ".cm-panels.cm-panels-bottom": {
          borderTop: "2px solid black"
        },
        ".cm-searchMatch": {
          backgroundColor: "#72a1ff59",
          outline: "1px solid #457dff"
        },
        ".cm-searchMatch.cm-searchMatch-selected": {
          backgroundColor: "#6199ff2f"
        },
        ".cm-activeLine": {
          backgroundColor: highlightBackground
        },
        ".cm-selectionMatch": {
          backgroundColor: "#aafe661a"
        },
        ".cm-matchingBracket, .cm-nonmatchingBracket": {
          backgroundColor: "#bad0f847",
          outline: "1px solid #515a6b"
        },
        ".cm-gutters": {
          backgroundColor: background,
          color: stone,
          border: "none"
        },
        ".cm-activeLineGutter": {
          backgroundColor: highlightBackground
        },
        ".cm-foldPlaceholder": {
          backgroundColor: "transparent",
          border: "none",
          color: "#ddd"
        },
        ".cm-tooltip": {
          border: "1px solid #181a1f",
          backgroundColor: darkBackground
        },
        ".cm-tooltip-autocomplete": {
          "& > ul > li[aria-selected]": {
            backgroundColor: highlightBackground,
            color: ivory
          }
        }
      }, {
        dark: true
      });
      /**
      The highlighting style for code in the One Dark theme.
      */


      var oneDarkHighlightStyle = /*@__PURE__*/_codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["HighlightStyle"].define([{
        tag: _codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].keyword,
        color: violet
      }, {
        tag: [_codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].name, _codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].deleted, _codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].character, _codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].propertyName, _codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].macroName],
        color: coral
      }, {
        tag: [/*@__PURE__*/_codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"]["function"](_codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].variableName), _codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].labelName],
        color: malibu
      }, {
        tag: [_codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].color, /*@__PURE__*/_codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].constant(_codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].name), /*@__PURE__*/_codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].standard(_codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].name)],
        color: whiskey
      }, {
        tag: [/*@__PURE__*/_codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].definition(_codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].name), _codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].separator],
        color: ivory
      }, {
        tag: [_codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].typeName, _codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].className, _codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].number, _codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].changed, _codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].annotation, _codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].modifier, _codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].self, _codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].namespace],
        color: chalky
      }, {
        tag: [_codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].operator, _codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].operatorKeyword, _codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].url, _codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].escape, _codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].regexp, _codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].link, /*@__PURE__*/_codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].special(_codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].string)],
        color: cyan
      }, {
        tag: [_codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].meta, _codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].comment],
        color: stone
      }, {
        tag: _codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].strong,
        fontWeight: "bold"
      }, {
        tag: _codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].emphasis,
        fontStyle: "italic"
      }, {
        tag: _codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].strikethrough,
        textDecoration: "line-through"
      }, {
        tag: _codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].link,
        color: stone,
        textDecoration: "underline"
      }, {
        tag: _codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].heading,
        fontWeight: "bold",
        color: coral
      }, {
        tag: [_codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].atom, _codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].bool, /*@__PURE__*/_codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].special(_codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].variableName)],
        color: whiskey
      }, {
        tag: [_codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].processingInstruction, _codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].string, _codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].inserted],
        color: sage
      }, {
        tag: _codemirror_highlight__WEBPACK_IMPORTED_MODULE_1__["tags"].invalid,
        color: invalid
      }]);
      /**
      Extension to enable the One Dark theme (both the editor theme and
      the highlight style).
      */


      var oneDark = [oneDarkTheme, oneDarkHighlightStyle];
      /***/
    },

    /***/
    "QpUv":
    /*!*****************************************************!*\
      !*** ./node_modules/@codemirror/lint/dist/index.js ***!
      \*****************************************************/

    /*! exports provided: closeLintPanel, diagnosticCount, forceLinting, lintGutter, lintKeymap, linter, nextDiagnostic, openLintPanel, setDiagnostics, setDiagnosticsEffect */

    /***/
    function QpUv(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "closeLintPanel", function () {
        return closeLintPanel;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "diagnosticCount", function () {
        return diagnosticCount;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "forceLinting", function () {
        return forceLinting;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "lintGutter", function () {
        return lintGutter;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "lintKeymap", function () {
        return lintKeymap;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "linter", function () {
        return linter;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "nextDiagnostic", function () {
        return nextDiagnostic;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "openLintPanel", function () {
        return openLintPanel;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "setDiagnostics", function () {
        return setDiagnostics;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "setDiagnosticsEffect", function () {
        return setDiagnosticsEffect;
      });
      /* harmony import */


      var _codemirror_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @codemirror/view */
      "AtEE");
      /* harmony import */


      var _codemirror_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @codemirror/state */
      "rVk5");
      /* harmony import */


      var _codemirror_tooltip__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @codemirror/tooltip */
      "fK0Z");
      /* harmony import */


      var _codemirror_panel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @codemirror/panel */
      "cmz6");
      /* harmony import */


      var _codemirror_gutter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @codemirror/gutter */
      "h5Ab");
      /* harmony import */


      var _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @codemirror/rangeset */
      "wG49");
      /* harmony import */


      var crelt__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! crelt */
      "KV2Y");

      var SelectedDiagnostic = /*#__PURE__*/_createClass(function SelectedDiagnostic(from, to, diagnostic) {
        _classCallCheck(this, SelectedDiagnostic);

        this.from = from;
        this.to = to;
        this.diagnostic = diagnostic;
      });

      var LintState = /*#__PURE__*/function () {
        function LintState(diagnostics, panel, selected) {
          _classCallCheck(this, LintState);

          this.diagnostics = diagnostics;
          this.panel = panel;
          this.selected = selected;
        }

        _createClass(LintState, null, [{
          key: "init",
          value: function init(diagnostics, panel, state) {
            var ranges = _codemirror_view__WEBPACK_IMPORTED_MODULE_0__["Decoration"].set(diagnostics.map(function (d) {
              // For zero-length ranges or ranges covering only a line break, create a widget
              return d.from == d.to || d.from == d.to - 1 && state.doc.lineAt(d.from).to == d.from ? _codemirror_view__WEBPACK_IMPORTED_MODULE_0__["Decoration"].widget({
                widget: new DiagnosticWidget(d),
                diagnostic: d
              }).range(d.from) : _codemirror_view__WEBPACK_IMPORTED_MODULE_0__["Decoration"].mark({
                attributes: {
                  "class": "cm-lintRange cm-lintRange-" + d.severity
                },
                diagnostic: d
              }).range(d.from, d.to);
            }), true);

            return new LintState(ranges, panel, findDiagnostic(ranges));
          }
        }]);

        return LintState;
      }();

      function findDiagnostic(diagnostics) {
        var diagnostic = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var after = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var found = null;
        diagnostics.between(after, 1e9, function (from, to, _ref62) {
          var spec = _ref62.spec;
          if (diagnostic && spec.diagnostic != diagnostic) return;
          found = new SelectedDiagnostic(from, to, spec.diagnostic);
          return false;
        });
        return found;
      }

      function maybeEnableLint(state, effects) {
        return state.field(lintState, false) ? effects : effects.concat(_codemirror_state__WEBPACK_IMPORTED_MODULE_1__["StateEffect"].appendConfig.of([lintState, _codemirror_view__WEBPACK_IMPORTED_MODULE_0__["EditorView"].decorations.compute([lintState], function (state) {
          var _state$field = state.field(lintState),
              selected = _state$field.selected,
              panel = _state$field.panel;

          return !selected || !panel || selected.from == selected.to ? _codemirror_view__WEBPACK_IMPORTED_MODULE_0__["Decoration"].none : _codemirror_view__WEBPACK_IMPORTED_MODULE_0__["Decoration"].set([activeMark.range(selected.from, selected.to)]);
        }), Object(_codemirror_tooltip__WEBPACK_IMPORTED_MODULE_2__["hoverTooltip"])(lintTooltip), baseTheme]));
      }
      /**
      Returns a transaction spec which updates the current set of
      diagnostics, and enables the lint extension if if wasn't already
      active.
      */


      function setDiagnostics(state, diagnostics) {
        return {
          effects: maybeEnableLint(state, [setDiagnosticsEffect.of(diagnostics)])
        };
      }
      /**
      The state effect that updates the set of active diagnostics. Can
      be useful when writing an extension that needs to track these.
      */


      var setDiagnosticsEffect = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__["StateEffect"].define();

      var togglePanel = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__["StateEffect"].define();

      var movePanelSelection = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__["StateEffect"].define();

      var lintState = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__["StateField"].define({
        create: function create() {
          return new LintState(_codemirror_view__WEBPACK_IMPORTED_MODULE_0__["Decoration"].none, null, null);
        },
        update: function update(value, tr) {
          if (tr.docChanged) {
            var mapped = value.diagnostics.map(tr.changes),
                selected = null;

            if (value.selected) {
              var selPos = tr.changes.mapPos(value.selected.from, 1);
              selected = findDiagnostic(mapped, value.selected.diagnostic, selPos) || findDiagnostic(mapped, null, selPos);
            }

            value = new LintState(mapped, value.panel, selected);
          }

          var _iterator182 = _createForOfIteratorHelper(tr.effects),
              _step182;

          try {
            for (_iterator182.s(); !(_step182 = _iterator182.n()).done;) {
              var effect = _step182.value;

              if (effect.is(setDiagnosticsEffect)) {
                value = LintState.init(effect.value, value.panel, tr.state);
              } else if (effect.is(togglePanel)) {
                value = new LintState(value.diagnostics, effect.value ? LintPanel.open : null, value.selected);
              } else if (effect.is(movePanelSelection)) {
                value = new LintState(value.diagnostics, value.panel, effect.value);
              }
            }
          } catch (err) {
            _iterator182.e(err);
          } finally {
            _iterator182.f();
          }

          return value;
        },
        provide: function provide(f) {
          return [_codemirror_panel__WEBPACK_IMPORTED_MODULE_3__["showPanel"].from(f, function (val) {
            return val.panel;
          }), _codemirror_view__WEBPACK_IMPORTED_MODULE_0__["EditorView"].decorations.from(f, function (s) {
            return s.diagnostics;
          })];
        }
      });
      /**
      Returns the number of active lint diagnostics in the given state.
      */


      function diagnosticCount(state) {
        var lint = state.field(lintState, false);
        return lint ? lint.diagnostics.size : 0;
      }

      var activeMark = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_0__["Decoration"].mark({
        "class": "cm-lintRange cm-lintRange-active"
      });

      function lintTooltip(view, pos, side) {
        var _view$state$field = view.state.field(lintState),
            diagnostics = _view$state$field.diagnostics;

        var found = [],
            stackStart = 2e8,
            stackEnd = 0;
        diagnostics.between(pos - (side < 0 ? 1 : 0), pos + (side > 0 ? 1 : 0), function (from, to, _ref63) {
          var spec = _ref63.spec;

          if (pos >= from && pos <= to && (from == to || (pos > from || side > 0) && (pos < to || side < 0))) {
            found.push(spec.diagnostic);
            stackStart = Math.min(from, stackStart);
            stackEnd = Math.max(to, stackEnd);
          }
        });
        if (!found.length) return null;
        return {
          pos: stackStart,
          end: stackEnd,
          above: view.state.doc.lineAt(stackStart).to < stackEnd,
          create: function create() {
            return {
              dom: diagnosticsTooltip(view, found)
            };
          }
        };
      }

      function diagnosticsTooltip(view, diagnostics) {
        return Object(crelt__WEBPACK_IMPORTED_MODULE_6__["default"])("ul", {
          "class": "cm-tooltip-lint"
        }, diagnostics.map(function (d) {
          return renderDiagnostic(view, d, false);
        }));
      }
      /**
      Command to open and focus the lint panel.
      */


      var openLintPanel = function openLintPanel(view) {
        var field = view.state.field(lintState, false);
        if (!field || !field.panel) view.dispatch({
          effects: maybeEnableLint(view.state, [togglePanel.of(true)])
        });
        var panel = Object(_codemirror_panel__WEBPACK_IMPORTED_MODULE_3__["getPanel"])(view, LintPanel.open);
        if (panel) panel.dom.querySelector(".cm-panel-lint ul").focus();
        return true;
      };
      /**
      Command to close the lint panel, when open.
      */


      var closeLintPanel = function closeLintPanel(view) {
        var field = view.state.field(lintState, false);
        if (!field || !field.panel) return false;
        view.dispatch({
          effects: togglePanel.of(false)
        });
        return true;
      };
      /**
      Move the selection to the next diagnostic.
      */


      var nextDiagnostic = function nextDiagnostic(view) {
        var field = view.state.field(lintState, false);
        if (!field) return false;
        var sel = view.state.selection.main,
            next = field.diagnostics.iter(sel.to + 1);

        if (!next.value) {
          next = field.diagnostics.iter(0);
          if (!next.value || next.from == sel.from && next.to == sel.to) return false;
        }

        view.dispatch({
          selection: {
            anchor: next.from,
            head: next.to
          },
          scrollIntoView: true
        });
        return true;
      };
      /**
      A set of default key bindings for the lint functionality.
      
      - Ctrl-Shift-m (Cmd-Shift-m on macOS): [`openLintPanel`](https://codemirror.net/6/docs/ref/#lint.openLintPanel)
      - F8: [`nextDiagnostic`](https://codemirror.net/6/docs/ref/#lint.nextDiagnostic)
      */


      var lintKeymap = [{
        key: "Mod-Shift-m",
        run: openLintPanel
      }, {
        key: "F8",
        run: nextDiagnostic
      }];

      var lintPlugin = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_0__["ViewPlugin"].fromClass( /*#__PURE__*/function () {
        function _class14(view) {
          _classCallCheck(this, _class14);

          this.view = view;
          this.timeout = -1;
          this.set = true;

          var _view$state$facet = view.state.facet(lintSource),
              delay = _view$state$facet.delay;

          this.lintTime = Date.now() + delay;
          this.run = this.run.bind(this);
          this.timeout = setTimeout(this.run, delay);
        }

        _createClass(_class14, [{
          key: "run",
          value: function run() {
            var _this109 = this;

            var now = Date.now();

            if (now < this.lintTime - 10) {
              setTimeout(this.run, this.lintTime - now);
            } else {
              this.set = false;

              var state = this.view.state,
                  _state$facet = state.facet(lintSource),
                  sources = _state$facet.sources;

              Promise.all(sources.map(function (source) {
                return Promise.resolve(source(_this109.view));
              })).then(function (annotations) {
                var _a, _b;

                var all = annotations.reduce(function (a, b) {
                  return a.concat(b);
                });
                if (_this109.view.state.doc == state.doc && (all.length || ((_b = (_a = _this109.view.state.field(lintState, false)) === null || _a === void 0 ? void 0 : _a.diagnostics) === null || _b === void 0 ? void 0 : _b.size))) _this109.view.dispatch(setDiagnostics(_this109.view.state, all));
              }, function (error) {
                Object(_codemirror_view__WEBPACK_IMPORTED_MODULE_0__["logException"])(_this109.view.state, error);
              });
            }
          }
        }, {
          key: "update",
          value: function update(_update23) {
            var source = _update23.state.facet(lintSource);

            if (_update23.docChanged || source != _update23.startState.facet(lintSource)) {
              this.lintTime = Date.now() + source.delay;

              if (!this.set) {
                this.set = true;
                this.timeout = setTimeout(this.run, source.delay);
              }
            }
          }
        }, {
          key: "force",
          value: function force() {
            if (this.set) {
              this.lintTime = Date.now();
              this.run();
            }
          }
        }, {
          key: "destroy",
          value: function destroy() {
            clearTimeout(this.timeout);
          }
        }]);

        return _class14;
      }());

      var lintSource = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__["Facet"].define({
        combine: function combine(input) {
          return {
            sources: input.map(function (i) {
              return i.source;
            }),
            delay: input.length ? Math.max.apply(Math, _toConsumableArray(input.map(function (i) {
              return i.delay;
            }))) : 750
          };
        },
        enables: lintPlugin
      });
      /**
      Given a diagnostic source, this function returns an extension that
      enables linting with that source. It will be called whenever the
      editor is idle (after its content changed).
      */


      function linter(source) {
        var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        var _a;

        return lintSource.of({
          source: source,
          delay: (_a = config.delay) !== null && _a !== void 0 ? _a : 750
        });
      }
      /**
      Forces any linters [configured](https://codemirror.net/6/docs/ref/#lint.linter) to run when the
      editor is idle to run right away.
      */


      function forceLinting(view) {
        var plugin = view.plugin(lintPlugin);
        if (plugin) plugin.force();
      }

      function assignKeys(actions) {
        var assigned = [];

        if (actions) {
          var _iterator183 = _createForOfIteratorHelper(actions),
              _step183;

          try {
            actions: for (_iterator183.s(); !(_step183 = _iterator183.n()).done;) {
              var name = _step183.value.name;

              var _loop20 = function _loop20(_i153) {
                var ch = name[_i153];

                if (/[a-zA-Z]/.test(ch) && !assigned.some(function (c) {
                  return c.toLowerCase() == ch.toLowerCase();
                })) {
                  assigned.push(ch);
                  return "continue|actions";
                }
              };

              for (var _i153 = 0; _i153 < name.length; _i153++) {
                var _ret3 = _loop20(_i153);

                if (_ret3 === "continue|actions") continue actions;
              }

              assigned.push("");
            }
          } catch (err) {
            _iterator183.e(err);
          } finally {
            _iterator183.f();
          }
        }

        return assigned;
      }

      function renderDiagnostic(view, diagnostic, inPanel) {
        var _a;

        var keys = inPanel ? assignKeys(diagnostic.actions) : [];
        return Object(crelt__WEBPACK_IMPORTED_MODULE_6__["default"])("li", {
          "class": "cm-diagnostic cm-diagnostic-" + diagnostic.severity
        }, Object(crelt__WEBPACK_IMPORTED_MODULE_6__["default"])("span", {
          "class": "cm-diagnosticText"
        }, diagnostic.message), (_a = diagnostic.actions) === null || _a === void 0 ? void 0 : _a.map(function (action, i) {
          var click = function click(e) {
            e.preventDefault();
            var found = findDiagnostic(view.state.field(lintState).diagnostics, diagnostic);
            if (found) action.apply(view, found.from, found.to);
          };

          var name = action.name,
              keyIndex = keys[i] ? name.indexOf(keys[i]) : -1;
          var nameElt = keyIndex < 0 ? name : [name.slice(0, keyIndex), Object(crelt__WEBPACK_IMPORTED_MODULE_6__["default"])("u", name.slice(keyIndex, keyIndex + 1)), name.slice(keyIndex + 1)];
          return Object(crelt__WEBPACK_IMPORTED_MODULE_6__["default"])("button", {
            type: "button",
            "class": "cm-diagnosticAction",
            onclick: click,
            onmousedown: click,
            "aria-label": " Action: ".concat(name).concat(keyIndex < 0 ? "" : " (access key \"".concat(keys[i], ")\""), ".")
          }, nameElt);
        }), diagnostic.source && Object(crelt__WEBPACK_IMPORTED_MODULE_6__["default"])("div", {
          "class": "cm-diagnosticSource"
        }, diagnostic.source));
      }

      var DiagnosticWidget = /*#__PURE__*/function (_codemirror_view__WEB2) {
        _inherits(DiagnosticWidget, _codemirror_view__WEB2);

        var _super51 = _createSuper(DiagnosticWidget);

        function DiagnosticWidget(diagnostic) {
          var _this110;

          _classCallCheck(this, DiagnosticWidget);

          _this110 = _super51.call(this);
          _this110.diagnostic = diagnostic;
          return _this110;
        }

        _createClass(DiagnosticWidget, [{
          key: "eq",
          value: function eq(other) {
            return other.diagnostic == this.diagnostic;
          }
        }, {
          key: "toDOM",
          value: function toDOM() {
            return Object(crelt__WEBPACK_IMPORTED_MODULE_6__["default"])("span", {
              "class": "cm-lintPoint cm-lintPoint-" + this.diagnostic.severity
            });
          }
        }]);

        return DiagnosticWidget;
      }(_codemirror_view__WEBPACK_IMPORTED_MODULE_0__["WidgetType"]);

      var PanelItem = /*#__PURE__*/_createClass(function PanelItem(view, diagnostic) {
        _classCallCheck(this, PanelItem);

        this.diagnostic = diagnostic;
        this.id = "item_" + Math.floor(Math.random() * 0xffffffff).toString(16);
        this.dom = renderDiagnostic(view, diagnostic, true);
        this.dom.id = this.id;
        this.dom.setAttribute("role", "option");
      });

      var LintPanel = /*#__PURE__*/function () {
        function LintPanel(view) {
          var _this111 = this;

          _classCallCheck(this, LintPanel);

          this.view = view;
          this.items = [];

          var onkeydown = function onkeydown(event) {
            if (event.keyCode == 27) {
              // Escape
              closeLintPanel(_this111.view);

              _this111.view.focus();
            } else if (event.keyCode == 38 || event.keyCode == 33) {
              // ArrowUp, PageUp
              _this111.moveSelection((_this111.selectedIndex - 1 + _this111.items.length) % _this111.items.length);
            } else if (event.keyCode == 40 || event.keyCode == 34) {
              // ArrowDown, PageDown
              _this111.moveSelection((_this111.selectedIndex + 1) % _this111.items.length);
            } else if (event.keyCode == 36) {
              // Home
              _this111.moveSelection(0);
            } else if (event.keyCode == 35) {
              // End
              _this111.moveSelection(_this111.items.length - 1);
            } else if (event.keyCode == 13) {
              // Enter
              _this111.view.focus();
            } else if (event.keyCode >= 65 && event.keyCode <= 90 && _this111.selectedIndex >= 0) {
              // A-Z
              var diagnostic = _this111.items[_this111.selectedIndex].diagnostic,
                  keys = assignKeys(diagnostic.actions);

              for (var _i154 = 0; _i154 < keys.length; _i154++) {
                if (keys[_i154].toUpperCase().charCodeAt(0) == event.keyCode) {
                  var found = findDiagnostic(_this111.view.state.field(lintState).diagnostics, diagnostic);
                  if (found) diagnostic.actions[_i154].apply(view, found.from, found.to);
                }
              }
            } else {
              return;
            }

            event.preventDefault();
          };

          var onclick = function onclick(event) {
            for (var _i155 = 0; _i155 < _this111.items.length; _i155++) {
              if (_this111.items[_i155].dom.contains(event.target)) _this111.moveSelection(_i155);
            }
          };

          this.list = Object(crelt__WEBPACK_IMPORTED_MODULE_6__["default"])("ul", {
            tabIndex: 0,
            role: "listbox",
            "aria-label": this.view.state.phrase("Diagnostics"),
            onkeydown: onkeydown,
            onclick: onclick
          });
          this.dom = Object(crelt__WEBPACK_IMPORTED_MODULE_6__["default"])("div", {
            "class": "cm-panel-lint"
          }, this.list, Object(crelt__WEBPACK_IMPORTED_MODULE_6__["default"])("button", {
            type: "button",
            name: "close",
            "aria-label": this.view.state.phrase("close"),
            onclick: function onclick() {
              return closeLintPanel(_this111.view);
            }
          }, "×"));
          this.update();
        }

        _createClass(LintPanel, [{
          key: "selectedIndex",
          get: function get() {
            var selected = this.view.state.field(lintState).selected;
            if (!selected) return -1;

            for (var _i156 = 0; _i156 < this.items.length; _i156++) {
              if (this.items[_i156].diagnostic == selected.diagnostic) return _i156;
            }

            return -1;
          }
        }, {
          key: "update",
          value: function update() {
            var _this112 = this;

            var _this$view$state$fiel = this.view.state.field(lintState),
                diagnostics = _this$view$state$fiel.diagnostics,
                selected = _this$view$state$fiel.selected;

            var i = 0,
                needsSync = false,
                newSelectedItem = null;
            diagnostics.between(0, this.view.state.doc.length, function (_start, _end, _ref64) {
              var spec = _ref64.spec;
              var found = -1,
                  item;

              for (var j = i; j < _this112.items.length; j++) {
                if (_this112.items[j].diagnostic == spec.diagnostic) {
                  found = j;
                  break;
                }
              }

              if (found < 0) {
                item = new PanelItem(_this112.view, spec.diagnostic);

                _this112.items.splice(i, 0, item);

                needsSync = true;
              } else {
                item = _this112.items[found];

                if (found > i) {
                  _this112.items.splice(i, found - i);

                  needsSync = true;
                }
              }

              if (selected && item.diagnostic == selected.diagnostic) {
                if (!item.dom.hasAttribute("aria-selected")) {
                  item.dom.setAttribute("aria-selected", "true");
                  newSelectedItem = item;
                }
              } else if (item.dom.hasAttribute("aria-selected")) {
                item.dom.removeAttribute("aria-selected");
              }

              i++;
            });

            while (i < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0)) {
              needsSync = true;
              this.items.pop();
            }

            if (this.items.length == 0) {
              this.items.push(new PanelItem(this.view, {
                from: -1,
                to: -1,
                severity: "info",
                message: this.view.state.phrase("No diagnostics")
              }));
              needsSync = true;
            }

            if (newSelectedItem) {
              this.list.setAttribute("aria-activedescendant", newSelectedItem.id);
              this.view.requestMeasure({
                key: this,
                read: function read() {
                  return {
                    sel: newSelectedItem.dom.getBoundingClientRect(),
                    panel: _this112.list.getBoundingClientRect()
                  };
                },
                write: function write(_ref65) {
                  var sel = _ref65.sel,
                      panel = _ref65.panel;
                  if (sel.top < panel.top) _this112.list.scrollTop -= panel.top - sel.top;else if (sel.bottom > panel.bottom) _this112.list.scrollTop += sel.bottom - panel.bottom;
                }
              });
            } else if (this.selectedIndex < 0) {
              this.list.removeAttribute("aria-activedescendant");
            }

            if (needsSync) this.sync();
          }
        }, {
          key: "sync",
          value: function sync() {
            var domPos = this.list.firstChild;

            function rm() {
              var prev = domPos;
              domPos = prev.nextSibling;
              prev.remove();
            }

            var _iterator184 = _createForOfIteratorHelper(this.items),
                _step184;

            try {
              for (_iterator184.s(); !(_step184 = _iterator184.n()).done;) {
                var item = _step184.value;

                if (item.dom.parentNode == this.list) {
                  while (domPos != item.dom) {
                    rm();
                  }

                  domPos = item.dom.nextSibling;
                } else {
                  this.list.insertBefore(item.dom, domPos);
                }
              }
            } catch (err) {
              _iterator184.e(err);
            } finally {
              _iterator184.f();
            }

            while (domPos) {
              rm();
            }
          }
        }, {
          key: "moveSelection",
          value: function moveSelection(selectedIndex) {
            if (this.selectedIndex < 0) return;
            var field = this.view.state.field(lintState);
            var selection = findDiagnostic(field.diagnostics, this.items[selectedIndex].diagnostic);
            if (!selection) return;
            this.view.dispatch({
              selection: {
                anchor: selection.from,
                head: selection.to
              },
              scrollIntoView: true,
              effects: movePanelSelection.of(selection)
            });
          }
        }], [{
          key: "open",
          value: function open(view) {
            return new LintPanel(view);
          }
        }]);

        return LintPanel;
      }();

      function svg(content) {
        var attrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "viewBox=\"0 0 40 40\"";
        return "url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" ".concat(attrs, ">").concat(encodeURIComponent(content), "</svg>')");
      }

      function underline(color) {
        return svg("<path d=\"m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0\" stroke=\"".concat(color, "\" fill=\"none\" stroke-width=\".7\"/>"), "width=\"6\" height=\"3\"");
      }

      var baseTheme = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_0__["EditorView"].baseTheme({
        ".cm-diagnostic": {
          padding: "3px 6px 3px 8px",
          marginLeft: "-1px",
          display: "block",
          whiteSpace: "pre-wrap"
        },
        ".cm-diagnostic-error": {
          borderLeft: "5px solid #d11"
        },
        ".cm-diagnostic-warning": {
          borderLeft: "5px solid orange"
        },
        ".cm-diagnostic-info": {
          borderLeft: "5px solid #999"
        },
        ".cm-diagnosticAction": {
          font: "inherit",
          border: "none",
          padding: "2px 4px",
          backgroundColor: "#444",
          color: "white",
          borderRadius: "3px",
          marginLeft: "8px"
        },
        ".cm-diagnosticSource": {
          fontSize: "70%",
          opacity: .7
        },
        ".cm-lintRange": {
          backgroundPosition: "left bottom",
          backgroundRepeat: "repeat-x",
          paddingBottom: "0.7px"
        },
        ".cm-lintRange-error": {
          backgroundImage: /*@__PURE__*/underline("#d11")
        },
        ".cm-lintRange-warning": {
          backgroundImage: /*@__PURE__*/underline("orange")
        },
        ".cm-lintRange-info": {
          backgroundImage: /*@__PURE__*/underline("#999")
        },
        ".cm-lintRange-active": {
          backgroundColor: "#ffdd9980"
        },
        ".cm-tooltip-lint": {
          padding: 0,
          margin: 0
        },
        ".cm-lintPoint": {
          position: "relative",
          "&:after": {
            content: '""',
            position: "absolute",
            bottom: 0,
            left: "-2px",
            borderLeft: "3px solid transparent",
            borderRight: "3px solid transparent",
            borderBottom: "4px solid #d11"
          }
        },
        ".cm-lintPoint-warning": {
          "&:after": {
            borderBottomColor: "orange"
          }
        },
        ".cm-lintPoint-info": {
          "&:after": {
            borderBottomColor: "#999"
          }
        },
        ".cm-panel.cm-panel-lint": {
          position: "relative",
          "& ul": {
            maxHeight: "100px",
            overflowY: "auto",
            "& [aria-selected]": {
              backgroundColor: "#ddd",
              "& u": {
                textDecoration: "underline"
              }
            },
            "&:focus [aria-selected]": {
              background_fallback: "#bdf",
              backgroundColor: "Highlight",
              color_fallback: "white",
              color: "HighlightText"
            },
            "& u": {
              textDecoration: "none"
            },
            padding: 0,
            margin: 0
          },
          "& [name=close]": {
            position: "absolute",
            top: "0",
            right: "2px",
            background: "inherit",
            border: "none",
            font: "inherit",
            padding: 0,
            margin: 0
          }
        }
      });

      var LintGutterMarker = /*#__PURE__*/function (_codemirror_gutter__W) {
        _inherits(LintGutterMarker, _codemirror_gutter__W);

        var _super52 = _createSuper(LintGutterMarker);

        function LintGutterMarker(diagnostics) {
          var _this113;

          _classCallCheck(this, LintGutterMarker);

          _this113 = _super52.call(this);
          _this113.diagnostics = diagnostics;
          _this113.severity = diagnostics.reduce(function (max, d) {
            var s = d.severity;
            return s == "error" || s == "warning" && max == "info" ? s : max;
          }, "info");
          return _this113;
        }

        _createClass(LintGutterMarker, [{
          key: "toDOM",
          value: function toDOM(view) {
            var _this114 = this;

            var elt = document.createElement("div");
            elt.className = "cm-lint-marker cm-lint-marker-" + this.severity;

            elt.onmouseover = function () {
              return gutterMarkerMouseOver(view, elt, _this114.diagnostics);
            };

            return elt;
          }
        }]);

        return LintGutterMarker;
      }(_codemirror_gutter__WEBPACK_IMPORTED_MODULE_4__["GutterMarker"]);

      function trackHoverOn(view, marker) {
        var mousemove = function mousemove(event) {
          var rect = marker.getBoundingClientRect();
          if (event.clientX > rect.left - 10
          /* Margin */
          && event.clientX < rect.right + 10
          /* Margin */
          && event.clientY > rect.top - 10
          /* Margin */
          && event.clientY < rect.bottom + 10
          /* Margin */
          ) return;

          for (var target = event.target; target; target = target.parentNode) {
            if (target.nodeType == 1 && target.classList.contains("cm-tooltip-lint")) return;
          }

          window.removeEventListener("mousemove", mousemove);
          if (view.state.field(lintGutterTooltip)) view.dispatch({
            effects: setLintGutterTooltip.of(null)
          });
        };

        window.addEventListener("mousemove", mousemove);
      }

      function gutterMarkerMouseOver(view, marker, diagnostics) {
        function hovered() {
          var line = view.visualLineAtHeight(marker.getBoundingClientRect().top + 5);
          var linePos = view.coordsAtPos(line.from),
              markerRect = marker.getBoundingClientRect();

          if (linePos) {
            view.dispatch({
              effects: setLintGutterTooltip.of({
                pos: line.from,
                above: false,
                create: function create() {
                  return {
                    dom: diagnosticsTooltip(view, diagnostics),
                    offset: {
                      x: markerRect.left - linePos.left,
                      y: 0
                    }
                  };
                }
              })
            });
          }

          marker.onmouseout = marker.onmousemove = null;
          trackHoverOn(view, marker);
        }

        var hoverTimeout = setTimeout(hovered, 600
        /* Time */
        );

        marker.onmouseout = function () {
          clearTimeout(hoverTimeout);
          marker.onmouseout = marker.onmousemove = null;
        };

        marker.onmousemove = function () {
          clearTimeout(hoverTimeout);
          hoverTimeout = setTimeout(hovered, 600
          /* Time */
          );
        };
      }

      function markersForDiagnostics(doc, diagnostics) {
        var byLine = Object.create(null);

        var _iterator185 = _createForOfIteratorHelper(diagnostics),
            _step185;

        try {
          for (_iterator185.s(); !(_step185 = _iterator185.n()).done;) {
            var diagnostic = _step185.value;

            var _line4 = doc.lineAt(diagnostic.from);

            (byLine[_line4.from] || (byLine[_line4.from] = [])).push(diagnostic);
          }
        } catch (err) {
          _iterator185.e(err);
        } finally {
          _iterator185.f();
        }

        var markers = [];

        for (var line in byLine) {
          markers.push(new LintGutterMarker(byLine[line]).range(+line));
        }

        return _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_5__["RangeSet"].of(markers, true);
      }

      var lintGutterExtension = /*@__PURE__*/Object(_codemirror_gutter__WEBPACK_IMPORTED_MODULE_4__["gutter"])({
        "class": "cm-gutter-lint",
        markers: function markers(view) {
          return view.state.field(lintGutterMarkers);
        }
      });

      var lintGutterMarkers = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__["StateField"].define({
        create: function create() {
          return _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_5__["RangeSet"].empty;
        },
        update: function update(markers, tr) {
          markers = markers.map(tr.changes);

          var _iterator186 = _createForOfIteratorHelper(tr.effects),
              _step186;

          try {
            for (_iterator186.s(); !(_step186 = _iterator186.n()).done;) {
              var effect = _step186.value;

              if (effect.is(setDiagnosticsEffect)) {
                markers = markersForDiagnostics(tr.state.doc, effect.value);
              }
            }
          } catch (err) {
            _iterator186.e(err);
          } finally {
            _iterator186.f();
          }

          return markers;
        }
      });

      var setLintGutterTooltip = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__["StateEffect"].define();

      var lintGutterTooltip = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__["StateField"].define({
        create: function create() {
          return null;
        },
        update: function update(tooltip, tr) {
          if (tooltip && tr.docChanged) tooltip = Object.assign(Object.assign({}, tooltip), {
            pos: tr.changes.mapPos(tooltip.pos)
          });
          return tr.effects.reduce(function (t, e) {
            return e.is(setLintGutterTooltip) ? e.value : t;
          }, tooltip);
        },
        provide: function provide(field) {
          return _codemirror_tooltip__WEBPACK_IMPORTED_MODULE_2__["showTooltip"].from(field);
        }
      });

      var lintGutterTheme = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_0__["EditorView"].baseTheme({
        ".cm-gutter-lint": {
          width: "1.4em",
          "& .cm-gutterElement": {
            padding: "0 .2em",
            display: "flex",
            flexDirection: "column",
            justifyContent: "center"
          }
        },
        ".cm-lint-marker": {
          width: "1em",
          height: "1em"
        },
        ".cm-lint-marker-info": {
          content: /*@__PURE__*/svg("<path fill=\"#aaf\" stroke=\"#77e\" stroke-width=\"6\" stroke-linejoin=\"round\" d=\"M5 5L35 5L35 35L5 35Z\"/>")
        },
        ".cm-lint-marker-warning": {
          content: /*@__PURE__*/svg("<path fill=\"#fe8\" stroke=\"#fd7\" stroke-width=\"6\" stroke-linejoin=\"round\" d=\"M20 6L37 35L3 35Z\"/>")
        },
        ".cm-lint-marker-error:before": {
          content: /*@__PURE__*/svg("<circle cx=\"20\" cy=\"20\" r=\"15\" fill=\"#f87\" stroke=\"#f43\" stroke-width=\"6\"/>")
        }
      });
      /**
      Returns an extension that installs a gutter showing markers for
      each line that has diagnostics, which can be hovered over to see
      the diagnostics.
      */


      function lintGutter() {
        return [lintGutterMarkers, lintGutterExtension, lintGutterTheme, lintGutterTooltip];
      }
      /***/

    },

    /***/
    "WYGy":
    /*!**************************************************************!*\
      !*** ./node_modules/@codemirror/matchbrackets/dist/index.js ***!
      \**************************************************************/

    /*! exports provided: bracketMatching, matchBrackets */

    /***/
    function WYGy(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "bracketMatching", function () {
        return bracketMatching;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "matchBrackets", function () {
        return matchBrackets;
      });
      /* harmony import */


      var _codemirror_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @codemirror/state */
      "4eob");
      /* harmony import */


      var _codemirror_language__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @codemirror/language */
      "yqQ+");
      /* harmony import */


      var _codemirror_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @codemirror/view */
      "AtEE");
      /* harmony import */


      var _lezer_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @lezer/common */
      "lmln");

      var baseTheme = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_2__["EditorView"].baseTheme({
        ".cm-matchingBracket": {
          backgroundColor: "#328c8252"
        },
        ".cm-nonmatchingBracket": {
          backgroundColor: "#bb555544"
        }
      });

      var DefaultScanDist = 10000,
          DefaultBrackets = "()[]{}";

      var bracketMatchingConfig = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Facet"].define({
        combine: function combine(configs) {
          return Object(_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["combineConfig"])(configs, {
            afterCursor: true,
            brackets: DefaultBrackets,
            maxScanDistance: DefaultScanDist
          });
        }
      });

      var matchingMark = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_2__["Decoration"].mark({
        "class": "cm-matchingBracket"
      }),
          nonmatchingMark = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_2__["Decoration"].mark({
        "class": "cm-nonmatchingBracket"
      });

      var bracketMatchingState = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["StateField"].define({
        create: function create() {
          return _codemirror_view__WEBPACK_IMPORTED_MODULE_2__["Decoration"].none;
        },
        update: function update(deco, tr) {
          if (!tr.docChanged && !tr.selection) return deco;
          var decorations = [];
          var config = tr.state.facet(bracketMatchingConfig);

          var _iterator187 = _createForOfIteratorHelper(tr.state.selection.ranges),
              _step187;

          try {
            for (_iterator187.s(); !(_step187 = _iterator187.n()).done;) {
              var range = _step187.value;
              if (!range.empty) continue;
              var match = matchBrackets(tr.state, range.head, -1, config) || range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config) || config.afterCursor && (matchBrackets(tr.state, range.head, 1, config) || range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config));
              if (!match) continue;
              var mark = match.matched ? matchingMark : nonmatchingMark;
              decorations.push(mark.range(match.start.from, match.start.to));
              if (match.end) decorations.push(mark.range(match.end.from, match.end.to));
            }
          } catch (err) {
            _iterator187.e(err);
          } finally {
            _iterator187.f();
          }

          return _codemirror_view__WEBPACK_IMPORTED_MODULE_2__["Decoration"].set(decorations, true);
        },
        provide: function provide(f) {
          return _codemirror_view__WEBPACK_IMPORTED_MODULE_2__["EditorView"].decorations.from(f);
        }
      });

      var bracketMatchingUnique = [bracketMatchingState, baseTheme];
      /**
      Create an extension that enables bracket matching. Whenever the
      cursor is next to a bracket, that bracket and the one it matches
      are highlighted. Or, when no matching bracket is found, another
      highlighting style is used to indicate this.
      */

      function bracketMatching() {
        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return [bracketMatchingConfig.of(config), bracketMatchingUnique];
      }

      function matchingNodes(node, dir, brackets) {
        var byProp = node.prop(dir < 0 ? _lezer_common__WEBPACK_IMPORTED_MODULE_3__["NodeProp"].openedBy : _lezer_common__WEBPACK_IMPORTED_MODULE_3__["NodeProp"].closedBy);
        if (byProp) return byProp;

        if (node.name.length == 1) {
          var index = brackets.indexOf(node.name);
          if (index > -1 && index % 2 == (dir < 0 ? 1 : 0)) return [brackets[index + dir]];
        }

        return null;
      }
      /**
      Find the matching bracket for the token at `pos`, scanning
      direction `dir`. Only the `brackets` and `maxScanDistance`
      properties are used from `config`, if given. Returns null if no
      bracket was found at `pos`, or a match result otherwise.
      */


      function matchBrackets(state, pos, dir) {
        var config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
        var maxScanDistance = config.maxScanDistance || DefaultScanDist,
            brackets = config.brackets || DefaultBrackets;
        var tree = Object(_codemirror_language__WEBPACK_IMPORTED_MODULE_1__["syntaxTree"])(state),
            node = tree.resolveInner(pos, dir);

        for (var cur = node; cur; cur = cur.parent) {
          var matches = matchingNodes(cur.type, dir, brackets);
          if (matches && cur.from < cur.to) return matchMarkedBrackets(state, pos, dir, cur, matches, brackets);
        }

        return matchPlainBrackets(state, pos, dir, tree, node.type, maxScanDistance, brackets);
      }

      function matchMarkedBrackets(_state, _pos, dir, token, matching, brackets) {
        var parent = token.parent,
            firstToken = {
          from: token.from,
          to: token.to
        };
        var depth = 0,
            cursor = parent === null || parent === void 0 ? void 0 : parent.cursor;
        if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to))) do {
          if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {
            if (depth == 0 && matching.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {
              return {
                start: firstToken,
                end: {
                  from: cursor.from,
                  to: cursor.to
                },
                matched: true
              };
            } else if (matchingNodes(cursor.type, dir, brackets)) {
              depth++;
            } else if (matchingNodes(cursor.type, -dir, brackets)) {
              depth--;
              if (depth == 0) return {
                start: firstToken,
                end: cursor.from == cursor.to ? undefined : {
                  from: cursor.from,
                  to: cursor.to
                },
                matched: false
              };
            }
          }
        } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());
        return {
          start: firstToken,
          matched: false
        };
      }

      function matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {
        var startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);
        var bracket = brackets.indexOf(startCh);
        if (bracket < 0 || bracket % 2 == 0 != dir > 0) return null;
        var startToken = {
          from: dir < 0 ? pos - 1 : pos,
          to: dir > 0 ? pos + 1 : pos
        };
        var iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0),
            depth = 0;

        for (var distance = 0; !iter.next().done && distance <= maxScanDistance;) {
          var text = iter.value;
          if (dir < 0) distance += text.length;
          var basePos = pos + distance * dir;

          for (var _pos2 = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; _pos2 != end; _pos2 += dir) {
            var found = brackets.indexOf(text[_pos2]);
            if (found < 0 || tree.resolve(basePos + _pos2, 1).type != tokenType) continue;

            if (found % 2 == 0 == dir > 0) {
              depth++;
            } else if (depth == 1) {
              // Closing
              return {
                start: startToken,
                end: {
                  from: basePos + _pos2,
                  to: basePos + _pos2 + 1
                },
                matched: found >> 1 == bracket >> 1
              };
            } else {
              depth--;
            }
          }

          if (dir > 0) distance += text.length;
        }

        return iter.done ? {
          start: startToken,
          matched: false
        } : null;
      }
      /***/

    },

    /***/
    "Wzyh":
    /*!*****************************************************!*\
      !*** ./node_modules/@codemirror/fold/dist/index.js ***!
      \*****************************************************/

    /*! exports provided: codeFolding, foldAll, foldCode, foldEffect, foldGutter, foldKeymap, foldedRanges, unfoldAll, unfoldCode, unfoldEffect */

    /***/
    function Wzyh(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "codeFolding", function () {
        return codeFolding;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "foldAll", function () {
        return foldAll;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "foldCode", function () {
        return foldCode;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "foldEffect", function () {
        return foldEffect;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "foldGutter", function () {
        return foldGutter;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "foldKeymap", function () {
        return foldKeymap;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "foldedRanges", function () {
        return foldedRanges;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "unfoldAll", function () {
        return unfoldAll;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "unfoldCode", function () {
        return unfoldCode;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "unfoldEffect", function () {
        return unfoldEffect;
      });
      /* harmony import */


      var _codemirror_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @codemirror/state */
      "4eob");
      /* harmony import */


      var _codemirror_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @codemirror/view */
      "BG4M");
      /* harmony import */


      var _codemirror_language__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @codemirror/language */
      "yqQ+");
      /* harmony import */


      var _codemirror_gutter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @codemirror/gutter */
      "h5Ab");
      /* harmony import */


      var _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @codemirror/rangeset */
      "wG49");

      function mapRange(range, mapping) {
        var from = mapping.mapPos(range.from, 1),
            to = mapping.mapPos(range.to, -1);
        return from >= to ? undefined : {
          from: from,
          to: to
        };
      }
      /**
      State effect that can be attached to a transaction to fold the
      given range. (You probably only need this in exceptional
      circumstances—usually you'll just want to let
      [`foldCode`](https://codemirror.net/6/docs/ref/#fold.foldCode) and the [fold
      gutter](https://codemirror.net/6/docs/ref/#fold.foldGutter) create the transactions.)
      */


      var foldEffect = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["StateEffect"].define({
        map: mapRange
      });
      /**
      State effect that unfolds the given range (if it was folded).
      */


      var unfoldEffect = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["StateEffect"].define({
        map: mapRange
      });

      function selectedLines(view) {
        var lines = [];

        var _iterator188 = _createForOfIteratorHelper(view.state.selection.ranges),
            _step188;

        try {
          var _loop21 = function _loop21() {
            var head = _step188.value.head;
            if (lines.some(function (l) {
              return l.from <= head && l.to >= head;
            })) return "continue";
            lines.push(view.lineBlockAt(head));
          };

          for (_iterator188.s(); !(_step188 = _iterator188.n()).done;) {
            var _ret4 = _loop21();

            if (_ret4 === "continue") continue;
          }
        } catch (err) {
          _iterator188.e(err);
        } finally {
          _iterator188.f();
        }

        return lines;
      }

      var foldState = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["StateField"].define({
        create: function create() {
          return _codemirror_view__WEBPACK_IMPORTED_MODULE_1__["Decoration"].none;
        },
        update: function update(folded, tr) {
          folded = folded.map(tr.changes);

          var _iterator189 = _createForOfIteratorHelper(tr.effects),
              _step189;

          try {
            var _loop22 = function _loop22() {
              var e = _step189.value;
              if (e.is(foldEffect) && !foldExists(folded, e.value.from, e.value.to)) folded = folded.update({
                add: [foldWidget.range(e.value.from, e.value.to)]
              });else if (e.is(unfoldEffect)) folded = folded.update({
                filter: function filter(from, to) {
                  return e.value.from != from || e.value.to != to;
                },
                filterFrom: e.value.from,
                filterTo: e.value.to
              });
            };

            for (_iterator189.s(); !(_step189 = _iterator189.n()).done;) {
              _loop22();
            } // Clear folded ranges that cover the selection head

          } catch (err) {
            _iterator189.e(err);
          } finally {
            _iterator189.f();
          }

          if (tr.selection) {
            var onSelection = false,
                head = tr.selection.main.head;
            folded.between(head, head, function (a, b) {
              if (a < head && b > head) onSelection = true;
            });
            if (onSelection) folded = folded.update({
              filterFrom: head,
              filterTo: head,
              filter: function filter(a, b) {
                return b <= head || a >= head;
              }
            });
          }

          return folded;
        },
        provide: function provide(f) {
          return _codemirror_view__WEBPACK_IMPORTED_MODULE_1__["EditorView"].decorations.from(f);
        }
      });
      /**
      Get a [range set](https://codemirror.net/6/docs/ref/#rangeset.RangeSet) containing the folded ranges
      in the given state.
      */


      function foldedRanges(state) {
        return state.field(foldState, false) || _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_4__["RangeSet"].empty;
      }

      function foldInside(state, from, to) {
        var _a;

        var found = null;
        (_a = state.field(foldState, false)) === null || _a === void 0 ? void 0 : _a.between(from, to, function (from, to) {
          if (!found || found.from > from) found = {
            from: from,
            to: to
          };
        });
        return found;
      }

      function foldExists(folded, from, to) {
        var found = false;
        folded.between(from, from, function (a, b) {
          if (a == from && b == to) found = true;
        });
        return found;
      }

      function maybeEnable(state, other) {
        return state.field(foldState, false) ? other : other.concat(_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["StateEffect"].appendConfig.of(codeFolding()));
      }
      /**
      Fold the lines that are selected, if possible.
      */


      var foldCode = function foldCode(view) {
        var _iterator190 = _createForOfIteratorHelper(selectedLines(view)),
            _step190;

        try {
          for (_iterator190.s(); !(_step190 = _iterator190.n()).done;) {
            var line = _step190.value;
            var range = Object(_codemirror_language__WEBPACK_IMPORTED_MODULE_2__["foldable"])(view.state, line.from, line.to);

            if (range) {
              view.dispatch({
                effects: maybeEnable(view.state, [foldEffect.of(range), announceFold(view, range)])
              });
              return true;
            }
          }
        } catch (err) {
          _iterator190.e(err);
        } finally {
          _iterator190.f();
        }

        return false;
      };
      /**
      Unfold folded ranges on selected lines.
      */


      var unfoldCode = function unfoldCode(view) {
        if (!view.state.field(foldState, false)) return false;
        var effects = [];

        var _iterator191 = _createForOfIteratorHelper(selectedLines(view)),
            _step191;

        try {
          for (_iterator191.s(); !(_step191 = _iterator191.n()).done;) {
            var line = _step191.value;
            var folded = foldInside(view.state, line.from, line.to);
            if (folded) effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));
          }
        } catch (err) {
          _iterator191.e(err);
        } finally {
          _iterator191.f();
        }

        if (effects.length) view.dispatch({
          effects: effects
        });
        return effects.length > 0;
      };

      function announceFold(view, range) {
        var fold = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        var lineFrom = view.state.doc.lineAt(range.from).number,
            lineTo = view.state.doc.lineAt(range.to).number;
        return _codemirror_view__WEBPACK_IMPORTED_MODULE_1__["EditorView"].announce.of("".concat(view.state.phrase(fold ? "Folded lines" : "Unfolded lines"), " ").concat(lineFrom, " ").concat(view.state.phrase("to"), " ").concat(lineTo, "."));
      }
      /**
      Fold all top-level foldable ranges.
      */


      var foldAll = function foldAll(view) {
        var state = view.state,
            effects = [];

        for (var pos = 0; pos < state.doc.length;) {
          var line = view.lineBlockAt(pos),
              range = Object(_codemirror_language__WEBPACK_IMPORTED_MODULE_2__["foldable"])(state, line.from, line.to);
          if (range) effects.push(foldEffect.of(range));
          pos = (range ? view.lineBlockAt(range.to) : line).to + 1;
        }

        if (effects.length) view.dispatch({
          effects: maybeEnable(view.state, effects)
        });
        return !!effects.length;
      };
      /**
      Unfold all folded code.
      */


      var unfoldAll = function unfoldAll(view) {
        var field = view.state.field(foldState, false);
        if (!field || !field.size) return false;
        var effects = [];
        field.between(0, view.state.doc.length, function (from, to) {
          effects.push(unfoldEffect.of({
            from: from,
            to: to
          }));
        });
        view.dispatch({
          effects: effects
        });
        return true;
      };
      /**
      Default fold-related key bindings.
      
       - Ctrl-Shift-[ (Cmd-Alt-[ on macOS): [`foldCode`](https://codemirror.net/6/docs/ref/#fold.foldCode).
       - Ctrl-Shift-] (Cmd-Alt-] on macOS): [`unfoldCode`](https://codemirror.net/6/docs/ref/#fold.unfoldCode).
       - Ctrl-Alt-[: [`foldAll`](https://codemirror.net/6/docs/ref/#fold.foldAll).
       - Ctrl-Alt-]: [`unfoldAll`](https://codemirror.net/6/docs/ref/#fold.unfoldAll).
      */


      var foldKeymap = [{
        key: "Ctrl-Shift-[",
        mac: "Cmd-Alt-[",
        run: foldCode
      }, {
        key: "Ctrl-Shift-]",
        mac: "Cmd-Alt-]",
        run: unfoldCode
      }, {
        key: "Ctrl-Alt-[",
        run: foldAll
      }, {
        key: "Ctrl-Alt-]",
        run: unfoldAll
      }];
      var defaultConfig = {
        placeholderDOM: null,
        placeholderText: "…"
      };

      var foldConfig = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Facet"].define({
        combine: function combine(values) {
          return Object(_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["combineConfig"])(values, defaultConfig);
        }
      });
      /**
      Create an extension that configures code folding.
      */


      function codeFolding(config) {
        var result = [foldState, baseTheme];
        if (config) result.push(foldConfig.of(config));
        return result;
      }

      var foldWidget = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_1__["Decoration"].replace({
        widget: /*@__PURE__*/new ( /*#__PURE__*/function (_codemirror_view__WEB3) {
          _inherits(_class15, _codemirror_view__WEB3);

          var _super53 = _createSuper(_class15);

          function _class15() {
            _classCallCheck(this, _class15);

            return _super53.apply(this, arguments);
          }

          _createClass(_class15, [{
            key: "ignoreEvents",
            value: function ignoreEvents() {
              return false;
            }
          }, {
            key: "toDOM",
            value: function toDOM(view) {
              var state = view.state,
                  conf = state.facet(foldConfig);

              var onclick = function onclick(event) {
                var line = view.lineBlockAt(view.posAtDOM(event.target));
                var folded = foldInside(view.state, line.from, line.to);
                if (folded) view.dispatch({
                  effects: unfoldEffect.of(folded)
                });
                event.preventDefault();
              };

              if (conf.placeholderDOM) return conf.placeholderDOM(view, onclick);
              var element = document.createElement("span");
              element.textContent = conf.placeholderText;
              element.setAttribute("aria-label", state.phrase("folded code"));
              element.title = state.phrase("unfold");
              element.className = "cm-foldPlaceholder";
              element.onclick = onclick;
              return element;
            }
          }]);

          return _class15;
        }(_codemirror_view__WEBPACK_IMPORTED_MODULE_1__["WidgetType"]))()
      });

      var foldGutterDefaults = {
        openText: "⌄",
        closedText: "›",
        markerDOM: null
      };

      var FoldMarker = /*#__PURE__*/function (_codemirror_gutter__W2) {
        _inherits(FoldMarker, _codemirror_gutter__W2);

        var _super54 = _createSuper(FoldMarker);

        function FoldMarker(config, open) {
          var _this115;

          _classCallCheck(this, FoldMarker);

          _this115 = _super54.call(this);
          _this115.config = config;
          _this115.open = open;
          return _this115;
        }

        _createClass(FoldMarker, [{
          key: "eq",
          value: function eq(other) {
            return this.config == other.config && this.open == other.open;
          }
        }, {
          key: "toDOM",
          value: function toDOM(view) {
            if (this.config.markerDOM) return this.config.markerDOM(this.open);
            var span = document.createElement("span");
            span.textContent = this.open ? this.config.openText : this.config.closedText;
            span.title = view.state.phrase(this.open ? "Fold line" : "Unfold line");
            return span;
          }
        }]);

        return FoldMarker;
      }(_codemirror_gutter__WEBPACK_IMPORTED_MODULE_3__["GutterMarker"]);
      /**
      Create an extension that registers a fold gutter, which shows a
      fold status indicator before foldable lines (which can be clicked
      to fold or unfold the line).
      */


      function foldGutter() {
        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var fullConfig = Object.assign(Object.assign({}, foldGutterDefaults), config);
        var canFold = new FoldMarker(fullConfig, true),
            canUnfold = new FoldMarker(fullConfig, false);

        var _markers = _codemirror_view__WEBPACK_IMPORTED_MODULE_1__["ViewPlugin"].fromClass( /*#__PURE__*/function () {
          function _class16(view) {
            _classCallCheck(this, _class16);

            this.from = view.viewport.from;
            this.markers = this.buildMarkers(view);
          }

          _createClass(_class16, [{
            key: "update",
            value: function update(_update24) {
              if (_update24.docChanged || _update24.viewportChanged || _update24.startState.facet(_codemirror_language__WEBPACK_IMPORTED_MODULE_2__["language"]) != _update24.state.facet(_codemirror_language__WEBPACK_IMPORTED_MODULE_2__["language"]) || _update24.startState.field(foldState, false) != _update24.state.field(foldState, false)) this.markers = this.buildMarkers(_update24.view);
            }
          }, {
            key: "buildMarkers",
            value: function buildMarkers(view) {
              var builder = new _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_4__["RangeSetBuilder"]();

              var _iterator192 = _createForOfIteratorHelper(view.viewportLineBlocks),
                  _step192;

              try {
                for (_iterator192.s(); !(_step192 = _iterator192.n()).done;) {
                  var line = _step192.value;
                  var mark = foldInside(view.state, line.from, line.to) ? canUnfold : Object(_codemirror_language__WEBPACK_IMPORTED_MODULE_2__["foldable"])(view.state, line.from, line.to) ? canFold : null;
                  if (mark) builder.add(line.from, line.from, mark);
                }
              } catch (err) {
                _iterator192.e(err);
              } finally {
                _iterator192.f();
              }

              return builder.finish();
            }
          }]);

          return _class16;
        }());

        return [_markers, Object(_codemirror_gutter__WEBPACK_IMPORTED_MODULE_3__["gutter"])({
          "class": "cm-foldGutter",
          markers: function markers(view) {
            var _a;

            return ((_a = view.plugin(_markers)) === null || _a === void 0 ? void 0 : _a.markers) || _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_4__["RangeSet"].empty;
          },
          initialSpacer: function initialSpacer() {
            return new FoldMarker(fullConfig, false);
          },
          domEventHandlers: {
            click: function click(view, line) {
              var folded = foldInside(view.state, line.from, line.to);

              if (folded) {
                view.dispatch({
                  effects: unfoldEffect.of(folded)
                });
                return true;
              }

              var range = Object(_codemirror_language__WEBPACK_IMPORTED_MODULE_2__["foldable"])(view.state, line.from, line.to);

              if (range) {
                view.dispatch({
                  effects: foldEffect.of(range)
                });
                return true;
              }

              return false;
            }
          }
        }), codeFolding()];
      }

      var baseTheme = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_1__["EditorView"].baseTheme({
        ".cm-foldPlaceholder": {
          backgroundColor: "#eee",
          border: "1px solid #ddd",
          color: "#888",
          borderRadius: ".2em",
          margin: "0 1px",
          padding: "0 1px",
          cursor: "pointer"
        },
        ".cm-foldGutter span": {
          padding: "0 1px",
          cursor: "pointer"
        }
      });
      /***/

    },

    /***/
    "X+Yg":
    /*!************************************************************!*\
      !*** ./libs/components/codemirror/codemirror.component.ts ***!
      \************************************************************/

    /*! exports provided: CodemirrorComponent */

    /***/
    function XYg(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CodemirrorComponent", function () {
        return CodemirrorComponent;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _codemirror_component_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./codemirror.component.scss */
      "Ym3S");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _codemirror_view__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @codemirror/view */
      "AtEE");
      /* harmony import */


      var _codemirror_state__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @codemirror/state */
      "4eob");
      /* harmony import */


      var _codemirror_language__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @codemirror/language */
      "yqQ+");
      /* harmony import */


      var _codemirror_commands__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @codemirror/commands */
      "L4B9");

      var CodemirrorComponent = /*#__PURE__*/function () {
        function CodemirrorComponent(element, cd) {
          _classCallCheck(this, CodemirrorComponent);

          this.element = element;
          this.cd = cd;
          this._changedByValue = false; // current value of the codemirror-editor

          this._value = '';
          this.changed = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          this.codemirrorCreated = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          this.codeMirrorView = null;
          this.selectedRange = null;
        }

        _createClass(CodemirrorComponent, [{
          key: "value",
          get: function get() {
            return this._value;
          },
          set: function set(_val) {
            this._updateValue(_val);
          }
        }, {
          key: "ngOnInit",
          value: function ngOnInit() {
            if (!this.editorState) {
              this.editorState = this.createEditorState();
            }

            this.codeMirrorView = new _codemirror_view__WEBPACK_IMPORTED_MODULE_3__["EditorView"]({
              state: this.editorState,
              parent: this.element.nativeElement
            });
            this.codemirrorCreated.emit();
          }
        }, {
          key: "ngOnChanges",
          value: function ngOnChanges(_ref66) {
            var value = _ref66.value,
                codemirrorExtensions = _ref66.codemirrorExtensions,
                editorState = _ref66.editorState;

            var _a;

            if (value) {
              this._updateValue(value.currentValue);
            }

            if (codemirrorExtensions) {
              this.replaceEditorState();
            }

            if (editorState) {
              (_a = this.codeMirrorView) === null || _a === void 0 ? void 0 : _a.setState(editorState.currentValue);
            }
          }
        }, {
          key: "insertText",
          value: function insertText(from, to, text) {
            var _a, _b;

            var transaction = (_a = this.codeMirrorView) === null || _a === void 0 ? void 0 : _a.state.update({
              changes: {
                from: from,
                to: to,
                insert: text
              },
              selection: {
                anchor: from + text.length
              },
              scrollIntoView: true
            });

            if (transaction) {
              (_b = this.codeMirrorView) === null || _b === void 0 ? void 0 : _b.dispatch(transaction);
            }
          }
        }, {
          key: "replaceSelection",
          value: function replaceSelection(text) {
            var selectionTransaction = this.codeMirrorView.state.replaceSelection(text);
            this.codeMirrorView.dispatch(selectionTransaction);
          }
        }, {
          key: "_updateValue",
          value: function _updateValue(value) {
            var _a;

            this._changedByValue = true;

            if (this._value !== value) {
              this.insertText(0, (_a = this.codeMirrorView) === null || _a === void 0 ? void 0 : _a.state.doc.length, value);
            }

            this._value = value;
            this._changedByValue = false;
          }
        }, {
          key: "replaceEditorState",
          value: function replaceEditorState() {
            var _a;

            (_a = this.codeMirrorView) === null || _a === void 0 ? void 0 : _a.setState(this.createEditorState());
          }
        }, {
          key: "createEditorState",
          value: function createEditorState() {
            var _this116 = this;

            return _codemirror_state__WEBPACK_IMPORTED_MODULE_4__["EditorState"].create({
              doc: this.value,
              extensions: [].concat(_toConsumableArray(this.codemirrorExtensions), [_codemirror_view__WEBPACK_IMPORTED_MODULE_3__["keymap"].of([].concat(_toConsumableArray(_codemirror_commands__WEBPACK_IMPORTED_MODULE_6__["defaultKeymap"]), [{
                key: 'Tab',
                preventDefault: true,
                run: _codemirror_commands__WEBPACK_IMPORTED_MODULE_6__["indentMore"]
              }, {
                key: 'Shift-Tab',
                preventDefault: true,
                run: _codemirror_commands__WEBPACK_IMPORTED_MODULE_6__["indentLess"]
              }])), Object(_codemirror_language__WEBPACK_IMPORTED_MODULE_5__["indentOnInput"])(), // The basic setup needs to be at the end DUH
              // basicSetup,
              _codemirror_state__WEBPACK_IMPORTED_MODULE_4__["EditorState"].changeFilter.of(function (tr) {
                if (tr.newSelection) {
                  var ranges = tr.newSelection.ranges;

                  if (ranges.length > 0) {
                    var range = ranges[0];
                    _this116.selectedRange = {
                      from: range.from,
                      to: range.to
                    };

                    _this116.cd.markForCheck();
                  }
                }

                if (tr.docChanged && !_this116._changedByValue) {
                  _this116._value = tr.newDoc.toJSON().join('\n');

                  _this116.changed.emit(_this116._value);
                }

                return true;
              })])
            });
          }
        }]);

        return CodemirrorComponent;
      }();

      CodemirrorComponent.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"]
        }];
      };

      CodemirrorComponent.propDecorators = {
        value: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        changed: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
        }],
        codemirrorExtensions: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        editorState: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
        }],
        codemirrorCreated: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
        }]
      };
      CodemirrorComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"])({
        selector: 'gewd-codemirror',
        template: '',
        changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectionStrategy"].OnPush,
        styles: [_codemirror_component_scss__WEBPACK_IMPORTED_MODULE_1__["default"]]
      }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"], _angular_core__WEBPACK_IMPORTED_MODULE_2__["ChangeDetectorRef"]])], CodemirrorComponent);
      /***/
    },

    /***/
    "XBHj":
    /*!**************************************************************!*\
      !*** ./node_modules/@codemirror/closebrackets/dist/index.js ***!
      \**************************************************************/

    /*! exports provided: closeBrackets, closeBracketsKeymap, deleteBracketPair, insertBracket */

    /***/
    function XBHj(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "closeBrackets", function () {
        return closeBrackets;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "closeBracketsKeymap", function () {
        return closeBracketsKeymap;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "deleteBracketPair", function () {
        return deleteBracketPair;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "insertBracket", function () {
        return insertBracket;
      });
      /* harmony import */


      var _codemirror_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @codemirror/view */
      "AtEE");
      /* harmony import */


      var _codemirror_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @codemirror/state */
      "4eob");
      /* harmony import */


      var _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @codemirror/rangeset */
      "wG49");
      /* harmony import */


      var _codemirror_text__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @codemirror/text */
      "uZp5");
      /* harmony import */


      var _codemirror_language__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @codemirror/language */
      "yqQ+");

      var defaults = {
        brackets: ["(", "[", "{", "'", '"'],
        before: ")]}'\":;>"
      };

      var closeBracketEffect = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__["StateEffect"].define({
        map: function map(value, mapping) {
          var mapped = mapping.mapPos(value, -1, _codemirror_state__WEBPACK_IMPORTED_MODULE_1__["MapMode"].TrackAfter);
          return mapped == null ? undefined : mapped;
        }
      });

      var skipBracketEffect = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__["StateEffect"].define({
        map: function map(value, mapping) {
          return mapping.mapPos(value);
        }
      });

      var closedBracket = /*@__PURE__*/new ( /*#__PURE__*/function (_codemirror_rangeset_3) {
        _inherits(_class17, _codemirror_rangeset_3);

        var _super55 = _createSuper(_class17);

        function _class17() {
          _classCallCheck(this, _class17);

          return _super55.apply(this, arguments);
        }

        return _createClass(_class17);
      }(_codemirror_rangeset__WEBPACK_IMPORTED_MODULE_2__["RangeValue"]))();
      closedBracket.startSide = 1;
      closedBracket.endSide = -1;

      var bracketState = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__["StateField"].define({
        create: function create() {
          return _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_2__["RangeSet"].empty;
        },
        update: function update(value, tr) {
          if (tr.selection) {
            var lineStart = tr.state.doc.lineAt(tr.selection.main.head).from;
            var prevLineStart = tr.startState.doc.lineAt(tr.startState.selection.main.head).from;
            if (lineStart != tr.changes.mapPos(prevLineStart, -1)) value = _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_2__["RangeSet"].empty;
          }

          value = value.map(tr.changes);

          var _iterator193 = _createForOfIteratorHelper(tr.effects),
              _step193;

          try {
            var _loop23 = function _loop23() {
              var effect = _step193.value;
              if (effect.is(closeBracketEffect)) value = value.update({
                add: [closedBracket.range(effect.value, effect.value + 1)]
              });else if (effect.is(skipBracketEffect)) value = value.update({
                filter: function filter(from) {
                  return from != effect.value;
                }
              });
            };

            for (_iterator193.s(); !(_step193 = _iterator193.n()).done;) {
              _loop23();
            }
          } catch (err) {
            _iterator193.e(err);
          } finally {
            _iterator193.f();
          }

          return value;
        }
      });
      /**
      Extension to enable bracket-closing behavior. When a closeable
      bracket is typed, its closing bracket is immediately inserted
      after the cursor. When closing a bracket directly in front of a
      closing bracket inserted by the extension, the cursor moves over
      that bracket.
      */


      function closeBrackets() {
        return [_codemirror_view__WEBPACK_IMPORTED_MODULE_0__["EditorView"].inputHandler.of(handleInput), bracketState];
      }

      var definedClosing = "()[]{}<>";

      function closing(ch) {
        for (var _i157 = 0; _i157 < definedClosing.length; _i157 += 2) {
          if (definedClosing.charCodeAt(_i157) == ch) return definedClosing.charAt(_i157 + 1);
        }

        return Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_3__["fromCodePoint"])(ch < 128 ? ch : ch + 1);
      }

      function config(state, pos) {
        return state.languageDataAt("closeBrackets", pos)[0] || defaults;
      }

      function handleInput(view, from, to, insert) {
        if (view.composing) return false;
        var sel = view.state.selection.main;
        if (insert.length > 2 || insert.length == 2 && Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_3__["codePointSize"])(Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_3__["codePointAt"])(insert, 0)) == 1 || from != sel.from || to != sel.to) return false;
        var tr = insertBracket(view.state, insert);
        if (!tr) return false;
        view.dispatch(tr);
        return true;
      }
      /**
      Command that implements deleting a pair of matching brackets when
      the cursor is between them.
      */


      var deleteBracketPair = function deleteBracketPair(_ref67) {
        var state = _ref67.state,
            dispatch = _ref67.dispatch;
        var conf = config(state, state.selection.main.head);
        var tokens = conf.brackets || defaults.brackets;
        var dont = null,
            changes = state.changeByRange(function (range) {
          if (range.empty) {
            var before = prevChar(state.doc, range.head);

            var _iterator194 = _createForOfIteratorHelper(tokens),
                _step194;

            try {
              for (_iterator194.s(); !(_step194 = _iterator194.n()).done;) {
                var token = _step194.value;
                if (token == before && nextChar(state.doc, range.head) == closing(Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_3__["codePointAt"])(token, 0))) return {
                  changes: {
                    from: range.head - token.length,
                    to: range.head + token.length
                  },
                  range: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__["EditorSelection"].cursor(range.head - token.length),
                  userEvent: "delete.backward"
                };
              }
            } catch (err) {
              _iterator194.e(err);
            } finally {
              _iterator194.f();
            }
          }

          return {
            range: dont = range
          };
        });
        if (!dont) dispatch(state.update(changes, {
          scrollIntoView: true
        }));
        return !dont;
      };
      /**
      Close-brackets related key bindings. Binds Backspace to
      [`deleteBracketPair`](https://codemirror.net/6/docs/ref/#closebrackets.deleteBracketPair).
      */


      var closeBracketsKeymap = [{
        key: "Backspace",
        run: deleteBracketPair
      }];
      /**
      Implements the extension's behavior on text insertion. If the
      given string counts as a bracket in the language around the
      selection, and replacing the selection with it requires custom
      behavior (inserting a closing version or skipping past a
      previously-closed bracket), this function returns a transaction
      representing that custom behavior. (You only need this if you want
      to programmatically insert brackets—the
      [`closeBrackets`](https://codemirror.net/6/docs/ref/#closebrackets.closeBrackets) extension will
      take care of running this for user input.)
      */

      function insertBracket(state, bracket) {
        var conf = config(state, state.selection.main.head);
        var tokens = conf.brackets || defaults.brackets;

        var _iterator195 = _createForOfIteratorHelper(tokens),
            _step195;

        try {
          for (_iterator195.s(); !(_step195 = _iterator195.n()).done;) {
            var tok = _step195.value;
            var closed = closing(Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_3__["codePointAt"])(tok, 0));
            if (bracket == tok) return closed == tok ? handleSame(state, tok, tokens.indexOf(tok + tok + tok) > -1) : handleOpen(state, tok, closed, conf.before || defaults.before);
            if (bracket == closed && closedBracketAt(state, state.selection.main.from)) return handleClose(state, tok, closed);
          }
        } catch (err) {
          _iterator195.e(err);
        } finally {
          _iterator195.f();
        }

        return null;
      }

      function closedBracketAt(state, pos) {
        var found = false;
        state.field(bracketState).between(0, state.doc.length, function (from) {
          if (from == pos) found = true;
        });
        return found;
      }

      function nextChar(doc, pos) {
        var next = doc.sliceString(pos, pos + 2);
        return next.slice(0, Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_3__["codePointSize"])(Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_3__["codePointAt"])(next, 0)));
      }

      function prevChar(doc, pos) {
        var prev = doc.sliceString(pos - 2, pos);
        return Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_3__["codePointSize"])(Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_3__["codePointAt"])(prev, 0)) == prev.length ? prev : prev.slice(1);
      }

      function handleOpen(state, open, close, closeBefore) {
        var dont = null,
            changes = state.changeByRange(function (range) {
          if (!range.empty) return {
            changes: [{
              insert: open,
              from: range.from
            }, {
              insert: close,
              from: range.to
            }],
            effects: closeBracketEffect.of(range.to + open.length),
            range: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__["EditorSelection"].range(range.anchor + open.length, range.head + open.length)
          };
          var next = nextChar(state.doc, range.head);
          if (!next || /\s/.test(next) || closeBefore.indexOf(next) > -1) return {
            changes: {
              insert: open + close,
              from: range.head
            },
            effects: closeBracketEffect.of(range.head + open.length),
            range: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__["EditorSelection"].cursor(range.head + open.length)
          };
          return {
            range: dont = range
          };
        });
        return dont ? null : state.update(changes, {
          scrollIntoView: true,
          userEvent: "input.type"
        });
      }

      function handleClose(state, _open, close) {
        var dont = null,
            moved = state.selection.ranges.map(function (range) {
          if (range.empty && nextChar(state.doc, range.head) == close) return _codemirror_state__WEBPACK_IMPORTED_MODULE_1__["EditorSelection"].cursor(range.head + close.length);
          return dont = range;
        });
        return dont ? null : state.update({
          selection: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__["EditorSelection"].create(moved, state.selection.mainIndex),
          scrollIntoView: true,
          effects: state.selection.ranges.map(function (_ref68) {
            var from = _ref68.from;
            return skipBracketEffect.of(from);
          })
        });
      } // Handles cases where the open and close token are the same, and
      // possibly triple quotes (as in `"""abc"""`-style quoting).


      function handleSame(state, token, allowTriple) {
        var dont = null,
            changes = state.changeByRange(function (range) {
          if (!range.empty) return {
            changes: [{
              insert: token,
              from: range.from
            }, {
              insert: token,
              from: range.to
            }],
            effects: closeBracketEffect.of(range.to + token.length),
            range: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__["EditorSelection"].range(range.anchor + token.length, range.head + token.length)
          };
          var pos = range.head,
              next = nextChar(state.doc, pos);

          if (next == token) {
            if (nodeStart(state, pos)) {
              return {
                changes: {
                  insert: token + token,
                  from: pos
                },
                effects: closeBracketEffect.of(pos + token.length),
                range: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__["EditorSelection"].cursor(pos + token.length)
              };
            } else if (closedBracketAt(state, pos)) {
              var isTriple = allowTriple && state.sliceDoc(pos, pos + token.length * 3) == token + token + token;
              return {
                range: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__["EditorSelection"].cursor(pos + token.length * (isTriple ? 3 : 1)),
                effects: skipBracketEffect.of(pos)
              };
            }
          } else if (allowTriple && state.sliceDoc(pos - 2 * token.length, pos) == token + token && nodeStart(state, pos - 2 * token.length)) {
            return {
              changes: {
                insert: token + token + token + token,
                from: pos
              },
              effects: closeBracketEffect.of(pos + token.length),
              range: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__["EditorSelection"].cursor(pos + token.length)
            };
          } else if (state.charCategorizer(pos)(next) != _codemirror_state__WEBPACK_IMPORTED_MODULE_1__["CharCategory"].Word) {
            var prev = state.sliceDoc(pos - 1, pos);
            if (prev != token && state.charCategorizer(pos)(prev) != _codemirror_state__WEBPACK_IMPORTED_MODULE_1__["CharCategory"].Word) return {
              changes: {
                insert: token + token,
                from: pos
              },
              effects: closeBracketEffect.of(pos + token.length),
              range: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__["EditorSelection"].cursor(pos + token.length)
            };
          }

          return {
            range: dont = range
          };
        });
        return dont ? null : state.update(changes, {
          scrollIntoView: true,
          userEvent: "input.type"
        });
      }

      function nodeStart(state, pos) {
        var tree = Object(_codemirror_language__WEBPACK_IMPORTED_MODULE_4__["syntaxTree"])(state).resolveInner(pos + 1);
        return tree.parent && tree.from == pos;
      }
      /***/

    },

    /***/
    "Ym3S":
    /*!**************************************************************!*\
      !*** ./libs/components/codemirror/codemirror.component.scss ***!
      \**************************************************************/

    /*! exports provided: default */

    /***/
    function Ym3S(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = ":host ::ng-deep .cm-editor {\n  border: 1px solid lightgray !important;\n}\n:host ::ng-deep .cm-focused {\n  outline-color: gray !important;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NvZGVtaXJyb3IuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0U7RUFDRSxzQ0FBQTtBQUFKO0FBR0U7RUFDRSw4QkFBQTtBQURKIiwiZmlsZSI6ImNvZGVtaXJyb3IuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyI6aG9zdCA6Om5nLWRlZXAge1xuICAuY20tZWRpdG9yIHtcbiAgICBib3JkZXI6IDFweCBzb2xpZCBsaWdodGdyYXkgIWltcG9ydGFudDtcbiAgfVxuXG4gIC5jbS1mb2N1c2VkIHtcbiAgICBvdXRsaW5lLWNvbG9yOiBncmF5ICFpbXBvcnRhbnQ7XG4gIH1cbn1cbiJdfQ== */";
      /***/
    },

    /***/
    "cmz6":
    /*!******************************************************!*\
      !*** ./node_modules/@codemirror/panel/dist/index.js ***!
      \******************************************************/

    /*! exports provided: getPanel, panels, showPanel */

    /***/
    function cmz6(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getPanel", function () {
        return getPanel;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "panels", function () {
        return panels;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "showPanel", function () {
        return showPanel;
      });
      /* harmony import */


      var _codemirror_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @codemirror/view */
      "AtEE");
      /* harmony import */


      var _codemirror_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @codemirror/state */
      "4eob");

      var panelConfig = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__["Facet"].define({
        combine: function combine(configs) {
          var topContainer, bottomContainer;

          var _iterator196 = _createForOfIteratorHelper(configs),
              _step196;

          try {
            for (_iterator196.s(); !(_step196 = _iterator196.n()).done;) {
              var c = _step196.value;
              topContainer = topContainer || c.topContainer;
              bottomContainer = bottomContainer || c.bottomContainer;
            }
          } catch (err) {
            _iterator196.e(err);
          } finally {
            _iterator196.f();
          }

          return {
            topContainer: topContainer,
            bottomContainer: bottomContainer
          };
        }
      });
      /**
      Configures the panel-managing extension.
      */


      function panels(config) {
        return config ? [panelConfig.of(config)] : [];
      }
      /**
      Get the active panel created by the given constructor, if any.
      This can be useful when you need access to your panels' DOM
      structure.
      */


      function getPanel(view, panel) {
        var plugin = view.plugin(panelPlugin);
        var index = plugin ? plugin.specs.indexOf(panel) : -1;
        return index > -1 ? plugin.panels[index] : null;
      }

      var panelPlugin = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_0__["ViewPlugin"].fromClass( /*#__PURE__*/function () {
        function _class18(view) {
          _classCallCheck(this, _class18);

          this.input = view.state.facet(showPanel);
          this.specs = this.input.filter(function (s) {
            return s;
          });
          this.panels = this.specs.map(function (spec) {
            return spec(view);
          });
          var conf = view.state.facet(panelConfig);
          this.top = new PanelGroup(view, true, conf.topContainer);
          this.bottom = new PanelGroup(view, false, conf.bottomContainer);
          this.top.sync(this.panels.filter(function (p) {
            return p.top;
          }));
          this.bottom.sync(this.panels.filter(function (p) {
            return !p.top;
          }));

          var _iterator197 = _createForOfIteratorHelper(this.panels),
              _step197;

          try {
            for (_iterator197.s(); !(_step197 = _iterator197.n()).done;) {
              var p = _step197.value;
              p.dom.classList.add("cm-panel");
              if (p.mount) p.mount();
            }
          } catch (err) {
            _iterator197.e(err);
          } finally {
            _iterator197.f();
          }
        }

        _createClass(_class18, [{
          key: "update",
          value: function update(_update25) {
            var conf = _update25.state.facet(panelConfig);

            if (this.top.container != conf.topContainer) {
              this.top.sync([]);
              this.top = new PanelGroup(_update25.view, true, conf.topContainer);
            }

            if (this.bottom.container != conf.bottomContainer) {
              this.bottom.sync([]);
              this.bottom = new PanelGroup(_update25.view, false, conf.bottomContainer);
            }

            this.top.syncClasses();
            this.bottom.syncClasses();

            var input = _update25.state.facet(showPanel);

            if (input != this.input) {
              var specs = input.filter(function (x) {
                return x;
              });
              var _panels = [],
                  top = [],
                  bottom = [],
                  mount = [];

              var _iterator198 = _createForOfIteratorHelper(specs),
                  _step198;

              try {
                for (_iterator198.s(); !(_step198 = _iterator198.n()).done;) {
                  var spec = _step198.value;
                  var known = this.specs.indexOf(spec),
                      panel = void 0;

                  if (known < 0) {
                    panel = spec(_update25.view);
                    mount.push(panel);
                  } else {
                    panel = this.panels[known];
                    if (panel.update) panel.update(_update25);
                  }

                  _panels.push(panel);

                  (panel.top ? top : bottom).push(panel);
                }
              } catch (err) {
                _iterator198.e(err);
              } finally {
                _iterator198.f();
              }

              this.specs = specs;
              this.panels = _panels;
              this.top.sync(top);
              this.bottom.sync(bottom);

              for (var _i158 = 0, _mount = mount; _i158 < _mount.length; _i158++) {
                var p = _mount[_i158];
                p.dom.classList.add("cm-panel");
                if (p.mount) p.mount();
              }
            } else {
              var _iterator199 = _createForOfIteratorHelper(this.panels),
                  _step199;

              try {
                for (_iterator199.s(); !(_step199 = _iterator199.n()).done;) {
                  var _p5 = _step199.value;
                  if (_p5.update) _p5.update(_update25);
                }
              } catch (err) {
                _iterator199.e(err);
              } finally {
                _iterator199.f();
              }
            }
          }
        }, {
          key: "destroy",
          value: function destroy() {
            this.top.sync([]);
            this.bottom.sync([]);
          }
        }]);

        return _class18;
      }(), {
        provide: /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_0__["PluginField"].scrollMargins.from(function (value) {
          return {
            top: value.top.scrollMargin(),
            bottom: value.bottom.scrollMargin()
          };
        })
      });

      var PanelGroup = /*#__PURE__*/function () {
        function PanelGroup(view, top, container) {
          _classCallCheck(this, PanelGroup);

          this.view = view;
          this.top = top;
          this.container = container;
          this.dom = undefined;
          this.classes = "";
          this.panels = [];
          this.syncClasses();
        }

        _createClass(PanelGroup, [{
          key: "sync",
          value: function sync(panels) {
            var _iterator200 = _createForOfIteratorHelper(this.panels),
                _step200;

            try {
              for (_iterator200.s(); !(_step200 = _iterator200.n()).done;) {
                var p = _step200.value;
                if (p.destroy && panels.indexOf(p) < 0) p.destroy();
              }
            } catch (err) {
              _iterator200.e(err);
            } finally {
              _iterator200.f();
            }

            this.panels = panels;
            this.syncDOM();
          }
        }, {
          key: "syncDOM",
          value: function syncDOM() {
            if (this.panels.length == 0) {
              if (this.dom) {
                this.dom.remove();
                this.dom = undefined;
              }

              return;
            }

            if (!this.dom) {
              this.dom = document.createElement("div");
              this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom";
              this.dom.style[this.top ? "top" : "bottom"] = "0";
              var parent = this.container || this.view.dom;
              parent.insertBefore(this.dom, this.top ? parent.firstChild : null);
            }

            var curDOM = this.dom.firstChild;

            var _iterator201 = _createForOfIteratorHelper(this.panels),
                _step201;

            try {
              for (_iterator201.s(); !(_step201 = _iterator201.n()).done;) {
                var panel = _step201.value;

                if (panel.dom.parentNode == this.dom) {
                  while (curDOM != panel.dom) {
                    curDOM = rm(curDOM);
                  }

                  curDOM = curDOM.nextSibling;
                } else {
                  this.dom.insertBefore(panel.dom, curDOM);
                }
              }
            } catch (err) {
              _iterator201.e(err);
            } finally {
              _iterator201.f();
            }

            while (curDOM) {
              curDOM = rm(curDOM);
            }
          }
        }, {
          key: "scrollMargin",
          value: function scrollMargin() {
            return !this.dom || this.container ? 0 : Math.max(0, this.top ? this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) : Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);
          }
        }, {
          key: "syncClasses",
          value: function syncClasses() {
            if (!this.container || this.classes == this.view.themeClasses) return;

            var _iterator202 = _createForOfIteratorHelper(this.classes.split(" ")),
                _step202;

            try {
              for (_iterator202.s(); !(_step202 = _iterator202.n()).done;) {
                var cls = _step202.value;
                if (cls) this.container.classList.remove(cls);
              }
            } catch (err) {
              _iterator202.e(err);
            } finally {
              _iterator202.f();
            }

            var _iterator203 = _createForOfIteratorHelper((this.classes = this.view.themeClasses).split(" ")),
                _step203;

            try {
              for (_iterator203.s(); !(_step203 = _iterator203.n()).done;) {
                var _cls = _step203.value;
                if (_cls) this.container.classList.add(_cls);
              }
            } catch (err) {
              _iterator203.e(err);
            } finally {
              _iterator203.f();
            }
          }
        }]);

        return PanelGroup;
      }();

      function rm(node) {
        var next = node.nextSibling;
        node.remove();
        return next;
      }

      var baseTheme = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_0__["EditorView"].baseTheme({
        ".cm-panels": {
          boxSizing: "border-box",
          position: "sticky",
          left: 0,
          right: 0
        },
        "&light .cm-panels": {
          backgroundColor: "#f5f5f5",
          color: "black"
        },
        "&light .cm-panels-top": {
          borderBottom: "1px solid #ddd"
        },
        "&light .cm-panels-bottom": {
          borderTop: "1px solid #ddd"
        },
        "&dark .cm-panels": {
          backgroundColor: "#333338",
          color: "white"
        }
      });
      /**
      Opening a panel is done by providing a constructor function for
      the panel through this facet. (The panel is closed again when its
      constructor is no longer provided.) Values of `null` are ignored.
      */


      var showPanel = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__["Facet"].define({
        enables: [panelPlugin, baseTheme]
      });
      /***/

    },

    /***/
    "fK0Z":
    /*!********************************************************!*\
      !*** ./node_modules/@codemirror/tooltip/dist/index.js ***!
      \********************************************************/

    /*! exports provided: closeHoverTooltips, hasHoverTooltips, hoverTooltip, repositionTooltips, showTooltip, tooltips */

    /***/
    function fK0Z(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "closeHoverTooltips", function () {
        return closeHoverTooltips;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "hasHoverTooltips", function () {
        return hasHoverTooltips;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "hoverTooltip", function () {
        return hoverTooltip;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "repositionTooltips", function () {
        return repositionTooltips;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "showTooltip", function () {
        return showTooltip;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "tooltips", function () {
        return tooltips;
      });
      /* harmony import */


      var _codemirror_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @codemirror/view */
      "AtEE");
      /* harmony import */


      var _codemirror_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @codemirror/state */
      "4eob");

      var ios = typeof navigator != "undefined" && ! /*@__PURE__*/ /Edge\/(\d+)/.exec(navigator.userAgent) && /*@__PURE__*/ /Apple Computer/.test(navigator.vendor) && ( /*@__PURE__*/ /Mobile\/\w+/.test(navigator.userAgent) || navigator.maxTouchPoints > 2);
      var Outside = "-10000px";

      var TooltipViewManager = /*#__PURE__*/function () {
        function TooltipViewManager(view, facet, createTooltipView) {
          _classCallCheck(this, TooltipViewManager);

          this.facet = facet;
          this.createTooltipView = createTooltipView;
          this.input = view.state.facet(facet);
          this.tooltips = this.input.filter(function (t) {
            return t;
          });
          this.tooltipViews = this.tooltips.map(createTooltipView);
        }

        _createClass(TooltipViewManager, [{
          key: "update",
          value: function update(_update26) {
            var input = _update26.state.facet(this.facet);

            var tooltips = input.filter(function (x) {
              return x;
            });

            if (input === this.input) {
              var _iterator204 = _createForOfIteratorHelper(this.tooltipViews),
                  _step204;

              try {
                for (_iterator204.s(); !(_step204 = _iterator204.n()).done;) {
                  var t = _step204.value;
                  if (t.update) t.update(_update26);
                }
              } catch (err) {
                _iterator204.e(err);
              } finally {
                _iterator204.f();
              }

              return false;
            }

            var tooltipViews = [];

            for (var _i159 = 0; _i159 < tooltips.length; _i159++) {
              var tip = tooltips[_i159],
                  known = -1;
              if (!tip) continue;

              for (var _i160 = 0; _i160 < this.tooltips.length; _i160++) {
                var other = this.tooltips[_i160];
                if (other && other.create == tip.create) known = _i160;
              }

              if (known < 0) {
                tooltipViews[_i159] = this.createTooltipView(tip);
              } else {
                var tooltipView = tooltipViews[_i159] = this.tooltipViews[known];
                if (tooltipView.update) tooltipView.update(_update26);
              }
            }

            var _iterator205 = _createForOfIteratorHelper(this.tooltipViews),
                _step205;

            try {
              for (_iterator205.s(); !(_step205 = _iterator205.n()).done;) {
                var _t2 = _step205.value;
                if (tooltipViews.indexOf(_t2) < 0) _t2.dom.remove();
              }
            } catch (err) {
              _iterator205.e(err);
            } finally {
              _iterator205.f();
            }

            this.input = input;
            this.tooltips = tooltips;
            this.tooltipViews = tooltipViews;
            return true;
          }
        }]);

        return TooltipViewManager;
      }();
      /**
      Return an extension that configures tooltip behavior.
      */


      function tooltips() {
        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return tooltipConfig.of(config);
      }

      function windowSpace() {
        return {
          top: 0,
          left: 0,
          bottom: innerHeight,
          right: innerWidth
        };
      }

      var tooltipConfig = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__["Facet"].define({
        combine: function combine(values) {
          var _a, _b, _c;

          return {
            position: ios ? "absolute" : ((_a = values.find(function (conf) {
              return conf.position;
            })) === null || _a === void 0 ? void 0 : _a.position) || "fixed",
            parent: ((_b = values.find(function (conf) {
              return conf.parent;
            })) === null || _b === void 0 ? void 0 : _b.parent) || null,
            tooltipSpace: ((_c = values.find(function (conf) {
              return conf.tooltipSpace;
            })) === null || _c === void 0 ? void 0 : _c.tooltipSpace) || windowSpace
          };
        }
      });

      var tooltipPlugin = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_0__["ViewPlugin"].fromClass( /*#__PURE__*/function () {
        function _class19(view) {
          var _this117 = this;

          _classCallCheck(this, _class19);

          this.view = view;
          this.inView = true;
          this.lastTransaction = 0;
          this.intersectionTimeout = -1;
          var config = view.state.facet(tooltipConfig);
          this.position = config.position;
          this.parent = config.parent;
          this.classes = view.themeClasses;
          this.createContainer();
          this.measureReq = {
            read: this.readMeasure.bind(this),
            write: this.writeMeasure.bind(this),
            key: this
          };
          this.manager = new TooltipViewManager(view, showTooltip, function (t) {
            return _this117.createTooltip(t);
          });
          this.intersectionObserver = typeof IntersectionObserver == "function" ? new IntersectionObserver(function (entries) {
            if (_this117.intersectionTimeout < 0 && Date.now() > _this117.lastTransaction - 50 && entries.length > 0 && entries[entries.length - 1].intersectionRatio < 1) _this117.intersectionTimeout = setTimeout(function () {
              _this117.intersectionTimeout = -1;

              _this117.maybeMeasure();
            }, 50);
          }, {
            threshold: [1]
          }) : null;
          this.observeIntersection();
          this.maybeMeasure();
        }

        _createClass(_class19, [{
          key: "createContainer",
          value: function createContainer() {
            if (this.parent) {
              this.container = document.createElement("div");
              this.container.style.position = "relative";
              this.container.className = this.view.themeClasses;
              this.parent.appendChild(this.container);
            } else {
              this.container = this.view.dom;
            }
          }
        }, {
          key: "observeIntersection",
          value: function observeIntersection() {
            if (this.intersectionObserver) {
              this.intersectionObserver.disconnect();

              var _iterator206 = _createForOfIteratorHelper(this.manager.tooltipViews),
                  _step206;

              try {
                for (_iterator206.s(); !(_step206 = _iterator206.n()).done;) {
                  var tooltip = _step206.value;
                  this.intersectionObserver.observe(tooltip.dom);
                }
              } catch (err) {
                _iterator206.e(err);
              } finally {
                _iterator206.f();
              }
            }
          }
        }, {
          key: "update",
          value: function update(_update27) {
            if (_update27.transactions.length) this.lastTransaction = Date.now();
            var updated = this.manager.update(_update27);
            if (updated) this.observeIntersection();
            var shouldMeasure = updated || _update27.geometryChanged;

            var newConfig = _update27.state.facet(tooltipConfig);

            if (newConfig.position != this.position) {
              this.position = newConfig.position;

              var _iterator207 = _createForOfIteratorHelper(this.manager.tooltipViews),
                  _step207;

              try {
                for (_iterator207.s(); !(_step207 = _iterator207.n()).done;) {
                  var t = _step207.value;
                  t.dom.style.position = this.position;
                }
              } catch (err) {
                _iterator207.e(err);
              } finally {
                _iterator207.f();
              }

              shouldMeasure = true;
            }

            if (newConfig.parent != this.parent) {
              if (this.parent) this.container.remove();
              this.parent = newConfig.parent;
              this.createContainer();

              var _iterator208 = _createForOfIteratorHelper(this.manager.tooltipViews),
                  _step208;

              try {
                for (_iterator208.s(); !(_step208 = _iterator208.n()).done;) {
                  var _t3 = _step208.value;
                  this.container.appendChild(_t3.dom);
                }
              } catch (err) {
                _iterator208.e(err);
              } finally {
                _iterator208.f();
              }

              shouldMeasure = true;
            } else if (this.parent && this.view.themeClasses != this.classes) {
              this.classes = this.container.className = this.view.themeClasses;
            }

            if (shouldMeasure) this.maybeMeasure();
          }
        }, {
          key: "createTooltip",
          value: function createTooltip(tooltip) {
            var tooltipView = tooltip.create(this.view);
            tooltipView.dom.classList.add("cm-tooltip");

            if (tooltip.arrow && !tooltipView.dom.querySelector("cm-tooltip > cm-tooltip-arrow")) {
              var arrow = document.createElement("div");
              arrow.className = "cm-tooltip-arrow";
              tooltipView.dom.appendChild(arrow);
            }

            tooltipView.dom.style.position = this.position;
            tooltipView.dom.style.top = Outside;
            this.container.appendChild(tooltipView.dom);
            if (tooltipView.mount) tooltipView.mount(this.view);
            return tooltipView;
          }
        }, {
          key: "destroy",
          value: function destroy() {
            var _a;

            var _iterator209 = _createForOfIteratorHelper(this.manager.tooltipViews),
                _step209;

            try {
              for (_iterator209.s(); !(_step209 = _iterator209.n()).done;) {
                var dom = _step209.value.dom;
                dom.remove();
              }
            } catch (err) {
              _iterator209.e(err);
            } finally {
              _iterator209.f();
            }

            (_a = this.intersectionObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
            clearTimeout(this.intersectionTimeout);
          }
        }, {
          key: "readMeasure",
          value: function readMeasure() {
            var _this118 = this;

            var editor = this.view.dom.getBoundingClientRect();
            return {
              editor: editor,
              parent: this.parent ? this.container.getBoundingClientRect() : editor,
              pos: this.manager.tooltips.map(function (t) {
                return _this118.view.coordsAtPos(t.pos);
              }),
              size: this.manager.tooltipViews.map(function (_ref69) {
                var dom = _ref69.dom;
                return dom.getBoundingClientRect();
              }),
              space: this.view.state.facet(tooltipConfig).tooltipSpace(this.view)
            };
          }
        }, {
          key: "writeMeasure",
          value: function writeMeasure(measured) {
            var editor = measured.editor,
                space = measured.space;
            var others = [];

            for (var _i161 = 0; _i161 < this.manager.tooltips.length; _i161++) {
              var tooltip = this.manager.tooltips[_i161],
                  tView = this.manager.tooltipViews[_i161],
                  dom = tView.dom;
              var pos = measured.pos[_i161],
                  size = measured.size[_i161]; // Hide tooltips that are outside of the editor.

              if (!pos || pos.bottom <= Math.max(editor.top, space.top) || pos.top >= Math.min(editor.bottom, space.bottom) || pos.right <= Math.max(editor.left, space.left) || pos.left >= Math.min(editor.right, space.right)) {
                dom.style.top = Outside;
                continue;
              }

              var arrow = tooltip.arrow ? tView.dom.querySelector(".cm-tooltip-arrow") : null;
              var arrowHeight = arrow ? 7
              /* Size */
              : 0;
              var width = size.right - size.left,
                  height = size.bottom - size.top;
              var offset = tView.offset || noOffset,
                  ltr = this.view.textDirection == _codemirror_view__WEBPACK_IMPORTED_MODULE_0__["Direction"].LTR;
              var left = size.width > space.right - space.left ? ltr ? space.left : space.right - size.width : ltr ? Math.min(pos.left - (arrow ? 14
              /* Offset */
              : 0) + offset.x, space.right - width) : Math.max(space.left, pos.left - width + (arrow ? 14
              /* Offset */
              : 0) - offset.x);
              var above = !!tooltip.above;
              if (!tooltip.strictSide && (above ? pos.top - (size.bottom - size.top) - offset.y < space.top : pos.bottom + (size.bottom - size.top) + offset.y > space.bottom) && above == space.bottom - pos.bottom > pos.top - space.top) above = !above;
              var top = above ? pos.top - height - arrowHeight - offset.y : pos.bottom + arrowHeight + offset.y;
              var right = left + width;

              var _iterator210 = _createForOfIteratorHelper(others),
                  _step210;

              try {
                for (_iterator210.s(); !(_step210 = _iterator210.n()).done;) {
                  var r = _step210.value;
                  if (r.left < right && r.right > left && r.top < top + height && r.bottom > top) top = above ? r.top - height - 2 - arrowHeight : r.bottom + arrowHeight + 2;
                }
              } catch (err) {
                _iterator210.e(err);
              } finally {
                _iterator210.f();
              }

              if (this.position == "absolute") {
                dom.style.top = top - measured.parent.top + "px";
                dom.style.left = left - measured.parent.left + "px";
              } else {
                dom.style.top = top + "px";
                dom.style.left = left + "px";
              }

              if (arrow) arrow.style.left = "".concat(pos.left + (ltr ? offset.x : -offset.x) - (left + 14
              /* Offset */
              - 7
              /* Size */
              ), "px");
              others.push({
                left: left,
                top: top,
                right: right,
                bottom: top + height
              });
              dom.classList.toggle("cm-tooltip-above", above);
              dom.classList.toggle("cm-tooltip-below", !above);
              if (tView.positioned) tView.positioned();
            }
          }
        }, {
          key: "maybeMeasure",
          value: function maybeMeasure() {
            if (this.manager.tooltips.length) {
              if (this.view.inView) this.view.requestMeasure(this.measureReq);

              if (this.inView != this.view.inView) {
                this.inView = this.view.inView;

                if (!this.inView) {
                  var _iterator211 = _createForOfIteratorHelper(this.manager.tooltipViews),
                      _step211;

                  try {
                    for (_iterator211.s(); !(_step211 = _iterator211.n()).done;) {
                      var tv = _step211.value;
                      tv.dom.style.top = Outside;
                    }
                  } catch (err) {
                    _iterator211.e(err);
                  } finally {
                    _iterator211.f();
                  }
                }
              }
            }
          }
        }]);

        return _class19;
      }(), {
        eventHandlers: {
          scroll: function scroll() {
            this.maybeMeasure();
          }
        }
      });

      var baseTheme = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_0__["EditorView"].baseTheme({
        ".cm-tooltip": {
          zIndex: 100
        },
        "&light .cm-tooltip": {
          border: "1px solid #bbb",
          backgroundColor: "#f5f5f5"
        },
        "&light .cm-tooltip-section:not(:first-child)": {
          borderTop: "1px solid #bbb"
        },
        "&dark .cm-tooltip": {
          backgroundColor: "#333338",
          color: "white"
        },
        ".cm-tooltip-arrow": {
          height: "".concat(7
          /* Size */
          , "px"),
          width: "".concat(7
          /* Size */
          * 2, "px"),
          position: "absolute",
          zIndex: -1,
          overflow: "hidden",
          "&:before, &:after": {
            content: "''",
            position: "absolute",
            width: 0,
            height: 0,
            borderLeft: "".concat(7
            /* Size */
            , "px solid transparent"),
            borderRight: "".concat(7
            /* Size */
            , "px solid transparent")
          },
          ".cm-tooltip-above &": {
            bottom: "-".concat(7
            /* Size */
            , "px"),
            "&:before": {
              borderTop: "".concat(7
              /* Size */
              , "px solid #bbb")
            },
            "&:after": {
              borderTop: "".concat(7
              /* Size */
              , "px solid #f5f5f5"),
              bottom: "1px"
            }
          },
          ".cm-tooltip-below &": {
            top: "-".concat(7
            /* Size */
            , "px"),
            "&:before": {
              borderBottom: "".concat(7
              /* Size */
              , "px solid #bbb")
            },
            "&:after": {
              borderBottom: "".concat(7
              /* Size */
              , "px solid #f5f5f5"),
              top: "1px"
            }
          }
        },
        "&dark .cm-tooltip .cm-tooltip-arrow": {
          "&:before": {
            borderTopColor: "#333338",
            borderBottomColor: "#333338"
          },
          "&:after": {
            borderTopColor: "transparent",
            borderBottomColor: "transparent"
          }
        }
      });

      var noOffset = {
        x: 0,
        y: 0
      };
      /**
      Behavior by which an extension can provide a tooltip to be shown.
      */

      var showTooltip = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__["Facet"].define({
        enables: [tooltipPlugin, baseTheme]
      });

      var showHoverTooltip = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__["Facet"].define();

      var HoverTooltipHost = /*#__PURE__*/function () {
        function HoverTooltipHost(view) {
          var _this119 = this;

          _classCallCheck(this, HoverTooltipHost);

          this.view = view;
          this.mounted = false;
          this.dom = document.createElement("div");
          this.dom.classList.add("cm-tooltip-hover");
          this.manager = new TooltipViewManager(view, showHoverTooltip, function (t) {
            return _this119.createHostedView(t);
          });
        } // Needs to be static so that host tooltip instances always match


        _createClass(HoverTooltipHost, [{
          key: "createHostedView",
          value: function createHostedView(tooltip) {
            var hostedView = tooltip.create(this.view);
            hostedView.dom.classList.add("cm-tooltip-section");
            this.dom.appendChild(hostedView.dom);
            if (this.mounted && hostedView.mount) hostedView.mount(this.view);
            return hostedView;
          }
        }, {
          key: "mount",
          value: function mount(view) {
            var _iterator212 = _createForOfIteratorHelper(this.manager.tooltipViews),
                _step212;

            try {
              for (_iterator212.s(); !(_step212 = _iterator212.n()).done;) {
                var hostedView = _step212.value;
                if (hostedView.mount) hostedView.mount(view);
              }
            } catch (err) {
              _iterator212.e(err);
            } finally {
              _iterator212.f();
            }

            this.mounted = true;
          }
        }, {
          key: "positioned",
          value: function positioned() {
            var _iterator213 = _createForOfIteratorHelper(this.manager.tooltipViews),
                _step213;

            try {
              for (_iterator213.s(); !(_step213 = _iterator213.n()).done;) {
                var hostedView = _step213.value;
                if (hostedView.positioned) hostedView.positioned();
              }
            } catch (err) {
              _iterator213.e(err);
            } finally {
              _iterator213.f();
            }
          }
        }, {
          key: "update",
          value: function update(_update28) {
            this.manager.update(_update28);
          }
        }], [{
          key: "create",
          value: function create(view) {
            return new HoverTooltipHost(view);
          }
        }]);

        return HoverTooltipHost;
      }();

      var showHoverTooltipHost = /*@__PURE__*/showTooltip.compute([showHoverTooltip], function (state) {
        var tooltips = state.facet(showHoverTooltip).filter(function (t) {
          return t;
        });
        if (tooltips.length === 0) return null;
        return {
          pos: Math.min.apply(Math, _toConsumableArray(tooltips.map(function (t) {
            return t.pos;
          }))),
          end: Math.max.apply(Math, _toConsumableArray(tooltips.filter(function (t) {
            return t.end != null;
          }).map(function (t) {
            return t.end;
          }))),
          create: HoverTooltipHost.create,
          above: tooltips[0].above,
          arrow: tooltips.some(function (t) {
            return t.arrow;
          })
        };
      });

      var HoverPlugin = /*#__PURE__*/function () {
        function HoverPlugin(view, source, field, setHover, hoverTime) {
          _classCallCheck(this, HoverPlugin);

          this.view = view;
          this.source = source;
          this.field = field;
          this.setHover = setHover;
          this.hoverTime = hoverTime;
          this.hoverTimeout = -1;
          this.restartTimeout = -1;
          this.pending = null;
          this.lastMove = {
            x: 0,
            y: 0,
            target: view.dom,
            time: 0
          };
          this.checkHover = this.checkHover.bind(this);
          view.dom.addEventListener("mouseleave", this.mouseleave = this.mouseleave.bind(this));
          view.dom.addEventListener("mousemove", this.mousemove = this.mousemove.bind(this));
        }

        _createClass(HoverPlugin, [{
          key: "update",
          value: function update() {
            var _this120 = this;

            if (this.pending) {
              this.pending = null;
              clearTimeout(this.restartTimeout);
              this.restartTimeout = setTimeout(function () {
                return _this120.startHover();
              }, 20);
            }
          }
        }, {
          key: "active",
          get: function get() {
            return this.view.state.field(this.field);
          }
        }, {
          key: "checkHover",
          value: function checkHover() {
            this.hoverTimeout = -1;
            if (this.active) return;
            var hovered = Date.now() - this.lastMove.time;
            if (hovered < this.hoverTime) this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - hovered);else this.startHover();
          }
        }, {
          key: "startHover",
          value: function startHover() {
            var _this121 = this;

            var _a;

            clearTimeout(this.restartTimeout);
            var lastMove = this.lastMove;
            var pos = this.view.contentDOM.contains(lastMove.target) ? this.view.posAtCoords(lastMove) : null;
            if (pos == null) return;
            var posCoords = this.view.coordsAtPos(pos);
            if (posCoords == null || lastMove.y < posCoords.top || lastMove.y > posCoords.bottom || lastMove.x < posCoords.left - this.view.defaultCharacterWidth || lastMove.x > posCoords.right + this.view.defaultCharacterWidth) return;
            var bidi = this.view.bidiSpans(this.view.state.doc.lineAt(pos)).find(function (s) {
              return s.from <= pos && s.to >= pos;
            });
            var rtl = bidi && bidi.dir == _codemirror_view__WEBPACK_IMPORTED_MODULE_0__["Direction"].RTL ? -1 : 1;
            var open = this.source(this.view, pos, lastMove.x < posCoords.left ? -rtl : rtl);

            if ((_a = open) === null || _a === void 0 ? void 0 : _a.then) {
              var pending = this.pending = {
                pos: pos
              };
              open.then(function (result) {
                if (_this121.pending == pending) {
                  _this121.pending = null;
                  if (result) _this121.view.dispatch({
                    effects: _this121.setHover.of(result)
                  });
                }
              }, function (e) {
                return Object(_codemirror_view__WEBPACK_IMPORTED_MODULE_0__["logException"])(_this121.view.state, e, "hover tooltip");
              });
            } else if (open) {
              this.view.dispatch({
                effects: this.setHover.of(open)
              });
            }
          }
        }, {
          key: "mousemove",
          value: function mousemove(event) {
            var _a;

            this.lastMove = {
              x: event.clientX,
              y: event.clientY,
              target: event.target,
              time: Date.now()
            };
            if (this.hoverTimeout < 0) this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime);
            var tooltip = this.active;

            if (tooltip && !isInTooltip(this.lastMove.target) || this.pending) {
              var _ref70 = tooltip || this.pending,
                  pos = _ref70.pos,
                  end = (_a = tooltip === null || tooltip === void 0 ? void 0 : tooltip.end) !== null && _a !== void 0 ? _a : pos;

              if (pos == end ? this.view.posAtCoords(this.lastMove) != pos : !isOverRange(this.view, pos, end, event.clientX, event.clientY, 6
              /* MaxDist */
              )) {
                this.view.dispatch({
                  effects: this.setHover.of(null)
                });
                this.pending = null;
              }
            }
          }
        }, {
          key: "mouseleave",
          value: function mouseleave() {
            clearTimeout(this.hoverTimeout);
            this.hoverTimeout = -1;
            if (this.active) this.view.dispatch({
              effects: this.setHover.of(null)
            });
          }
        }, {
          key: "destroy",
          value: function destroy() {
            clearTimeout(this.hoverTimeout);
            this.view.dom.removeEventListener("mouseleave", this.mouseleave);
            this.view.dom.removeEventListener("mousemove", this.mousemove);
          }
        }]);

        return HoverPlugin;
      }();

      function isInTooltip(elt) {
        for (var cur = elt; cur; cur = cur.parentNode) {
          if (cur.nodeType == 1 && cur.classList.contains("cm-tooltip")) return true;
        }

        return false;
      }

      function isOverRange(view, from, to, x, y, margin) {
        var range = document.createRange();
        var fromDOM = view.domAtPos(from),
            toDOM = view.domAtPos(to);
        range.setEnd(toDOM.node, toDOM.offset);
        range.setStart(fromDOM.node, fromDOM.offset);
        var rects = range.getClientRects();
        range.detach();

        for (var _i162 = 0; _i162 < rects.length; _i162++) {
          var rect = rects[_i162];
          var dist = Math.max(rect.top - y, y - rect.bottom, rect.left - x, x - rect.right);
          if (dist <= margin) return true;
        }

        return false;
      }
      /**
      Enable a hover tooltip, which shows up when the pointer hovers
      over ranges of text. The callback is called when the mouse hovers
      over the document text. It should, if there is a tooltip
      associated with position `pos` return the tooltip description
      (either directly or in a promise). The `side` argument indicates
      on which side of the position the pointer is—it will be -1 if the
      pointer is before the position, 1 if after the position.
      
      Note that all hover tooltips are hosted within a single tooltip
      container element. This allows multiple tooltips over the same
      range to be "merged" together without overlapping.
      */


      function hoverTooltip(source) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        var setHover = _codemirror_state__WEBPACK_IMPORTED_MODULE_1__["StateEffect"].define();

        var hoverState = _codemirror_state__WEBPACK_IMPORTED_MODULE_1__["StateField"].define({
          create: function create() {
            return null;
          },
          update: function update(value, tr) {
            if (value && options.hideOnChange && (tr.docChanged || tr.selection)) return null;

            var _iterator214 = _createForOfIteratorHelper(tr.effects),
                _step214;

            try {
              for (_iterator214.s(); !(_step214 = _iterator214.n()).done;) {
                var effect = _step214.value;
                if (effect.is(setHover)) return effect.value;
                if (effect.is(closeHoverTooltipEffect)) return null;
              }
            } catch (err) {
              _iterator214.e(err);
            } finally {
              _iterator214.f();
            }

            if (value && tr.docChanged) {
              var newPos = tr.changes.mapPos(value.pos, -1, _codemirror_state__WEBPACK_IMPORTED_MODULE_1__["MapMode"].TrackDel);
              if (newPos == null) return null;
              var copy = Object.assign(Object.create(null), value);
              copy.pos = newPos;
              if (value.end != null) copy.end = tr.changes.mapPos(value.end);
              return copy;
            }

            return value;
          },
          provide: function provide(f) {
            return showHoverTooltip.from(f);
          }
        });

        var hoverTime = options.hoverTime || 600
        /* Time */
        ;
        return [hoverState, _codemirror_view__WEBPACK_IMPORTED_MODULE_0__["ViewPlugin"].define(function (view) {
          return new HoverPlugin(view, source, hoverState, setHover, hoverTime);
        }), showHoverTooltipHost];
      }
      /**
      Returns true if any hover tooltips are currently active.
      */


      function hasHoverTooltips(state) {
        return state.facet(showHoverTooltip).some(function (x) {
          return x;
        });
      }

      var closeHoverTooltipEffect = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__["StateEffect"].define();
      /**
      Transaction effect that closes all hover tooltips.
      */


      var closeHoverTooltips = /*@__PURE__*/closeHoverTooltipEffect.of(null);
      /**
      Tell the tooltip extension to recompute the position of the active
      tooltips. This can be useful when something happens (such as a
      re-positioning or CSS change affecting the editor) that could
      invalidate the existing tooltip positions.
      */

      function repositionTooltips(view) {
        var _a;

        (_a = view.plugin(tooltipPlugin)) === null || _a === void 0 ? void 0 : _a.maybeMeasure();
      }
      /***/

    },

    /***/
    "h5Ab":
    /*!*******************************************************!*\
      !*** ./node_modules/@codemirror/gutter/dist/index.js ***!
      \*******************************************************/

    /*! exports provided: GutterMarker, gutter, gutterLineClass, gutters, highlightActiveLineGutter, lineNumberMarkers, lineNumbers */

    /***/
    function h5Ab(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "GutterMarker", function () {
        return GutterMarker;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "gutter", function () {
        return gutter;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "gutterLineClass", function () {
        return gutterLineClass;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "gutters", function () {
        return gutters;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "highlightActiveLineGutter", function () {
        return highlightActiveLineGutter;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "lineNumberMarkers", function () {
        return lineNumberMarkers;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "lineNumbers", function () {
        return lineNumbers;
      });
      /* harmony import */


      var _codemirror_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @codemirror/view */
      "BG4M");
      /* harmony import */


      var _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @codemirror/rangeset */
      "wG49");
      /* harmony import */


      var _codemirror_state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @codemirror/state */
      "4eob");
      /**
      A gutter marker represents a bit of information attached to a line
      in a specific gutter. Your own custom markers have to extend this
      class.
      */


      var GutterMarker = /*#__PURE__*/function (_codemirror_rangeset_4) {
        _inherits(GutterMarker, _codemirror_rangeset_4);

        var _super56 = _createSuper(GutterMarker);

        function GutterMarker() {
          _classCallCheck(this, GutterMarker);

          return _super56.apply(this, arguments);
        }

        _createClass(GutterMarker, [{
          key: "compare",
          value:
          /**
          @internal
          */
          function compare(other) {
            return this == other || this.constructor == other.constructor && this.eq(other);
          }
          /**
          Compare this marker to another marker of the same type.
          */

        }, {
          key: "eq",
          value: function eq(other) {
            return false;
          }
          /**
          Called if the marker has a `toDOM` method and its representation
          was removed from a gutter.
          */

        }, {
          key: "destroy",
          value: function destroy(dom) {}
        }]);

        return GutterMarker;
      }(_codemirror_rangeset__WEBPACK_IMPORTED_MODULE_1__["RangeValue"]);

      GutterMarker.prototype.elementClass = "";
      GutterMarker.prototype.toDOM = undefined;
      GutterMarker.prototype.mapMode = _codemirror_state__WEBPACK_IMPORTED_MODULE_2__["MapMode"].TrackBefore;
      GutterMarker.prototype.startSide = GutterMarker.prototype.endSide = -1;
      GutterMarker.prototype.point = true;
      /**
      Facet used to add a class to all gutter elements for a given line.
      Markers given to this facet should _only_ define an
      [`elementclass`](https://codemirror.net/6/docs/ref/#gutter.GutterMarker.elementClass), not a
      [`toDOM`](https://codemirror.net/6/docs/ref/#gutter.GutterMarker.toDOM) (or the marker will appear
      in all gutters for the line).
      */

      var gutterLineClass = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__["Facet"].define();

      var defaults = {
        "class": "",
        renderEmptyElements: false,
        elementStyle: "",
        markers: function markers() {
          return _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_1__["RangeSet"].empty;
        },
        lineMarker: function lineMarker() {
          return null;
        },
        lineMarkerChange: null,
        initialSpacer: null,
        updateSpacer: null,
        domEventHandlers: {}
      };

      var activeGutters = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__["Facet"].define();
      /**
      Define an editor gutter. The order in which the gutters appear is
      determined by their extension priority.
      */


      function gutter(config) {
        return [gutters(), activeGutters.of(Object.assign(Object.assign({}, defaults), config))];
      }

      var baseTheme = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_0__["EditorView"].baseTheme({
        ".cm-gutters": {
          display: "flex",
          height: "100%",
          boxSizing: "border-box",
          left: 0,
          zIndex: 200
        },
        "&light .cm-gutters": {
          backgroundColor: "#f5f5f5",
          color: "#999",
          borderRight: "1px solid #ddd"
        },
        "&dark .cm-gutters": {
          backgroundColor: "#333338",
          color: "#ccc"
        },
        ".cm-gutter": {
          display: "flex !important",
          flexDirection: "column",
          flexShrink: 0,
          boxSizing: "border-box",
          minHeight: "100%",
          overflow: "hidden"
        },
        ".cm-gutterElement": {
          boxSizing: "border-box"
        },
        ".cm-lineNumbers .cm-gutterElement": {
          padding: "0 3px 0 5px",
          minWidth: "20px",
          textAlign: "right",
          whiteSpace: "nowrap"
        },
        "&light .cm-activeLineGutter": {
          backgroundColor: "#e2f2ff"
        },
        "&dark .cm-activeLineGutter": {
          backgroundColor: "#222227"
        }
      });

      var unfixGutters = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__["Facet"].define({
        combine: function combine(values) {
          return values.some(function (x) {
            return x;
          });
        }
      });
      /**
      The gutter-drawing plugin is automatically enabled when you add a
      gutter, but you can use this function to explicitly configure it.
      
      Unless `fixed` is explicitly set to `false`, the gutters are
      fixed, meaning they don't scroll along with the content
      horizontally (except on Internet Explorer, which doesn't support
      CSS [`position:
      sticky`](https://developer.mozilla.org/en-US/docs/Web/CSS/position#sticky)).
      */


      function gutters(config) {
        var result = [gutterView, baseTheme];
        if (config && config.fixed === false) result.push(unfixGutters.of(true));
        return result;
      }

      var gutterView = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_0__["ViewPlugin"].fromClass( /*#__PURE__*/function () {
        function _class20(view) {
          _classCallCheck(this, _class20);

          this.view = view;
          this.prevViewport = view.viewport;
          this.dom = document.createElement("div");
          this.dom.className = "cm-gutters";
          this.dom.setAttribute("aria-hidden", "true");
          this.dom.style.minHeight = this.view.contentHeight + "px";
          this.gutters = view.state.facet(activeGutters).map(function (conf) {
            return new SingleGutterView(view, conf);
          });

          var _iterator215 = _createForOfIteratorHelper(this.gutters),
              _step215;

          try {
            for (_iterator215.s(); !(_step215 = _iterator215.n()).done;) {
              var _gutter = _step215.value;
              this.dom.appendChild(_gutter.dom);
            }
          } catch (err) {
            _iterator215.e(err);
          } finally {
            _iterator215.f();
          }

          this.fixed = !view.state.facet(unfixGutters);

          if (this.fixed) {
            // FIXME IE11 fallback, which doesn't support position: sticky,
            // by using position: relative + event handlers that realign the
            // gutter (or just force fixed=false on IE11?)
            this.dom.style.position = "sticky";
          }

          this.syncGutters(false);
          view.scrollDOM.insertBefore(this.dom, view.contentDOM);
        }

        _createClass(_class20, [{
          key: "update",
          value: function update(_update29) {
            if (this.updateGutters(_update29)) {
              // Detach during sync when the viewport changed significantly
              // (such as during scrolling), since for large updates that is
              // faster.
              var vpA = this.prevViewport,
                  vpB = _update29.view.viewport;
              var vpOverlap = Math.min(vpA.to, vpB.to) - Math.max(vpA.from, vpB.from);
              this.syncGutters(vpOverlap < (vpB.to - vpB.from) * 0.8);
            }

            if (_update29.geometryChanged) this.dom.style.minHeight = this.view.contentHeight + "px";

            if (this.view.state.facet(unfixGutters) != !this.fixed) {
              this.fixed = !this.fixed;
              this.dom.style.position = this.fixed ? "sticky" : "";
            }

            this.prevViewport = _update29.view.viewport;
          }
        }, {
          key: "syncGutters",
          value: function syncGutters(detach) {
            var _this122 = this;

            var after = this.dom.nextSibling;
            if (detach) this.dom.remove();

            var lineClasses = _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_1__["RangeSet"].iter(this.view.state.facet(gutterLineClass), this.view.viewport.from);

            var classSet = [];
            var contexts = this.gutters.map(function (gutter) {
              return new UpdateContext(gutter, _this122.view.viewport, -_this122.view.documentPadding.top);
            });

            var _iterator216 = _createForOfIteratorHelper(this.view.viewportLineBlocks),
                _step216;

            try {
              for (_iterator216.s(); !(_step216 = _iterator216.n()).done;) {
                var line = _step216.value;
                var text = void 0;

                if (Array.isArray(line.type)) {
                  var _iterator218 = _createForOfIteratorHelper(line.type),
                      _step218;

                  try {
                    for (_iterator218.s(); !(_step218 = _iterator218.n()).done;) {
                      var b = _step218.value;

                      if (b.type == _codemirror_view__WEBPACK_IMPORTED_MODULE_0__["BlockType"].Text) {
                        text = b;
                        break;
                      }
                    }
                  } catch (err) {
                    _iterator218.e(err);
                  } finally {
                    _iterator218.f();
                  }
                } else {
                  text = line.type == _codemirror_view__WEBPACK_IMPORTED_MODULE_0__["BlockType"].Text ? line : undefined;
                }

                if (!text) continue;
                if (classSet.length) classSet = [];
                advanceCursor(lineClasses, classSet, line.from);

                var _iterator219 = _createForOfIteratorHelper(contexts),
                    _step219;

                try {
                  for (_iterator219.s(); !(_step219 = _iterator219.n()).done;) {
                    var cx = _step219.value;
                    cx.line(this.view, text, classSet);
                  }
                } catch (err) {
                  _iterator219.e(err);
                } finally {
                  _iterator219.f();
                }
              }
            } catch (err) {
              _iterator216.e(err);
            } finally {
              _iterator216.f();
            }

            var _iterator217 = _createForOfIteratorHelper(contexts),
                _step217;

            try {
              for (_iterator217.s(); !(_step217 = _iterator217.n()).done;) {
                var _cx = _step217.value;

                _cx.finish();
              }
            } catch (err) {
              _iterator217.e(err);
            } finally {
              _iterator217.f();
            }

            if (detach) this.view.scrollDOM.insertBefore(this.dom, after);
          }
        }, {
          key: "updateGutters",
          value: function updateGutters(update) {
            var prev = update.startState.facet(activeGutters),
                cur = update.state.facet(activeGutters);
            var change = update.docChanged || update.heightChanged || update.viewportChanged || !_codemirror_rangeset__WEBPACK_IMPORTED_MODULE_1__["RangeSet"].eq(update.startState.facet(gutterLineClass), update.state.facet(gutterLineClass), update.view.viewport.from, update.view.viewport.to);

            if (prev == cur) {
              var _iterator220 = _createForOfIteratorHelper(this.gutters),
                  _step220;

              try {
                for (_iterator220.s(); !(_step220 = _iterator220.n()).done;) {
                  var _gutter2 = _step220.value;
                  if (_gutter2.update(update)) change = true;
                }
              } catch (err) {
                _iterator220.e(err);
              } finally {
                _iterator220.f();
              }
            } else {
              change = true;
              var _gutters = [];

              var _iterator221 = _createForOfIteratorHelper(cur),
                  _step221;

              try {
                for (_iterator221.s(); !(_step221 = _iterator221.n()).done;) {
                  var conf = _step221.value;
                  var known = prev.indexOf(conf);

                  if (known < 0) {
                    _gutters.push(new SingleGutterView(this.view, conf));
                  } else {
                    this.gutters[known].update(update);

                    _gutters.push(this.gutters[known]);
                  }
                }
              } catch (err) {
                _iterator221.e(err);
              } finally {
                _iterator221.f();
              }

              var _iterator222 = _createForOfIteratorHelper(this.gutters),
                  _step222;

              try {
                for (_iterator222.s(); !(_step222 = _iterator222.n()).done;) {
                  var _g = _step222.value;

                  _g.dom.remove();

                  if (_gutters.indexOf(_g) < 0) _g.destroy();
                }
              } catch (err) {
                _iterator222.e(err);
              } finally {
                _iterator222.f();
              }

              for (var _i163 = 0, _gutters2 = _gutters; _i163 < _gutters2.length; _i163++) {
                var g = _gutters2[_i163];
                this.dom.appendChild(g.dom);
              }

              this.gutters = _gutters;
            }

            return change;
          }
        }, {
          key: "destroy",
          value: function destroy() {
            var _iterator223 = _createForOfIteratorHelper(this.gutters),
                _step223;

            try {
              for (_iterator223.s(); !(_step223 = _iterator223.n()).done;) {
                var view = _step223.value;
                view.destroy();
              }
            } catch (err) {
              _iterator223.e(err);
            } finally {
              _iterator223.f();
            }

            this.dom.remove();
          }
        }]);

        return _class20;
      }(), {
        provide: /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_0__["PluginField"].scrollMargins.from(function (value) {
          if (value.gutters.length == 0 || !value.fixed) return null;
          return value.view.textDirection == _codemirror_view__WEBPACK_IMPORTED_MODULE_0__["Direction"].LTR ? {
            left: value.dom.offsetWidth
          } : {
            right: value.dom.offsetWidth
          };
        })
      });

      function asArray(val) {
        return Array.isArray(val) ? val : [val];
      }

      function advanceCursor(cursor, collect, pos) {
        while (cursor.value && cursor.from <= pos) {
          if (cursor.from == pos) collect.push(cursor.value);
          cursor.next();
        }
      }

      var UpdateContext = /*#__PURE__*/function () {
        function UpdateContext(gutter, viewport, height) {
          _classCallCheck(this, UpdateContext);

          this.gutter = gutter;
          this.height = height;
          this.localMarkers = [];
          this.i = 0;
          this.cursor = _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_1__["RangeSet"].iter(gutter.markers, viewport.from);
        }

        _createClass(UpdateContext, [{
          key: "line",
          value: function line(view, _line5, extraMarkers) {
            if (this.localMarkers.length) this.localMarkers = [];
            advanceCursor(this.cursor, this.localMarkers, _line5.from);
            var localMarkers = extraMarkers.length ? this.localMarkers.concat(extraMarkers) : this.localMarkers;
            var forLine = this.gutter.config.lineMarker(view, _line5, localMarkers);
            if (forLine) localMarkers.unshift(forLine);
            var gutter = this.gutter;
            if (localMarkers.length == 0 && !gutter.config.renderEmptyElements) return;
            var above = _line5.top - this.height;

            if (this.i == gutter.elements.length) {
              var newElt = new GutterElement(view, _line5.height, above, localMarkers);
              gutter.elements.push(newElt);
              gutter.dom.appendChild(newElt.dom);
            } else {
              gutter.elements[this.i].update(view, _line5.height, above, localMarkers);
            }

            this.height = _line5.bottom;
            this.i++;
          }
        }, {
          key: "finish",
          value: function finish() {
            var gutter = this.gutter;

            while (gutter.elements.length > this.i) {
              var last = gutter.elements.pop();
              gutter.dom.removeChild(last.dom);
              last.destroy();
            }
          }
        }]);

        return UpdateContext;
      }();

      var SingleGutterView = /*#__PURE__*/function () {
        function SingleGutterView(view, config) {
          var _this123 = this;

          _classCallCheck(this, SingleGutterView);

          this.view = view;
          this.config = config;
          this.elements = [];
          this.spacer = null;
          this.dom = document.createElement("div");
          this.dom.className = "cm-gutter" + (this.config["class"] ? " " + this.config["class"] : "");

          var _loop24 = function _loop24(prop) {
            _this123.dom.addEventListener(prop, function (event) {
              var line = view.lineBlockAtHeight(event.clientY - view.documentTop);
              if (config.domEventHandlers[prop](view, line, event)) event.preventDefault();
            });
          };

          for (var prop in config.domEventHandlers) {
            _loop24(prop);
          }

          this.markers = asArray(config.markers(view));

          if (config.initialSpacer) {
            this.spacer = new GutterElement(view, 0, 0, [config.initialSpacer(view)]);
            this.dom.appendChild(this.spacer.dom);
            this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none";
          }
        }

        _createClass(SingleGutterView, [{
          key: "update",
          value: function update(_update30) {
            var prevMarkers = this.markers;
            this.markers = asArray(this.config.markers(_update30.view));

            if (this.spacer && this.config.updateSpacer) {
              var updated = this.config.updateSpacer(this.spacer.markers[0], _update30);
              if (updated != this.spacer.markers[0]) this.spacer.update(_update30.view, 0, 0, [updated]);
            }

            var vp = _update30.view.viewport;
            return !_codemirror_rangeset__WEBPACK_IMPORTED_MODULE_1__["RangeSet"].eq(this.markers, prevMarkers, vp.from, vp.to) || (this.config.lineMarkerChange ? this.config.lineMarkerChange(_update30) : false);
          }
        }, {
          key: "destroy",
          value: function destroy() {
            var _iterator224 = _createForOfIteratorHelper(this.elements),
                _step224;

            try {
              for (_iterator224.s(); !(_step224 = _iterator224.n()).done;) {
                var elt = _step224.value;
                elt.destroy();
              }
            } catch (err) {
              _iterator224.e(err);
            } finally {
              _iterator224.f();
            }
          }
        }]);

        return SingleGutterView;
      }();

      var GutterElement = /*#__PURE__*/function () {
        function GutterElement(view, height, above, markers) {
          _classCallCheck(this, GutterElement);

          this.height = -1;
          this.above = 0;
          this.markers = [];
          this.dom = document.createElement("div");
          this.update(view, height, above, markers);
        }

        _createClass(GutterElement, [{
          key: "update",
          value: function update(view, height, above, markers) {
            if (this.height != height) this.dom.style.height = (this.height = height) + "px";
            if (this.above != above) this.dom.style.marginTop = (this.above = above) ? above + "px" : "";
            if (!sameMarkers(this.markers, markers)) this.setMarkers(view, markers);
          }
        }, {
          key: "setMarkers",
          value: function setMarkers(view, markers) {
            var cls = "cm-gutterElement",
                domPos = this.dom.firstChild;

            for (var iNew = 0, iOld = 0;;) {
              var skipTo = iOld,
                  marker = iNew < markers.length ? markers[iNew++] : null,
                  matched = false;

              if (marker) {
                var c = marker.elementClass;
                if (c) cls += " " + c;

                for (var _i164 = iOld; _i164 < this.markers.length; _i164++) {
                  if (this.markers[_i164].compare(marker)) {
                    skipTo = _i164;
                    matched = true;
                    break;
                  }
                }
              } else {
                skipTo = this.markers.length;
              }

              while (iOld < skipTo) {
                var next = this.markers[iOld++];

                if (next.toDOM) {
                  next.destroy(domPos);
                  var after = domPos.nextSibling;
                  domPos.remove();
                  domPos = after;
                }
              }

              if (!marker) break;

              if (marker.toDOM) {
                if (matched) domPos = domPos.nextSibling;else this.dom.insertBefore(marker.toDOM(view), domPos);
              }

              if (matched) iOld++;
            }

            this.dom.className = cls;
            this.markers = markers;
          }
        }, {
          key: "destroy",
          value: function destroy() {
            this.setMarkers(null, []); // First argument not used unless creating markers
          }
        }]);

        return GutterElement;
      }();

      function sameMarkers(a, b) {
        if (a.length != b.length) return false;

        for (var _i165 = 0; _i165 < a.length; _i165++) {
          if (!a[_i165].compare(b[_i165])) return false;
        }

        return true;
      }
      /**
      Facet used to provide markers to the line number gutter.
      */


      var lineNumberMarkers = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__["Facet"].define();

      var lineNumberConfig = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__["Facet"].define({
        combine: function combine(values) {
          return Object(_codemirror_state__WEBPACK_IMPORTED_MODULE_2__["combineConfig"])(values, {
            formatNumber: String,
            domEventHandlers: {}
          }, {
            domEventHandlers: function domEventHandlers(a, b) {
              var result = Object.assign({}, a);

              var _loop25 = function _loop25(event) {
                var exists = result[event],
                    add = b[event];
                result[event] = exists ? function (view, line, event) {
                  return exists(view, line, event) || add(view, line, event);
                } : add;
              };

              for (var event in b) {
                _loop25(event);
              }

              return result;
            }
          });
        }
      });

      var NumberMarker = /*#__PURE__*/function (_GutterMarker) {
        _inherits(NumberMarker, _GutterMarker);

        var _super57 = _createSuper(NumberMarker);

        function NumberMarker(number) {
          var _this124;

          _classCallCheck(this, NumberMarker);

          _this124 = _super57.call(this);
          _this124.number = number;
          return _this124;
        }

        _createClass(NumberMarker, [{
          key: "eq",
          value: function eq(other) {
            return this.number == other.number;
          }
        }, {
          key: "toDOM",
          value: function toDOM() {
            return document.createTextNode(this.number);
          }
        }]);

        return NumberMarker;
      }(GutterMarker);

      function formatNumber(view, number) {
        return view.state.facet(lineNumberConfig).formatNumber(number, view.state);
      }

      var lineNumberGutter = /*@__PURE__*/activeGutters.compute([lineNumberConfig], function (state) {
        return {
          "class": "cm-lineNumbers",
          renderEmptyElements: false,
          markers: function markers(view) {
            return view.state.facet(lineNumberMarkers);
          },
          lineMarker: function lineMarker(view, line, others) {
            if (others.some(function (m) {
              return m.toDOM;
            })) return null;
            return new NumberMarker(formatNumber(view, view.state.doc.lineAt(line.from).number));
          },
          lineMarkerChange: function lineMarkerChange(update) {
            return update.startState.facet(lineNumberConfig) != update.state.facet(lineNumberConfig);
          },
          initialSpacer: function initialSpacer(view) {
            return new NumberMarker(formatNumber(view, maxLineNumber(view.state.doc.lines)));
          },
          updateSpacer: function updateSpacer(spacer, update) {
            var max = formatNumber(update.view, maxLineNumber(update.view.state.doc.lines));
            return max == spacer.number ? spacer : new NumberMarker(max);
          },
          domEventHandlers: state.facet(lineNumberConfig).domEventHandlers
        };
      });
      /**
      Create a line number gutter extension.
      */

      function lineNumbers() {
        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return [lineNumberConfig.of(config), gutters(), lineNumberGutter];
      }

      function maxLineNumber(lines) {
        var last = 9;

        while (last < lines) {
          last = last * 10 + 9;
        }

        return last;
      }

      var activeLineGutterMarker = /*@__PURE__*/new ( /*#__PURE__*/function (_GutterMarker2) {
        _inherits(_class21, _GutterMarker2);

        var _super58 = _createSuper(_class21);

        function _class21() {
          var _this125;

          _classCallCheck(this, _class21);

          _this125 = _super58.apply(this, arguments);
          _this125.elementClass = "cm-activeLineGutter";
          return _this125;
        }

        return _createClass(_class21);
      }(GutterMarker))();
      var activeLineGutterHighlighter = /*@__PURE__*/gutterLineClass.compute(["selection"], function (state) {
        var marks = [],
            last = -1;

        var _iterator225 = _createForOfIteratorHelper(state.selection.ranges),
            _step225;

        try {
          for (_iterator225.s(); !(_step225 = _iterator225.n()).done;) {
            var range = _step225.value;

            if (range.empty) {
              var linePos = state.doc.lineAt(range.head).from;

              if (linePos > last) {
                last = linePos;
                marks.push(activeLineGutterMarker.range(linePos));
              }
            }
          }
        } catch (err) {
          _iterator225.e(err);
        } finally {
          _iterator225.f();
        }

        return _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_1__["RangeSet"].of(marks);
      });
      /**
      Returns an extension that adds a `cm-activeLineGutter` class to
      all gutter elements on the [active
      line](https://codemirror.net/6/docs/ref/#view.highlightActiveLine).
      */

      function highlightActiveLineGutter() {
        return activeLineGutterHighlighter;
      }
      /***/

    },

    /***/
    "ljhz":
    /*!********************************************************!*\
      !*** ./node_modules/@codemirror/history/dist/index.js ***!
      \********************************************************/

    /*! exports provided: history, historyField, historyKeymap, invertedEffects, isolateHistory, redo, redoDepth, redoSelection, undo, undoDepth, undoSelection */

    /***/
    function ljhz(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "history", function () {
        return history;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "historyField", function () {
        return historyField;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "historyKeymap", function () {
        return historyKeymap;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "invertedEffects", function () {
        return invertedEffects;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isolateHistory", function () {
        return isolateHistory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "redo", function () {
        return redo;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "redoDepth", function () {
        return redoDepth;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "redoSelection", function () {
        return redoSelection;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "undo", function () {
        return undo;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "undoDepth", function () {
        return undoDepth;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "undoSelection", function () {
        return undoSelection;
      });
      /* harmony import */


      var _codemirror_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @codemirror/state */
      "4eob");
      /* harmony import */


      var _codemirror_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @codemirror/view */
      "AtEE");

      var fromHistory = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Annotation"].define();
      /**
      Transaction annotation that will prevent that transaction from
      being combined with other transactions in the undo history. Given
      `"before"`, it'll prevent merging with previous transactions. With
      `"after"`, subsequent transactions won't be combined with this
      one. With `"full"`, the transaction is isolated on both sides.
      */


      var isolateHistory = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Annotation"].define();
      /**
      This facet provides a way to register functions that, given a
      transaction, provide a set of effects that the history should
      store when inverting the transaction. This can be used to
      integrate some kinds of effects in the history, so that they can
      be undone (and redone again).
      */


      var invertedEffects = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Facet"].define();

      var historyConfig = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Facet"].define({
        combine: function combine(configs) {
          return Object(_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["combineConfig"])(configs, {
            minDepth: 100,
            newGroupDelay: 500
          }, {
            minDepth: Math.max,
            newGroupDelay: Math.min
          });
        }
      });

      var historyField_ = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["StateField"].define({
        create: function create() {
          return HistoryState.empty;
        },
        update: function update(state, tr) {
          var config = tr.state.facet(historyConfig);
          var fromHist = tr.annotation(fromHistory);

          if (fromHist) {
            var item = HistEvent.fromTransaction(tr),
                from = fromHist.side;
            var other = from == 0
            /* Done */
            ? state.undone : state.done;
            if (item) other = updateBranch(other, other.length, config.minDepth, item);else other = _addSelection(other, tr.startState.selection);
            return new HistoryState(from == 0
            /* Done */
            ? fromHist.rest : other, from == 0
            /* Done */
            ? other : fromHist.rest);
          }

          var isolate = tr.annotation(isolateHistory);
          if (isolate == "full" || isolate == "before") state = state.isolate();
          if (tr.annotation(_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Transaction"].addToHistory) === false) return !tr.changes.empty ? state.addMapping(tr.changes.desc) : state;
          var event = HistEvent.fromTransaction(tr);
          var time = tr.annotation(_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Transaction"].time),
              userEvent = tr.annotation(_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["Transaction"].userEvent);
          if (event) state = state.addChanges(event, time, userEvent, config.newGroupDelay, config.minDepth);else if (tr.selection) state = state.addSelection(tr.startState.selection, time, userEvent, config.newGroupDelay);
          if (isolate == "full" || isolate == "after") state = state.isolate();
          return state;
        },
        toJSON: function toJSON(value) {
          return {
            done: value.done.map(function (e) {
              return e.toJSON();
            }),
            undone: value.undone.map(function (e) {
              return e.toJSON();
            })
          };
        },
        fromJSON: function fromJSON(json) {
          return new HistoryState(json.done.map(HistEvent.fromJSON), json.undone.map(HistEvent.fromJSON));
        }
      });
      /**
      Create a history extension with the given configuration.
      */


      function history() {
        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return [historyField_, historyConfig.of(config), _codemirror_view__WEBPACK_IMPORTED_MODULE_1__["EditorView"].domEventHandlers({
          beforeinput: function beforeinput(e, view) {
            var command = e.inputType == "historyUndo" ? undo : e.inputType == "historyRedo" ? redo : null;
            if (!command) return false;
            e.preventDefault();
            return command(view);
          }
        })];
      }
      /**
      The state field used to store the history data. Should probably
      only be used when you want to
      [serialize](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) or
      [deserialize](https://codemirror.net/6/docs/ref/#state.EditorState^fromJSON) state objects in a way
      that preserves history.
      */


      var historyField = historyField_;

      function cmd(side, selection) {
        return function (_ref71) {
          var state = _ref71.state,
              dispatch = _ref71.dispatch;
          if (!selection && state.readOnly) return false;
          var historyState = state.field(historyField_, false);
          if (!historyState) return false;
          var tr = historyState.pop(side, state, selection);
          if (!tr) return false;
          dispatch(tr);
          return true;
        };
      }
      /**
      Undo a single group of history events. Returns false if no group
      was available.
      */


      var undo = /*@__PURE__*/cmd(0
      /* Done */
      , false);
      /**
      Redo a group of history events. Returns false if no group was
      available.
      */

      var redo = /*@__PURE__*/cmd(1
      /* Undone */
      , false);
      /**
      Undo a selection change.
      */

      var undoSelection = /*@__PURE__*/cmd(0
      /* Done */
      , true);
      /**
      Redo a selection change.
      */

      var redoSelection = /*@__PURE__*/cmd(1
      /* Undone */
      , true);

      function depth(side) {
        return function (state) {
          var histState = state.field(historyField_, false);
          if (!histState) return 0;
          var branch = side == 0
          /* Done */
          ? histState.done : histState.undone;
          return branch.length - (branch.length && !branch[0].changes ? 1 : 0);
        };
      }
      /**
      The amount of undoable change events available in a given state.
      */


      var undoDepth = /*@__PURE__*/depth(0
      /* Done */
      );
      /**
      The amount of redoable change events available in a given state.
      */

      var redoDepth = /*@__PURE__*/depth(1
      /* Undone */
      ); // History events store groups of changes or effects that need to be
      // undone/redone together.

      var HistEvent = /*#__PURE__*/function () {
        function HistEvent( // The changes in this event. Normal events hold at least one
        // change or effect. But it may be necessary to store selection
        // events before the first change, in which case a special type of
        // instance is created which doesn't hold any changes, with
        // changes == startSelection == undefined
        changes, // The effects associated with this event
        effects, mapped, // The selection before this event
        startSelection, // Stores selection changes after this event, to be used for
        // selection undo/redo.
        selectionsAfter) {
          _classCallCheck(this, HistEvent);

          this.changes = changes;
          this.effects = effects;
          this.mapped = mapped;
          this.startSelection = startSelection;
          this.selectionsAfter = selectionsAfter;
        }

        _createClass(HistEvent, [{
          key: "setSelAfter",
          value: function setSelAfter(after) {
            return new HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);
          }
        }, {
          key: "toJSON",
          value: function toJSON() {
            var _a, _b, _c;

            return {
              changes: (_a = this.changes) === null || _a === void 0 ? void 0 : _a.toJSON(),
              mapped: (_b = this.mapped) === null || _b === void 0 ? void 0 : _b.toJSON(),
              startSelection: (_c = this.startSelection) === null || _c === void 0 ? void 0 : _c.toJSON(),
              selectionsAfter: this.selectionsAfter.map(function (s) {
                return s.toJSON();
              })
            };
          }
        }], [{
          key: "fromJSON",
          value: function fromJSON(json) {
            return new HistEvent(json.changes && _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["ChangeSet"].fromJSON(json.changes), [], json.mapped && _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["ChangeDesc"].fromJSON(json.mapped), json.startSelection && _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].fromJSON(json.startSelection), json.selectionsAfter.map(_codemirror_state__WEBPACK_IMPORTED_MODULE_0__["EditorSelection"].fromJSON));
          } // This does not check `addToHistory` and such, it assumes the
          // transaction needs to be converted to an item. Returns null when
          // there are no changes or effects in the transaction.

        }, {
          key: "fromTransaction",
          value: function fromTransaction(tr) {
            var effects = none;

            var _iterator226 = _createForOfIteratorHelper(tr.startState.facet(invertedEffects)),
                _step226;

            try {
              for (_iterator226.s(); !(_step226 = _iterator226.n()).done;) {
                var invert = _step226.value;
                var result = invert(tr);
                if (result.length) effects = effects.concat(result);
              }
            } catch (err) {
              _iterator226.e(err);
            } finally {
              _iterator226.f();
            }

            if (!effects.length && tr.changes.empty) return null;
            return new HistEvent(tr.changes.invert(tr.startState.doc), effects, undefined, tr.startState.selection, none);
          }
        }, {
          key: "selection",
          value: function selection(selections) {
            return new HistEvent(undefined, none, undefined, undefined, selections);
          }
        }]);

        return HistEvent;
      }();

      function updateBranch(branch, to, maxLen, newEvent) {
        var start = to + 1 > maxLen + 20 ? to - maxLen - 1 : 0;
        var newBranch = branch.slice(start, to);
        newBranch.push(newEvent);
        return newBranch;
      }

      function isAdjacent(a, b) {
        var ranges = [],
            isAdjacent = false;
        a.iterChangedRanges(function (f, t) {
          return ranges.push(f, t);
        });
        b.iterChangedRanges(function (_f, _t, f, t) {
          for (var _i166 = 0; _i166 < ranges.length;) {
            var from = ranges[_i166++],
                to = ranges[_i166++];
            if (t >= from && f <= to) isAdjacent = true;
          }
        });
        return isAdjacent;
      }

      function eqSelectionShape(a, b) {
        return a.ranges.length == b.ranges.length && a.ranges.filter(function (r, i) {
          return r.empty != b.ranges[i].empty;
        }).length === 0;
      }

      function conc(a, b) {
        return !a.length ? b : !b.length ? a : a.concat(b);
      }

      var none = [];
      var MaxSelectionsPerEvent = 200;

      function _addSelection(branch, selection) {
        if (!branch.length) {
          return [HistEvent.selection([selection])];
        } else {
          var lastEvent = branch[branch.length - 1];
          var sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent));
          if (sels.length && sels[sels.length - 1].eq(selection)) return branch;
          sels.push(selection);
          return updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));
        }
      } // Assumes the top item has one or more selectionAfter values


      function popSelection(branch) {
        var last = branch[branch.length - 1];
        var newBranch = branch.slice();
        newBranch[branch.length - 1] = last.setSelAfter(last.selectionsAfter.slice(0, last.selectionsAfter.length - 1));
        return newBranch;
      } // Add a mapping to the top event in the given branch. If this maps
      // away all the changes and effects in that item, drop it and
      // propagate the mapping to the next item.


      function addMappingToBranch(branch, mapping) {
        if (!branch.length) return branch;
        var length = branch.length,
            selections = none;

        while (length) {
          var event = mapEvent(branch[length - 1], mapping, selections);

          if (event.changes && !event.changes.empty || event.effects.length) {
            // Event survived mapping
            var result = branch.slice(0, length);
            result[length - 1] = event;
            return result;
          } else {
            // Drop this event, since there's no changes or effects left
            mapping = event.mapped;
            length--;
            selections = event.selectionsAfter;
          }
        }

        return selections.length ? [HistEvent.selection(selections)] : none;
      }

      function mapEvent(event, mapping, extraSelections) {
        var selections = conc(event.selectionsAfter.length ? event.selectionsAfter.map(function (s) {
          return s.map(mapping);
        }) : none, extraSelections); // Change-less events don't store mappings (they are always the last event in a branch)

        if (!event.changes) return HistEvent.selection(selections);
        var mappedChanges = event.changes.map(mapping),
            before = mapping.mapDesc(event.changes, true);
        var fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;
        return new HistEvent(mappedChanges, _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["StateEffect"].mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(before), selections);
      }

      var joinableUserEvent = /^(input\.type|delete)($|\.)/;

      var HistoryState = /*#__PURE__*/function () {
        function HistoryState(done, undone) {
          var prevTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
          var prevUserEvent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;

          _classCallCheck(this, HistoryState);

          this.done = done;
          this.undone = undone;
          this.prevTime = prevTime;
          this.prevUserEvent = prevUserEvent;
        }

        _createClass(HistoryState, [{
          key: "isolate",
          value: function isolate() {
            return this.prevTime ? new HistoryState(this.done, this.undone) : this;
          }
        }, {
          key: "addChanges",
          value: function addChanges(event, time, userEvent, newGroupDelay, maxLen) {
            var done = this.done,
                lastEvent = done[done.length - 1];

            if (lastEvent && lastEvent.changes && !lastEvent.changes.empty && event.changes && (!userEvent || joinableUserEvent.test(userEvent)) && (!lastEvent.selectionsAfter.length && time - this.prevTime < newGroupDelay && isAdjacent(lastEvent.changes, event.changes) || // For compose (but not compose.start) events, always join with previous event
            userEvent == "input.type.compose")) {
              done = updateBranch(done, done.length - 1, maxLen, new HistEvent(event.changes.compose(lastEvent.changes), conc(event.effects, lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, none));
            } else {
              done = updateBranch(done, done.length, maxLen, event);
            }

            return new HistoryState(done, none, time, userEvent);
          }
        }, {
          key: "addSelection",
          value: function addSelection(selection, time, userEvent, newGroupDelay) {
            var last = this.done.length ? this.done[this.done.length - 1].selectionsAfter : none;
            if (last.length > 0 && time - this.prevTime < newGroupDelay && userEvent == this.prevUserEvent && userEvent && /^select($|\.)/.test(userEvent) && eqSelectionShape(last[last.length - 1], selection)) return this;
            return new HistoryState(_addSelection(this.done, selection), this.undone, time, userEvent);
          }
        }, {
          key: "addMapping",
          value: function addMapping(mapping) {
            return new HistoryState(addMappingToBranch(this.done, mapping), addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);
          }
        }, {
          key: "pop",
          value: function pop(side, state, selection) {
            var branch = side == 0
            /* Done */
            ? this.done : this.undone;
            if (branch.length == 0) return null;
            var event = branch[branch.length - 1];

            if (selection && event.selectionsAfter.length) {
              return state.update({
                selection: event.selectionsAfter[event.selectionsAfter.length - 1],
                annotations: fromHistory.of({
                  side: side,
                  rest: popSelection(branch)
                }),
                userEvent: side == 0
                /* Done */
                ? "select.undo" : "select.redo",
                scrollIntoView: true
              });
            } else if (!event.changes) {
              return null;
            } else {
              var rest = branch.length == 1 ? none : branch.slice(0, branch.length - 1);
              if (event.mapped) rest = addMappingToBranch(rest, event.mapped);
              return state.update({
                changes: event.changes,
                selection: event.startSelection,
                effects: event.effects,
                annotations: fromHistory.of({
                  side: side,
                  rest: rest
                }),
                filter: false,
                userEvent: side == 0
                /* Done */
                ? "undo" : "redo",
                scrollIntoView: true
              });
            }
          }
        }]);

        return HistoryState;
      }();

      HistoryState.empty = /*@__PURE__*/new HistoryState(none, none);
      /**
      Default key bindings for the undo history.
      
      - Mod-z: [`undo`](https://codemirror.net/6/docs/ref/#history.undo).
      - Mod-y (Mod-Shift-z on macOS): [`redo`](https://codemirror.net/6/docs/ref/#history.redo).
      - Mod-u: [`undoSelection`](https://codemirror.net/6/docs/ref/#history.undoSelection).
      - Alt-u (Mod-Shift-u on macOS): [`redoSelection`](https://codemirror.net/6/docs/ref/#history.redoSelection).
      */

      var historyKeymap = [{
        key: "Mod-z",
        run: undo,
        preventDefault: true
      }, {
        key: "Mod-y",
        mac: "Mod-Shift-z",
        run: redo,
        preventDefault: true
      }, {
        key: "Mod-u",
        run: undoSelection,
        preventDefault: true
      }, {
        key: "Alt-u",
        mac: "Mod-Shift-u",
        run: redoSelection,
        preventDefault: true
      }];
      /***/
    },

    /***/
    "lmln":
    /*!**************************************************!*\
      !*** ./node_modules/@lezer/common/dist/index.js ***!
      \**************************************************/

    /*! exports provided: DefaultBufferLength, MountedTree, NodeProp, NodeSet, NodeType, Parser, Tree, TreeBuffer, TreeCursor, TreeFragment, parseMixed */

    /***/
    function lmln(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DefaultBufferLength", function () {
        return DefaultBufferLength;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MountedTree", function () {
        return MountedTree;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NodeProp", function () {
        return NodeProp;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NodeSet", function () {
        return NodeSet;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NodeType", function () {
        return NodeType;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Parser", function () {
        return Parser;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Tree", function () {
        return Tree;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TreeBuffer", function () {
        return TreeBuffer;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TreeCursor", function () {
        return TreeCursor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TreeFragment", function () {
        return TreeFragment;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "parseMixed", function () {
        return parseMixed;
      }); // FIXME profile adding a per-Tree TreeNode cache, validating it by
      // parent pointer
      /// The default maximum length of a `TreeBuffer` node (1024).


      var DefaultBufferLength = 1024;
      var nextPropID = 0;

      var Range = /*#__PURE__*/_createClass(function Range(from, to) {
        _classCallCheck(this, Range);

        this.from = from;
        this.to = to;
      }); /// Each [node type](#common.NodeType) or [individual tree](#common.Tree)
      /// can have metadata associated with it in props. Instances of this
      /// class represent prop names.


      var NodeProp = /*#__PURE__*/function () {
        /// Create a new node prop type.
        function NodeProp() {
          var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

          _classCallCheck(this, NodeProp);

          this.id = nextPropID++;
          this.perNode = !!config.perNode;

          this.deserialize = config.deserialize || function () {
            throw new Error("This node type doesn't define a deserialize function");
          };
        } /// This is meant to be used with
        /// [`NodeSet.extend`](#common.NodeSet.extend) or
        /// [`LRParser.configure`](#lr.ParserConfig.props) to compute
        /// prop values for each node type in the set. Takes a [match
        /// object](#common.NodeType^match) or function that returns undefined
        /// if the node type doesn't get this prop, and the prop's value if
        /// it does.


        _createClass(NodeProp, [{
          key: "add",
          value: function add(match) {
            var _this126 = this;

            if (this.perNode) throw new RangeError("Can't add per-node props to node types");
            if (typeof match != "function") match = NodeType.match(match);
            return function (type) {
              var result = match(type);
              return result === undefined ? null : [_this126, result];
            };
          }
        }]);

        return NodeProp;
      }(); /// Prop that is used to describe matching delimiters. For opening
      /// delimiters, this holds an array of node names (written as a
      /// space-separated string when declaring this prop in a grammar)
      /// for the node types of closing delimiters that match it.


      NodeProp.closedBy = new NodeProp({
        deserialize: function deserialize(str) {
          return str.split(" ");
        }
      }); /// The inverse of [`closedBy`](#common.NodeProp^closedBy). This is
      /// attached to closing delimiters, holding an array of node names
      /// of types of matching opening delimiters.

      NodeProp.openedBy = new NodeProp({
        deserialize: function deserialize(str) {
          return str.split(" ");
        }
      }); /// Used to assign node types to groups (for example, all node
      /// types that represent an expression could be tagged with an
      /// `"Expression"` group).

      NodeProp.group = new NodeProp({
        deserialize: function deserialize(str) {
          return str.split(" ");
        }
      }); /// The hash of the [context](#lr.ContextTracker.constructor)
      /// that the node was parsed in, if any. Used to limit reuse of
      /// contextual nodes.

      NodeProp.contextHash = new NodeProp({
        perNode: true
      }); /// The distance beyond the end of the node that the tokenizer
      /// looked ahead for any of the tokens inside the node. (The LR
      /// parser only stores this when it is larger than 25, for
      /// efficiency reasons.)

      NodeProp.lookAhead = new NodeProp({
        perNode: true
      }); /// This per-node prop is used to replace a given node, or part of a
      /// node, with another tree. This is useful to include trees from
      /// different languages.

      NodeProp.mounted = new NodeProp({
        perNode: true
      }); /// A mounted tree, which can be [stored](#common.NodeProp^mounted) on
      /// a tree node to indicate that parts of its content are
      /// represented by another tree.

      var MountedTree = /*#__PURE__*/_createClass(function MountedTree( /// The inner tree.
      tree, /// If this is null, this tree replaces the entire node (it will
      /// be included in the regular iteration instead of its host
      /// node). If not, only the given ranges are considered to be
      /// covered by this tree. This is used for trees that are mixed in
      /// a way that isn't strictly hierarchical. Such mounted trees are
      /// only entered by [`resolveInner`](#common.Tree.resolveInner)
      /// and [`enter`](#common.SyntaxNode.enter).
      overlay, /// The parser used to create this subtree.
      parser) {
        _classCallCheck(this, MountedTree);

        this.tree = tree;
        this.overlay = overlay;
        this.parser = parser;
      });

      var noProps = Object.create(null); /// Each node in a syntax tree has a node type associated with it.

      var NodeType = /*#__PURE__*/function () {
        /// @internal
        function NodeType( /// The name of the node type. Not necessarily unique, but if the
        /// grammar was written properly, different node types with the
        /// same name within a node set should play the same semantic
        /// role.
        name, /// @internal
        props, /// The id of this node in its set. Corresponds to the term ids
        /// used in the parser.
        id) {
          var flags = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

          _classCallCheck(this, NodeType);

          this.name = name;
          this.props = props;
          this.id = id;
          this.flags = flags;
        }

        _createClass(NodeType, [{
          key: "prop",
          value: /// Retrieves a node prop for this type. Will return `undefined` if
          /// the prop isn't present on this node.
          function prop(_prop) {
            return this.props[_prop.id];
          } /// True when this is the top node of a grammar.

        }, {
          key: "isTop",
          get: function get() {
            return (this.flags & 1
            /* Top */
            ) > 0;
          } /// True when this node is produced by a skip rule.

        }, {
          key: "isSkipped",
          get: function get() {
            return (this.flags & 2
            /* Skipped */
            ) > 0;
          } /// Indicates whether this is an error node.

        }, {
          key: "isError",
          get: function get() {
            return (this.flags & 4
            /* Error */
            ) > 0;
          } /// When true, this node type doesn't correspond to a user-declared
          /// named node, for example because it is used to cache repetition.

        }, {
          key: "isAnonymous",
          get: function get() {
            return (this.flags & 8
            /* Anonymous */
            ) > 0;
          } /// Returns true when this node's name or one of its
          /// [groups](#common.NodeProp^group) matches the given string.

        }, {
          key: "is",
          value: function is(name) {
            if (typeof name == 'string') {
              if (this.name == name) return true;
              var group = this.prop(NodeProp.group);
              return group ? group.indexOf(name) > -1 : false;
            }

            return this.id == name;
          } /// Create a function from node types to arbitrary values by
          /// specifying an object whose property names are node or
          /// [group](#common.NodeProp^group) names. Often useful with
          /// [`NodeProp.add`](#common.NodeProp.add). You can put multiple
          /// names, separated by spaces, in a single property name to map
          /// multiple node names to a single value.

        }], [{
          key: "define",
          value: function define(spec) {
            var props = spec.props && spec.props.length ? Object.create(null) : noProps;
            var flags = (spec.top ? 1
            /* Top */
            : 0) | (spec.skipped ? 2
            /* Skipped */
            : 0) | (spec.error ? 4
            /* Error */
            : 0) | (spec.name == null ? 8
            /* Anonymous */
            : 0);
            var type = new NodeType(spec.name || "", props, spec.id, flags);

            if (spec.props) {
              var _iterator227 = _createForOfIteratorHelper(spec.props),
                  _step227;

              try {
                for (_iterator227.s(); !(_step227 = _iterator227.n()).done;) {
                  var src = _step227.value;
                  if (!Array.isArray(src)) src = src(type);

                  if (src) {
                    if (src[0].perNode) throw new RangeError("Can't store a per-node prop on a node type");
                    props[src[0].id] = src[1];
                  }
                }
              } catch (err) {
                _iterator227.e(err);
              } finally {
                _iterator227.f();
              }
            }

            return type;
          }
        }, {
          key: "match",
          value: function match(map) {
            var direct = Object.create(null);

            for (var prop in map) {
              var _iterator228 = _createForOfIteratorHelper(prop.split(" ")),
                  _step228;

              try {
                for (_iterator228.s(); !(_step228 = _iterator228.n()).done;) {
                  var name = _step228.value;
                  direct[name] = map[prop];
                }
              } catch (err) {
                _iterator228.e(err);
              } finally {
                _iterator228.f();
              }
            }

            return function (node) {
              for (var groups = node.prop(NodeProp.group), _i167 = -1; _i167 < (groups ? groups.length : 0); _i167++) {
                var found = direct[_i167 < 0 ? node.name : groups[_i167]];
                if (found) return found;
              }
            };
          }
        }]);

        return NodeType;
      }(); /// An empty dummy node type to use when no actual type is available.


      NodeType.none = new NodeType("", Object.create(null), 0, 8
      /* Anonymous */
      ); /// A node set holds a collection of node types. It is used to
      /// compactly represent trees by storing their type ids, rather than a
      /// full pointer to the type object, in a numeric array. Each parser
      /// [has](#lr.LRParser.nodeSet) a node set, and [tree
      /// buffers](#common.TreeBuffer) can only store collections of nodes
      /// from the same set. A set can have a maximum of 2**16 (65536) node
      /// types in it, so that the ids fit into 16-bit typed array slots.

      var NodeSet = /*#__PURE__*/function () {
        /// Create a set with the given types. The `id` property of each
        /// type should correspond to its position within the array.
        function NodeSet( /// The node types in this set, by id.
        types) {
          _classCallCheck(this, NodeSet);

          this.types = types;

          for (var _i168 = 0; _i168 < types.length; _i168++) {
            if (types[_i168].id != _i168) throw new RangeError("Node type ids should correspond to array positions when creating a node set");
          }
        } /// Create a copy of this set with some node properties added. The
        /// arguments to this method should be created with
        /// [`NodeProp.add`](#common.NodeProp.add).


        _createClass(NodeSet, [{
          key: "extend",
          value: function extend() {
            var newTypes = [];

            for (var _len3 = arguments.length, props = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
              props[_key3] = arguments[_key3];
            }

            var _iterator229 = _createForOfIteratorHelper(this.types),
                _step229;

            try {
              for (_iterator229.s(); !(_step229 = _iterator229.n()).done;) {
                var type = _step229.value;
                var newProps = null;

                var _iterator230 = _createForOfIteratorHelper(props),
                    _step230;

                try {
                  for (_iterator230.s(); !(_step230 = _iterator230.n()).done;) {
                    var source = _step230.value;
                    var add = source(type);

                    if (add) {
                      if (!newProps) newProps = Object.assign({}, type.props);
                      newProps[add[0].id] = add[1];
                    }
                  }
                } catch (err) {
                  _iterator230.e(err);
                } finally {
                  _iterator230.f();
                }

                newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);
              }
            } catch (err) {
              _iterator229.e(err);
            } finally {
              _iterator229.f();
            }

            return new NodeSet(newTypes);
          }
        }]);

        return NodeSet;
      }();

      var CachedNode = new WeakMap(),
          CachedInnerNode = new WeakMap(); /// A piece of syntax tree. There are two ways to approach these
      /// trees: the way they are actually stored in memory, and the
      /// convenient way.
      ///
      /// Syntax trees are stored as a tree of `Tree` and `TreeBuffer`
      /// objects. By packing detail information into `TreeBuffer` leaf
      /// nodes, the representation is made a lot more memory-efficient.
      ///
      /// However, when you want to actually work with tree nodes, this
      /// representation is very awkward, so most client code will want to
      /// use the [`TreeCursor`](#common.TreeCursor) or
      /// [`SyntaxNode`](#common.SyntaxNode) interface instead, which provides
      /// a view on some part of this data structure, and can be used to
      /// move around to adjacent nodes.

      var Tree = /*#__PURE__*/function () {
        /// Construct a new tree. See also [`Tree.build`](#common.Tree^build).
        function Tree( /// The type of the top node.
        type, /// This node's child nodes.
        children, /// The positions (offsets relative to the start of this tree) of
        /// the children.
        positions, /// The total length of this tree
        length, /// Per-node [node props](#common.NodeProp) to associate with this node.
        props) {
          _classCallCheck(this, Tree);

          this.type = type;
          this.children = children;
          this.positions = positions;
          this.length = length; /// @internal

          this.props = null;

          if (props && props.length) {
            this.props = Object.create(null);

            var _iterator231 = _createForOfIteratorHelper(props),
                _step231;

            try {
              for (_iterator231.s(); !(_step231 = _iterator231.n()).done;) {
                var _step231$value = _slicedToArray(_step231.value, 2),
                    prop = _step231$value[0],
                    value = _step231$value[1];

                this.props[typeof prop == "number" ? prop : prop.id] = value;
              }
            } catch (err) {
              _iterator231.e(err);
            } finally {
              _iterator231.f();
            }
          }
        } /// @internal


        _createClass(Tree, [{
          key: "toString",
          value: function toString() {
            var mounted = this.prop(NodeProp.mounted);
            if (mounted && !mounted.overlay) return mounted.tree.toString();
            var children = "";

            var _iterator232 = _createForOfIteratorHelper(this.children),
                _step232;

            try {
              for (_iterator232.s(); !(_step232 = _iterator232.n()).done;) {
                var ch = _step232.value;
                var str = ch.toString();

                if (str) {
                  if (children) children += ",";
                  children += str;
                }
              }
            } catch (err) {
              _iterator232.e(err);
            } finally {
              _iterator232.f();
            }

            return !this.type.name ? children : (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (children.length ? "(" + children + ")" : "");
          } /// Get a [tree cursor](#common.TreeCursor) rooted at this tree. When
          /// `pos` is given, the cursor is [moved](#common.TreeCursor.moveTo)
          /// to the given position and side.

        }, {
          key: "cursor",
          value: function cursor(pos) {
            var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var scope = pos != null && CachedNode.get(this) || this.topNode;
            var cursor = new TreeCursor(scope);

            if (pos != null) {
              cursor.moveTo(pos, side);
              CachedNode.set(this, cursor._tree);
            }

            return cursor;
          } /// Get a [tree cursor](#common.TreeCursor) that, unlike regular
          /// cursors, doesn't skip through
          /// [anonymous](#common.NodeType.isAnonymous) nodes and doesn't
          /// automatically enter mounted nodes.

        }, {
          key: "fullCursor",
          value: function fullCursor() {
            return new TreeCursor(this.topNode, 1
            /* Full */
            );
          } /// Get a [syntax node](#common.SyntaxNode) object for the top of the
          /// tree.

        }, {
          key: "topNode",
          get: function get() {
            return new TreeNode(this, 0, 0, null);
          } /// Get the [syntax node](#common.SyntaxNode) at the given position.
          /// If `side` is -1, this will move into nodes that end at the
          /// position. If 1, it'll move into nodes that start at the
          /// position. With 0, it'll only enter nodes that cover the position
          /// from both sides.

        }, {
          key: "resolve",
          value: function resolve(pos) {
            var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);
            CachedNode.set(this, node);
            return node;
          } /// Like [`resolve`](#common.Tree.resolve), but will enter
          /// [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
          /// pointing into the innermost overlaid tree at the given position
          /// (with parent links going through all parent structure, including
          /// the host trees).

        }, {
          key: "resolveInner",
          value: function resolveInner(pos) {
            var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);
            CachedInnerNode.set(this, node);
            return node;
          } /// Iterate over the tree and its children, calling `enter` for any
          /// node that touches the `from`/`to` region (if given) before
          /// running over such a node's children, and `leave` (if given) when
          /// leaving the node. When `enter` returns `false`, that node will
          /// not have its children iterated over (or `leave` called).

        }, {
          key: "iterate",
          value: function iterate(spec) {
            var enter = spec.enter,
                leave = spec.leave,
                _spec$from = spec.from,
                from = _spec$from === void 0 ? 0 : _spec$from,
                _spec$to2 = spec.to,
                to = _spec$to2 === void 0 ? this.length : _spec$to2;

            for (var c = this.cursor(), get = function get() {
              return c.node;
            };;) {
              var mustLeave = false;

              if (c.from <= to && c.to >= from && (c.type.isAnonymous || enter(c.type, c.from, c.to, get) !== false)) {
                if (c.firstChild()) continue;
                if (!c.type.isAnonymous) mustLeave = true;
              }

              for (;;) {
                if (mustLeave && leave) leave(c.type, c.from, c.to, get);
                mustLeave = c.type.isAnonymous;
                if (c.nextSibling()) break;
                if (!c.parent()) return;
                mustLeave = true;
              }
            }
          } /// Get the value of the given [node prop](#common.NodeProp) for this
          /// node. Works with both per-node and per-type props.

        }, {
          key: "prop",
          value: function prop(_prop2) {
            return !_prop2.perNode ? this.type.prop(_prop2) : this.props ? this.props[_prop2.id] : undefined;
          } /// Returns the node's [per-node props](#common.NodeProp.perNode) in a
          /// format that can be passed to the [`Tree`](#common.Tree)
          /// constructor.

        }, {
          key: "propValues",
          get: function get() {
            var result = [];
            if (this.props) for (var id in this.props) {
              result.push([+id, this.props[id]]);
            }
            return result;
          } /// Balance the direct children of this tree, producing a copy of
          /// which may have children grouped into subtrees with type
          /// [`NodeType.none`](#common.NodeType^none).

        }, {
          key: "balance",
          value: function balance() {
            var _this127 = this;

            var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            return this.children.length <= 8
            /* BranchFactor */
            ? this : balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, function (children, positions, length) {
              return new Tree(_this127.type, children, positions, length, _this127.propValues);
            }, config.makeTree || function (children, positions, length) {
              return new Tree(NodeType.none, children, positions, length);
            });
          } /// Build a tree from a postfix-ordered buffer of node information,
          /// or a cursor over such a buffer.

        }], [{
          key: "build",
          value: function build(data) {
            return buildTree(data);
          }
        }]);

        return Tree;
      }(); /// The empty tree


      Tree.empty = new Tree(NodeType.none, [], [], 0);

      var FlatBufferCursor = /*#__PURE__*/function () {
        function FlatBufferCursor(buffer, index) {
          _classCallCheck(this, FlatBufferCursor);

          this.buffer = buffer;
          this.index = index;
        }

        _createClass(FlatBufferCursor, [{
          key: "id",
          get: function get() {
            return this.buffer[this.index - 4];
          }
        }, {
          key: "start",
          get: function get() {
            return this.buffer[this.index - 3];
          }
        }, {
          key: "end",
          get: function get() {
            return this.buffer[this.index - 2];
          }
        }, {
          key: "size",
          get: function get() {
            return this.buffer[this.index - 1];
          }
        }, {
          key: "pos",
          get: function get() {
            return this.index;
          }
        }, {
          key: "next",
          value: function next() {
            this.index -= 4;
          }
        }, {
          key: "fork",
          value: function fork() {
            return new FlatBufferCursor(this.buffer, this.index);
          }
        }]);

        return FlatBufferCursor;
      }(); /// Tree buffers contain (type, start, end, endIndex) quads for each
      /// node. In such a buffer, nodes are stored in prefix order (parents
      /// before children, with the endIndex of the parent indicating which
      /// children belong to it)


      var TreeBuffer = /*#__PURE__*/function () {
        /// Create a tree buffer.
        function TreeBuffer( /// The buffer's content.
        buffer, /// The total length of the group of nodes in the buffer.
        length, /// The node set used in this buffer.
        set) {
          _classCallCheck(this, TreeBuffer);

          this.buffer = buffer;
          this.length = length;
          this.set = set;
        } /// @internal


        _createClass(TreeBuffer, [{
          key: "type",
          get: function get() {
            return NodeType.none;
          } /// @internal

        }, {
          key: "toString",
          value: function toString() {
            var result = [];

            for (var index = 0; index < this.buffer.length;) {
              result.push(this.childString(index));
              index = this.buffer[index + 3];
            }

            return result.join(",");
          } /// @internal

        }, {
          key: "childString",
          value: function childString(index) {
            var id = this.buffer[index],
                endIndex = this.buffer[index + 3];
            var type = this.set.types[id],
                result = type.name;
            if (/\W/.test(result) && !type.isError) result = JSON.stringify(result);
            index += 4;
            if (endIndex == index) return result;
            var children = [];

            while (index < endIndex) {
              children.push(this.childString(index));
              index = this.buffer[index + 3];
            }

            return result + "(" + children.join(",") + ")";
          } /// @internal

        }, {
          key: "findChild",
          value: function findChild(startIndex, endIndex, dir, pos, side) {
            var buffer = this.buffer,
                pick = -1;

            for (var _i169 = startIndex; _i169 != endIndex; _i169 = buffer[_i169 + 3]) {
              if (checkSide(side, pos, buffer[_i169 + 1], buffer[_i169 + 2])) {
                pick = _i169;
                if (dir > 0) break;
              }
            }

            return pick;
          } /// @internal

        }, {
          key: "slice",
          value: function slice(startI, endI, from, to) {
            var b = this.buffer;
            var copy = new Uint16Array(endI - startI);

            for (var _i170 = startI, j = 0; _i170 < endI;) {
              copy[j++] = b[_i170++];
              copy[j++] = b[_i170++] - from;
              copy[j++] = b[_i170++] - from;
              copy[j++] = b[_i170++] - startI;
            }

            return new TreeBuffer(copy, to - from, this.set);
          }
        }]);

        return TreeBuffer;
      }();

      function checkSide(side, pos, from, to) {
        switch (side) {
          case -2
          /* Before */
          :
            return from < pos;

          case -1
          /* AtOrBefore */
          :
            return to >= pos && from < pos;

          case 0
          /* Around */
          :
            return from < pos && to > pos;

          case 1
          /* AtOrAfter */
          :
            return from <= pos && to > pos;

          case 2
          /* After */
          :
            return to > pos;

          case 4
          /* DontCare */
          :
            return true;
        }
      }

      function _enterUnfinishedNodesBefore(node, pos) {
        var scan = node.childBefore(pos);

        while (scan) {
          var last = scan.lastChild;
          if (!last || last.to != scan.to) break;

          if (last.type.isError && last.from == last.to) {
            node = scan;
            scan = last.prevSibling;
          } else {
            scan = last;
          }
        }

        return node;
      }

      function resolveNode(node, pos, side, overlays) {
        var _a; // Move up to a node that actually holds the position, if possible


        while (node.from == node.to || (side < 1 ? node.from >= pos : node.from > pos) || (side > -1 ? node.to <= pos : node.to < pos)) {
          var parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;
          if (!parent) return node;
          node = parent;
        } // Must go up out of overlays when those do not overlap with pos


        if (overlays) for (var scan = node, _parent2 = scan.parent; _parent2; scan = _parent2, _parent2 = scan.parent) {
          if (scan instanceof TreeNode && scan.index < 0 && ((_a = _parent2.enter(pos, side, true)) === null || _a === void 0 ? void 0 : _a.from) != scan.from) node = _parent2;
        }

        for (;;) {
          var inner = node.enter(pos, side, overlays);
          if (!inner) return node;
          node = inner;
        }
      }

      var TreeNode = /*#__PURE__*/function () {
        function TreeNode(node, _from, // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)
        index, _parent) {
          _classCallCheck(this, TreeNode);

          this.node = node;
          this._from = _from;
          this.index = index;
          this._parent = _parent;
        }

        _createClass(TreeNode, [{
          key: "type",
          get: function get() {
            return this.node.type;
          }
        }, {
          key: "name",
          get: function get() {
            return this.node.type.name;
          }
        }, {
          key: "from",
          get: function get() {
            return this._from;
          }
        }, {
          key: "to",
          get: function get() {
            return this._from + this.node.length;
          }
        }, {
          key: "nextChild",
          value: function nextChild(i, dir, pos, side) {
            var mode = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;

            for (var parent = this;;) {
              for (var _parent$node = parent.node, children = _parent$node.children, positions = _parent$node.positions, e = dir > 0 ? children.length : -1; i != e; i += dir) {
                var next = children[i],
                    start = positions[i] + parent._from;
                if (!checkSide(side, pos, start, start + next.length)) continue;

                if (next instanceof TreeBuffer) {
                  if (mode & 2
                  /* NoEnterBuffer */
                  ) continue;
                  var index = next.findChild(0, next.buffer.length, dir, pos - start, side);
                  if (index > -1) return new BufferNode(new BufferContext(parent, next, i, start), null, index);
                } else if (mode & 1
                /* Full */
                || !next.type.isAnonymous || hasChild(next)) {
                  var mounted = void 0;
                  if (!(mode & 1
                  /* Full */
                  ) && next.props && (mounted = next.prop(NodeProp.mounted)) && !mounted.overlay) return new TreeNode(mounted.tree, start, i, parent);
                  var inner = new TreeNode(next, start, i, parent);
                  return mode & 1
                  /* Full */
                  || !inner.type.isAnonymous ? inner : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);
                }
              }

              if (mode & 1
              /* Full */
              || !parent.type.isAnonymous) return null;
              if (parent.index >= 0) i = parent.index + dir;else i = dir < 0 ? -1 : parent._parent.node.children.length;
              parent = parent._parent;
              if (!parent) return null;
            }
          }
        }, {
          key: "firstChild",
          get: function get() {
            return this.nextChild(0, 1, 0, 4
            /* DontCare */
            );
          }
        }, {
          key: "lastChild",
          get: function get() {
            return this.nextChild(this.node.children.length - 1, -1, 0, 4
            /* DontCare */
            );
          }
        }, {
          key: "childAfter",
          value: function childAfter(pos) {
            return this.nextChild(0, 1, pos, 2
            /* After */
            );
          }
        }, {
          key: "childBefore",
          value: function childBefore(pos) {
            return this.nextChild(this.node.children.length - 1, -1, pos, -2
            /* Before */
            );
          }
        }, {
          key: "enter",
          value: function enter(pos, side) {
            var overlays = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
            var buffers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
            var mounted;

            if (overlays && (mounted = this.node.prop(NodeProp.mounted)) && mounted.overlay) {
              var rPos = pos - this.from;

              var _iterator233 = _createForOfIteratorHelper(mounted.overlay),
                  _step233;

              try {
                for (_iterator233.s(); !(_step233 = _iterator233.n()).done;) {
                  var _step233$value = _step233.value,
                      from = _step233$value.from,
                      to = _step233$value.to;
                  if ((side > 0 ? from <= rPos : from < rPos) && (side < 0 ? to >= rPos : to > rPos)) return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);
                }
              } catch (err) {
                _iterator233.e(err);
              } finally {
                _iterator233.f();
              }
            }

            return this.nextChild(0, 1, pos, side, buffers ? 0 : 2
            /* NoEnterBuffer */
            );
          }
        }, {
          key: "nextSignificantParent",
          value: function nextSignificantParent() {
            var val = this;

            while (val.type.isAnonymous && val._parent) {
              val = val._parent;
            }

            return val;
          }
        }, {
          key: "parent",
          get: function get() {
            return this._parent ? this._parent.nextSignificantParent() : null;
          }
        }, {
          key: "nextSibling",
          get: function get() {
            return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4
            /* DontCare */
            ) : null;
          }
        }, {
          key: "prevSibling",
          get: function get() {
            return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4
            /* DontCare */
            ) : null;
          }
        }, {
          key: "cursor",
          get: function get() {
            return new TreeCursor(this);
          }
        }, {
          key: "tree",
          get: function get() {
            return this.node;
          }
        }, {
          key: "toTree",
          value: function toTree() {
            return this.node;
          }
        }, {
          key: "resolve",
          value: function resolve(pos) {
            var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            return resolveNode(this, pos, side, false);
          }
        }, {
          key: "resolveInner",
          value: function resolveInner(pos) {
            var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            return resolveNode(this, pos, side, true);
          }
        }, {
          key: "enterUnfinishedNodesBefore",
          value: function enterUnfinishedNodesBefore(pos) {
            return _enterUnfinishedNodesBefore(this, pos);
          }
        }, {
          key: "getChild",
          value: function getChild(type) {
            var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var after = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

            var r = _getChildren(this, type, before, after);

            return r.length ? r[0] : null;
          }
        }, {
          key: "getChildren",
          value: function getChildren(type) {
            var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var after = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
            return _getChildren(this, type, before, after);
          } /// @internal

        }, {
          key: "toString",
          value: function toString() {
            return this.node.toString();
          }
        }]);

        return TreeNode;
      }();

      function _getChildren(node, type, before, after) {
        var cur = node.cursor,
            result = [];
        if (!cur.firstChild()) return result;
        if (before != null) while (!cur.type.is(before)) {
          if (!cur.nextSibling()) return result;
        }

        for (;;) {
          if (after != null && cur.type.is(after)) return result;
          if (cur.type.is(type)) result.push(cur.node);
          if (!cur.nextSibling()) return after == null ? result : [];
        }
      }

      var BufferContext = /*#__PURE__*/_createClass(function BufferContext(parent, buffer, index, start) {
        _classCallCheck(this, BufferContext);

        this.parent = parent;
        this.buffer = buffer;
        this.index = index;
        this.start = start;
      });

      var BufferNode = /*#__PURE__*/function () {
        function BufferNode(context, _parent, index) {
          _classCallCheck(this, BufferNode);

          this.context = context;
          this._parent = _parent;
          this.index = index;
          this.type = context.buffer.set.types[context.buffer.buffer[index]];
        }

        _createClass(BufferNode, [{
          key: "name",
          get: function get() {
            return this.type.name;
          }
        }, {
          key: "from",
          get: function get() {
            return this.context.start + this.context.buffer.buffer[this.index + 1];
          }
        }, {
          key: "to",
          get: function get() {
            return this.context.start + this.context.buffer.buffer[this.index + 2];
          }
        }, {
          key: "child",
          value: function child(dir, pos, side) {
            var buffer = this.context.buffer;
            var index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);
            return index < 0 ? null : new BufferNode(this.context, this, index);
          }
        }, {
          key: "firstChild",
          get: function get() {
            return this.child(1, 0, 4
            /* DontCare */
            );
          }
        }, {
          key: "lastChild",
          get: function get() {
            return this.child(-1, 0, 4
            /* DontCare */
            );
          }
        }, {
          key: "childAfter",
          value: function childAfter(pos) {
            return this.child(1, pos, 2
            /* After */
            );
          }
        }, {
          key: "childBefore",
          value: function childBefore(pos) {
            return this.child(-1, pos, -2
            /* Before */
            );
          }
        }, {
          key: "enter",
          value: function enter(pos, side, overlays) {
            var buffers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
            if (!buffers) return null;
            var buffer = this.context.buffer;
            var index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);
            return index < 0 ? null : new BufferNode(this.context, this, index);
          }
        }, {
          key: "parent",
          get: function get() {
            return this._parent || this.context.parent.nextSignificantParent();
          }
        }, {
          key: "externalSibling",
          value: function externalSibling(dir) {
            return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4
            /* DontCare */
            );
          }
        }, {
          key: "nextSibling",
          get: function get() {
            var buffer = this.context.buffer;
            var after = buffer.buffer[this.index + 3];
            if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length)) return new BufferNode(this.context, this._parent, after);
            return this.externalSibling(1);
          }
        }, {
          key: "prevSibling",
          get: function get() {
            var buffer = this.context.buffer;
            var parentStart = this._parent ? this._parent.index + 4 : 0;
            if (this.index == parentStart) return this.externalSibling(-1);
            return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4
            /* DontCare */
            ));
          }
        }, {
          key: "cursor",
          get: function get() {
            return new TreeCursor(this);
          }
        }, {
          key: "tree",
          get: function get() {
            return null;
          }
        }, {
          key: "toTree",
          value: function toTree() {
            var children = [],
                positions = [];
            var buffer = this.context.buffer;
            var startI = this.index + 4,
                endI = buffer.buffer[this.index + 3];

            if (endI > startI) {
              var from = buffer.buffer[this.index + 1],
                  to = buffer.buffer[this.index + 2];
              children.push(buffer.slice(startI, endI, from, to));
              positions.push(0);
            }

            return new Tree(this.type, children, positions, this.to - this.from);
          }
        }, {
          key: "resolve",
          value: function resolve(pos) {
            var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            return resolveNode(this, pos, side, false);
          }
        }, {
          key: "resolveInner",
          value: function resolveInner(pos) {
            var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            return resolveNode(this, pos, side, true);
          }
        }, {
          key: "enterUnfinishedNodesBefore",
          value: function enterUnfinishedNodesBefore(pos) {
            return _enterUnfinishedNodesBefore(this, pos);
          } /// @internal

        }, {
          key: "toString",
          value: function toString() {
            return this.context.buffer.childString(this.index);
          }
        }, {
          key: "getChild",
          value: function getChild(type) {
            var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var after = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

            var r = _getChildren(this, type, before, after);

            return r.length ? r[0] : null;
          }
        }, {
          key: "getChildren",
          value: function getChildren(type) {
            var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var after = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
            return _getChildren(this, type, before, after);
          }
        }]);

        return BufferNode;
      }(); /// A tree cursor object focuses on a given node in a syntax tree, and
      /// allows you to move to adjacent nodes.


      var TreeCursor = /*#__PURE__*/function () {
        /// @internal
        function TreeCursor(node) {
          var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

          _classCallCheck(this, TreeCursor);

          this.mode = mode;
          this.buffer = null;
          this.stack = [];
          this.index = 0;
          this.bufferNode = null;

          if (node instanceof TreeNode) {
            this.yieldNode(node);
          } else {
            this._tree = node.context.parent;
            this.buffer = node.context;

            for (var n = node._parent; n; n = n._parent) {
              this.stack.unshift(n.index);
            }

            this.bufferNode = node;
            this.yieldBuf(node.index);
          }
        } /// Shorthand for `.type.name`.


        _createClass(TreeCursor, [{
          key: "name",
          get: function get() {
            return this.type.name;
          }
        }, {
          key: "yieldNode",
          value: function yieldNode(node) {
            if (!node) return false;
            this._tree = node;
            this.type = node.type;
            this.from = node.from;
            this.to = node.to;
            return true;
          }
        }, {
          key: "yieldBuf",
          value: function yieldBuf(index, type) {
            this.index = index;
            var _this$buffer = this.buffer,
                start = _this$buffer.start,
                buffer = _this$buffer.buffer;
            this.type = type || buffer.set.types[buffer.buffer[index]];
            this.from = start + buffer.buffer[index + 1];
            this.to = start + buffer.buffer[index + 2];
            return true;
          }
        }, {
          key: "yield",
          value: function _yield(node) {
            if (!node) return false;

            if (node instanceof TreeNode) {
              this.buffer = null;
              return this.yieldNode(node);
            }

            this.buffer = node.context;
            return this.yieldBuf(node.index, node.type);
          } /// @internal

        }, {
          key: "toString",
          value: function toString() {
            return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
          } /// @internal

        }, {
          key: "enterChild",
          value: function enterChild(dir, pos, side) {
            if (!this.buffer) return this["yield"](this._tree.nextChild(dir < 0 ? this._tree.node.children.length - 1 : 0, dir, pos, side, this.mode));
            var buffer = this.buffer.buffer;
            var index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);
            if (index < 0) return false;
            this.stack.push(this.index);
            return this.yieldBuf(index);
          } /// Move the cursor to this node's first child. When this returns
          /// false, the node has no child, and the cursor has not been moved.

        }, {
          key: "firstChild",
          value: function firstChild() {
            return this.enterChild(1, 0, 4
            /* DontCare */
            );
          } /// Move the cursor to this node's last child.

        }, {
          key: "lastChild",
          value: function lastChild() {
            return this.enterChild(-1, 0, 4
            /* DontCare */
            );
          } /// Move the cursor to the first child that ends after `pos`.

        }, {
          key: "childAfter",
          value: function childAfter(pos) {
            return this.enterChild(1, pos, 2
            /* After */
            );
          } /// Move to the last child that starts before `pos`.

        }, {
          key: "childBefore",
          value: function childBefore(pos) {
            return this.enterChild(-1, pos, -2
            /* Before */
            );
          } /// Move the cursor to the child around `pos`. If side is -1 the
          /// child may end at that position, when 1 it may start there. This
          /// will also enter [overlaid](#common.MountedTree.overlay)
          /// [mounted](#common.NodeProp^mounted) trees unless `overlays` is
          /// set to false.

        }, {
          key: "enter",
          value: function enter(pos, side) {
            var overlays = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
            var buffers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
            if (!this.buffer) return this["yield"](this._tree.enter(pos, side, overlays && !(this.mode & 1
            /* Full */
            ), buffers));
            return buffers ? this.enterChild(1, pos, side) : false;
          } /// Move to the node's parent node, if this isn't the top node.

        }, {
          key: "parent",
          value: function parent() {
            if (!this.buffer) return this.yieldNode(this.mode & 1
            /* Full */
            ? this._tree._parent : this._tree.parent);
            if (this.stack.length) return this.yieldBuf(this.stack.pop());
            var parent = this.mode & 1
            /* Full */
            ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
            this.buffer = null;
            return this.yieldNode(parent);
          } /// @internal

        }, {
          key: "sibling",
          value: function sibling(dir) {
            if (!this.buffer) return !this._tree._parent ? false : this["yield"](this._tree.index < 0 ? null : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4
            /* DontCare */
            , this.mode));
            var buffer = this.buffer.buffer,
                d = this.stack.length - 1;

            if (dir < 0) {
              var parentStart = d < 0 ? 0 : this.stack[d] + 4;
              if (this.index != parentStart) return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4
              /* DontCare */
              ));
            } else {
              var after = buffer.buffer[this.index + 3];
              if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3])) return this.yieldBuf(after);
            }

            return d < 0 ? this["yield"](this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4
            /* DontCare */
            , this.mode)) : false;
          } /// Move to this node's next sibling, if any.

        }, {
          key: "nextSibling",
          value: function nextSibling() {
            return this.sibling(1);
          } /// Move to this node's previous sibling, if any.

        }, {
          key: "prevSibling",
          value: function prevSibling() {
            return this.sibling(-1);
          }
        }, {
          key: "atLastNode",
          value: function atLastNode(dir) {
            var index,
                parent,
                buffer = this.buffer;

            if (buffer) {
              if (dir > 0) {
                if (this.index < buffer.buffer.buffer.length) return false;
              } else {
                for (var _i171 = 0; _i171 < this.index; _i171++) {
                  if (buffer.buffer.buffer[_i171 + 3] < this.index) return false;
                }
              }

              index = buffer.index;
              parent = buffer.parent;
            } else {
              var _this$_tree = this._tree;
              index = _this$_tree.index;
              parent = _this$_tree._parent;
            }

            for (; parent; _parent3 = parent, index = _parent3.index, parent = _parent3._parent, _parent3) {
              var _parent3;

              if (index > -1) for (var _i172 = index + dir, e = dir < 0 ? -1 : parent.node.children.length; _i172 != e; _i172 += dir) {
                var child = parent.node.children[_i172];
                if (this.mode & 1
                /* Full */
                || child instanceof TreeBuffer || !child.type.isAnonymous || hasChild(child)) return false;
              }
            }

            return true;
          }
        }, {
          key: "move",
          value: function move(dir, enter) {
            if (enter && this.enterChild(dir, 0, 4
            /* DontCare */
            )) return true;

            for (;;) {
              if (this.sibling(dir)) return true;
              if (this.atLastNode(dir) || !this.parent()) return false;
            }
          } /// Move to the next node in a
          /// [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR))
          /// traversal, going from a node to its first child or, if the
          /// current node is empty or `enter` is false, its next sibling or
          /// the next sibling of the first parent node that has one.

        }, {
          key: "next",
          value: function next() {
            var enter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
            return this.move(1, enter);
          } /// Move to the next node in a last-to-first pre-order traveral. A
          /// node is followed by its last child or, if it has none, its
          /// previous sibling or the previous sibling of the first parent
          /// node that has one.

        }, {
          key: "prev",
          value: function prev() {
            var enter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
            return this.move(-1, enter);
          } /// Move the cursor to the innermost node that covers `pos`. If
          /// `side` is -1, it will enter nodes that end at `pos`. If it is 1,
          /// it will enter nodes that start at `pos`.

        }, {
          key: "moveTo",
          value: function moveTo(pos) {
            var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            // Move up to a node that actually holds the position, if possible
            while (this.from == this.to || (side < 1 ? this.from >= pos : this.from > pos) || (side > -1 ? this.to <= pos : this.to < pos)) {
              if (!this.parent()) break;
            } // Then scan down into child nodes as far as possible


            while (this.enterChild(1, pos, side)) {}

            return this;
          } /// Get a [syntax node](#common.SyntaxNode) at the cursor's current
          /// position.

        }, {
          key: "node",
          get: function get() {
            if (!this.buffer) return this._tree;
            var cache = this.bufferNode,
                result = null,
                depth = 0;

            if (cache && cache.context == this.buffer) {
              scan: for (var index = this.index, d = this.stack.length; d >= 0;) {
                for (var c = cache; c; c = c._parent) {
                  if (c.index == index) {
                    if (index == this.index) return c;
                    result = c;
                    depth = d + 1;
                    break scan;
                  }
                }

                index = this.stack[--d];
              }
            }

            for (var _i173 = depth; _i173 < this.stack.length; _i173++) {
              result = new BufferNode(this.buffer, result, this.stack[_i173]);
            }

            return this.bufferNode = new BufferNode(this.buffer, result, this.index);
          } /// Get the [tree](#common.Tree) that represents the current node, if
          /// any. Will return null when the node is in a [tree
          /// buffer](#common.TreeBuffer).

        }, {
          key: "tree",
          get: function get() {
            return this.buffer ? null : this._tree.node;
          }
        }]);

        return TreeCursor;
      }();

      function hasChild(tree) {
        return tree.children.some(function (ch) {
          return ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch);
        });
      }

      function buildTree(data) {
        var _a;

        var buffer = data.buffer,
            nodeSet = data.nodeSet,
            _data$maxBufferLength = data.maxBufferLength,
            maxBufferLength = _data$maxBufferLength === void 0 ? DefaultBufferLength : _data$maxBufferLength,
            _data$reused = data.reused,
            reused = _data$reused === void 0 ? [] : _data$reused,
            _data$minRepeatType = data.minRepeatType,
            minRepeatType = _data$minRepeatType === void 0 ? nodeSet.types.length : _data$minRepeatType;
        var cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;
        var types = nodeSet.types;
        var contextHash = 0,
            lookAhead = 0;

        function takeNode(parentStart, minPos, children, positions, inRepeat) {
          var id = cursor.id,
              start = cursor.start,
              end = cursor.end,
              size = cursor.size;
          var lookAheadAtStart = lookAhead;

          while (size < 0) {
            cursor.next();

            if (size == -1
            /* Reuse */
            ) {
              var _node = reused[id];
              children.push(_node);
              positions.push(start - parentStart);
              return;
            } else if (size == -3
            /* ContextChange */
            ) {
              // Context change
              contextHash = id;
              return;
            } else if (size == -4
            /* LookAhead */
            ) {
              lookAhead = id;
              return;
            } else {
              throw new RangeError("Unrecognized record size: ".concat(size));
            }
          }

          var type = types[id],
              node,
              buffer;
          var startPos = start - parentStart;

          if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {
            // Small enough for a buffer, and no reused nodes inside
            var _data = new Uint16Array(buffer.size - buffer.skip);

            var endPos = cursor.pos - buffer.size,
                index = _data.length;

            while (cursor.pos > endPos) {
              index = copyToBuffer(buffer.start, _data, index);
            }

            node = new TreeBuffer(_data, end - buffer.start, nodeSet);
            startPos = buffer.start - parentStart;
          } else {
            // Make it a node
            var _endPos = cursor.pos - size;

            cursor.next();
            var localChildren = [],
                localPositions = [];
            var localInRepeat = id >= minRepeatType ? id : -1;
            var lastGroup = 0,
                lastEnd = end;

            while (cursor.pos > _endPos) {
              if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {
                if (cursor.end <= lastEnd - maxBufferLength) {
                  makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);
                  lastGroup = localChildren.length;
                  lastEnd = cursor.end;
                }

                cursor.next();
              } else {
                takeNode(start, _endPos, localChildren, localPositions, localInRepeat);
              }
            }

            if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length) makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);
            localChildren.reverse();
            localPositions.reverse();

            if (localInRepeat > -1 && lastGroup > 0) {
              var make = makeBalanced(type);
              node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);
            } else {
              node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);
            }
          }

          children.push(node);
          positions.push(startPos);
        }

        function makeBalanced(type) {
          return function (children, positions, length) {
            var lookAhead = 0,
                lastI = children.length - 1,
                last,
                lookAheadProp;

            if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {
              if (!lastI && last.type == type && last.length == length) return last;
              if (lookAheadProp = last.prop(NodeProp.lookAhead)) lookAhead = positions[lastI] + last.length + lookAheadProp;
            }

            return makeTree(type, children, positions, length, lookAhead);
          };
        }

        function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead) {
          var localChildren = [],
              localPositions = [];

          while (children.length > i) {
            localChildren.push(children.pop());
            localPositions.push(positions.pop() + base - from);
          }

          children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to));
          positions.push(from - base);
        }

        function makeTree(type, children, positions, length) {
          var lookAhead = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
          var props = arguments.length > 5 ? arguments[5] : undefined;

          if (contextHash) {
            var pair = [NodeProp.contextHash, contextHash];
            props = props ? [pair].concat(props) : [pair];
          }

          if (lookAhead > 25) {
            var _pair = [NodeProp.lookAhead, lookAhead];
            props = props ? [_pair].concat(props) : [_pair];
          }

          return new Tree(type, children, positions, length, props);
        }

        function findBufferSize(maxSize, inRepeat) {
          // Scan through the buffer to find previous siblings that fit
          // together in a TreeBuffer, and don't contain any reused nodes
          // (which can't be stored in a buffer).
          // If `inRepeat` is > -1, ignore node boundaries of that type for
          // nesting, but make sure the end falls either at the start
          // (`maxSize`) or before such a node.
          var fork = cursor.fork();
          var size = 0,
              start = 0,
              skip = 0,
              minStart = fork.end - maxBufferLength;
          var result = {
            size: 0,
            start: 0,
            skip: 0
          };

          scan: for (var minPos = fork.pos - maxSize; fork.pos > minPos;) {
            var _nodeSize = fork.size; // Pretend nested repeat nodes of the same type don't exist

            if (fork.id == inRepeat && _nodeSize >= 0) {
              // Except that we store the current state as a valid return
              // value.
              result.size = size;
              result.start = start;
              result.skip = skip;
              skip += 4;
              size += 4;
              fork.next();
              continue;
            }

            var startPos = fork.pos - _nodeSize;
            if (_nodeSize < 0 || startPos < minPos || fork.start < minStart) break;
            var localSkipped = fork.id >= minRepeatType ? 4 : 0;
            var nodeStart = fork.start;
            fork.next();

            while (fork.pos > startPos) {
              if (fork.size < 0) {
                if (fork.size == -3
                /* ContextChange */
                ) localSkipped += 4;else break scan;
              } else if (fork.id >= minRepeatType) {
                localSkipped += 4;
              }

              fork.next();
            }

            start = nodeStart;
            size += _nodeSize;
            skip += localSkipped;
          }

          if (inRepeat < 0 || size == maxSize) {
            result.size = size;
            result.start = start;
            result.skip = skip;
          }

          return result.size > 4 ? result : undefined;
        }

        function copyToBuffer(bufferStart, buffer, index) {
          var id = cursor.id,
              start = cursor.start,
              end = cursor.end,
              size = cursor.size;
          cursor.next();

          if (size >= 0 && id < minRepeatType) {
            var startIndex = index;

            if (size > 4) {
              var endPos = cursor.pos - (size - 4);

              while (cursor.pos > endPos) {
                index = copyToBuffer(bufferStart, buffer, index);
              }
            }

            buffer[--index] = startIndex;
            buffer[--index] = end - bufferStart;
            buffer[--index] = start - bufferStart;
            buffer[--index] = id;
          } else if (size == -3
          /* ContextChange */
          ) {
            contextHash = id;
          } else if (size == -4
          /* LookAhead */
          ) {
            lookAhead = id;
          }

          return index;
        }

        var children = [],
            positions = [];

        while (cursor.pos > 0) {
          takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1);
        }

        var length = (_a = data.length) !== null && _a !== void 0 ? _a : children.length ? positions[0] + children[0].length : 0;
        return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);
      }

      var nodeSizeCache = new WeakMap();

      function nodeSize(balanceType, node) {
        if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType) return 1;
        var size = nodeSizeCache.get(node);

        if (size == null) {
          size = 1;

          var _iterator234 = _createForOfIteratorHelper(node.children),
              _step234;

          try {
            for (_iterator234.s(); !(_step234 = _iterator234.n()).done;) {
              var child = _step234.value;

              if (child.type != balanceType || !(child instanceof Tree)) {
                size = 1;
                break;
              }

              size += nodeSize(balanceType, child);
            }
          } catch (err) {
            _iterator234.e(err);
          } finally {
            _iterator234.f();
          }

          nodeSizeCache.set(node, size);
        }

        return size;
      }

      function balanceRange( // The type the balanced tree's inner nodes.
      balanceType, // The direct children and their positions
      children, positions, // The index range in children/positions to use
      from, to, // The start position of the nodes, relative to their parent.
      start, // Length of the outer node
      length, // Function to build the top node of the balanced tree
      mkTop, // Function to build internal nodes for the balanced tree
      mkTree) {
        var total = 0;

        for (var _i174 = from; _i174 < to; _i174++) {
          total += nodeSize(balanceType, children[_i174]);
        }

        var maxChild = Math.ceil(total * 1.5 / 8
        /* BranchFactor */
        );
        var localChildren = [],
            localPositions = [];

        function divide(children, positions, from, to, offset) {
          for (var _i175 = from; _i175 < to;) {
            var groupFrom = _i175,
                groupStart = positions[_i175],
                groupSize = nodeSize(balanceType, children[_i175]);
            _i175++;

            for (; _i175 < to; _i175++) {
              var nextSize = nodeSize(balanceType, children[_i175]);
              if (groupSize + nextSize >= maxChild) break;
              groupSize += nextSize;
            }

            if (_i175 == groupFrom + 1) {
              if (groupSize > maxChild) {
                var only = children[groupFrom]; // Only trees can have a size > 1

                divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);
                continue;
              }

              localChildren.push(children[groupFrom]);
            } else {
              var _length = positions[_i175 - 1] + children[_i175 - 1].length - groupStart;

              localChildren.push(balanceRange(balanceType, children, positions, groupFrom, _i175, groupStart, _length, null, mkTree));
            }

            localPositions.push(groupStart + offset - start);
          }
        }

        divide(children, positions, from, to, 0);
        return (mkTop || mkTree)(localChildren, localPositions, length);
      } /// Tree fragments are used during [incremental
      /// parsing](#common.Parser.startParse) to track parts of old trees
      /// that can be reused in a new parse. An array of fragments is used
      /// to track regions of an old tree whose nodes might be reused in new
      /// parses. Use the static
      /// [`applyChanges`](#common.TreeFragment^applyChanges) method to
      /// update fragments for document changes.


      var TreeFragment = /*#__PURE__*/function () {
        /// Construct a tree fragment.
        function TreeFragment( /// The start of the unchanged range pointed to by this fragment.
        /// This refers to an offset in the _updated_ document (as opposed
        /// to the original tree).
        from, /// The end of the unchanged range.
        to, /// The tree that this fragment is based on.
        tree, /// The offset between the fragment's tree and the document that
        /// this fragment can be used against. Add this when going from
        /// document to tree positions, subtract it to go from tree to
        /// document positions.
        offset) {
          var openStart = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
          var openEnd = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;

          _classCallCheck(this, TreeFragment);

          this.from = from;
          this.to = to;
          this.tree = tree;
          this.offset = offset;
          this.open = (openStart ? 1
          /* Start */
          : 0) | (openEnd ? 2
          /* End */
          : 0);
        } /// Whether the start of the fragment represents the start of a
        /// parse, or the end of a change. (In the second case, it may not
        /// be safe to reuse some nodes at the start, depending on the
        /// parsing algorithm.)


        _createClass(TreeFragment, [{
          key: "openStart",
          get: function get() {
            return (this.open & 1
            /* Start */
            ) > 0;
          } /// Whether the end of the fragment represents the end of a
          /// full-document parse, or the start of a change.

        }, {
          key: "openEnd",
          get: function get() {
            return (this.open & 2
            /* End */
            ) > 0;
          } /// Create a set of fragments from a freshly parsed tree, or update
          /// an existing set of fragments by replacing the ones that overlap
          /// with a tree with content from the new tree. When `partial` is
          /// true, the parse is treated as incomplete, and the resulting
          /// fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
          /// true.

        }], [{
          key: "addTree",
          value: function addTree(tree) {
            var fragments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
            var partial = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            var result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];

            var _iterator235 = _createForOfIteratorHelper(fragments),
                _step235;

            try {
              for (_iterator235.s(); !(_step235 = _iterator235.n()).done;) {
                var f = _step235.value;
                if (f.to > tree.length) result.push(f);
              }
            } catch (err) {
              _iterator235.e(err);
            } finally {
              _iterator235.f();
            }

            return result;
          } /// Apply a set of edits to an array of fragments, removing or
          /// splitting fragments as necessary to remove edited ranges, and
          /// adjusting offsets for fragments that moved.

        }, {
          key: "applyChanges",
          value: function applyChanges(fragments, changes) {
            var minGap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 128;
            if (!changes.length) return fragments;
            var result = [];
            var fI = 1,
                nextF = fragments.length ? fragments[0] : null;

            for (var cI = 0, pos = 0, off = 0;; cI++) {
              var nextC = cI < changes.length ? changes[cI] : null;
              var nextPos = nextC ? nextC.fromA : 1e9;
              if (nextPos - pos >= minGap) while (nextF && nextF.from < nextPos) {
                var cut = nextF;

                if (pos >= cut.from || nextPos <= cut.to || off) {
                  var fFrom = Math.max(cut.from, pos) - off,
                      fTo = Math.min(cut.to, nextPos) - off;
                  cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);
                }

                if (cut) result.push(cut);
                if (nextF.to > nextPos) break;
                nextF = fI < fragments.length ? fragments[fI++] : null;
              }
              if (!nextC) break;
              pos = nextC.toA;
              off = nextC.toA - nextC.toB;
            }

            return result;
          }
        }]);

        return TreeFragment;
      }(); /// A superclass that parsers should extend.


      var Parser = /*#__PURE__*/function () {
        function Parser() {
          _classCallCheck(this, Parser);
        }

        _createClass(Parser, [{
          key: "startParse",
          value: /// Start a parse, returning a [partial parse](#common.PartialParse)
          /// object. [`fragments`](#common.TreeFragment) can be passed in to
          /// make the parse incremental.
          ///
          /// By default, the entire input is parsed. You can pass `ranges`,
          /// which should be a sorted array of non-empty, non-overlapping
          /// ranges, to parse only those ranges. The tree returned in that
          /// case will start at `ranges[0].from`.
          function startParse(input, fragments, ranges) {
            if (typeof input == "string") input = new StringInput(input);
            ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map(function (r) {
              return new Range(r.from, r.to);
            }) : [new Range(0, 0)];
            return this.createParse(input, fragments || [], ranges);
          } /// Run a full parse, returning the resulting tree.

        }, {
          key: "parse",
          value: function parse(input, fragments, ranges) {
            var parse = this.startParse(input, fragments, ranges);

            for (;;) {
              var done = parse.advance();
              if (done) return done;
            }
          }
        }]);

        return Parser;
      }();

      var StringInput = /*#__PURE__*/function () {
        function StringInput(string) {
          _classCallCheck(this, StringInput);

          this.string = string;
        }

        _createClass(StringInput, [{
          key: "length",
          get: function get() {
            return this.string.length;
          }
        }, {
          key: "chunk",
          value: function chunk(from) {
            return this.string.slice(from);
          }
        }, {
          key: "lineChunks",
          get: function get() {
            return false;
          }
        }, {
          key: "read",
          value: function read(from, to) {
            return this.string.slice(from, to);
          }
        }]);

        return StringInput;
      }(); /// Create a parse wrapper that, after the inner parse completes,
      /// scans its tree for mixed language regions with the `nest`
      /// function, runs the resulting [inner parses](#common.NestedParse),
      /// and then [mounts](#common.NodeProp^mounted) their results onto the
      /// tree.
      ///
      /// The nesting function is passed a cursor to provide context for a
      /// node, but _should not_ move that cursor, only inspect its
      /// properties and optionally access its
      /// [node object](#common.TreeCursor.node).


      function parseMixed(nest) {
        return function (parse, input, fragments, ranges) {
          return new MixedParse(parse, nest, input, fragments, ranges);
        };
      }

      var InnerParse = /*#__PURE__*/_createClass(function InnerParse(parser, parse, overlay, target, ranges) {
        _classCallCheck(this, InnerParse);

        this.parser = parser;
        this.parse = parse;
        this.overlay = overlay;
        this.target = target;
        this.ranges = ranges;
      });

      var ActiveOverlay = /*#__PURE__*/_createClass(function ActiveOverlay(parser, predicate, mounts, index, start, target, prev) {
        _classCallCheck(this, ActiveOverlay);

        this.parser = parser;
        this.predicate = predicate;
        this.mounts = mounts;
        this.index = index;
        this.start = start;
        this.target = target;
        this.prev = prev;
        this.depth = 0;
        this.ranges = [];
      });

      var stoppedInner = new NodeProp({
        perNode: true
      });

      var MixedParse = /*#__PURE__*/function () {
        function MixedParse(base, nest, input, fragments, ranges) {
          _classCallCheck(this, MixedParse);

          this.nest = nest;
          this.input = input;
          this.fragments = fragments;
          this.ranges = ranges;
          this.inner = [];
          this.innerDone = 0;
          this.baseTree = null;
          this.stoppedAt = null;
          this.baseParse = base;
        }

        _createClass(MixedParse, [{
          key: "advance",
          value: function advance() {
            if (this.baseParse) {
              var _done2 = this.baseParse.advance();

              if (!_done2) return null;
              this.baseParse = null;
              this.baseTree = _done2;
              this.startInner();

              if (this.stoppedAt != null) {
                var _iterator236 = _createForOfIteratorHelper(this.inner),
                    _step236;

                try {
                  for (_iterator236.s(); !(_step236 = _iterator236.n()).done;) {
                    var _inner = _step236.value;

                    _inner.parse.stopAt(this.stoppedAt);
                  }
                } catch (err) {
                  _iterator236.e(err);
                } finally {
                  _iterator236.f();
                }
              }
            }

            if (this.innerDone == this.inner.length) {
              var result = this.baseTree;
              if (this.stoppedAt != null) result = new Tree(result.type, result.children, result.positions, result.length, result.propValues.concat([[stoppedInner, this.stoppedAt]]));
              return result;
            }

            var inner = this.inner[this.innerDone],
                done = inner.parse.advance();

            if (done) {
              this.innerDone++; // This is a somewhat dodgy but super helpful hack where we
              // patch up nodes created by the inner parse (and thus
              // presumably not aliased anywhere else) to hold the information
              // about the inner parse.

              var props = Object.assign(Object.create(null), inner.target.props);
              props[NodeProp.mounted.id] = new MountedTree(done, inner.overlay, inner.parser);
              inner.target.props = props;
            }

            return null;
          }
        }, {
          key: "parsedPos",
          get: function get() {
            if (this.baseParse) return 0;
            var pos = this.input.length;

            for (var _i176 = this.innerDone; _i176 < this.inner.length; _i176++) {
              if (this.inner[_i176].ranges[0].from < pos) pos = Math.min(pos, this.inner[_i176].parse.parsedPos);
            }

            return pos;
          }
        }, {
          key: "stopAt",
          value: function stopAt(pos) {
            this.stoppedAt = pos;
            if (this.baseParse) this.baseParse.stopAt(pos);else for (var _i177 = this.innerDone; _i177 < this.inner.length; _i177++) {
              this.inner[_i177].parse.stopAt(pos);
            }
          }
        }, {
          key: "startInner",
          value: function startInner() {
            var fragmentCursor = new FragmentCursor(this.fragments);
            var overlay = null;
            var covered = null;
            var cursor = new TreeCursor(new TreeNode(this.baseTree, this.ranges[0].from, 0, null), 1
            /* Full */
            );

            scan: for (var nest, isCovered; this.stoppedAt == null || cursor.from < this.stoppedAt;) {
              var enter = true,
                  range = void 0;

              if (fragmentCursor.hasNode(cursor)) {
                if (overlay) {
                  var match = overlay.mounts.find(function (m) {
                    return m.frag.from <= cursor.from && m.frag.to >= cursor.to && m.mount.overlay;
                  });

                  if (match) {
                    var _iterator237 = _createForOfIteratorHelper(match.mount.overlay),
                        _step237;

                    try {
                      for (_iterator237.s(); !(_step237 = _iterator237.n()).done;) {
                        var r = _step237.value;
                        var from = r.from + match.pos,
                            to = r.to + match.pos;
                        if (from >= cursor.from && to <= cursor.to) overlay.ranges.push({
                          from: from,
                          to: to
                        });
                      }
                    } catch (err) {
                      _iterator237.e(err);
                    } finally {
                      _iterator237.f();
                    }
                  }
                }

                enter = false;
              } else if (covered && (isCovered = checkCover(covered.ranges, cursor.from, cursor.to))) {
                enter = isCovered != 2
                /* Full */
                ;
              } else if (!cursor.type.isAnonymous && cursor.from < cursor.to && (nest = this.nest(cursor, this.input))) {
                if (!cursor.tree) materialize(cursor);
                var oldMounts = fragmentCursor.findMounts(cursor.from, nest.parser);

                if (typeof nest.overlay == "function") {
                  overlay = new ActiveOverlay(nest.parser, nest.overlay, oldMounts, this.inner.length, cursor.from, cursor.tree, overlay);
                } else {
                  var ranges = punchRanges(this.ranges, nest.overlay || [new Range(cursor.from, cursor.to)]);
                  if (ranges.length) this.inner.push(new InnerParse(nest.parser, nest.parser.startParse(this.input, enterFragments(oldMounts, ranges), ranges), nest.overlay ? nest.overlay.map(function (r) {
                    return new Range(r.from - cursor.from, r.to - cursor.from);
                  }) : null, cursor.tree, ranges));
                  if (!nest.overlay) enter = false;else if (ranges.length) covered = {
                    ranges: ranges,
                    depth: 0,
                    prev: covered
                  };
                }
              } else if (overlay && (range = overlay.predicate(cursor))) {
                if (range === true) range = new Range(cursor.from, cursor.to);
                if (range.from < range.to) overlay.ranges.push(range);
              }

              if (enter && cursor.firstChild()) {
                if (overlay) overlay.depth++;
                if (covered) covered.depth++;
              } else {
                for (;;) {
                  if (cursor.nextSibling()) break;
                  if (!cursor.parent()) break scan;

                  if (overlay && ! --overlay.depth) {
                    var _ranges = punchRanges(this.ranges, overlay.ranges);

                    if (_ranges.length) this.inner.splice(overlay.index, 0, new InnerParse(overlay.parser, overlay.parser.startParse(this.input, enterFragments(overlay.mounts, _ranges), _ranges), overlay.ranges.map(function (r) {
                      return new Range(r.from - overlay.start, r.to - overlay.start);
                    }), overlay.target, _ranges));
                    overlay = overlay.prev;
                  }

                  if (covered && ! --covered.depth) covered = covered.prev;
                }
              }
            }
          }
        }]);

        return MixedParse;
      }();

      function checkCover(covered, from, to) {
        var _iterator238 = _createForOfIteratorHelper(covered),
            _step238;

        try {
          for (_iterator238.s(); !(_step238 = _iterator238.n()).done;) {
            var range = _step238.value;
            if (range.from >= to) break;
            if (range.to > from) return range.from <= from && range.to >= to ? 2
            /* Full */
            : 1
            /* Partial */
            ;
          }
        } catch (err) {
          _iterator238.e(err);
        } finally {
          _iterator238.f();
        }

        return 0
        /* None */
        ;
      } // Take a piece of buffer and convert it into a stand-alone
      // TreeBuffer.


      function sliceBuf(buf, startI, endI, nodes, positions, off) {
        if (startI < endI) {
          var from = buf.buffer[startI + 1],
              to = buf.buffer[endI - 2];
          nodes.push(buf.slice(startI, endI, from, to));
          positions.push(from - off);
        }
      } // This function takes a node that's in a buffer, and converts it, and
      // its parent buffer nodes, into a Tree. This is again acting on the
      // assumption that the trees and buffers have been constructed by the
      // parse that was ran via the mix parser, and thus aren't shared with
      // any other code, making violations of the immutability safe.


      function materialize(cursor) {
        var node = cursor.node,
            depth = 0; // Scan up to the nearest tree

        do {
          cursor.parent();
          depth++;
        } while (!cursor.tree); // Find the index of the buffer in that tree


        var i = 0,
            base = cursor.tree,
            off = 0;

        for (;; i++) {
          off = base.positions[i] + cursor.from;
          if (off <= node.from && off + base.children[i].length >= node.to) break;
        }

        var buf = base.children[i],
            b = buf.buffer; // Split a level in the buffer, putting the nodes before and after
        // the child that contains `node` into new buffers.

        function split(startI, endI, type, innerOffset, length) {
          var i = startI;

          while (b[i + 2] + off <= node.from) {
            i = b[i + 3];
          }

          var children = [],
              positions = [];
          sliceBuf(buf, startI, i, children, positions, innerOffset);
          var from = b[i + 1],
              to = b[i + 2];
          var isTarget = from + off == node.from && to + off == node.to && b[i] == node.type.id;
          children.push(isTarget ? node.toTree() : split(i + 4, b[i + 3], buf.set.types[b[i]], from, to - from));
          positions.push(from - innerOffset);
          sliceBuf(buf, b[i + 3], endI, children, positions, innerOffset);
          return new Tree(type, children, positions, length);
        }

        base.children[i] = split(0, b.length, NodeType.none, 0, buf.length); // Move the cursor back to the target node

        for (var d = 0; d <= depth; d++) {
          cursor.childAfter(node.from);
        }
      }

      var StructureCursor = /*#__PURE__*/function () {
        function StructureCursor(root, offset) {
          _classCallCheck(this, StructureCursor);

          this.offset = offset;
          this.done = false;
          this.cursor = root.fullCursor();
        } // Move to the first node (in pre-order) that starts at or after `pos`.


        _createClass(StructureCursor, [{
          key: "moveTo",
          value: function moveTo(pos) {
            var cursor = this.cursor,
                p = pos - this.offset;

            while (!this.done && cursor.from < p) {
              if (cursor.to >= pos && cursor.enter(p, 1, false, false)) ;else if (!cursor.next(false)) this.done = true;
            }
          }
        }, {
          key: "hasNode",
          value: function hasNode(cursor) {
            this.moveTo(cursor.from);

            if (!this.done && this.cursor.from + this.offset == cursor.from && this.cursor.tree) {
              for (var tree = this.cursor.tree;;) {
                if (tree == cursor.tree) return true;
                if (tree.children.length && tree.positions[0] == 0 && tree.children[0] instanceof Tree) tree = tree.children[0];else break;
              }
            }

            return false;
          }
        }]);

        return StructureCursor;
      }();

      var FragmentCursor = /*#__PURE__*/function () {
        function FragmentCursor(fragments) {
          _classCallCheck(this, FragmentCursor);

          var _a;

          this.fragments = fragments;
          this.curTo = 0;
          this.fragI = 0;

          if (fragments.length) {
            var first = this.curFrag = fragments[0];
            this.curTo = (_a = first.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : first.to;
            this.inner = new StructureCursor(first.tree, -first.offset);
          } else {
            this.curFrag = this.inner = null;
          }
        }

        _createClass(FragmentCursor, [{
          key: "hasNode",
          value: function hasNode(node) {
            while (this.curFrag && node.from >= this.curTo) {
              this.nextFrag();
            }

            return this.curFrag && this.curFrag.from <= node.from && this.curTo >= node.to && this.inner.hasNode(node);
          }
        }, {
          key: "nextFrag",
          value: function nextFrag() {
            var _a;

            this.fragI++;

            if (this.fragI == this.fragments.length) {
              this.curFrag = this.inner = null;
            } else {
              var frag = this.curFrag = this.fragments[this.fragI];
              this.curTo = (_a = frag.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : frag.to;
              this.inner = new StructureCursor(frag.tree, -frag.offset);
            }
          }
        }, {
          key: "findMounts",
          value: function findMounts(pos, parser) {
            var _a;

            var result = [];

            if (this.inner) {
              this.inner.cursor.moveTo(pos, 1);

              for (var _pos3 = this.inner.cursor.node; _pos3; _pos3 = _pos3.parent) {
                var mount = (_a = _pos3.tree) === null || _a === void 0 ? void 0 : _a.prop(NodeProp.mounted);

                if (mount && mount.parser == parser) {
                  for (var _i178 = this.fragI; _i178 < this.fragments.length; _i178++) {
                    var frag = this.fragments[_i178];
                    if (frag.from >= _pos3.to) break;
                    if (frag.tree == this.curFrag.tree) result.push({
                      frag: frag,
                      pos: _pos3.from - frag.offset,
                      mount: mount
                    });
                  }
                }
              }
            }

            return result;
          }
        }]);

        return FragmentCursor;
      }();

      function punchRanges(outer, ranges) {
        var copy = null,
            current = ranges;

        for (var _i179 = 1, j = 0; _i179 < outer.length; _i179++) {
          var gapFrom = outer[_i179 - 1].to,
              gapTo = outer[_i179].from;

          for (; j < current.length; j++) {
            var r = current[j];
            if (r.from >= gapTo) break;
            if (r.to <= gapFrom) continue;
            if (!copy) current = copy = ranges.slice();

            if (r.from < gapFrom) {
              copy[j] = new Range(r.from, gapFrom);
              if (r.to > gapTo) copy.splice(j + 1, 0, new Range(gapTo, r.to));
            } else if (r.to > gapTo) {
              copy[j--] = new Range(gapTo, r.to);
            } else {
              copy.splice(j--, 1);
            }
          }
        }

        return current;
      }

      function findCoverChanges(a, b, from, to) {
        var iA = 0,
            iB = 0,
            inA = false,
            inB = false,
            pos = -1e9;
        var result = [];

        for (;;) {
          var nextA = iA == a.length ? 1e9 : inA ? a[iA].to : a[iA].from;
          var nextB = iB == b.length ? 1e9 : inB ? b[iB].to : b[iB].from;

          if (inA != inB) {
            var start = Math.max(pos, from),
                end = Math.min(nextA, nextB, to);
            if (start < end) result.push(new Range(start, end));
          }

          pos = Math.min(nextA, nextB);
          if (pos == 1e9) break;

          if (nextA == pos) {
            if (!inA) inA = true;else {
              inA = false;
              iA++;
            }
          }

          if (nextB == pos) {
            if (!inB) inB = true;else {
              inB = false;
              iB++;
            }
          }
        }

        return result;
      } // Given a number of fragments for the outer tree, and a set of ranges
      // to parse, find fragments for inner trees mounted around those
      // ranges, if any.


      function enterFragments(mounts, ranges) {
        var result = [];

        var _iterator239 = _createForOfIteratorHelper(mounts),
            _step239;

        try {
          var _loop26 = function _loop26() {
            var _step239$value = _step239.value,
                pos = _step239$value.pos,
                mount = _step239$value.mount,
                frag = _step239$value.frag;
            var startPos = pos + (mount.overlay ? mount.overlay[0].from : 0),
                endPos = startPos + mount.tree.length;
            var from = Math.max(frag.from, startPos),
                to = Math.min(frag.to, endPos);

            if (mount.overlay) {
              var overlay = mount.overlay.map(function (r) {
                return new Range(r.from + pos, r.to + pos);
              });
              var changes = findCoverChanges(ranges, overlay, from, to);

              for (var _i180 = 0, _pos4 = from;; _i180++) {
                var last = _i180 == changes.length,
                    end = last ? to : changes[_i180].from;
                if (end > _pos4) result.push(new TreeFragment(_pos4, end, mount.tree, -startPos, frag.from >= _pos4, frag.to <= end));
                if (last) break;
                _pos4 = changes[_i180].to;
              }
            } else {
              result.push(new TreeFragment(from, to, mount.tree, -startPos, frag.from >= startPos, frag.to <= endPos));
            }
          };

          for (_iterator239.s(); !(_step239 = _iterator239.n()).done;) {
            _loop26();
          }
        } catch (err) {
          _iterator239.e(err);
        } finally {
          _iterator239.f();
        }

        return result;
      }
      /***/

    },

    /***/
    "mKli":
    /*!*******************************************************************************************************************************!*\
      !*** ./node_modules/raw-loader/dist/cjs.js!./apps/demo/src/app/examples/codemirror-example/codemirror-example.component.html ***!
      \*******************************************************************************************************************************/

    /*! exports provided: default */

    /***/
    function mKli(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "<mat-tab-group>\n  <mat-tab label=\"Default Setting\">\n    Codemirror:\n    <gewd-codemirror [codemirrorExtensions]=\"normalExtensions\"\n                     (changed)=\"textarea.value = $event\"\n                     [value]=\"visibleJsCode\"\n                     #codemirror></gewd-codemirror>\n\n    Twoway Binding to normal Textarea <br/>\n    <textarea #textarea\n              (keyup)=\"updateCodemirror(codemirror, textarea)\"\n              [value]=\"visibleJsCode\"\n\n              [cols]=\"60\"\n              [rows]=\"6\"\n               ></textarea>\n\n    <br/>\n\n    Current Selection: {{codemirror.selectedRange | json}}\n\n    <br>\n\n    <button (click)=\"insertText(codemirror)\">insert text at position</button>\n\n    <button (click)=\"replaceCode()\">\n      replace completely\n    </button>\n  </mat-tab>\n  <mat-tab label=\"Enable CodeMirror Features\">\n    <gewd-codemirror [codemirrorExtensions]=\"extensions\"\n       [value]=\"longExampleText\"\n></gewd-codemirror>\n  </mat-tab>\n</mat-tab-group>\n";
      /***/
    },

    /***/
    "mvyY":
    /*!*******************************************************!*\
      !*** ./node_modules/@codemirror/search/dist/index.js ***!
      \*******************************************************/

    /*! exports provided: RegExpCursor, SearchCursor, SearchQuery, closeSearchPanel, findNext, findPrevious, getSearchQuery, gotoLine, highlightSelectionMatches, openSearchPanel, replaceAll, replaceNext, searchConfig, searchKeymap, selectMatches, selectNextOccurrence, selectSelectionMatches, setSearchQuery */

    /***/
    function mvyY(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "RegExpCursor", function () {
        return RegExpCursor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SearchCursor", function () {
        return SearchCursor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SearchQuery", function () {
        return SearchQuery;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "closeSearchPanel", function () {
        return closeSearchPanel;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "findNext", function () {
        return findNext;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "findPrevious", function () {
        return findPrevious;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getSearchQuery", function () {
        return getSearchQuery;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "gotoLine", function () {
        return gotoLine;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "highlightSelectionMatches", function () {
        return highlightSelectionMatches;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "openSearchPanel", function () {
        return openSearchPanel;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "replaceAll", function () {
        return replaceAll;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "replaceNext", function () {
        return replaceNext;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "searchConfig", function () {
        return searchConfig;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "searchKeymap", function () {
        return searchKeymap;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "selectMatches", function () {
        return selectMatches;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "selectNextOccurrence", function () {
        return selectNextOccurrence;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "selectSelectionMatches", function () {
        return selectSelectionMatches;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "setSearchQuery", function () {
        return setSearchQuery;
      });
      /* harmony import */


      var _codemirror_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @codemirror/view */
      "AtEE");
      /* harmony import */


      var _codemirror_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @codemirror/state */
      "rVk5");
      /* harmony import */


      var _codemirror_panel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @codemirror/panel */
      "cmz6");
      /* harmony import */


      var _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @codemirror/rangeset */
      "wG49");
      /* harmony import */


      var crelt__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! crelt */
      "KV2Y");
      /* harmony import */


      var _codemirror_text__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @codemirror/text */
      "uZp5");

      var basicNormalize = typeof String.prototype.normalize == "function" ? function (x) {
        return x.normalize("NFKD");
      } : function (x) {
        return x;
      };
      /**
      A search cursor provides an iterator over text matches in a
      document.
      */

      var SearchCursor = /*#__PURE__*/function () {
        /**
        Create a text cursor. The query is the search string, `from` to
        `to` provides the region to search.
        
        When `normalize` is given, it will be called, on both the query
        string and the content it is matched against, before comparing.
        You can, for example, create a case-insensitive search by
        passing `s => s.toLowerCase()`.
        
        Text is always normalized with
        [`.normalize("NFKD")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)
        (when supported).
        */
        function SearchCursor(text, query) {
          var from = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
          var to = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : text.length;
          var normalize = arguments.length > 4 ? arguments[4] : undefined;

          _classCallCheck(this, SearchCursor);

          /**
          The current match (only holds a meaningful value after
          [`next`](https://codemirror.net/6/docs/ref/#search.SearchCursor.next) has been called and when
          `done` is false).
          */
          this.value = {
            from: 0,
            to: 0
          };
          /**
          Whether the end of the iterated region has been reached.
          */

          this.done = false;
          this.matches = [];
          this.buffer = "";
          this.bufferPos = 0;
          this.iter = text.iterRange(from, to);
          this.bufferStart = from;
          this.normalize = normalize ? function (x) {
            return normalize(basicNormalize(x));
          } : basicNormalize;
          this.query = this.normalize(query);
        }

        _createClass(SearchCursor, [{
          key: "peek",
          value: function peek() {
            if (this.bufferPos == this.buffer.length) {
              this.bufferStart += this.buffer.length;
              this.iter.next();
              if (this.iter.done) return -1;
              this.bufferPos = 0;
              this.buffer = this.iter.value;
            }

            return Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_5__["codePointAt"])(this.buffer, this.bufferPos);
          }
          /**
          Look for the next match. Updates the iterator's
          [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and
          [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called
          at least once before using the cursor.
          */

        }, {
          key: "next",
          value: function next() {
            while (this.matches.length) {
              this.matches.pop();
            }

            return this.nextOverlapping();
          }
          /**
          The `next` method will ignore matches that partially overlap a
          previous match. This method behaves like `next`, but includes
          such matches.
          */

        }, {
          key: "nextOverlapping",
          value: function nextOverlapping() {
            for (;;) {
              var next = this.peek();

              if (next < 0) {
                this.done = true;
                return this;
              }

              var str = Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_5__["fromCodePoint"])(next),
                  start = this.bufferStart + this.bufferPos;
              this.bufferPos += Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_5__["codePointSize"])(next);
              var norm = this.normalize(str);

              for (var _i181 = 0, pos = start;; _i181++) {
                var code = norm.charCodeAt(_i181);
                var match = this.match(code, pos);

                if (match) {
                  this.value = match;
                  return this;
                }

                if (_i181 == norm.length - 1) break;
                if (pos == start && _i181 < str.length && str.charCodeAt(_i181) == code) pos++;
              }
            }
          }
        }, {
          key: "match",
          value: function match(code, pos) {
            var match = null;

            for (var _i182 = 0; _i182 < this.matches.length; _i182 += 2) {
              var index = this.matches[_i182],
                  keep = false;

              if (this.query.charCodeAt(index) == code) {
                if (index == this.query.length - 1) {
                  match = {
                    from: this.matches[_i182 + 1],
                    to: pos + 1
                  };
                } else {
                  this.matches[_i182]++;
                  keep = true;
                }
              }

              if (!keep) {
                this.matches.splice(_i182, 2);
                _i182 -= 2;
              }
            }

            if (this.query.charCodeAt(0) == code) {
              if (this.query.length == 1) match = {
                from: pos,
                to: pos + 1
              };else this.matches.push(1, pos);
            }

            return match;
          }
        }]);

        return SearchCursor;
      }();

      if (typeof Symbol != "undefined") SearchCursor.prototype[Symbol.iterator] = function () {
        return this;
      };
      var empty = {
        from: -1,
        to: -1,
        match: /*@__PURE__*/ /.*/.exec("")
      };
      var baseFlags = "gm" + (/x/.unicode == null ? "" : "u");
      /**
      This class is similar to [`SearchCursor`](https://codemirror.net/6/docs/ref/#search.SearchCursor)
      but searches for a regular expression pattern instead of a plain
      string.
      */

      var RegExpCursor = /*#__PURE__*/function () {
        /**
        Create a cursor that will search the given range in the given
        document. `query` should be the raw pattern (as you'd pass it to
        `new RegExp`).
        */
        function RegExpCursor(text, query, options) {
          var from = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
          var to = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : text.length;

          _classCallCheck(this, RegExpCursor);

          this.to = to;
          this.curLine = "";
          /**
          Set to `true` when the cursor has reached the end of the search
          range.
          */

          this.done = false;
          /**
          Will contain an object with the extent of the match and the
          match object when [`next`](https://codemirror.net/6/docs/ref/#search.RegExpCursor.next)
          sucessfully finds a match.
          */

          this.value = empty;
          if (/\\[sWDnr]|\n|\r|\[\^/.test(query)) return new MultilineRegExpCursor(text, query, options, from, to);
          this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
          this.iter = text.iter();
          var startLine = text.lineAt(from);
          this.curLineStart = startLine.from;
          this.matchPos = from;
          this.getLine(this.curLineStart);
        }

        _createClass(RegExpCursor, [{
          key: "getLine",
          value: function getLine(skip) {
            this.iter.next(skip);

            if (this.iter.lineBreak) {
              this.curLine = "";
            } else {
              this.curLine = this.iter.value;
              if (this.curLineStart + this.curLine.length > this.to) this.curLine = this.curLine.slice(0, this.to - this.curLineStart);
              this.iter.next();
            }
          }
        }, {
          key: "nextLine",
          value: function nextLine() {
            this.curLineStart = this.curLineStart + this.curLine.length + 1;
            if (this.curLineStart > this.to) this.curLine = "";else this.getLine(0);
          }
          /**
          Move to the next match, if there is one.
          */

        }, {
          key: "next",
          value: function next() {
            for (var off = this.matchPos - this.curLineStart;;) {
              this.re.lastIndex = off;
              var match = this.matchPos <= this.to && this.re.exec(this.curLine);

              if (match) {
                var from = this.curLineStart + match.index,
                    to = from + match[0].length;
                this.matchPos = to + (from == to ? 1 : 0);
                if (from == this.curLine.length) this.nextLine();

                if (from < to || from > this.value.to) {
                  this.value = {
                    from: from,
                    to: to,
                    match: match
                  };
                  return this;
                }

                off = this.matchPos - this.curLineStart;
              } else if (this.curLineStart + this.curLine.length < this.to) {
                this.nextLine();
                off = 0;
              } else {
                this.done = true;
                return this;
              }
            }
          }
        }]);

        return RegExpCursor;
      }();

      var flattened = /*@__PURE__*/new WeakMap(); // Reusable (partially) flattened document strings

      var FlattenedDoc = /*#__PURE__*/function () {
        function FlattenedDoc(from, text) {
          _classCallCheck(this, FlattenedDoc);

          this.from = from;
          this.text = text;
        }

        _createClass(FlattenedDoc, [{
          key: "to",
          get: function get() {
            return this.from + this.text.length;
          }
        }], [{
          key: "get",
          value: function get(doc, from, to) {
            var cached = flattened.get(doc);

            if (!cached || cached.from >= to || cached.to <= from) {
              var flat = new FlattenedDoc(from, doc.sliceString(from, to));
              flattened.set(doc, flat);
              return flat;
            }

            if (cached.from == from && cached.to == to) return cached;
            var text = cached.text,
                cachedFrom = cached.from;

            if (cachedFrom > from) {
              text = doc.sliceString(from, cachedFrom) + text;
              cachedFrom = from;
            }

            if (cached.to < to) text += doc.sliceString(cached.to, to);
            flattened.set(doc, new FlattenedDoc(cachedFrom, text));
            return new FlattenedDoc(from, text.slice(from - cachedFrom, to - cachedFrom));
          }
        }]);

        return FlattenedDoc;
      }();

      var MultilineRegExpCursor = /*#__PURE__*/function () {
        function MultilineRegExpCursor(text, query, options, from, to) {
          _classCallCheck(this, MultilineRegExpCursor);

          this.text = text;
          this.to = to;
          this.done = false;
          this.value = empty;
          this.matchPos = from;
          this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
          this.flat = FlattenedDoc.get(text, from, this.chunkEnd(from + 5000
          /* Base */
          ));
        }

        _createClass(MultilineRegExpCursor, [{
          key: "chunkEnd",
          value: function chunkEnd(pos) {
            return pos >= this.to ? this.to : this.text.lineAt(pos).to;
          }
        }, {
          key: "next",
          value: function next() {
            for (;;) {
              var off = this.re.lastIndex = this.matchPos - this.flat.from;
              var match = this.re.exec(this.flat.text); // Skip empty matches directly after the last match

              if (match && !match[0] && match.index == off) {
                this.re.lastIndex = off + 1;
                match = this.re.exec(this.flat.text);
              } // If a match goes almost to the end of a noncomplete chunk, try
              // again, since it'll likely be able to match more


              if (match && this.flat.to < this.to && match.index + match[0].length > this.flat.text.length - 10) match = null;

              if (match) {
                var from = this.flat.from + match.index,
                    to = from + match[0].length;
                this.value = {
                  from: from,
                  to: to,
                  match: match
                };
                this.matchPos = to + (from == to ? 1 : 0);
                return this;
              } else {
                if (this.flat.to == this.to) {
                  this.done = true;
                  return this;
                } // Grow the flattened doc


                this.flat = FlattenedDoc.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));
              }
            }
          }
        }]);

        return MultilineRegExpCursor;
      }();

      if (typeof Symbol != "undefined") {
        RegExpCursor.prototype[Symbol.iterator] = MultilineRegExpCursor.prototype[Symbol.iterator] = function () {
          return this;
        };
      }

      function validRegExp(source) {
        try {
          new RegExp(source, baseFlags);
          return true;
        } catch (_a) {
          return false;
        }
      }

      function createLineDialog(view) {
        var input = Object(crelt__WEBPACK_IMPORTED_MODULE_4__["default"])("input", {
          "class": "cm-textfield",
          name: "line"
        });
        var dom = Object(crelt__WEBPACK_IMPORTED_MODULE_4__["default"])("form", {
          "class": "cm-gotoLine",
          onkeydown: function onkeydown(event) {
            if (event.keyCode == 27) {
              // Escape
              event.preventDefault();
              view.dispatch({
                effects: dialogEffect.of(false)
              });
              view.focus();
            } else if (event.keyCode == 13) {
              // Enter
              event.preventDefault();
              go();
            }
          },
          onsubmit: function onsubmit(event) {
            event.preventDefault();
            go();
          }
        }, Object(crelt__WEBPACK_IMPORTED_MODULE_4__["default"])("label", view.state.phrase("Go to line"), ": ", input), " ", Object(crelt__WEBPACK_IMPORTED_MODULE_4__["default"])("button", {
          "class": "cm-button",
          type: "submit"
        }, view.state.phrase("go")));

        function go() {
          var match = /^([+-])?(\d+)?(:\d+)?(%)?$/.exec(input.value);
          if (!match) return;
          var state = view.state,
              startLine = state.doc.lineAt(state.selection.main.head);

          var _match = _slicedToArray(match, 5),
              sign = _match[1],
              ln = _match[2],
              cl = _match[3],
              percent = _match[4];

          var col = cl ? +cl.slice(1) : 0;
          var line = ln ? +ln : startLine.number;

          if (ln && percent) {
            var pc = line / 100;
            if (sign) pc = pc * (sign == "-" ? -1 : 1) + startLine.number / state.doc.lines;
            line = Math.round(state.doc.lines * pc);
          } else if (ln && sign) {
            line = line * (sign == "-" ? -1 : 1) + startLine.number;
          }

          var docLine = state.doc.line(Math.max(1, Math.min(state.doc.lines, line)));
          view.dispatch({
            effects: dialogEffect.of(false),
            selection: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__["EditorSelection"].cursor(docLine.from + Math.max(0, Math.min(col, docLine.length))),
            scrollIntoView: true
          });
          view.focus();
        }

        return {
          dom: dom,
          pos: -10
        };
      }

      var dialogEffect = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__["StateEffect"].define();

      var dialogField = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__["StateField"].define({
        create: function create() {
          return true;
        },
        update: function update(value, tr) {
          var _iterator240 = _createForOfIteratorHelper(tr.effects),
              _step240;

          try {
            for (_iterator240.s(); !(_step240 = _iterator240.n()).done;) {
              var e = _step240.value;
              if (e.is(dialogEffect)) value = e.value;
            }
          } catch (err) {
            _iterator240.e(err);
          } finally {
            _iterator240.f();
          }

          return value;
        },
        provide: function provide(f) {
          return _codemirror_panel__WEBPACK_IMPORTED_MODULE_2__["showPanel"].from(f, function (val) {
            return val ? createLineDialog : null;
          });
        }
      });
      /**
      Command that shows a dialog asking the user for a line number, and
      when a valid position is provided, moves the cursor to that line.
      
      Supports line numbers, relative line offsets prefixed with `+` or
      `-`, document percentages suffixed with `%`, and an optional
      column position by adding `:` and a second number after the line
      number.
      
      The dialog can be styled with the `panel.gotoLine` theme
      selector.
      */


      var gotoLine = function gotoLine(view) {
        var panel = Object(_codemirror_panel__WEBPACK_IMPORTED_MODULE_2__["getPanel"])(view, createLineDialog);

        if (!panel) {
          var effects = [dialogEffect.of(true)];
          if (view.state.field(dialogField, false) == null) effects.push(_codemirror_state__WEBPACK_IMPORTED_MODULE_1__["StateEffect"].appendConfig.of([dialogField, baseTheme$1]));
          view.dispatch({
            effects: effects
          });
          panel = Object(_codemirror_panel__WEBPACK_IMPORTED_MODULE_2__["getPanel"])(view, createLineDialog);
        }

        if (panel) panel.dom.querySelector("input").focus();
        return true;
      };

      var baseTheme$1 = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_0__["EditorView"].baseTheme({
        ".cm-panel.cm-gotoLine": {
          padding: "2px 6px 4px",
          "& label": {
            fontSize: "80%"
          }
        }
      });

      var defaultHighlightOptions = {
        highlightWordAroundCursor: false,
        minSelectionLength: 1,
        maxMatches: 100
      };

      var highlightConfig = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__["Facet"].define({
        combine: function combine(options) {
          return Object(_codemirror_state__WEBPACK_IMPORTED_MODULE_1__["combineConfig"])(options, defaultHighlightOptions, {
            highlightWordAroundCursor: function highlightWordAroundCursor(a, b) {
              return a || b;
            },
            minSelectionLength: Math.min,
            maxMatches: Math.min
          });
        }
      });
      /**
      This extension highlights text that matches the selection. It uses
      the `"cm-selectionMatch"` class for the highlighting. When
      `highlightWordAroundCursor` is enabled, the word at the cursor
      itself will be highlighted with `"cm-selectionMatch-main"`.
      */


      function highlightSelectionMatches(options) {
        var ext = [defaultTheme, matchHighlighter];
        if (options) ext.push(highlightConfig.of(options));
        return ext;
      }

      var matchDeco = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_0__["Decoration"].mark({
        "class": "cm-selectionMatch"
      });

      var mainMatchDeco = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_0__["Decoration"].mark({
        "class": "cm-selectionMatch cm-selectionMatch-main"
      });

      var matchHighlighter = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_0__["ViewPlugin"].fromClass( /*#__PURE__*/function () {
        function _class22(view) {
          _classCallCheck(this, _class22);

          this.decorations = this.getDeco(view);
        }

        _createClass(_class22, [{
          key: "update",
          value: function update(_update31) {
            if (_update31.selectionSet || _update31.docChanged || _update31.viewportChanged) this.decorations = this.getDeco(_update31.view);
          }
        }, {
          key: "getDeco",
          value: function getDeco(view) {
            var conf = view.state.facet(highlightConfig);
            var state = view.state,
                sel = state.selection;
            if (sel.ranges.length > 1) return _codemirror_view__WEBPACK_IMPORTED_MODULE_0__["Decoration"].none;
            var range = sel.main,
                query,
                check = null;

            if (range.empty) {
              if (!conf.highlightWordAroundCursor) return _codemirror_view__WEBPACK_IMPORTED_MODULE_0__["Decoration"].none;
              var word = state.wordAt(range.head);
              if (!word) return _codemirror_view__WEBPACK_IMPORTED_MODULE_0__["Decoration"].none;
              check = state.charCategorizer(range.head);
              query = state.sliceDoc(word.from, word.to);
            } else {
              var len = range.to - range.from;
              if (len < conf.minSelectionLength || len > 200) return _codemirror_view__WEBPACK_IMPORTED_MODULE_0__["Decoration"].none;
              query = state.sliceDoc(range.from, range.to).trim();
              if (!query) return _codemirror_view__WEBPACK_IMPORTED_MODULE_0__["Decoration"].none;
            }

            var deco = [];

            var _iterator241 = _createForOfIteratorHelper(view.visibleRanges),
                _step241;

            try {
              for (_iterator241.s(); !(_step241 = _iterator241.n()).done;) {
                var part = _step241.value;
                var cursor = new SearchCursor(state.doc, query, part.from, part.to);

                while (!cursor.next().done) {
                  var _cursor$value = cursor.value,
                      from = _cursor$value.from,
                      to = _cursor$value.to;

                  if (!check || (from == 0 || check(state.sliceDoc(from - 1, from)) != _codemirror_state__WEBPACK_IMPORTED_MODULE_1__["CharCategory"].Word) && (to == state.doc.length || check(state.sliceDoc(to, to + 1)) != _codemirror_state__WEBPACK_IMPORTED_MODULE_1__["CharCategory"].Word)) {
                    if (check && from <= range.from && to >= range.to) deco.push(mainMatchDeco.range(from, to));else if (from >= range.to || to <= range.from) deco.push(matchDeco.range(from, to));
                    if (deco.length > conf.maxMatches) return _codemirror_view__WEBPACK_IMPORTED_MODULE_0__["Decoration"].none;
                  }
                }
              }
            } catch (err) {
              _iterator241.e(err);
            } finally {
              _iterator241.f();
            }

            return _codemirror_view__WEBPACK_IMPORTED_MODULE_0__["Decoration"].set(deco);
          }
        }]);

        return _class22;
      }(), {
        decorations: function decorations(v) {
          return v.decorations;
        }
      });

      var defaultTheme = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_0__["EditorView"].baseTheme({
        ".cm-selectionMatch": {
          backgroundColor: "#99ff7780"
        },
        ".cm-searchMatch .cm-selectionMatch": {
          backgroundColor: "transparent"
        }
      }); // Select the words around the cursors.


      var selectWord = function selectWord(_ref72) {
        var state = _ref72.state,
            dispatch = _ref72.dispatch;
        var selection = state.selection;

        var newSel = _codemirror_state__WEBPACK_IMPORTED_MODULE_1__["EditorSelection"].create(selection.ranges.map(function (range) {
          return state.wordAt(range.head) || _codemirror_state__WEBPACK_IMPORTED_MODULE_1__["EditorSelection"].cursor(range.head);
        }), selection.mainIndex);

        if (newSel.eq(selection)) return false;
        dispatch(state.update({
          selection: newSel
        }));
        return true;
      }; // Find next occurrence of query relative to last cursor. Wrap around
      // the document if there are no more matches.


      function findNextOccurrence(state, query) {
        var _state$selection = state.selection,
            main = _state$selection.main,
            ranges = _state$selection.ranges;
        var word = state.wordAt(main.head),
            fullWord = word && word.from == main.from && word.to == main.to;

        var _loop27 = function _loop27(_cycled, _cursor) {
          _cursor.next();

          if (_cursor.done) {
            if (_cycled) {
              cursor = _cursor;
              {
                cycled = _cycled;
                return {
                  v: null
                };
              }
            }

            _cursor = new SearchCursor(state.doc, query, 0, Math.max(0, ranges[ranges.length - 1].from - 1));
            _cycled = true;
          } else {
            if (_cycled && ranges.some(function (r) {
              return r.from == _cursor.value.from;
            })) {
              cursor = _cursor;
              {
                cycled = _cycled;
                return "continue";
              }
            }

            if (fullWord) {
              var _word = state.wordAt(_cursor.value.from);

              if (!_word || _word.from != _cursor.value.from || _word.to != _cursor.value.to) {
                cursor = _cursor;
                {
                  cycled = _cycled;
                  return "continue";
                }
              }
            }

            cycled = _cycled;
            cursor = _cursor;
            return {
              v: _cursor.value
            };
          }

          cycled = _cycled;
          cursor = _cursor;
        };

        for (var cycled = false, cursor = new SearchCursor(state.doc, query, ranges[ranges.length - 1].to);;) {
          var _ret5 = _loop27(cycled, cursor);

          if (_ret5 === "continue") continue;
          if (typeof _ret5 === "object") return _ret5.v;
        }
      }
      /**
      Select next occurrence of the current selection.
      Expand selection to the word when selection range is empty.
      */


      var selectNextOccurrence = function selectNextOccurrence(_ref73) {
        var state = _ref73.state,
            dispatch = _ref73.dispatch;
        var ranges = state.selection.ranges;
        if (ranges.some(function (sel) {
          return sel.from === sel.to;
        })) return selectWord({
          state: state,
          dispatch: dispatch
        });
        var searchedText = state.sliceDoc(ranges[0].from, ranges[0].to);
        if (state.selection.ranges.some(function (r) {
          return state.sliceDoc(r.from, r.to) != searchedText;
        })) return false;
        var range = findNextOccurrence(state, searchedText);
        if (!range) return false;
        dispatch(state.update({
          selection: state.selection.addRange(_codemirror_state__WEBPACK_IMPORTED_MODULE_1__["EditorSelection"].range(range.from, range.to), false),
          scrollIntoView: true
        }));
        return true;
      };

      var searchConfigFacet = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__["Facet"].define({
        combine: function combine(configs) {
          var _a;

          return {
            top: configs.reduce(function (val, conf) {
              return val !== null && val !== void 0 ? val : conf.top;
            }, undefined) || false,
            caseSensitive: configs.reduce(function (val, conf) {
              return val !== null && val !== void 0 ? val : conf.caseSensitive || conf.matchCase;
            }, undefined) || false,
            createPanel: ((_a = configs.find(function (c) {
              return c.createPanel;
            })) === null || _a === void 0 ? void 0 : _a.createPanel) || function (view) {
              return new SearchPanel(view);
            }
          };
        }
      });
      /**
      Configure the behavior of the search extension.
      */


      function searchConfig(config) {
        return searchConfigFacet.of(config);
      }
      /**
      A search query. Part of the editor's search state.
      */


      var SearchQuery = /*#__PURE__*/function () {
        /**
        Create a query object.
        */
        function SearchQuery(config) {
          _classCallCheck(this, SearchQuery);

          this.search = config.search;
          this.caseSensitive = !!config.caseSensitive;
          this.regexp = !!config.regexp;
          this.replace = config.replace || "";
          this.valid = !!this.search && (!this.regexp || validRegExp(this.search));
        }
        /**
        Compare this query to another query.
        */


        _createClass(SearchQuery, [{
          key: "eq",
          value: function eq(other) {
            return this.search == other.search && this.replace == other.replace && this.caseSensitive == other.caseSensitive && this.regexp == other.regexp;
          }
          /**
          @internal
          */

        }, {
          key: "create",
          value: function create() {
            return this.regexp ? new RegExpQuery(this) : new StringQuery(this);
          }
        }]);

        return SearchQuery;
      }();

      var QueryType = /*#__PURE__*/_createClass(function QueryType(spec) {
        _classCallCheck(this, QueryType);

        this.spec = spec;
      });

      var StringQuery = /*#__PURE__*/function (_QueryType) {
        _inherits(StringQuery, _QueryType);

        var _super59 = _createSuper(StringQuery);

        function StringQuery(spec) {
          var _this128;

          _classCallCheck(this, StringQuery);

          _this128 = _super59.call(this, spec);
          _this128.unquoted = spec.search.replace(/\\([nrt\\])/g, function (_, ch) {
            return ch == "n" ? "\n" : ch == "r" ? "\r" : ch == "t" ? "\t" : "\\";
          });
          return _this128;
        }

        _createClass(StringQuery, [{
          key: "cursor",
          value: function cursor(doc) {
            var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var to = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : doc.length;
            return new SearchCursor(doc, this.unquoted, from, to, this.spec.caseSensitive ? undefined : function (x) {
              return x.toLowerCase();
            });
          }
        }, {
          key: "nextMatch",
          value: function nextMatch(doc, curFrom, curTo) {
            var cursor = this.cursor(doc, curTo).nextOverlapping();
            if (cursor.done) cursor = this.cursor(doc, 0, curFrom).nextOverlapping();
            return cursor.done ? null : cursor.value;
          } // Searching in reverse is, rather than implementing inverted search
          // cursor, done by scanning chunk after chunk forward.

        }, {
          key: "prevMatchInRange",
          value: function prevMatchInRange(doc, from, to) {
            for (var pos = to;;) {
              var start = Math.max(from, pos - 10000
              /* ChunkSize */
              - this.unquoted.length);

              var _cursor2 = this.cursor(doc, start, pos),
                  range = null;

              while (!_cursor2.nextOverlapping().done) {
                range = _cursor2.value;
              }

              if (range) return range;
              if (start == from) return null;
              pos -= 10000
              /* ChunkSize */
              ;
            }
          }
        }, {
          key: "prevMatch",
          value: function prevMatch(doc, curFrom, curTo) {
            return this.prevMatchInRange(doc, 0, curFrom) || this.prevMatchInRange(doc, curTo, doc.length);
          }
        }, {
          key: "getReplacement",
          value: function getReplacement(_result) {
            return this.spec.replace;
          }
        }, {
          key: "matchAll",
          value: function matchAll(doc, limit) {
            var cursor = this.cursor(doc),
                ranges = [];

            while (!cursor.next().done) {
              if (ranges.length >= limit) return null;
              ranges.push(cursor.value);
            }

            return ranges;
          }
        }, {
          key: "highlight",
          value: function highlight(doc, from, to, add) {
            var cursor = this.cursor(doc, Math.max(0, from - this.unquoted.length), Math.min(to + this.unquoted.length, doc.length));

            while (!cursor.next().done) {
              add(cursor.value.from, cursor.value.to);
            }
          }
        }]);

        return StringQuery;
      }(QueryType);

      var RegExpQuery = /*#__PURE__*/function (_QueryType2) {
        _inherits(RegExpQuery, _QueryType2);

        var _super60 = _createSuper(RegExpQuery);

        function RegExpQuery() {
          _classCallCheck(this, RegExpQuery);

          return _super60.apply(this, arguments);
        }

        _createClass(RegExpQuery, [{
          key: "cursor",
          value: function cursor(doc) {
            var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var to = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : doc.length;
            return new RegExpCursor(doc, this.spec.search, this.spec.caseSensitive ? undefined : {
              ignoreCase: true
            }, from, to);
          }
        }, {
          key: "nextMatch",
          value: function nextMatch(doc, curFrom, curTo) {
            var cursor = this.cursor(doc, curTo).next();
            if (cursor.done) cursor = this.cursor(doc, 0, curFrom).next();
            return cursor.done ? null : cursor.value;
          }
        }, {
          key: "prevMatchInRange",
          value: function prevMatchInRange(doc, from, to) {
            for (var size = 1;; size++) {
              var start = Math.max(from, to - size * 10000
              /* ChunkSize */
              );

              var _cursor3 = this.cursor(doc, start, to),
                  range = null;

              while (!_cursor3.next().done) {
                range = _cursor3.value;
              }

              if (range && (start == from || range.from > start + 10)) return range;
              if (start == from) return null;
            }
          }
        }, {
          key: "prevMatch",
          value: function prevMatch(doc, curFrom, curTo) {
            return this.prevMatchInRange(doc, 0, curFrom) || this.prevMatchInRange(doc, curTo, doc.length);
          }
        }, {
          key: "getReplacement",
          value: function getReplacement(result) {
            return this.spec.replace.replace(/\$([$&\d+])/g, function (m, i) {
              return i == "$" ? "$" : i == "&" ? result.match[0] : i != "0" && +i < result.match.length ? result.match[i] : m;
            });
          }
        }, {
          key: "matchAll",
          value: function matchAll(doc, limit) {
            var cursor = this.cursor(doc),
                ranges = [];

            while (!cursor.next().done) {
              if (ranges.length >= limit) return null;
              ranges.push(cursor.value);
            }

            return ranges;
          }
        }, {
          key: "highlight",
          value: function highlight(doc, from, to, add) {
            var cursor = this.cursor(doc, Math.max(0, from - 250
            /* HighlightMargin */
            ), Math.min(to + 250
            /* HighlightMargin */
            , doc.length));

            while (!cursor.next().done) {
              add(cursor.value.from, cursor.value.to);
            }
          }
        }]);

        return RegExpQuery;
      }(QueryType);
      /**
      A state effect that updates the current search query.
      */


      var setSearchQuery = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__["StateEffect"].define();

      var togglePanel = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__["StateEffect"].define();

      var searchState = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__["StateField"].define({
        create: function create(state) {
          return new SearchState(defaultQuery(state).create(), createSearchPanel);
        },
        update: function update(value, tr) {
          var _iterator242 = _createForOfIteratorHelper(tr.effects),
              _step242;

          try {
            for (_iterator242.s(); !(_step242 = _iterator242.n()).done;) {
              var effect = _step242.value;
              if (effect.is(setSearchQuery)) value = new SearchState(effect.value.create(), value.panel);else if (effect.is(togglePanel)) value = new SearchState(value.query, effect.value ? createSearchPanel : null);
            }
          } catch (err) {
            _iterator242.e(err);
          } finally {
            _iterator242.f();
          }

          return value;
        },
        provide: function provide(f) {
          return _codemirror_panel__WEBPACK_IMPORTED_MODULE_2__["showPanel"].from(f, function (val) {
            return val.panel;
          });
        }
      });
      /**
      Get the current search query from an editor state.
      */


      function getSearchQuery(state) {
        var curState = state.field(searchState, false);
        return curState ? curState.query.spec : defaultQuery(state);
      }

      var SearchState = /*#__PURE__*/_createClass(function SearchState(query, panel) {
        _classCallCheck(this, SearchState);

        this.query = query;
        this.panel = panel;
      });

      var matchMark = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_0__["Decoration"].mark({
        "class": "cm-searchMatch"
      }),
          selectedMatchMark = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_0__["Decoration"].mark({
        "class": "cm-searchMatch cm-searchMatch-selected"
      });

      var searchHighlighter = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_0__["ViewPlugin"].fromClass( /*#__PURE__*/function () {
        function _class23(view) {
          _classCallCheck(this, _class23);

          this.view = view;
          this.decorations = this.highlight(view.state.field(searchState));
        }

        _createClass(_class23, [{
          key: "update",
          value: function update(_update32) {
            var state = _update32.state.field(searchState);

            if (state != _update32.startState.field(searchState) || _update32.docChanged || _update32.selectionSet) this.decorations = this.highlight(state);
          }
        }, {
          key: "highlight",
          value: function highlight(_ref74) {
            var query = _ref74.query,
                panel = _ref74.panel;
            if (!panel || !query.spec.valid) return _codemirror_view__WEBPACK_IMPORTED_MODULE_0__["Decoration"].none;
            var view = this.view;
            var builder = new _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_3__["RangeSetBuilder"]();

            for (var _i183 = 0, ranges = view.visibleRanges, l = ranges.length; _i183 < l; _i183++) {
              var _ranges$_i3 = ranges[_i183],
                  from = _ranges$_i3.from,
                  to = _ranges$_i3.to;

              while (_i183 < l - 1 && to > ranges[_i183 + 1].from - 2 * 250
              /* HighlightMargin */
              ) {
                to = ranges[++_i183].to;
              }

              query.highlight(view.state.doc, from, to, function (from, to) {
                var selected = view.state.selection.ranges.some(function (r) {
                  return r.from == from && r.to == to;
                });
                builder.add(from, to, selected ? selectedMatchMark : matchMark);
              });
            }

            return builder.finish();
          }
        }]);

        return _class23;
      }(), {
        decorations: function decorations(v) {
          return v.decorations;
        }
      });

      function searchCommand(f) {
        return function (view) {
          var state = view.state.field(searchState, false);
          return state && state.query.spec.valid ? f(view, state) : openSearchPanel(view);
        };
      }
      /**
      Open the search panel if it isn't already open, and move the
      selection to the first match after the current main selection.
      Will wrap around to the start of the document when it reaches the
      end.
      */


      var findNext = /*@__PURE__*/searchCommand(function (view, _ref75) {
        var query = _ref75.query;
        var _view$state$selection = view.state.selection.main,
            from = _view$state$selection.from,
            to = _view$state$selection.to;
        var next = query.nextMatch(view.state.doc, from, to);
        if (!next || next.from == from && next.to == to) return false;
        view.dispatch({
          selection: {
            anchor: next.from,
            head: next.to
          },
          scrollIntoView: true,
          effects: announceMatch(view, next),
          userEvent: "select.search"
        });
        return true;
      });
      /**
      Move the selection to the previous instance of the search query,
      before the current main selection. Will wrap past the start
      of the document to start searching at the end again.
      */

      var findPrevious = /*@__PURE__*/searchCommand(function (view, _ref76) {
        var query = _ref76.query;
        var state = view.state,
            _state$selection$main = state.selection.main,
            from = _state$selection$main.from,
            to = _state$selection$main.to;
        var range = query.prevMatch(state.doc, from, to);
        if (!range) return false;
        view.dispatch({
          selection: {
            anchor: range.from,
            head: range.to
          },
          scrollIntoView: true,
          effects: announceMatch(view, range),
          userEvent: "select.search"
        });
        return true;
      });
      /**
      Select all instances of the search query.
      */

      var selectMatches = /*@__PURE__*/searchCommand(function (view, _ref77) {
        var query = _ref77.query;
        var ranges = query.matchAll(view.state.doc, 1000);
        if (!ranges || !ranges.length) return false;
        view.dispatch({
          selection: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__["EditorSelection"].create(ranges.map(function (r) {
            return _codemirror_state__WEBPACK_IMPORTED_MODULE_1__["EditorSelection"].range(r.from, r.to);
          })),
          userEvent: "select.search.matches"
        });
        return true;
      });
      /**
      Select all instances of the currently selected text.
      */

      var selectSelectionMatches = function selectSelectionMatches(_ref78) {
        var state = _ref78.state,
            dispatch = _ref78.dispatch;
        var sel = state.selection;
        if (sel.ranges.length > 1 || sel.main.empty) return false;
        var _sel$main = sel.main,
            from = _sel$main.from,
            to = _sel$main.to;
        var ranges = [],
            main = 0;

        for (var cur = new SearchCursor(state.doc, state.sliceDoc(from, to)); !cur.next().done;) {
          if (ranges.length > 1000) return false;
          if (cur.value.from == from) main = ranges.length;
          ranges.push(_codemirror_state__WEBPACK_IMPORTED_MODULE_1__["EditorSelection"].range(cur.value.from, cur.value.to));
        }

        dispatch(state.update({
          selection: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__["EditorSelection"].create(ranges, main),
          userEvent: "select.search.matches"
        }));
        return true;
      };
      /**
      Replace the current match of the search query.
      */


      var replaceNext = /*@__PURE__*/searchCommand(function (view, _ref79) {
        var query = _ref79.query;
        var state = view.state,
            _state$selection$main2 = state.selection.main,
            from = _state$selection$main2.from,
            to = _state$selection$main2.to;
        if (state.readOnly) return false;
        var next = query.nextMatch(state.doc, from, from);
        if (!next) return false;
        var changes = [],
            selection,
            replacement;

        if (next.from == from && next.to == to) {
          replacement = state.toText(query.getReplacement(next));
          changes.push({
            from: next.from,
            to: next.to,
            insert: replacement
          });
          next = query.nextMatch(state.doc, next.from, next.to);
        }

        if (next) {
          var off = changes.length == 0 || changes[0].from >= next.to ? 0 : next.to - next.from - replacement.length;
          selection = {
            anchor: next.from - off,
            head: next.to - off
          };
        }

        view.dispatch({
          changes: changes,
          selection: selection,
          scrollIntoView: !!selection,
          effects: next ? announceMatch(view, next) : undefined,
          userEvent: "input.replace"
        });
        return true;
      });
      /**
      Replace all instances of the search query with the given
      replacement.
      */

      var replaceAll = /*@__PURE__*/searchCommand(function (view, _ref80) {
        var query = _ref80.query;
        if (view.state.readOnly) return false;
        var changes = query.matchAll(view.state.doc, 1e9).map(function (match) {
          var from = match.from,
              to = match.to;
          return {
            from: from,
            to: to,
            insert: query.getReplacement(match)
          };
        });
        if (!changes.length) return false;
        view.dispatch({
          changes: changes,
          userEvent: "input.replace.all"
        });
        return true;
      });

      function createSearchPanel(view) {
        return view.state.facet(searchConfigFacet).createPanel(view);
      }

      function defaultQuery(state, fallback) {
        var _a;

        var sel = state.selection.main;
        var selText = sel.empty || sel.to > sel.from + 100 ? "" : state.sliceDoc(sel.from, sel.to);
        var caseSensitive = (_a = fallback === null || fallback === void 0 ? void 0 : fallback.caseSensitive) !== null && _a !== void 0 ? _a : state.facet(searchConfigFacet).caseSensitive;
        return fallback && !selText ? fallback : new SearchQuery({
          search: selText.replace(/\n/g, "\\n"),
          caseSensitive: caseSensitive
        });
      }
      /**
      Make sure the search panel is open and focused.
      */


      var openSearchPanel = function openSearchPanel(view) {
        var state = view.state.field(searchState, false);

        if (state && state.panel) {
          var panel = Object(_codemirror_panel__WEBPACK_IMPORTED_MODULE_2__["getPanel"])(view, createSearchPanel);
          if (!panel) return false;
          var searchInput = panel.dom.querySelector("[name=search]");

          if (searchInput != view.root.activeElement) {
            var query = defaultQuery(view.state, state.query.spec);
            if (query.valid) view.dispatch({
              effects: setSearchQuery.of(query)
            });
            searchInput.focus();
            searchInput.select();
          }
        } else {
          view.dispatch({
            effects: [togglePanel.of(true), state ? setSearchQuery.of(defaultQuery(view.state, state.query.spec)) : _codemirror_state__WEBPACK_IMPORTED_MODULE_1__["StateEffect"].appendConfig.of(searchExtensions)]
          });
        }

        return true;
      };
      /**
      Close the search panel.
      */


      var closeSearchPanel = function closeSearchPanel(view) {
        var state = view.state.field(searchState, false);
        if (!state || !state.panel) return false;
        var panel = Object(_codemirror_panel__WEBPACK_IMPORTED_MODULE_2__["getPanel"])(view, createSearchPanel);
        if (panel && panel.dom.contains(view.root.activeElement)) view.focus();
        view.dispatch({
          effects: togglePanel.of(false)
        });
        return true;
      };
      /**
      Default search-related key bindings.
      
       - Mod-f: [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel)
       - F3, Mod-g: [`findNext`](https://codemirror.net/6/docs/ref/#search.findNext)
       - Shift-F3, Shift-Mod-g: [`findPrevious`](https://codemirror.net/6/docs/ref/#search.findPrevious)
       - Alt-g: [`gotoLine`](https://codemirror.net/6/docs/ref/#search.gotoLine)
       - Mod-d: [`selectNextOccurrence`](https://codemirror.net/6/docs/ref/#search.selectNextOccurrence)
      */


      var searchKeymap = [{
        key: "Mod-f",
        run: openSearchPanel,
        scope: "editor search-panel"
      }, {
        key: "F3",
        run: findNext,
        shift: findPrevious,
        scope: "editor search-panel",
        preventDefault: true
      }, {
        key: "Mod-g",
        run: findNext,
        shift: findPrevious,
        scope: "editor search-panel",
        preventDefault: true
      }, {
        key: "Escape",
        run: closeSearchPanel,
        scope: "editor search-panel"
      }, {
        key: "Mod-Shift-l",
        run: selectSelectionMatches
      }, {
        key: "Alt-g",
        run: gotoLine
      }, {
        key: "Mod-d",
        run: selectNextOccurrence,
        preventDefault: true
      }];

      var SearchPanel = /*#__PURE__*/function () {
        function SearchPanel(view) {
          var _this129 = this;

          _classCallCheck(this, SearchPanel);

          this.view = view;
          var query = this.query = view.state.field(searchState).query.spec;
          this.commit = this.commit.bind(this);
          this.searchField = Object(crelt__WEBPACK_IMPORTED_MODULE_4__["default"])("input", {
            value: query.search,
            placeholder: phrase(view, "Find"),
            "aria-label": phrase(view, "Find"),
            "class": "cm-textfield",
            name: "search",
            onchange: this.commit,
            onkeyup: this.commit
          });
          this.replaceField = Object(crelt__WEBPACK_IMPORTED_MODULE_4__["default"])("input", {
            value: query.replace,
            placeholder: phrase(view, "Replace"),
            "aria-label": phrase(view, "Replace"),
            "class": "cm-textfield",
            name: "replace",
            onchange: this.commit,
            onkeyup: this.commit
          });
          this.caseField = Object(crelt__WEBPACK_IMPORTED_MODULE_4__["default"])("input", {
            type: "checkbox",
            name: "case",
            checked: query.caseSensitive,
            onchange: this.commit
          });
          this.reField = Object(crelt__WEBPACK_IMPORTED_MODULE_4__["default"])("input", {
            type: "checkbox",
            name: "re",
            checked: query.regexp,
            onchange: this.commit
          });

          function button(name, onclick, content) {
            return Object(crelt__WEBPACK_IMPORTED_MODULE_4__["default"])("button", {
              "class": "cm-button",
              name: name,
              onclick: onclick,
              type: "button"
            }, content);
          }

          this.dom = Object(crelt__WEBPACK_IMPORTED_MODULE_4__["default"])("div", {
            onkeydown: function onkeydown(e) {
              return _this129.keydown(e);
            },
            "class": "cm-search"
          }, [this.searchField, button("next", function () {
            return findNext(view);
          }, [phrase(view, "next")]), button("prev", function () {
            return findPrevious(view);
          }, [phrase(view, "previous")]), button("select", function () {
            return selectMatches(view);
          }, [phrase(view, "all")]), Object(crelt__WEBPACK_IMPORTED_MODULE_4__["default"])("label", null, [this.caseField, phrase(view, "match case")]), Object(crelt__WEBPACK_IMPORTED_MODULE_4__["default"])("label", null, [this.reField, phrase(view, "regexp")])].concat(_toConsumableArray(view.state.readOnly ? [] : [Object(crelt__WEBPACK_IMPORTED_MODULE_4__["default"])("br"), this.replaceField, button("replace", function () {
            return replaceNext(view);
          }, [phrase(view, "replace")]), button("replaceAll", function () {
            return replaceAll(view);
          }, [phrase(view, "replace all")]), Object(crelt__WEBPACK_IMPORTED_MODULE_4__["default"])("button", {
            name: "close",
            onclick: function onclick() {
              return closeSearchPanel(view);
            },
            "aria-label": phrase(view, "close"),
            type: "button"
          }, ["×"])])));
        }

        _createClass(SearchPanel, [{
          key: "commit",
          value: function commit() {
            var query = new SearchQuery({
              search: this.searchField.value,
              caseSensitive: this.caseField.checked,
              regexp: this.reField.checked,
              replace: this.replaceField.value
            });

            if (!query.eq(this.query)) {
              this.query = query;
              this.view.dispatch({
                effects: setSearchQuery.of(query)
              });
            }
          }
        }, {
          key: "keydown",
          value: function keydown(e) {
            if (Object(_codemirror_view__WEBPACK_IMPORTED_MODULE_0__["runScopeHandlers"])(this.view, e, "search-panel")) {
              e.preventDefault();
            } else if (e.keyCode == 13 && e.target == this.searchField) {
              e.preventDefault();
              (e.shiftKey ? findPrevious : findNext)(this.view);
            } else if (e.keyCode == 13 && e.target == this.replaceField) {
              e.preventDefault();
              replaceNext(this.view);
            }
          }
        }, {
          key: "update",
          value: function update(_update33) {
            var _iterator243 = _createForOfIteratorHelper(_update33.transactions),
                _step243;

            try {
              for (_iterator243.s(); !(_step243 = _iterator243.n()).done;) {
                var tr = _step243.value;

                var _iterator244 = _createForOfIteratorHelper(tr.effects),
                    _step244;

                try {
                  for (_iterator244.s(); !(_step244 = _iterator244.n()).done;) {
                    var effect = _step244.value;
                    if (effect.is(setSearchQuery) && !effect.value.eq(this.query)) this.setQuery(effect.value);
                  }
                } catch (err) {
                  _iterator244.e(err);
                } finally {
                  _iterator244.f();
                }
              }
            } catch (err) {
              _iterator243.e(err);
            } finally {
              _iterator243.f();
            }
          }
        }, {
          key: "setQuery",
          value: function setQuery(query) {
            this.query = query;
            this.searchField.value = query.search;
            this.replaceField.value = query.replace;
            this.caseField.checked = query.caseSensitive;
            this.reField.checked = query.regexp;
          }
        }, {
          key: "mount",
          value: function mount() {
            this.searchField.select();
          }
        }, {
          key: "pos",
          get: function get() {
            return 80;
          }
        }, {
          key: "top",
          get: function get() {
            return this.view.state.facet(searchConfigFacet).top;
          }
        }]);

        return SearchPanel;
      }();

      function phrase(view, phrase) {
        return view.state.phrase(phrase);
      }

      var AnnounceMargin = 30;
      var Break = /[\s\.,:;?!]/;

      function announceMatch(view, _ref81) {
        var from = _ref81.from,
            to = _ref81.to;
        var lineStart = view.state.doc.lineAt(from).from,
            lineEnd = view.state.doc.lineAt(to).to;
        var start = Math.max(lineStart, from - AnnounceMargin),
            end = Math.min(lineEnd, to + AnnounceMargin);
        var text = view.state.sliceDoc(start, end);

        if (start != lineStart) {
          for (var _i184 = 0; _i184 < AnnounceMargin; _i184++) {
            if (!Break.test(text[_i184 + 1]) && Break.test(text[_i184])) {
              text = text.slice(_i184);
              break;
            }
          }
        }

        if (end != lineEnd) {
          for (var _i185 = text.length - 1; _i185 > text.length - AnnounceMargin; _i185--) {
            if (!Break.test(text[_i185 - 1]) && Break.test(text[_i185])) {
              text = text.slice(0, _i185);
              break;
            }
          }
        }

        return _codemirror_view__WEBPACK_IMPORTED_MODULE_0__["EditorView"].announce.of("".concat(view.state.phrase("current match"), ". ").concat(text, " ").concat(view.state.phrase("on line"), " ").concat(view.state.doc.lineAt(from).number));
      }

      var baseTheme = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_0__["EditorView"].baseTheme({
        ".cm-panel.cm-search": {
          padding: "2px 6px 4px",
          position: "relative",
          "& [name=close]": {
            position: "absolute",
            top: "0",
            right: "4px",
            backgroundColor: "inherit",
            border: "none",
            font: "inherit",
            padding: 0,
            margin: 0
          },
          "& input, & button, & label": {
            margin: ".2em .6em .2em 0"
          },
          "& input[type=checkbox]": {
            marginRight: ".2em"
          },
          "& label": {
            fontSize: "80%",
            whiteSpace: "pre"
          }
        },
        "&light .cm-searchMatch": {
          backgroundColor: "#ffff0054"
        },
        "&dark .cm-searchMatch": {
          backgroundColor: "#00ffff8a"
        },
        "&light .cm-searchMatch-selected": {
          backgroundColor: "#ff6a0054"
        },
        "&dark .cm-searchMatch-selected": {
          backgroundColor: "#ff00ff8a"
        }
      });

      var searchExtensions = [searchState, /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__["Prec"].lowest(searchHighlighter), baseTheme];
      /***/
    },

    /***/
    "nqdA":
    /*!**********************************************!*\
      !*** ./node_modules/w3c-keyname/index.es.js ***!
      \**********************************************/

    /*! exports provided: base, shift, keyName */

    /***/
    function nqdA(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "base", function () {
        return base;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "shift", function () {
        return shift;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "keyName", function () {
        return keyName;
      });

      var base = {
        8: "Backspace",
        9: "Tab",
        10: "Enter",
        12: "NumLock",
        13: "Enter",
        16: "Shift",
        17: "Control",
        18: "Alt",
        20: "CapsLock",
        27: "Escape",
        32: " ",
        33: "PageUp",
        34: "PageDown",
        35: "End",
        36: "Home",
        37: "ArrowLeft",
        38: "ArrowUp",
        39: "ArrowRight",
        40: "ArrowDown",
        44: "PrintScreen",
        45: "Insert",
        46: "Delete",
        59: ";",
        61: "=",
        91: "Meta",
        92: "Meta",
        106: "*",
        107: "+",
        108: ",",
        109: "-",
        110: ".",
        111: "/",
        144: "NumLock",
        145: "ScrollLock",
        160: "Shift",
        161: "Shift",
        162: "Control",
        163: "Control",
        164: "Alt",
        165: "Alt",
        173: "-",
        186: ";",
        187: "=",
        188: ",",
        189: "-",
        190: ".",
        191: "/",
        192: "`",
        219: "[",
        220: "\\",
        221: "]",
        222: "'",
        229: "q"
      };
      var shift = {
        48: ")",
        49: "!",
        50: "@",
        51: "#",
        52: "$",
        53: "%",
        54: "^",
        55: "&",
        56: "*",
        57: "(",
        59: ":",
        61: "+",
        173: "_",
        186: ":",
        187: "+",
        188: "<",
        189: "_",
        190: ">",
        191: "?",
        192: "~",
        219: "{",
        220: "|",
        221: "}",
        222: "\"",
        229: "Q"
      };
      var chrome = typeof navigator != "undefined" && /Chrome\/(\d+)/.exec(navigator.userAgent);
      var safari = typeof navigator != "undefined" && /Apple Computer/.test(navigator.vendor);
      var gecko = typeof navigator != "undefined" && /Gecko\/\d+/.test(navigator.userAgent);
      var mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
      var ie = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
      var brokenModifierNames = chrome && (mac || +chrome[1] < 57) || gecko && mac; // Fill in the digit keys

      for (var i = 0; i < 10; i++) {
        base[48 + i] = base[96 + i] = String(i);
      } // The function keys


      for (var i = 1; i <= 24; i++) {
        base[i + 111] = "F" + i;
      } // And the alphabetic keys


      for (var i = 65; i <= 90; i++) {
        base[i] = String.fromCharCode(i + 32);
        shift[i] = String.fromCharCode(i);
      } // For each code that doesn't have a shift-equivalent, copy the base name


      for (var code in base) {
        if (!shift.hasOwnProperty(code)) shift[code] = base[code];
      }

      function keyName(event) {
        // Don't trust event.key in Chrome when there are modifiers until
        // they fix https://bugs.chromium.org/p/chromium/issues/detail?id=633838
        var ignoreKey = brokenModifierNames && (event.ctrlKey || event.altKey || event.metaKey) || (safari || ie) && event.shiftKey && event.key && event.key.length == 1;
        var name = !ignoreKey && event.key || (event.shiftKey ? shift : base)[event.keyCode] || event.key || "Unidentified"; // Edge sometimes produces wrong names (Issue #3)

        if (name == "Esc") name = "Escape";
        if (name == "Del") name = "Delete"; // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/

        if (name == "Left") name = "ArrowLeft";
        if (name == "Up") name = "ArrowUp";
        if (name == "Right") name = "ArrowRight";
        if (name == "Down") name = "ArrowDown";
        return name;
      }
      /***/

    },

    /***/
    "rVk5":
    /*!************************************************************************************!*\
      !*** ./node_modules/@codemirror/lint/node_modules/@codemirror/state/dist/index.js ***!
      \************************************************************************************/

    /*! exports provided: Text, Annotation, AnnotationType, ChangeDesc, ChangeSet, CharCategory, Compartment, EditorSelection, EditorState, Facet, MapMode, Prec, SelectionRange, StateEffect, StateEffectType, StateField, Transaction, combineConfig */

    /***/
    function rVk5(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Annotation", function () {
        return Annotation;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AnnotationType", function () {
        return AnnotationType;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ChangeDesc", function () {
        return ChangeDesc;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ChangeSet", function () {
        return ChangeSet;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CharCategory", function () {
        return CharCategory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Compartment", function () {
        return Compartment;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EditorSelection", function () {
        return EditorSelection;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EditorState", function () {
        return EditorState;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Facet", function () {
        return Facet;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MapMode", function () {
        return MapMode;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Prec", function () {
        return Prec;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SelectionRange", function () {
        return SelectionRange;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "StateEffect", function () {
        return StateEffect;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "StateEffectType", function () {
        return StateEffectType;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "StateField", function () {
        return StateField;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Transaction", function () {
        return Transaction;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "combineConfig", function () {
        return combineConfig;
      });
      /* harmony import */


      var _codemirror_text__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @codemirror/text */
      "uZp5");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "Text", function () {
        return _codemirror_text__WEBPACK_IMPORTED_MODULE_0__["Text"];
      });

      var DefaultSplit = /\r\n?|\n/;
      /**
      Distinguishes different ways in which positions can be mapped.
      */

      var MapMode = /*@__PURE__*/function (MapMode) {
        /**
        Map a position to a valid new position, even when its context
        was deleted.
        */
        MapMode[MapMode["Simple"] = 0] = "Simple";
        /**
        Return null if deletion happens across the position.
        */

        MapMode[MapMode["TrackDel"] = 1] = "TrackDel";
        /**
        Return null if the character _before_ the position is deleted.
        */

        MapMode[MapMode["TrackBefore"] = 2] = "TrackBefore";
        /**
        Return null if the character _after_ the position is deleted.
        */

        MapMode[MapMode["TrackAfter"] = 3] = "TrackAfter";
        return MapMode;
      }(MapMode || (MapMode = {}));
      /**
      A change description is a variant of [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet)
      that doesn't store the inserted text. As such, it can't be
      applied, but is cheaper to store and manipulate.
      */


      var ChangeDesc = /*#__PURE__*/function () {
        // Sections are encoded as pairs of integers. The first is the
        // length in the current document, and the second is -1 for
        // unaffected sections, and the length of the replacement content
        // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
        // 0), and a replacement two positive numbers.

        /**
        @internal
        */
        function ChangeDesc(
        /**
        @internal
        */
        sections) {
          _classCallCheck(this, ChangeDesc);

          this.sections = sections;
        }
        /**
        The length of the document before the change.
        */


        _createClass(ChangeDesc, [{
          key: "length",
          get: function get() {
            var result = 0;

            for (var _i186 = 0; _i186 < this.sections.length; _i186 += 2) {
              result += this.sections[_i186];
            }

            return result;
          }
          /**
          The length of the document after the change.
          */

        }, {
          key: "newLength",
          get: function get() {
            var result = 0;

            for (var _i187 = 0; _i187 < this.sections.length; _i187 += 2) {
              var ins = this.sections[_i187 + 1];
              result += ins < 0 ? this.sections[_i187] : ins;
            }

            return result;
          }
          /**
          False when there are actual changes in this set.
          */

        }, {
          key: "empty",
          get: function get() {
            return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0;
          }
          /**
          Iterate over the unchanged parts left by these changes.
          */

        }, {
          key: "iterGaps",
          value: function iterGaps(f) {
            for (var _i188 = 0, posA = 0, posB = 0; _i188 < this.sections.length;) {
              var len = this.sections[_i188++],
                  ins = this.sections[_i188++];

              if (ins < 0) {
                f(posA, posB, len);
                posB += len;
              } else {
                posB += ins;
              }

              posA += len;
            }
          }
          /**
          Iterate over the ranges changed by these changes. (See
          [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
          variant that also provides you with the inserted text.)
          
          When `individual` is true, adjacent changes (which are kept
          separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
          reported separately.
          */

        }, {
          key: "iterChangedRanges",
          value: function iterChangedRanges(f) {
            var individual = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            _iterChanges2(this, f, individual);
          }
          /**
          Get a description of the inverted form of these changes.
          */

        }, {
          key: "invertedDesc",
          get: function get() {
            var sections = [];

            for (var _i189 = 0; _i189 < this.sections.length;) {
              var len = this.sections[_i189++],
                  ins = this.sections[_i189++];
              if (ins < 0) sections.push(len, ins);else sections.push(ins, len);
            }

            return new ChangeDesc(sections);
          }
          /**
          Compute the combined effect of applying another set of changes
          after this one. The length of the document after this set should
          match the length before `other`.
          */

        }, {
          key: "composeDesc",
          value: function composeDesc(other) {
            return this.empty ? other : other.empty ? this : composeSets(this, other);
          }
          /**
          Map this description, which should start with the same document
          as `other`, over another set of changes, so that it can be
          applied after it. When `before` is true, map as if the changes
          in `other` happened before the ones in `this`.
          */

        }, {
          key: "mapDesc",
          value: function mapDesc(other) {
            var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            return other.empty ? this : mapSet(this, other, before);
          }
        }, {
          key: "mapPos",
          value: function mapPos(pos) {
            var assoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
            var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : MapMode.Simple;
            var posA = 0,
                posB = 0;

            for (var _i190 = 0; _i190 < this.sections.length;) {
              var len = this.sections[_i190++],
                  ins = this.sections[_i190++],
                  endA = posA + len;

              if (ins < 0) {
                if (endA > pos) return posB + (pos - posA);
                posB += len;
              } else {
                if (mode != MapMode.Simple && endA >= pos && (mode == MapMode.TrackDel && posA < pos && endA > pos || mode == MapMode.TrackBefore && posA < pos || mode == MapMode.TrackAfter && endA > pos)) return null;
                if (endA > pos || endA == pos && assoc < 0 && !len) return pos == posA || assoc < 0 ? posB : posB + ins;
                posB += ins;
              }

              posA = endA;
            }

            if (pos > posA) throw new RangeError("Position ".concat(pos, " is out of range for changeset of length ").concat(posA));
            return posB;
          }
          /**
          Check whether these changes touch a given range. When one of the
          changes entirely covers the range, the string `"cover"` is
          returned.
          */

        }, {
          key: "touchesRange",
          value: function touchesRange(from) {
            var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;

            for (var _i191 = 0, pos = 0; _i191 < this.sections.length && pos <= to;) {
              var len = this.sections[_i191++],
                  ins = this.sections[_i191++],
                  end = pos + len;
              if (ins >= 0 && pos <= to && end >= from) return pos < from && end > to ? "cover" : true;
              pos = end;
            }

            return false;
          }
          /**
          @internal
          */

        }, {
          key: "toString",
          value: function toString() {
            var result = "";

            for (var _i192 = 0; _i192 < this.sections.length;) {
              var len = this.sections[_i192++],
                  ins = this.sections[_i192++];
              result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
            }

            return result;
          }
          /**
          Serialize this change desc to a JSON-representable value.
          */

        }, {
          key: "toJSON",
          value: function toJSON() {
            return this.sections;
          }
          /**
          Create a change desc from its JSON representation (as produced
          by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
          */

        }], [{
          key: "fromJSON",
          value: function fromJSON(json) {
            if (!Array.isArray(json) || json.length % 2 || json.some(function (a) {
              return typeof a != "number";
            })) throw new RangeError("Invalid JSON representation of ChangeDesc");
            return new ChangeDesc(json);
          }
        }]);

        return ChangeDesc;
      }();
      /**
      A change set represents a group of modifications to a document. It
      stores the document length, and can only be applied to documents
      with exactly that length.
      */


      var ChangeSet = /*#__PURE__*/function (_ChangeDesc2) {
        _inherits(ChangeSet, _ChangeDesc2);

        var _super61 = _createSuper(ChangeSet);

        /**
        @internal
        */
        function ChangeSet(sections,
        /**
        @internal
        */
        inserted) {
          var _this130;

          _classCallCheck(this, ChangeSet);

          _this130 = _super61.call(this, sections);
          _this130.inserted = inserted;
          return _this130;
        }
        /**
        Apply the changes to a document, returning the modified
        document.
        */


        _createClass(ChangeSet, [{
          key: "apply",
          value: function apply(doc) {
            if (this.length != doc.length) throw new RangeError("Applying change set to a document with the wrong length");

            _iterChanges2(this, function (fromA, toA, fromB, _toB, text) {
              return doc = doc.replace(fromB, fromB + (toA - fromA), text);
            }, false);

            return doc;
          }
        }, {
          key: "mapDesc",
          value: function mapDesc(other) {
            var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            return mapSet(this, other, before, true);
          }
          /**
          Given the document as it existed _before_ the changes, return a
          change set that represents the inverse of this set, which could
          be used to go from the document created by the changes back to
          the document as it existed before the changes.
          */

        }, {
          key: "invert",
          value: function invert(doc) {
            var sections = this.sections.slice(),
                inserted = [];

            for (var _i193 = 0, pos = 0; _i193 < sections.length; _i193 += 2) {
              var len = sections[_i193],
                  ins = sections[_i193 + 1];

              if (ins >= 0) {
                sections[_i193] = ins;
                sections[_i193 + 1] = len;
                var index = _i193 >> 1;

                while (inserted.length < index) {
                  inserted.push(_codemirror_text__WEBPACK_IMPORTED_MODULE_0__["Text"].empty);
                }

                inserted.push(len ? doc.slice(pos, pos + len) : _codemirror_text__WEBPACK_IMPORTED_MODULE_0__["Text"].empty);
              }

              pos += len;
            }

            return new ChangeSet(sections, inserted);
          }
          /**
          Combine two subsequent change sets into a single set. `other`
          must start in the document produced by `this`. If `this` goes
          `docA` → `docB` and `other` represents `docB` → `docC`, the
          returned value will represent the change `docA` → `docC`.
          */

        }, {
          key: "compose",
          value: function compose(other) {
            return this.empty ? other : other.empty ? this : composeSets(this, other, true);
          }
          /**
          Given another change set starting in the same document, maps this
          change set over the other, producing a new change set that can be
          applied to the document produced by applying `other`. When
          `before` is `true`, order changes as if `this` comes before
          `other`, otherwise (the default) treat `other` as coming first.
          
          Given two changes `A` and `B`, `A.compose(B.map(A))` and
          `B.compose(A.map(B, true))` will produce the same document. This
          provides a basic form of [operational
          transformation](https://en.wikipedia.org/wiki/Operational_transformation),
          and can be used for collaborative editing.
          */

        }, {
          key: "map",
          value: function map(other) {
            var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            return other.empty ? this : mapSet(this, other, before, true);
          }
          /**
          Iterate over the changed ranges in the document, calling `f` for
          each.
          
          When `individual` is true, adjacent changes are reported
          separately.
          */

        }, {
          key: "iterChanges",
          value: function iterChanges(f) {
            var individual = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            _iterChanges2(this, f, individual);
          }
          /**
          Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
          set.
          */

        }, {
          key: "desc",
          get: function get() {
            return new ChangeDesc(this.sections);
          }
          /**
          @internal
          */

        }, {
          key: "filter",
          value: function filter(ranges) {
            var resultSections = [],
                resultInserted = [],
                filteredSections = [];
            var iter = new SectionIter(this);

            done: for (var _i194 = 0, pos = 0;;) {
              var next = _i194 == ranges.length ? 1e9 : ranges[_i194++];

              while (pos < next || pos == next && iter.len == 0) {
                if (iter.done) break done;
                var len = Math.min(iter.len, next - pos);
                addSection(filteredSections, len, -1);
                var ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
                addSection(resultSections, len, ins);
                if (ins > 0) addInsert(resultInserted, resultSections, iter.text);
                iter.forward(len);
                pos += len;
              }

              var end = ranges[_i194++];

              while (pos < end) {
                if (iter.done) break done;

                var _len4 = Math.min(iter.len, end - pos);

                addSection(resultSections, _len4, -1);
                addSection(filteredSections, _len4, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
                iter.forward(_len4);
                pos += _len4;
              }
            }

            return {
              changes: new ChangeSet(resultSections, resultInserted),
              filtered: new ChangeDesc(filteredSections)
            };
          }
          /**
          Serialize this change set to a JSON-representable value.
          */

        }, {
          key: "toJSON",
          value: function toJSON() {
            var parts = [];

            for (var _i195 = 0; _i195 < this.sections.length; _i195 += 2) {
              var len = this.sections[_i195],
                  ins = this.sections[_i195 + 1];
              if (ins < 0) parts.push(len);else if (ins == 0) parts.push([len]);else parts.push([len].concat(this.inserted[_i195 >> 1].toJSON()));
            }

            return parts;
          }
          /**
          Create a change set for the given changes, for a document of the
          given length, using `lineSep` as line separator.
          */

        }], [{
          key: "of",
          value: function of(changes, length, lineSep) {
            var sections = [],
                inserted = [],
                pos = 0;
            var total = null;

            function flush() {
              var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
              if (!force && !sections.length) return;
              if (pos < length) addSection(sections, length - pos, -1);
              var set = new ChangeSet(sections, inserted);
              total = total ? total.compose(set.map(total)) : set;
              sections = [];
              inserted = [];
              pos = 0;
            }

            function process(spec) {
              if (Array.isArray(spec)) {
                var _iterator245 = _createForOfIteratorHelper(spec),
                    _step245;

                try {
                  for (_iterator245.s(); !(_step245 = _iterator245.n()).done;) {
                    var sub = _step245.value;
                    process(sub);
                  }
                } catch (err) {
                  _iterator245.e(err);
                } finally {
                  _iterator245.f();
                }
              } else if (spec instanceof ChangeSet) {
                if (spec.length != length) throw new RangeError("Mismatched change set length (got ".concat(spec.length, ", expected ").concat(length, ")"));
                flush();
                total = total ? total.compose(spec.map(total)) : spec;
              } else {
                var from = spec.from,
                    _spec$to3 = spec.to,
                    to = _spec$to3 === void 0 ? from : _spec$to3,
                    insert = spec.insert;
                if (from > to || from < 0 || to > length) throw new RangeError("Invalid change range ".concat(from, " to ").concat(to, " (in doc of length ").concat(length, ")"));
                var insText = !insert ? _codemirror_text__WEBPACK_IMPORTED_MODULE_0__["Text"].empty : typeof insert == "string" ? _codemirror_text__WEBPACK_IMPORTED_MODULE_0__["Text"].of(insert.split(lineSep || DefaultSplit)) : insert;
                var insLen = insText.length;
                if (from == to && insLen == 0) return;
                if (from < pos) flush();
                if (from > pos) addSection(sections, from - pos, -1);
                addSection(sections, to - from, insLen);
                addInsert(inserted, sections, insText);
                pos = to;
              }
            }

            process(changes);
            flush(!total);
            return total;
          }
          /**
          Create an empty changeset of the given length.
          */

        }, {
          key: "empty",
          value: function empty(length) {
            return new ChangeSet(length ? [length, -1] : [], []);
          }
          /**
          Create a changeset from its JSON representation (as produced by
          [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
          */

        }, {
          key: "fromJSON",
          value: function fromJSON(json) {
            if (!Array.isArray(json)) throw new RangeError("Invalid JSON representation of ChangeSet");
            var sections = [],
                inserted = [];

            for (var _i196 = 0; _i196 < json.length; _i196++) {
              var part = json[_i196];

              if (typeof part == "number") {
                sections.push(part, -1);
              } else if (!Array.isArray(part) || typeof part[0] != "number" || part.some(function (e, i) {
                return i && typeof e != "string";
              })) {
                throw new RangeError("Invalid JSON representation of ChangeSet");
              } else if (part.length == 1) {
                sections.push(part[0], 0);
              } else {
                while (inserted.length < _i196) {
                  inserted.push(_codemirror_text__WEBPACK_IMPORTED_MODULE_0__["Text"].empty);
                }

                inserted[_i196] = _codemirror_text__WEBPACK_IMPORTED_MODULE_0__["Text"].of(part.slice(1));
                sections.push(part[0], inserted[_i196].length);
              }
            }

            return new ChangeSet(sections, inserted);
          }
        }]);

        return ChangeSet;
      }(ChangeDesc);

      function addSection(sections, len, ins) {
        var forceJoin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
        if (len == 0 && ins <= 0) return;
        var last = sections.length - 2;
        if (last >= 0 && ins <= 0 && ins == sections[last + 1]) sections[last] += len;else if (len == 0 && sections[last] == 0) sections[last + 1] += ins;else if (forceJoin) {
          sections[last] += len;
          sections[last + 1] += ins;
        } else sections.push(len, ins);
      }

      function addInsert(values, sections, value) {
        if (value.length == 0) return;
        var index = sections.length - 2 >> 1;

        if (index < values.length) {
          values[values.length - 1] = values[values.length - 1].append(value);
        } else {
          while (values.length < index) {
            values.push(_codemirror_text__WEBPACK_IMPORTED_MODULE_0__["Text"].empty);
          }

          values.push(value);
        }
      }

      function _iterChanges2(desc, f, individual) {
        var inserted = desc.inserted;

        for (var posA = 0, posB = 0, _i197 = 0; _i197 < desc.sections.length;) {
          var len = desc.sections[_i197++],
              ins = desc.sections[_i197++];

          if (ins < 0) {
            posA += len;
            posB += len;
          } else {
            var endA = posA,
                endB = posB,
                _text = _codemirror_text__WEBPACK_IMPORTED_MODULE_0__["Text"].empty;

            for (;;) {
              endA += len;
              endB += ins;
              if (ins && inserted) _text = _text.append(inserted[_i197 - 2 >> 1]);
              if (individual || _i197 == desc.sections.length || desc.sections[_i197 + 1] < 0) break;
              len = desc.sections[_i197++];
              ins = desc.sections[_i197++];
            }

            f(posA, endA, posB, endB, _text);
            posA = endA;
            posB = endB;
          }
        }
      }

      function mapSet(setA, setB, before) {
        var mkSet = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
        var sections = [],
            insert = mkSet ? [] : null;
        var a = new SectionIter(setA),
            b = new SectionIter(setB);

        for (var posA = 0, posB = 0;;) {
          if (a.ins == -1) {
            posA += a.len;
            a.next();
          } else if (b.ins == -1 && posB < posA) {
            var skip = Math.min(b.len, posA - posB);
            b.forward(skip);
            addSection(sections, skip, -1);
            posB += skip;
          } else if (b.ins >= 0 && (a.done || posB < posA || posB == posA && (b.len < a.len || b.len == a.len && !before))) {
            addSection(sections, b.ins, -1);

            while (posA > posB && !a.done && posA + a.len < posB + b.len) {
              posA += a.len;
              a.next();
            }

            posB += b.len;
            b.next();
          } else if (a.ins >= 0) {
            var len = 0,
                end = posA + a.len;

            for (;;) {
              if (b.ins >= 0 && posB > posA && posB + b.len < end) {
                len += b.ins;
                posB += b.len;
                b.next();
              } else if (b.ins == -1 && posB < end) {
                var _skip2 = Math.min(b.len, end - posB);

                len += _skip2;
                b.forward(_skip2);
                posB += _skip2;
              } else {
                break;
              }
            }

            addSection(sections, len, a.ins);
            if (insert) addInsert(insert, sections, a.text);
            posA = end;
            a.next();
          } else if (a.done && b.done) {
            return insert ? new ChangeSet(sections, insert) : new ChangeDesc(sections);
          } else {
            throw new Error("Mismatched change set lengths");
          }
        }
      }

      function composeSets(setA, setB) {
        var mkSet = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var sections = [];
        var insert = mkSet ? [] : null;
        var a = new SectionIter(setA),
            b = new SectionIter(setB);

        for (var open = false;;) {
          if (a.done && b.done) {
            return insert ? new ChangeSet(sections, insert) : new ChangeDesc(sections);
          } else if (a.ins == 0) {
            // Deletion in A
            addSection(sections, a.len, 0, open);
            a.next();
          } else if (b.len == 0 && !b.done) {
            // Insertion in B
            addSection(sections, 0, b.ins, open);
            if (insert) addInsert(insert, sections, b.text);
            b.next();
          } else if (a.done || b.done) {
            throw new Error("Mismatched change set lengths");
          } else {
            var len = Math.min(a.len2, b.len),
                sectionLen = sections.length;

            if (a.ins == -1) {
              var insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;
              addSection(sections, len, insB, open);
              if (insert && insB) addInsert(insert, sections, b.text);
            } else if (b.ins == -1) {
              addSection(sections, a.off ? 0 : a.len, len, open);
              if (insert) addInsert(insert, sections, a.textBit(len));
            } else {
              addSection(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);
              if (insert && !b.off) addInsert(insert, sections, b.text);
            }

            open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);
            a.forward2(len);
            b.forward(len);
          }
        }
      }

      var SectionIter = /*#__PURE__*/function () {
        function SectionIter(set) {
          _classCallCheck(this, SectionIter);

          this.set = set;
          this.i = 0;
          this.next();
        }

        _createClass(SectionIter, [{
          key: "next",
          value: function next() {
            var sections = this.set.sections;

            if (this.i < sections.length) {
              this.len = sections[this.i++];
              this.ins = sections[this.i++];
            } else {
              this.len = 0;
              this.ins = -2;
            }

            this.off = 0;
          }
        }, {
          key: "done",
          get: function get() {
            return this.ins == -2;
          }
        }, {
          key: "len2",
          get: function get() {
            return this.ins < 0 ? this.len : this.ins;
          }
        }, {
          key: "text",
          get: function get() {
            var inserted = this.set.inserted,
                index = this.i - 2 >> 1;
            return index >= inserted.length ? _codemirror_text__WEBPACK_IMPORTED_MODULE_0__["Text"].empty : inserted[index];
          }
        }, {
          key: "textBit",
          value: function textBit(len) {
            var inserted = this.set.inserted,
                index = this.i - 2 >> 1;
            return index >= inserted.length && !len ? _codemirror_text__WEBPACK_IMPORTED_MODULE_0__["Text"].empty : inserted[index].slice(this.off, len == null ? undefined : this.off + len);
          }
        }, {
          key: "forward",
          value: function forward(len) {
            if (len == this.len) this.next();else {
              this.len -= len;
              this.off += len;
            }
          }
        }, {
          key: "forward2",
          value: function forward2(len) {
            if (this.ins == -1) this.forward(len);else if (len == this.ins) this.next();else {
              this.ins -= len;
              this.off += len;
            }
          }
        }]);

        return SectionIter;
      }();
      /**
      A single selection range. When
      [`allowMultipleSelections`](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)
      is enabled, a [selection](https://codemirror.net/6/docs/ref/#state.EditorSelection) may hold
      multiple ranges. By default, selections hold exactly one range.
      */


      var SelectionRange = /*#__PURE__*/function () {
        /**
        @internal
        */
        function SelectionRange(
        /**
        The lower boundary of the range.
        */
        from,
        /**
        The upper boundary of the range.
        */
        to, flags) {
          _classCallCheck(this, SelectionRange);

          this.from = from;
          this.to = to;
          this.flags = flags;
        }
        /**
        The anchor of the range—the side that doesn't move when you
        extend it.
        */


        _createClass(SelectionRange, [{
          key: "anchor",
          get: function get() {
            return this.flags & 16
            /* Inverted */
            ? this.to : this.from;
          }
          /**
          The head of the range, which is moved when the range is
          [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
          */

        }, {
          key: "head",
          get: function get() {
            return this.flags & 16
            /* Inverted */
            ? this.from : this.to;
          }
          /**
          True when `anchor` and `head` are at the same position.
          */

        }, {
          key: "empty",
          get: function get() {
            return this.from == this.to;
          }
          /**
          If this is a cursor that is explicitly associated with the
          character on one of its sides, this returns the side. -1 means
          the character before its position, 1 the character after, and 0
          means no association.
          */

        }, {
          key: "assoc",
          get: function get() {
            return this.flags & 4
            /* AssocBefore */
            ? -1 : this.flags & 8
            /* AssocAfter */
            ? 1 : 0;
          }
          /**
          The bidirectional text level associated with this cursor, if
          any.
          */

        }, {
          key: "bidiLevel",
          get: function get() {
            var level = this.flags & 3
            /* BidiLevelMask */
            ;
            return level == 3 ? null : level;
          }
          /**
          The goal column (stored vertical offset) associated with a
          cursor. This is used to preserve the vertical position when
          [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
          lines of different length.
          */

        }, {
          key: "goalColumn",
          get: function get() {
            var value = this.flags >> 5
            /* GoalColumnOffset */
            ;
            return value == 33554431
            /* NoGoalColumn */
            ? undefined : value;
          }
          /**
          Map this range through a change, producing a valid range in the
          updated document.
          */

        }, {
          key: "map",
          value: function map(change) {
            var assoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
            var from = change.mapPos(this.from, assoc),
                to = change.mapPos(this.to, assoc);
            return from == this.from && to == this.to ? this : new SelectionRange(from, to, this.flags);
          }
          /**
          Extend this range to cover at least `from` to `to`.
          */

        }, {
          key: "extend",
          value: function extend(from) {
            var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;
            if (from <= this.anchor && to >= this.anchor) return EditorSelection.range(from, to);
            var head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;
            return EditorSelection.range(this.anchor, head);
          }
          /**
          Compare this range to another range.
          */

        }, {
          key: "eq",
          value: function eq(other) {
            return this.anchor == other.anchor && this.head == other.head;
          }
          /**
          Return a JSON-serializable object representing the range.
          */

        }, {
          key: "toJSON",
          value: function toJSON() {
            return {
              anchor: this.anchor,
              head: this.head
            };
          }
          /**
          Convert a JSON representation of a range to a `SelectionRange`
          instance.
          */

        }], [{
          key: "fromJSON",
          value: function fromJSON(json) {
            if (!json || typeof json.anchor != "number" || typeof json.head != "number") throw new RangeError("Invalid JSON representation for SelectionRange");
            return EditorSelection.range(json.anchor, json.head);
          }
        }]);

        return SelectionRange;
      }();
      /**
      An editor selection holds one or more selection ranges.
      */


      var EditorSelection = /*#__PURE__*/function () {
        /**
        @internal
        */
        function EditorSelection(
        /**
        The ranges in the selection, sorted by position. Ranges cannot
        overlap (but they may touch, if they aren't empty).
        */
        ranges) {
          var mainIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

          _classCallCheck(this, EditorSelection);

          this.ranges = ranges;
          this.mainIndex = mainIndex;
        }
        /**
        Map a selection through a change. Used to adjust the selection
        position for changes.
        */


        _createClass(EditorSelection, [{
          key: "map",
          value: function map(change) {
            var assoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
            if (change.empty) return this;
            return EditorSelection.create(this.ranges.map(function (r) {
              return r.map(change, assoc);
            }), this.mainIndex);
          }
          /**
          Compare this selection to another selection.
          */

        }, {
          key: "eq",
          value: function eq(other) {
            if (this.ranges.length != other.ranges.length || this.mainIndex != other.mainIndex) return false;

            for (var _i198 = 0; _i198 < this.ranges.length; _i198++) {
              if (!this.ranges[_i198].eq(other.ranges[_i198])) return false;
            }

            return true;
          }
          /**
          Get the primary selection range. Usually, you should make sure
          your code applies to _all_ ranges, by using methods like
          [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
          */

        }, {
          key: "main",
          get: function get() {
            return this.ranges[this.mainIndex];
          }
          /**
          Make sure the selection only has one range. Returns a selection
          holding only the main range from this selection.
          */

        }, {
          key: "asSingle",
          value: function asSingle() {
            return this.ranges.length == 1 ? this : new EditorSelection([this.main]);
          }
          /**
          Extend this selection with an extra range.
          */

        }, {
          key: "addRange",
          value: function addRange(range) {
            var main = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            return EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);
          }
          /**
          Replace a given range with another range, and then normalize the
          selection to merge and sort ranges if necessary.
          */

        }, {
          key: "replaceRange",
          value: function replaceRange(range) {
            var which = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.mainIndex;
            var ranges = this.ranges.slice();
            ranges[which] = range;
            return EditorSelection.create(ranges, this.mainIndex);
          }
          /**
          Convert this selection to an object that can be serialized to
          JSON.
          */

        }, {
          key: "toJSON",
          value: function toJSON() {
            return {
              ranges: this.ranges.map(function (r) {
                return r.toJSON();
              }),
              main: this.mainIndex
            };
          }
          /**
          Create a selection from a JSON representation.
          */

        }], [{
          key: "fromJSON",
          value: function fromJSON(json) {
            if (!json || !Array.isArray(json.ranges) || typeof json.main != "number" || json.main >= json.ranges.length) throw new RangeError("Invalid JSON representation for EditorSelection");
            return new EditorSelection(json.ranges.map(function (r) {
              return SelectionRange.fromJSON(r);
            }), json.main);
          }
          /**
          Create a selection holding a single range.
          */

        }, {
          key: "single",
          value: function single(anchor) {
            var head = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : anchor;
            return new EditorSelection([EditorSelection.range(anchor, head)], 0);
          }
          /**
          Sort and merge the given set of ranges, creating a valid
          selection.
          */

        }, {
          key: "create",
          value: function create(ranges) {
            var mainIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            if (ranges.length == 0) throw new RangeError("A selection needs at least one range");

            for (var pos = 0, _i199 = 0; _i199 < ranges.length; _i199++) {
              var range = ranges[_i199];
              if (range.empty ? range.from <= pos : range.from < pos) return normalized(ranges.slice(), mainIndex);
              pos = range.to;
            }

            return new EditorSelection(ranges, mainIndex);
          }
          /**
          Create a cursor selection range at the given position. You can
          safely ignore the optional arguments in most situations.
          */

        }, {
          key: "cursor",
          value: function cursor(pos) {
            var assoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var bidiLevel = arguments.length > 2 ? arguments[2] : undefined;
            var goalColumn = arguments.length > 3 ? arguments[3] : undefined;
            return new SelectionRange(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 4
            /* AssocBefore */
            : 8
            /* AssocAfter */
            ) | (bidiLevel == null ? 3 : Math.min(2, bidiLevel)) | (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431
            /* NoGoalColumn */
            ) << 5
            /* GoalColumnOffset */
            );
          }
          /**
          Create a selection range.
          */

        }, {
          key: "range",
          value: function range(anchor, head, goalColumn) {
            var goal = (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431
            /* NoGoalColumn */
            ) << 5
            /* GoalColumnOffset */
            ;
            return head < anchor ? new SelectionRange(head, anchor, 16
            /* Inverted */
            | goal) : new SelectionRange(anchor, head, goal);
          }
        }]);

        return EditorSelection;
      }();

      function normalized(ranges) {
        var mainIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var main = ranges[mainIndex];
        ranges.sort(function (a, b) {
          return a.from - b.from;
        });
        mainIndex = ranges.indexOf(main);

        for (var _i200 = 1; _i200 < ranges.length; _i200++) {
          var range = ranges[_i200],
              prev = ranges[_i200 - 1];

          if (range.empty ? range.from <= prev.to : range.from < prev.to) {
            var from = prev.from,
                to = Math.max(range.to, prev.to);
            if (_i200 <= mainIndex) mainIndex--;
            ranges.splice(--_i200, 2, range.anchor > range.head ? EditorSelection.range(to, from) : EditorSelection.range(from, to));
          }
        }

        return new EditorSelection(ranges, mainIndex);
      }

      function checkSelection(selection, docLength) {
        var _iterator246 = _createForOfIteratorHelper(selection.ranges),
            _step246;

        try {
          for (_iterator246.s(); !(_step246 = _iterator246.n()).done;) {
            var range = _step246.value;
            if (range.to > docLength) throw new RangeError("Selection points outside of document");
          }
        } catch (err) {
          _iterator246.e(err);
        } finally {
          _iterator246.f();
        }
      }

      var nextID = 0;
      /**
      A facet is a labeled value that is associated with an editor
      state. It takes inputs from any number of extensions, and combines
      those into a single output value.
      
      Examples of facets are the [theme](https://codemirror.net/6/docs/ref/#view.EditorView^theme) styles
      associated with an editor or the [tab
      size](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) (which is reduced to a single
      value, using the input with the hightest precedence).
      */

      var Facet = /*#__PURE__*/function () {
        function Facet(
        /**
        @internal
        */
        combine,
        /**
        @internal
        */
        compareInput,
        /**
        @internal
        */
        compare, isStatic,
        /**
        @internal
        */
        extensions) {
          _classCallCheck(this, Facet);

          this.combine = combine;
          this.compareInput = compareInput;
          this.compare = compare;
          this.isStatic = isStatic;
          this.extensions = extensions;
          /**
          @internal
          */

          this.id = nextID++;
          this["default"] = combine([]);
        }
        /**
        Define a new facet.
        */


        _createClass(Facet, [{
          key: "of",
          value:
          /**
          Returns an extension that adds the given value for this facet.
          */
          function of(value) {
            return new FacetProvider([], this, 0
            /* Static */
            , value);
          }
          /**
          Create an extension that computes a value for the facet from a
          state. You must take care to declare the parts of the state that
          this value depends on, since your function is only called again
          for a new state when one of those parts changed.
          
          In most cases, you'll want to use the
          [`provide`](https://codemirror.net/6/docs/ref/#state.StateField^define^config.provide) option when
          defining a field instead.
          */

        }, {
          key: "compute",
          value: function compute(deps, get) {
            if (this.isStatic) throw new Error("Can't compute a static facet");
            return new FacetProvider(deps, this, 1
            /* Single */
            , get);
          }
          /**
          Create an extension that computes zero or more values for this
          facet from a state.
          */

        }, {
          key: "computeN",
          value: function computeN(deps, get) {
            if (this.isStatic) throw new Error("Can't compute a static facet");
            return new FacetProvider(deps, this, 2
            /* Multi */
            , get);
          }
        }, {
          key: "from",
          value: function from(field, get) {
            if (!get) get = function get(x) {
              return x;
            };
            return this.compute([field], function (state) {
              return get(state.field(field));
            });
          }
        }], [{
          key: "define",
          value: function define() {
            var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            return new Facet(config.combine || function (a) {
              return a;
            }, config.compareInput || function (a, b) {
              return a === b;
            }, config.compare || (!config.combine ? sameArray : function (a, b) {
              return a === b;
            }), !!config["static"], config.enables);
          }
        }]);

        return Facet;
      }();

      function sameArray(a, b) {
        return a == b || a.length == b.length && a.every(function (e, i) {
          return e === b[i];
        });
      }

      var FacetProvider = /*#__PURE__*/function () {
        function FacetProvider(dependencies, facet, type, value) {
          _classCallCheck(this, FacetProvider);

          this.dependencies = dependencies;
          this.facet = facet;
          this.type = type;
          this.value = value;
          this.id = nextID++;
        }

        _createClass(FacetProvider, [{
          key: "dynamicSlot",
          value: function dynamicSlot(addresses) {
            var _a;

            var getter = this.value;
            var compare = this.facet.compareInput;
            var idx = addresses[this.id] >> 1,
                multi = this.type == 2
            /* Multi */
            ;
            var depDoc = false,
                depSel = false,
                depAddrs = [];

            var _iterator247 = _createForOfIteratorHelper(this.dependencies),
                _step247;

            try {
              for (_iterator247.s(); !(_step247 = _iterator247.n()).done;) {
                var dep = _step247.value;
                if (dep == "doc") depDoc = true;else if (dep == "selection") depSel = true;else if ((((_a = addresses[dep.id]) !== null && _a !== void 0 ? _a : 1) & 1) == 0) depAddrs.push(addresses[dep.id]);
              }
            } catch (err) {
              _iterator247.e(err);
            } finally {
              _iterator247.f();
            }

            return function (state, tr) {
              var oldVal = state.values[idx];

              if (oldVal === Uninitialized) {
                state.values[idx] = getter(state);
                return 1
                /* Changed */
                ;
              }

              if (tr) {
                var depChanged = depDoc && tr.docChanged || depSel && (tr.docChanged || tr.selection) || depAddrs.some(function (addr) {
                  return (ensureAddr(state, addr) & 1
                  /* Changed */
                  ) > 0;
                });

                if (depChanged) {
                  var newVal = getter(state);

                  if (multi ? !compareArray(newVal, oldVal, compare) : !compare(newVal, oldVal)) {
                    state.values[idx] = newVal;
                    return 1
                    /* Changed */
                    ;
                  }
                }
              }

              return 0;
            };
          }
        }]);

        return FacetProvider;
      }();

      function compareArray(a, b, compare) {
        if (a.length != b.length) return false;

        for (var _i201 = 0; _i201 < a.length; _i201++) {
          if (!compare(a[_i201], b[_i201])) return false;
        }

        return true;
      }

      function dynamicFacetSlot(addresses, facet, providers) {
        var providerAddrs = providers.map(function (p) {
          return addresses[p.id];
        });
        var providerTypes = providers.map(function (p) {
          return p.type;
        });
        var dynamic = providerAddrs.filter(function (p) {
          return !(p & 1);
        });
        var idx = addresses[facet.id] >> 1;
        return function (state, tr) {
          var oldVal = state.values[idx],
              changed = oldVal === Uninitialized || !tr;

          var _iterator248 = _createForOfIteratorHelper(dynamic),
              _step248;

          try {
            for (_iterator248.s(); !(_step248 = _iterator248.n()).done;) {
              var dynAddr = _step248.value;
              if (ensureAddr(state, dynAddr) & 1
              /* Changed */
              ) changed = true;
            }
          } catch (err) {
            _iterator248.e(err);
          } finally {
            _iterator248.f();
          }

          if (!changed) return 0;
          var values = [];

          for (var _i202 = 0; _i202 < providerAddrs.length; _i202++) {
            var _value2 = getAddr(state, providerAddrs[_i202]);

            if (providerTypes[_i202] == 2
            /* Multi */
            ) {
              var _iterator249 = _createForOfIteratorHelper(_value2),
                  _step249;

              try {
                for (_iterator249.s(); !(_step249 = _iterator249.n()).done;) {
                  var val = _step249.value;
                  values.push(val);
                }
              } catch (err) {
                _iterator249.e(err);
              } finally {
                _iterator249.f();
              }
            } else values.push(_value2);
          }

          var value = facet.combine(values);
          if (oldVal !== Uninitialized && facet.compare(value, oldVal)) return 0;
          state.values[idx] = value;
          return 1
          /* Changed */
          ;
        };
      }

      var initField = /*@__PURE__*/Facet.define({
        "static": true
      });
      /**
      Fields can store additional information in an editor state, and
      keep it in sync with the rest of the state.
      */

      var StateField = /*#__PURE__*/function () {
        function StateField(
        /**
        @internal
        */
        id, createF, updateF, compareF,
        /**
        @internal
        */
        spec) {
          _classCallCheck(this, StateField);

          this.id = id;
          this.createF = createF;
          this.updateF = updateF;
          this.compareF = compareF;
          this.spec = spec;
          /**
          @internal
          */

          this.provides = undefined;
        }
        /**
        Define a state field.
        */


        _createClass(StateField, [{
          key: "create",
          value: function create(state) {
            var _this131 = this;

            var init = state.facet(initField).find(function (i) {
              return i.field == _this131;
            });
            return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);
          }
          /**
          @internal
          */

        }, {
          key: "slot",
          value: function slot(addresses) {
            var _this132 = this;

            var idx = addresses[this.id] >> 1;
            return function (state, tr) {
              var oldVal = state.values[idx];

              if (oldVal === Uninitialized) {
                state.values[idx] = _this132.create(state);
                return 1
                /* Changed */
                ;
              }

              if (tr) {
                var value = _this132.updateF(oldVal, tr);

                if (!_this132.compareF(oldVal, value)) {
                  state.values[idx] = value;
                  return 1
                  /* Changed */
                  ;
                }
              }

              return 0;
            };
          }
          /**
          Returns an extension that enables this field and overrides the
          way it is initialized. Can be useful when you need to provide a
          non-default starting value for the field.
          */

        }, {
          key: "init",
          value: function init(create) {
            return [this, initField.of({
              field: this,
              create: create
            })];
          }
          /**
          State field instances can be used as
          [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
          given state.
          */

        }, {
          key: "extension",
          get: function get() {
            return this;
          }
        }], [{
          key: "define",
          value: function define(config) {
            var field = new StateField(nextID++, config.create, config.update, config.compare || function (a, b) {
              return a === b;
            }, config);
            if (config.provide) field.provides = config.provide(field);
            return field;
          }
        }]);

        return StateField;
      }();

      var Prec_ = {
        lowest: 4,
        low: 3,
        "default": 2,
        high: 1,
        highest: 0
      };

      function prec(value) {
        return function (ext) {
          return new PrecExtension(ext, value);
        };
      }
      /**
      By default extensions are registered in the order they are found
      in the flattened form of nested array that was provided.
      Individual extension values can be assigned a precedence to
      override this. Extensions that do not have a precedence set get
      the precedence of the nearest parent with a precedence, or
      [`default`](https://codemirror.net/6/docs/ref/#state.Prec.default) if there is no such parent. The
      final ordering of extensions is determined by first sorting by
      precedence and then by order within each precedence.
      */


      var Prec = {
        /**
        The lowest precedence level. Meant for things that should end up
        near the end of the extension order.
        */
        lowest: /*@__PURE__*/prec(Prec_.lowest),

        /**
        A lower-than-default precedence, for extensions.
        */
        low: /*@__PURE__*/prec(Prec_.low),

        /**
        The default precedence, which is also used for extensions
        without an explicit precedence.
        */
        "default": /*@__PURE__*/prec(Prec_["default"]),

        /**
        A higher-than-default precedence, for extensions that should
        come before those with default precedence.
        */
        high: /*@__PURE__*/prec(Prec_.high),

        /**
        The highest precedence level, for extensions that should end up
        near the start of the precedence ordering.
        */
        highest: /*@__PURE__*/prec(Prec_.highest),
        // FIXME Drop these in some future breaking version

        /**
        Backwards-compatible synonym for `Prec.lowest`.
        */
        fallback: /*@__PURE__*/prec(Prec_.lowest),

        /**
        Backwards-compatible synonym for `Prec.high`.
        */
        extend: /*@__PURE__*/prec(Prec_.high),

        /**
        Backwards-compatible synonym for `Prec.highest`.
        */
        override: /*@__PURE__*/prec(Prec_.highest)
      };

      var PrecExtension = /*#__PURE__*/_createClass(function PrecExtension(inner, prec) {
        _classCallCheck(this, PrecExtension);

        this.inner = inner;
        this.prec = prec;
      });
      /**
      Extension compartments can be used to make a configuration
      dynamic. By [wrapping](https://codemirror.net/6/docs/ref/#state.Compartment.of) part of your
      configuration in a compartment, you can later
      [replace](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure) that part through a
      transaction.
      */


      var Compartment = /*#__PURE__*/function () {
        function Compartment() {
          _classCallCheck(this, Compartment);
        }

        _createClass(Compartment, [{
          key: "of",
          value:
          /**
          Create an instance of this compartment to add to your [state
          configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
          */
          function of(ext) {
            return new CompartmentInstance(this, ext);
          }
          /**
          Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
          reconfigures this compartment.
          */

        }, {
          key: "reconfigure",
          value: function reconfigure(content) {
            return Compartment.reconfigure.of({
              compartment: this,
              extension: content
            });
          }
          /**
          Get the current content of the compartment in the state, or
          `undefined` if it isn't present.
          */

        }, {
          key: "get",
          value: function get(state) {
            return state.config.compartments.get(this);
          }
        }]);

        return Compartment;
      }();

      var CompartmentInstance = /*#__PURE__*/_createClass(function CompartmentInstance(compartment, inner) {
        _classCallCheck(this, CompartmentInstance);

        this.compartment = compartment;
        this.inner = inner;
      });

      var Configuration = /*#__PURE__*/function () {
        function Configuration(base, compartments, dynamicSlots, address, staticValues) {
          _classCallCheck(this, Configuration);

          this.base = base;
          this.compartments = compartments;
          this.dynamicSlots = dynamicSlots;
          this.address = address;
          this.staticValues = staticValues;
          this.statusTemplate = [];

          while (this.statusTemplate.length < dynamicSlots.length) {
            this.statusTemplate.push(0
            /* Unresolved */
            );
          }
        }

        _createClass(Configuration, [{
          key: "staticFacet",
          value: function staticFacet(facet) {
            var addr = this.address[facet.id];
            return addr == null ? facet["default"] : this.staticValues[addr >> 1];
          }
        }], [{
          key: "resolve",
          value: function resolve(base, compartments, oldState) {
            var fields = [];
            var facets = Object.create(null);
            var newCompartments = new Map();

            var _iterator250 = _createForOfIteratorHelper(flatten(base, compartments, newCompartments)),
                _step250;

            try {
              for (_iterator250.s(); !(_step250 = _iterator250.n()).done;) {
                var ext = _step250.value;
                if (ext instanceof StateField) fields.push(ext);else (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
              }
            } catch (err) {
              _iterator250.e(err);
            } finally {
              _iterator250.f();
            }

            var address = Object.create(null);
            var staticValues = [];
            var dynamicSlots = [];
            var dynamicDeps = [];

            var _loop28 = function _loop28() {
              var field = _fields2[_i203];
              address[field.id] = dynamicSlots.length << 1;
              dynamicSlots.push(function (a) {
                return field.slot(a);
              });
              dynamicDeps.push([]);
            };

            for (var _i203 = 0, _fields2 = fields; _i203 < _fields2.length; _i203++) {
              _loop28();
            }

            var _loop29 = function _loop29(id) {
              var providers = facets[id],
                  facet = providers[0].facet;

              if (providers.every(function (p) {
                return p.type == 0;
              }
              /* Static */
              )) {
                address[facet.id] = staticValues.length << 1 | 1;
                var value = facet.combine(providers.map(function (p) {
                  return p.value;
                }));
                var oldAddr = oldState ? oldState.config.address[facet.id] : null;

                if (oldAddr != null) {
                  var oldVal = getAddr(oldState, oldAddr);
                  if (facet.compare(value, oldVal)) value = oldVal;
                }

                staticValues.push(value);
              } else {
                var _iterator251 = _createForOfIteratorHelper(providers),
                    _step251;

                try {
                  var _loop30 = function _loop30() {
                    var p = _step251.value;

                    if (p.type == 0
                    /* Static */
                    ) {
                      address[p.id] = staticValues.length << 1 | 1;
                      staticValues.push(p.value);
                    } else {
                      address[p.id] = dynamicSlots.length << 1;
                      dynamicSlots.push(function (a) {
                        return p.dynamicSlot(a);
                      });
                      dynamicDeps.push(p.dependencies.filter(function (d) {
                        return typeof d != "string";
                      }).map(function (d) {
                        return d.id;
                      }));
                    }
                  };

                  for (_iterator251.s(); !(_step251 = _iterator251.n()).done;) {
                    _loop30();
                  }
                } catch (err) {
                  _iterator251.e(err);
                } finally {
                  _iterator251.f();
                }

                address[facet.id] = dynamicSlots.length << 1;
                dynamicSlots.push(function (a) {
                  return dynamicFacetSlot(a, facet, providers);
                });
                dynamicDeps.push(providers.filter(function (p) {
                  return p.type != 0;
                }
                /* Static */
                ).map(function (d) {
                  return d.id;
                }));
              }
            };

            for (var id in facets) {
              _loop29(id);
            }

            var dynamicValues = dynamicSlots.map(function (_) {
              return Uninitialized;
            });

            if (oldState) {
              var canReuse = function canReuse(id, depth) {
                if (depth > 7) return false;
                var addr = address[id];
                if (!(addr & 1)) return dynamicDeps[addr >> 1].every(function (id) {
                  return canReuse(id, depth + 1);
                });
                var oldAddr = oldState.config.address[id];
                return oldAddr != null && getAddr(oldState, oldAddr) == staticValues[addr >> 1];
              }; // Copy over old values for shared facets/fields, if we can
              // prove that they don't need to be recomputed.


              for (var _id3 in address) {
                var cur = address[_id3],
                    prev = oldState.config.address[_id3];
                if (prev != null && (cur & 1) == 0 && canReuse(+_id3, 0)) dynamicValues[cur >> 1] = getAddr(oldState, prev);
              }
            }

            return {
              configuration: new Configuration(base, newCompartments, dynamicSlots.map(function (f) {
                return f(address);
              }), address, staticValues),
              values: dynamicValues
            };
          }
        }]);

        return Configuration;
      }();

      function flatten(extension, compartments, newCompartments) {
        var result = [[], [], [], [], []];
        var seen = new Map();

        function inner(ext, prec) {
          var known = seen.get(ext);

          if (known != null) {
            if (known >= prec) return;
            var found = result[known].indexOf(ext);
            if (found > -1) result[known].splice(found, 1);
            if (ext instanceof CompartmentInstance) newCompartments["delete"](ext.compartment);
          }

          seen.set(ext, prec);

          if (Array.isArray(ext)) {
            var _iterator252 = _createForOfIteratorHelper(ext),
                _step252;

            try {
              for (_iterator252.s(); !(_step252 = _iterator252.n()).done;) {
                var e = _step252.value;
                inner(e, prec);
              }
            } catch (err) {
              _iterator252.e(err);
            } finally {
              _iterator252.f();
            }
          } else if (ext instanceof CompartmentInstance) {
            if (newCompartments.has(ext.compartment)) throw new RangeError("Duplicate use of compartment in extensions");
            var content = compartments.get(ext.compartment) || ext.inner;
            newCompartments.set(ext.compartment, content);
            inner(content, prec);
          } else if (ext instanceof PrecExtension) {
            inner(ext.inner, ext.prec);
          } else if (ext instanceof StateField) {
            result[prec].push(ext);
            if (ext.provides) inner(ext.provides, prec);
          } else if (ext instanceof FacetProvider) {
            result[prec].push(ext);
            if (ext.facet.extensions) inner(ext.facet.extensions, prec);
          } else {
            var _content2 = ext.extension;
            if (!_content2) throw new Error("Unrecognized extension value in extension set (".concat(ext, "). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks."));
            inner(_content2, prec);
          }
        }

        inner(extension, Prec_["default"]);
        return result.reduce(function (a, b) {
          return a.concat(b);
        });
      }

      var Uninitialized = {};

      function ensureAddr(state, addr) {
        if (addr & 1) return 2
        /* Computed */
        ;
        var idx = addr >> 1;
        var status = state.status[idx];
        if (status == 4
        /* Computing */
        ) throw new Error("Cyclic dependency between fields and/or facets");
        if (status & 2
        /* Computed */
        ) return status;
        state.status[idx] = 4
        /* Computing */
        ;
        var changed = state.config.dynamicSlots[idx](state, state.applying);
        return state.status[idx] = 2
        /* Computed */
        | changed;
      }

      function getAddr(state, addr) {
        return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
      }

      var languageData = /*@__PURE__*/Facet.define();
      var allowMultipleSelections = /*@__PURE__*/Facet.define({
        combine: function combine(values) {
          return values.some(function (v) {
            return v;
          });
        },
        "static": true
      });
      var lineSeparator = /*@__PURE__*/Facet.define({
        combine: function combine(values) {
          return values.length ? values[0] : undefined;
        },
        "static": true
      });
      var changeFilter = /*@__PURE__*/Facet.define();
      var transactionFilter = /*@__PURE__*/Facet.define();
      var transactionExtender = /*@__PURE__*/Facet.define();
      var readOnly = /*@__PURE__*/Facet.define({
        combine: function combine(values) {
          return values.length ? values[0] : false;
        }
      });
      /**
      Annotations are tagged values that are used to add metadata to
      transactions in an extensible way. They should be used to model
      things that effect the entire transaction (such as its [time
      stamp](https://codemirror.net/6/docs/ref/#state.Transaction^time) or information about its
      [origin](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent)). For effects that happen
      _alongside_ the other changes made by the transaction, [state
      effects](https://codemirror.net/6/docs/ref/#state.StateEffect) are more appropriate.
      */

      var Annotation = /*#__PURE__*/function () {
        /**
        @internal
        */
        function Annotation(
        /**
        The annotation type.
        */
        type,
        /**
        The value of this annotation.
        */
        value) {
          _classCallCheck(this, Annotation);

          this.type = type;
          this.value = value;
        }
        /**
        Define a new type of annotation.
        */


        _createClass(Annotation, null, [{
          key: "define",
          value: function define() {
            return new AnnotationType();
          }
        }]);

        return Annotation;
      }();
      /**
      Marker that identifies a type of [annotation](https://codemirror.net/6/docs/ref/#state.Annotation).
      */


      var AnnotationType = /*#__PURE__*/function () {
        function AnnotationType() {
          _classCallCheck(this, AnnotationType);
        }

        _createClass(AnnotationType, [{
          key: "of",
          value:
          /**
          Create an instance of this annotation.
          */
          function of(value) {
            return new Annotation(this, value);
          }
        }]);

        return AnnotationType;
      }();
      /**
      Representation of a type of state effect. Defined with
      [`StateEffect.define`](https://codemirror.net/6/docs/ref/#state.StateEffect^define).
      */


      var StateEffectType = /*#__PURE__*/function () {
        /**
        @internal
        */
        function StateEffectType( // The `any` types in these function types are there to work
        // around TypeScript issue #37631, where the type guard on
        // `StateEffect.is` mysteriously stops working when these properly
        // have type `Value`.

        /**
        @internal
        */
        map) {
          _classCallCheck(this, StateEffectType);

          this.map = map;
        }
        /**
        Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
        type.
        */


        _createClass(StateEffectType, [{
          key: "of",
          value: function of(value) {
            return new StateEffect(this, value);
          }
        }]);

        return StateEffectType;
      }();
      /**
      State effects can be used to represent additional effects
      associated with a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction.effects). They
      are often useful to model changes to custom [state
      fields](https://codemirror.net/6/docs/ref/#state.StateField), when those changes aren't implicit in
      document or selection changes.
      */


      var StateEffect = /*#__PURE__*/function () {
        /**
        @internal
        */
        function StateEffect(
        /**
        @internal
        */
        type,
        /**
        The value of this effect.
        */
        value) {
          _classCallCheck(this, StateEffect);

          this.type = type;
          this.value = value;
        }
        /**
        Map this effect through a position mapping. Will return
        `undefined` when that ends up deleting the effect.
        */


        _createClass(StateEffect, [{
          key: "map",
          value: function map(mapping) {
            var mapped = this.type.map(this.value, mapping);
            return mapped === undefined ? undefined : mapped == this.value ? this : new StateEffect(this.type, mapped);
          }
          /**
          Tells you whether this effect object is of a given
          [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
          */

        }, {
          key: "is",
          value: function is(type) {
            return this.type == type;
          }
          /**
          Define a new effect type. The type parameter indicates the type
          of values that his effect holds.
          */

        }], [{
          key: "define",
          value: function define() {
            var spec = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            return new StateEffectType(spec.map || function (v) {
              return v;
            });
          }
          /**
          Map an array of effects through a change set.
          */

        }, {
          key: "mapEffects",
          value: function mapEffects(effects, mapping) {
            if (!effects.length) return effects;
            var result = [];

            var _iterator253 = _createForOfIteratorHelper(effects),
                _step253;

            try {
              for (_iterator253.s(); !(_step253 = _iterator253.n()).done;) {
                var effect = _step253.value;
                var mapped = effect.map(mapping);
                if (mapped) result.push(mapped);
              }
            } catch (err) {
              _iterator253.e(err);
            } finally {
              _iterator253.f();
            }

            return result;
          }
        }]);

        return StateEffect;
      }();
      /**
      This effect can be used to reconfigure the root extensions of
      the editor. Doing this will discard any extensions
      [appended](https://codemirror.net/6/docs/ref/#state.StateEffect^appendConfig), but does not reset
      the content of [reconfigured](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure)
      compartments.
      */


      StateEffect.reconfigure = /*@__PURE__*/StateEffect.define();
      /**
      Append extensions to the top-level configuration of the editor.
      */

      StateEffect.appendConfig = /*@__PURE__*/StateEffect.define();
      /**
      Changes to the editor state are grouped into transactions.
      Typically, a user action creates a single transaction, which may
      contain any number of document changes, may change the selection,
      or have other effects. Create a transaction by calling
      [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
      */

      var Transaction = /*#__PURE__*/function () {
        /**
        @internal
        */
        function Transaction(
        /**
        The state from which the transaction starts.
        */
        startState,
        /**
        The document changes made by this transaction.
        */
        changes,
        /**
        The selection set by this transaction, or undefined if it
        doesn't explicitly set a selection.
        */
        selection,
        /**
        The effects added to the transaction.
        */
        effects,
        /**
        @internal
        */
        annotations,
        /**
        Whether the selection should be scrolled into view after this
        transaction is dispatched.
        */
        scrollIntoView) {
          _classCallCheck(this, Transaction);

          this.startState = startState;
          this.changes = changes;
          this.selection = selection;
          this.effects = effects;
          this.annotations = annotations;
          this.scrollIntoView = scrollIntoView;
          /**
          @internal
          */

          this._doc = null;
          /**
          @internal
          */

          this._state = null;
          if (selection) checkSelection(selection, changes.newLength);
          if (!annotations.some(function (a) {
            return a.type == Transaction.time;
          })) this.annotations = annotations.concat(Transaction.time.of(Date.now()));
        }
        /**
        The new document produced by the transaction. Contrary to
        [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
        force the entire new state to be computed right away, so it is
        recommended that [transaction
        filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
        when they need to look at the new document.
        */


        _createClass(Transaction, [{
          key: "newDoc",
          get: function get() {
            return this._doc || (this._doc = this.changes.apply(this.startState.doc));
          }
          /**
          The new selection produced by the transaction. If
          [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
          this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
          current selection through the changes made by the transaction.
          */

        }, {
          key: "newSelection",
          get: function get() {
            return this.selection || this.startState.selection.map(this.changes);
          }
          /**
          The new state created by the transaction. Computed on demand
          (but retained for subsequent access), so itis recommended not to
          access it in [transaction
          filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
          */

        }, {
          key: "state",
          get: function get() {
            if (!this._state) this.startState.applyTransaction(this);
            return this._state;
          }
          /**
          Get the value of the given annotation type, if any.
          */

        }, {
          key: "annotation",
          value: function annotation(type) {
            var _iterator254 = _createForOfIteratorHelper(this.annotations),
                _step254;

            try {
              for (_iterator254.s(); !(_step254 = _iterator254.n()).done;) {
                var ann = _step254.value;
                if (ann.type == type) return ann.value;
              }
            } catch (err) {
              _iterator254.e(err);
            } finally {
              _iterator254.f();
            }

            return undefined;
          }
          /**
          Indicates whether the transaction changed the document.
          */

        }, {
          key: "docChanged",
          get: function get() {
            return !this.changes.empty;
          }
          /**
          Indicates whether this transaction reconfigures the state
          (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
          with a top-level configuration
          [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
          */

        }, {
          key: "reconfigured",
          get: function get() {
            return this.startState.config != this.state.config;
          }
          /**
          Returns true if the transaction has a [user
          event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
          or more specific than `event`. For example, if the transaction
          has `"select.pointer"` as user event, `"select"` and
          `"select.pointer"` will match it.
          */

        }, {
          key: "isUserEvent",
          value: function isUserEvent(event) {
            var e = this.annotation(Transaction.userEvent);
            return !!(e && (e == event || e.length > event.length && e.slice(0, event.length) == event && e[event.length] == "."));
          }
        }]);

        return Transaction;
      }();
      /**
      Annotation used to store transaction timestamps.
      */


      Transaction.time = /*@__PURE__*/Annotation.define();
      /**
      Annotation used to associate a transaction with a user interface
      event. Holds a string identifying the event, using a
      dot-separated format to support attaching more specific
      information. The events used by the core libraries are:
      
       - `"input"` when content is entered
         - `"input.type"` for typed input
           - `"input.type.compose"` for composition
         - `"input.paste"` for pasted input
         - `"input.drop"` when adding content with drag-and-drop
         - `"input.complete"` when autocompleting
       - `"delete"` when the user deletes content
         - `"delete.selection"` when deleting the selection
         - `"delete.forward"` when deleting forward from the selection
         - `"delete.backward"` when deleting backward from the selection
         - `"delete.cut"` when cutting to the clipboard
       - `"move"` when content is moved
         - `"move.drop"` when content is moved within the editor through drag-and-drop
       - `"select"` when explicitly changing the selection
         - `"select.pointer"` when selecting with a mouse or other pointing device
       - `"undo"` and `"redo"` for history actions
      
      Use [`isUserEvent`](https://codemirror.net/6/docs/ref/#state.Transaction.isUserEvent) to check
      whether the annotation matches a given event.
      */

      Transaction.userEvent = /*@__PURE__*/Annotation.define();
      /**
      Annotation indicating whether a transaction should be added to
      the undo history or not.
      */

      Transaction.addToHistory = /*@__PURE__*/Annotation.define();
      /**
      Annotation indicating (when present and true) that a transaction
      represents a change made by some other actor, not the user. This
      is used, for example, to tag other people's changes in
      collaborative editing.
      */

      Transaction.remote = /*@__PURE__*/Annotation.define();

      function joinRanges(a, b) {
        var result = [];

        for (var iA = 0, iB = 0;;) {
          var from = void 0,
              to = void 0;

          if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {
            from = a[iA++];
            to = a[iA++];
          } else if (iB < b.length) {
            from = b[iB++];
            to = b[iB++];
          } else return result;

          if (!result.length || result[result.length - 1] < from) result.push(from, to);else if (result[result.length - 1] < to) result[result.length - 1] = to;
        }
      }

      function mergeTransaction(a, b, sequential) {
        var _a;

        var mapForA, mapForB, changes;

        if (sequential) {
          mapForA = b.changes;
          mapForB = ChangeSet.empty(b.changes.length);
          changes = a.changes.compose(b.changes);
        } else {
          mapForA = b.changes.map(a.changes);
          mapForB = a.changes.mapDesc(b.changes, true);
          changes = a.changes.compose(mapForA);
        }

        return {
          changes: changes,
          selection: b.selection ? b.selection.map(mapForB) : (_a = a.selection) === null || _a === void 0 ? void 0 : _a.map(mapForA),
          effects: StateEffect.mapEffects(a.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),
          annotations: a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations,
          scrollIntoView: a.scrollIntoView || b.scrollIntoView
        };
      }

      function resolveTransactionInner(state, spec, docSize) {
        var sel = spec.selection,
            annotations = asArray(spec.annotations);
        if (spec.userEvent) annotations = annotations.concat(Transaction.userEvent.of(spec.userEvent));
        return {
          changes: spec.changes instanceof ChangeSet ? spec.changes : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),
          selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),
          effects: asArray(spec.effects),
          annotations: annotations,
          scrollIntoView: !!spec.scrollIntoView
        };
      }

      function resolveTransaction(state, specs, filter) {
        var s = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);
        if (specs.length && specs[0].filter === false) filter = false;

        for (var _i204 = 1; _i204 < specs.length; _i204++) {
          if (specs[_i204].filter === false) filter = false;
          var seq = !!specs[_i204].sequential;
          s = mergeTransaction(s, resolveTransactionInner(state, specs[_i204], seq ? s.changes.newLength : state.doc.length), seq);
        }

        var tr = new Transaction(state, s.changes, s.selection, s.effects, s.annotations, s.scrollIntoView);
        return extendTransaction(filter ? filterTransaction(tr) : tr);
      } // Finish a transaction by applying filters if necessary.


      function filterTransaction(tr) {
        var state = tr.startState; // Change filters

        var result = true;

        var _iterator255 = _createForOfIteratorHelper(state.facet(changeFilter)),
            _step255;

        try {
          for (_iterator255.s(); !(_step255 = _iterator255.n()).done;) {
            var filter = _step255.value;
            var value = filter(tr);

            if (value === false) {
              result = false;
              break;
            }

            if (Array.isArray(value)) result = result === true ? value : joinRanges(result, value);
          }
        } catch (err) {
          _iterator255.e(err);
        } finally {
          _iterator255.f();
        }

        if (result !== true) {
          var changes, back;

          if (result === false) {
            back = tr.changes.invertedDesc;
            changes = ChangeSet.empty(state.doc.length);
          } else {
            var filtered = tr.changes.filter(result);
            changes = filtered.changes;
            back = filtered.filtered.invertedDesc;
          }

          tr = new Transaction(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);
        } // Transaction filters


        var filters = state.facet(transactionFilter);

        for (var _i205 = filters.length - 1; _i205 >= 0; _i205--) {
          var _filtered2 = filters[_i205](tr);

          if (_filtered2 instanceof Transaction) tr = _filtered2;else if (Array.isArray(_filtered2) && _filtered2.length == 1 && _filtered2[0] instanceof Transaction) tr = _filtered2[0];else tr = resolveTransaction(state, asArray(_filtered2), false);
        }

        return tr;
      }

      function extendTransaction(tr) {
        var state = tr.startState,
            extenders = state.facet(transactionExtender),
            spec = tr;

        for (var _i206 = extenders.length - 1; _i206 >= 0; _i206--) {
          var extension = extenders[_i206](tr);

          if (extension && Object.keys(extension).length) spec = mergeTransaction(tr, resolveTransactionInner(state, extension, tr.changes.newLength), true);
        }

        return spec == tr ? tr : new Transaction(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);
      }

      var none = [];

      function asArray(value) {
        return value == null ? none : Array.isArray(value) ? value : [value];
      }
      /**
      The categories produced by a [character
      categorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer). These are used
      do things like selecting by word.
      */


      var CharCategory = /*@__PURE__*/function (CharCategory) {
        /**
        Word characters.
        */
        CharCategory[CharCategory["Word"] = 0] = "Word";
        /**
        Whitespace.
        */

        CharCategory[CharCategory["Space"] = 1] = "Space";
        /**
        Anything else.
        */

        CharCategory[CharCategory["Other"] = 2] = "Other";
        return CharCategory;
      }(CharCategory || (CharCategory = {}));

      var nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
      var wordChar;

      try {
        wordChar = /*@__PURE__*/new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
      } catch (_) {}

      function hasWordChar(str) {
        if (wordChar) return wordChar.test(str);

        for (var _i207 = 0; _i207 < str.length; _i207++) {
          var ch = str[_i207];
          if (/\w/.test(ch) || ch > "\x80" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch))) return true;
        }

        return false;
      }

      function makeCategorizer(wordChars) {
        return function (_char5) {
          if (!/\S/.test(_char5)) return CharCategory.Space;
          if (hasWordChar(_char5)) return CharCategory.Word;

          for (var _i208 = 0; _i208 < wordChars.length; _i208++) {
            if (_char5.indexOf(wordChars[_i208]) > -1) return CharCategory.Word;
          }

          return CharCategory.Other;
        };
      }
      /**
      The editor state class is a persistent (immutable) data structure.
      To update a state, you [create](https://codemirror.net/6/docs/ref/#state.EditorState.update) a
      [transaction](https://codemirror.net/6/docs/ref/#state.Transaction), which produces a _new_ state
      instance, without modifying the original object.
      
      As such, _never_ mutate properties of a state directly. That'll
      just break things.
      */


      var EditorState = /*#__PURE__*/function () {
        /**
        @internal
        */
        function EditorState(
        /**
        @internal
        */
        config,
        /**
        The current document.
        */
        doc,
        /**
        The current selection.
        */
        selection,
        /**
        @internal
        */
        values) {
          var tr = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

          _classCallCheck(this, EditorState);

          this.config = config;
          this.doc = doc;
          this.selection = selection;
          this.values = values;
          /**
          @internal
          */

          this.applying = null;
          this.status = config.statusTemplate.slice();
          this.applying = tr; // Fill in the computed state immediately, so that further queries
          // for it made during the update return this state

          if (tr) tr._state = this;

          for (var _i209 = 0; _i209 < this.config.dynamicSlots.length; _i209++) {
            ensureAddr(this, _i209 << 1);
          }

          this.applying = null;
        }

        _createClass(EditorState, [{
          key: "field",
          value: function field(_field2) {
            var require = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            var addr = this.config.address[_field2.id];

            if (addr == null) {
              if (require) throw new RangeError("Field is not present in this state");
              return undefined;
            }

            ensureAddr(this, addr);
            return getAddr(this, addr);
          }
          /**
          Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
          state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
          can be passed. Unless
          [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
          [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
          are assumed to start in the _current_ document (not the document
          produced by previous specs), and its
          [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
          [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
          to the document created by its _own_ changes. The resulting
          transaction contains the combined effect of all the different
          specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
          specs take precedence over earlier ones.
          */

        }, {
          key: "update",
          value: function update() {
            for (var _len5 = arguments.length, specs = new Array(_len5), _key4 = 0; _key4 < _len5; _key4++) {
              specs[_key4] = arguments[_key4];
            }

            return resolveTransaction(this, specs, true);
          }
          /**
          @internal
          */

        }, {
          key: "applyTransaction",
          value: function applyTransaction(tr) {
            var conf = this.config,
                _conf2 = conf,
                base = _conf2.base,
                compartments = _conf2.compartments;

            var _iterator256 = _createForOfIteratorHelper(tr.effects),
                _step256;

            try {
              for (_iterator256.s(); !(_step256 = _iterator256.n()).done;) {
                var effect = _step256.value;

                if (effect.is(Compartment.reconfigure)) {
                  if (conf) {
                    compartments = new Map();
                    conf.compartments.forEach(function (val, key) {
                      return compartments.set(key, val);
                    });
                    conf = null;
                  }

                  compartments.set(effect.value.compartment, effect.value.extension);
                } else if (effect.is(StateEffect.reconfigure)) {
                  conf = null;
                  base = effect.value;
                } else if (effect.is(StateEffect.appendConfig)) {
                  conf = null;
                  base = asArray(base).concat(effect.value);
                }
              }
            } catch (err) {
              _iterator256.e(err);
            } finally {
              _iterator256.f();
            }

            var startValues;

            if (!conf) {
              var resolved = Configuration.resolve(base, compartments, this);
              conf = resolved.configuration;
              var intermediateState = new EditorState(conf, this.doc, this.selection, resolved.values, null);
              startValues = intermediateState.values;
            } else {
              startValues = tr.startState.values.slice();
            }

            new EditorState(conf, tr.newDoc, tr.newSelection, startValues, tr);
          }
          /**
          Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
          replaces every selection range with the given content.
          */

        }, {
          key: "replaceSelection",
          value: function replaceSelection(text) {
            if (typeof text == "string") text = this.toText(text);
            return this.changeByRange(function (range) {
              return {
                changes: {
                  from: range.from,
                  to: range.to,
                  insert: text
                },
                range: EditorSelection.cursor(range.from + text.length)
              };
            });
          }
          /**
          Create a set of changes and a new selection by running the given
          function for each range in the active selection. The function
          can return an optional set of changes (in the coordinate space
          of the start document), plus an updated range (in the coordinate
          space of the document produced by the call's own changes). This
          method will merge all the changes and ranges into a single
          changeset and selection, and return it as a [transaction
          spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
          [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
          */

        }, {
          key: "changeByRange",
          value: function changeByRange(f) {
            var sel = this.selection;
            var result1 = f(sel.ranges[0]);
            var changes = this.changes(result1.changes),
                ranges = [result1.range];
            var effects = asArray(result1.effects);

            for (var _i210 = 1; _i210 < sel.ranges.length; _i210++) {
              var result = f(sel.ranges[_i210]);
              var newChanges = this.changes(result.changes),
                  newMapped = newChanges.map(changes);

              for (var j = 0; j < _i210; j++) {
                ranges[j] = ranges[j].map(newMapped);
              }

              var mapBy = changes.mapDesc(newChanges, true);
              ranges.push(result.range.map(mapBy));
              changes = changes.compose(newMapped);
              effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray(result.effects), mapBy));
            }

            return {
              changes: changes,
              selection: EditorSelection.create(ranges, sel.mainIndex),
              effects: effects
            };
          }
          /**
          Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
          description, taking the state's document length and line
          separator into account.
          */

        }, {
          key: "changes",
          value: function changes() {
            var spec = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
            if (spec instanceof ChangeSet) return spec;
            return ChangeSet.of(spec, this.doc.length, this.facet(EditorState.lineSeparator));
          }
          /**
          Using the state's [line
          separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
          [`Text`](https://codemirror.net/6/docs/ref/#text.Text) instance from the given string.
          */

        }, {
          key: "toText",
          value: function toText(string) {
            return _codemirror_text__WEBPACK_IMPORTED_MODULE_0__["Text"].of(string.split(this.facet(EditorState.lineSeparator) || DefaultSplit));
          }
          /**
          Return the given range of the document as a string.
          */

        }, {
          key: "sliceDoc",
          value: function sliceDoc() {
            var from = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
            var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.doc.length;
            return this.doc.sliceString(from, to, this.lineBreak);
          }
          /**
          Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
          */

        }, {
          key: "facet",
          value: function facet(_facet2) {
            var addr = this.config.address[_facet2.id];
            if (addr == null) return _facet2["default"];
            ensureAddr(this, addr);
            return getAddr(this, addr);
          }
          /**
          Convert this state to a JSON-serializable object. When custom
          fields should be serialized, you can pass them in as an object
          mapping property names (in the resulting object, which should
          not use `doc` or `selection`) to fields.
          */

        }, {
          key: "toJSON",
          value: function toJSON(fields) {
            var result = {
              doc: this.sliceDoc(),
              selection: this.selection.toJSON()
            };
            if (fields) for (var prop in fields) {
              var value = fields[prop];
              if (value instanceof StateField) result[prop] = value.spec.toJSON(this.field(fields[prop]), this);
            }
            return result;
          }
          /**
          Deserialize a state from its JSON representation. When custom
          fields should be deserialized, pass the same object you passed
          to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
          third argument.
          */

        }, {
          key: "tabSize",
          get:
          /**
          The size (in columns) of a tab in the document, determined by
          the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
          */
          function get() {
            return this.facet(EditorState.tabSize);
          }
          /**
          Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
          string for this state.
          */

        }, {
          key: "lineBreak",
          get: function get() {
            return this.facet(EditorState.lineSeparator) || "\n";
          }
          /**
          Returns true when the editor is
          [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
          */

        }, {
          key: "readOnly",
          get: function get() {
            return this.facet(readOnly);
          }
          /**
          Look up a translation for the given phrase (via the
          [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
          original string if no translation is found.
          */

        }, {
          key: "phrase",
          value: function phrase(_phrase2) {
            var _iterator257 = _createForOfIteratorHelper(this.facet(EditorState.phrases)),
                _step257;

            try {
              for (_iterator257.s(); !(_step257 = _iterator257.n()).done;) {
                var map = _step257.value;
                if (Object.prototype.hasOwnProperty.call(map, _phrase2)) return map[_phrase2];
              }
            } catch (err) {
              _iterator257.e(err);
            } finally {
              _iterator257.f();
            }

            return _phrase2;
          }
          /**
          Find the values for a given language data field, provided by the
          the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
          */

        }, {
          key: "languageDataAt",
          value: function languageDataAt(name, pos) {
            var side = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
            var values = [];

            var _iterator258 = _createForOfIteratorHelper(this.facet(languageData)),
                _step258;

            try {
              for (_iterator258.s(); !(_step258 = _iterator258.n()).done;) {
                var provider = _step258.value;

                var _iterator259 = _createForOfIteratorHelper(provider(this, pos, side)),
                    _step259;

                try {
                  for (_iterator259.s(); !(_step259 = _iterator259.n()).done;) {
                    var result = _step259.value;
                    if (Object.prototype.hasOwnProperty.call(result, name)) values.push(result[name]);
                  }
                } catch (err) {
                  _iterator259.e(err);
                } finally {
                  _iterator259.f();
                }
              }
            } catch (err) {
              _iterator258.e(err);
            } finally {
              _iterator258.f();
            }

            return values;
          }
          /**
          Return a function that can categorize strings (expected to
          represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#text.findClusterBreak))
          into one of:
          
           - Word (contains an alphanumeric character or a character
             explicitly listed in the local language's `"wordChars"`
             language data, which should be a string)
           - Space (contains only whitespace)
           - Other (anything else)
          */

        }, {
          key: "charCategorizer",
          value: function charCategorizer(at) {
            return makeCategorizer(this.languageDataAt("wordChars", at).join(""));
          }
          /**
          Find the word at the given position, meaning the range
          containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
          around it. If no word characters are adjacent to the position,
          this returns null.
          */

        }, {
          key: "wordAt",
          value: function wordAt(pos) {
            var _this$doc$lineAt2 = this.doc.lineAt(pos),
                text = _this$doc$lineAt2.text,
                from = _this$doc$lineAt2.from,
                length = _this$doc$lineAt2.length;

            var cat = this.charCategorizer(pos);
            var start = pos - from,
                end = pos - from;

            while (start > 0) {
              var prev = Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_0__["findClusterBreak"])(text, start, false);
              if (cat(text.slice(prev, start)) != CharCategory.Word) break;
              start = prev;
            }

            while (end < length) {
              var next = Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_0__["findClusterBreak"])(text, end);
              if (cat(text.slice(end, next)) != CharCategory.Word) break;
              end = next;
            }

            return start == end ? null : EditorSelection.range(start + from, end + from);
          }
        }], [{
          key: "fromJSON",
          value: function fromJSON(json) {
            var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var fields = arguments.length > 2 ? arguments[2] : undefined;
            if (!json || typeof json.doc != "string") throw new RangeError("Invalid JSON representation for EditorState");
            var fieldInit = [];

            if (fields) {
              var _loop31 = function _loop31(prop) {
                var field = fields[prop],
                    value = json[prop];
                fieldInit.push(field.init(function (state) {
                  return field.spec.fromJSON(value, state);
                }));
              };

              for (var prop in fields) {
                _loop31(prop);
              }
            }

            return EditorState.create({
              doc: json.doc,
              selection: EditorSelection.fromJSON(json.selection),
              extensions: config.extensions ? fieldInit.concat([config.extensions]) : fieldInit
            });
          }
          /**
          Create a new state. You'll usually only need this when
          initializing an editor—updated states are created by applying
          transactions.
          */

        }, {
          key: "create",
          value: function create() {
            var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            var _Configuration$resolv = Configuration.resolve(config.extensions || [], new Map()),
                configuration = _Configuration$resolv.configuration,
                values = _Configuration$resolv.values;

            var doc = config.doc instanceof _codemirror_text__WEBPACK_IMPORTED_MODULE_0__["Text"] ? config.doc : _codemirror_text__WEBPACK_IMPORTED_MODULE_0__["Text"].of((config.doc || "").split(configuration.staticFacet(EditorState.lineSeparator) || DefaultSplit));
            var selection = !config.selection ? EditorSelection.single(0) : config.selection instanceof EditorSelection ? config.selection : EditorSelection.single(config.selection.anchor, config.selection.head);
            checkSelection(selection, doc.length);
            if (!configuration.staticFacet(allowMultipleSelections)) selection = selection.asSingle();
            return new EditorState(configuration, doc, selection, values);
          }
        }]);

        return EditorState;
      }();
      /**
      A facet that, when enabled, causes the editor to allow multiple
      ranges to be selected. Be careful though, because by default the
      editor relies on the native DOM selection, which cannot handle
      multiple selections. An extension like
      [`drawSelection`](https://codemirror.net/6/docs/ref/#view.drawSelection) can be used to make
      secondary selections visible to the user.
      */


      EditorState.allowMultipleSelections = allowMultipleSelections;
      /**
      Configures the tab size to use in this state. The first
      (highest-precedence) value of the facet is used. If no value is
      given, this defaults to 4.
      */

      EditorState.tabSize = /*@__PURE__*/Facet.define({
        combine: function combine(values) {
          return values.length ? values[0] : 4;
        }
      });
      /**
      The line separator to use. By default, any of `"\n"`, `"\r\n"`
      and `"\r"` is treated as a separator when splitting lines, and
      lines are joined with `"\n"`.
      
      When you configure a value here, only that precise separator
      will be used, allowing you to round-trip documents through the
      editor without normalizing line separators.
      */

      EditorState.lineSeparator = lineSeparator;
      /**
      This facet controls the value of the
      [`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) getter, which is
      consulted by commands and extensions that implement editing
      functionality to determine whether they should apply. It
      defaults to false, but when its highest-precedence value is
      `true`, such functionality disables itself.
      
      Not to be confused with
      [`EditorView.editable`](https://codemirror.net/6/docs/ref/#view.EditorView^editable), which
      controls whether the editor's DOM is set to be editable (and
      thus focusable).
      */

      EditorState.readOnly = readOnly;
      /**
      Registers translation phrases. The
      [`phrase`](https://codemirror.net/6/docs/ref/#state.EditorState.phrase) method will look through
      all objects registered with this facet to find translations for
      its argument.
      */

      EditorState.phrases = /*@__PURE__*/Facet.define();
      /**
      A facet used to register [language
      data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) providers.
      */

      EditorState.languageData = languageData;
      /**
      Facet used to register change filters, which are called for each
      transaction (unless explicitly
      [disabled](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter)), and can suppress
      part of the transaction's changes.
      
      Such a function can return `true` to indicate that it doesn't
      want to do anything, `false` to completely stop the changes in
      the transaction, or a set of ranges in which changes should be
      suppressed. Such ranges are represented as an array of numbers,
      with each pair of two number indicating the start and end of a
      range. So for example `[10, 20, 100, 110]` suppresses changes
      between 10 and 20, and between 100 and 110.
      */

      EditorState.changeFilter = changeFilter;
      /**
      Facet used to register a hook that gets a chance to update or
      replace transaction specs before they are applied. This will
      only be applied for transactions that don't have
      [`filter`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter) set to `false`. You
      can either return a single transaction spec (possibly the input
      transaction), or an array of specs (which will be combined in
      the same way as the arguments to
      [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update)).
      
      When possible, it is recommended to avoid accessing
      [`Transaction.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state) in a filter,
      since it will force creation of a state that will then be
      discarded again, if the transaction is actually filtered.
      
      (This functionality should be used with care. Indiscriminately
      modifying transaction is likely to break something or degrade
      the user experience.)
      */

      EditorState.transactionFilter = transactionFilter;
      /**
      This is a more limited form of
      [`transactionFilter`](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter),
      which can only add
      [annotations](https://codemirror.net/6/docs/ref/#state.TransactionSpec.annotations) and
      [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects). _But_, this type
      of filter runs even the transaction has disabled regular
      [filtering](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter), making it suitable
      for effects that don't need to touch the changes or selection,
      but do want to process every transaction.
      
      Extenders run _after_ filters, when both are applied.
      */

      EditorState.transactionExtender = transactionExtender;
      Compartment.reconfigure = /*@__PURE__*/StateEffect.define();
      /**
      Utility function for combining behaviors to fill in a config
      object from an array of provided configs. Will, by default, error
      when a field gets two values that aren't `===`-equal, but you can
      provide combine functions per field to do something else.
      */

      function combineConfig(configs, defaults) {
        var combine = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var result = {};

        var _iterator260 = _createForOfIteratorHelper(configs),
            _step260;

        try {
          for (_iterator260.s(); !(_step260 = _iterator260.n()).done;) {
            var config = _step260.value;

            for (var _i211 = 0, _Object$keys2 = Object.keys(config); _i211 < _Object$keys2.length; _i211++) {
              var _key5 = _Object$keys2[_i211];
              var value = config[_key5],
                  current = result[_key5];
              if (current === undefined) result[_key5] = value;else if (current === value || value === undefined) ; // No conflict
              else if (Object.hasOwnProperty.call(combine, _key5)) result[_key5] = combine[_key5](current, value);else throw new Error("Config merge conflict for field " + _key5);
            }
          }
        } catch (err) {
          _iterator260.e(err);
        } finally {
          _iterator260.f();
        }

        for (var key in defaults) {
          if (result[key] === undefined) result[key] = defaults[key];
        }

        return result;
      }
      /***/

    },

    /***/
    "rknV":
    /*!*************************************************!*\
      !*** ./node_modules/style-mod/src/style-mod.js ***!
      \*************************************************/

    /*! exports provided: StyleModule */

    /***/
    function rknV(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "StyleModule", function () {
        return StyleModule;
      });

      var C = "\u037C";
      var COUNT = typeof Symbol == "undefined" ? "__" + C : Symbol["for"](C);
      var SET = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet");
      var top = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : {}; // :: - Style modules encapsulate a set of CSS rules defined from
      // JavaScript. Their definitions are only available in a given DOM
      // root after it has been _mounted_ there with `StyleModule.mount`.
      //
      // Style modules should be created once and stored somewhere, as
      // opposed to re-creating them every time you need them. The amount of
      // CSS rules generated for a given DOM root is bounded by the amount
      // of style modules that were used. So to avoid leaking rules, don't
      // create these dynamically, but treat them as one-time allocations.

      var StyleModule = /*#__PURE__*/function () {
        // :: (Object<Style>, ?{finish: ?(string) → string})
        // Create a style module from the given spec.
        //
        // When `finish` is given, it is called on regular (non-`@`)
        // selectors (after `&` expansion) to compute the final selector.
        function StyleModule(spec, options) {
          _classCallCheck(this, StyleModule);

          this.rules = [];

          var _ref82 = options || {},
              finish = _ref82.finish;

          function splitSelector(selector) {
            return /^@/.test(selector) ? [selector] : selector.split(/,\s*/);
          }

          function render(selectors, spec, target, isKeyframes) {
            var local = [],
                isAt = /^@(\w+)\b/.exec(selectors[0]),
                keyframes = isAt && isAt[1] == "keyframes";
            if (isAt && spec == null) return target.push(selectors[0] + ";");

            for (var prop in spec) {
              var value = spec[prop];

              if (/&/.test(prop)) {
                render(prop.split(/,\s*/).map(function (part) {
                  return selectors.map(function (sel) {
                    return part.replace(/&/, sel);
                  });
                }).reduce(function (a, b) {
                  return a.concat(b);
                }), value, target);
              } else if (value && typeof value == "object") {
                if (!isAt) throw new RangeError("The value of a property (" + prop + ") should be a primitive value.");
                render(splitSelector(prop), value, local, keyframes);
              } else if (value != null) {
                local.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, function (l) {
                  return "-" + l.toLowerCase();
                }) + ": " + value + ";");
              }
            }

            if (local.length || keyframes) {
              target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(", ") + " {" + local.join(" ") + "}");
            }
          }

          for (var prop in spec) {
            render(splitSelector(prop), spec[prop], this.rules);
          }
        } // :: () → string
        // Returns a string containing the module's CSS rules.


        _createClass(StyleModule, [{
          key: "getRules",
          value: function getRules() {
            return this.rules.join("\n");
          } // :: () → string
          // Generate a new unique CSS class name.

        }], [{
          key: "newName",
          value: function newName() {
            var id = top[COUNT] || 1;
            top[COUNT] = id + 1;
            return C + id.toString(36);
          } // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>)
          //
          // Mount the given set of modules in the given DOM root, which ensures
          // that the CSS rules defined by the module are available in that
          // context.
          //
          // Rules are only added to the document once per root.
          //
          // Rule order will follow the order of the modules, so that rules from
          // modules later in the array take precedence of those from earlier
          // modules. If you call this function multiple times for the same root
          // in a way that changes the order of already mounted modules, the old
          // order will be changed.

        }, {
          key: "mount",
          value: function mount(root, modules) {
            (root[SET] || new StyleSet(root)).mount(Array.isArray(modules) ? modules : [modules]);
          }
        }]);

        return StyleModule;
      }();

      var adoptedSet = null;

      var StyleSet = /*#__PURE__*/function () {
        function StyleSet(root) {
          _classCallCheck(this, StyleSet);

          if (!root.head && root.adoptedStyleSheets && typeof CSSStyleSheet != "undefined") {
            if (adoptedSet) {
              root.adoptedStyleSheets = [adoptedSet.sheet].concat(root.adoptedStyleSheets);
              return root[SET] = adoptedSet;
            }

            this.sheet = new CSSStyleSheet();
            root.adoptedStyleSheets = [this.sheet].concat(root.adoptedStyleSheets);
            adoptedSet = this;
          } else {
            this.styleTag = (root.ownerDocument || root).createElement("style");
            var target = root.head || root;
            target.insertBefore(this.styleTag, target.firstChild);
          }

          this.modules = [];
          root[SET] = this;
        }

        _createClass(StyleSet, [{
          key: "mount",
          value: function mount(modules) {
            var sheet = this.sheet;
            var pos = 0
            /* Current rule offset */
            ,
                j = 0;
            /* Index into this.modules */

            for (var _i212 = 0; _i212 < modules.length; _i212++) {
              var mod = modules[_i212],
                  index = this.modules.indexOf(mod);

              if (index < j && index > -1) {
                // Ordering conflict
                this.modules.splice(index, 1);
                j--;
                index = -1;
              }

              if (index == -1) {
                this.modules.splice(j++, 0, mod);
                if (sheet) for (var k = 0; k < mod.rules.length; k++) {
                  sheet.insertRule(mod.rules[k], pos++);
                }
              } else {
                while (j < index) {
                  pos += this.modules[j++].rules.length;
                }

                pos += mod.rules.length;
                j++;
              }
            }

            if (!sheet) {
              var _text2 = "";

              for (var _i213 = 0; _i213 < this.modules.length; _i213++) {
                _text2 += this.modules[_i213].getRules() + "\n";
              }

              this.styleTag.textContent = _text2;
            }
          }
        }]);

        return StyleSet;
      }(); // Style::Object<union<Style,string>>
      //
      // A style is an object that, in the simple case, maps CSS property
      // names to strings holding their values, as in `{color: "red",
      // fontWeight: "bold"}`. The property names can be given in
      // camel-case—the library will insert a dash before capital letters
      // when converting them to CSS.
      //
      // If you include an underscore in a property name, it and everything
      // after it will be removed from the output, which can be useful when
      // providing a property multiple times, for browser compatibility
      // reasons.
      //
      // A property in a style object can also be a sub-selector, which
      // extends the current context to add a pseudo-selector or a child
      // selector. Such a property should contain a `&` character, which
      // will be replaced by the current selector. For example `{"&:before":
      // {content: '"hi"'}}`. Sub-selectors and regular properties can
      // freely be mixed in a given object. Any property containing a `&` is
      // assumed to be a sub-selector.
      //
      // Finally, a property can specify an @-block to be wrapped around the
      // styles defined inside the object that's the property's value. For
      // example to create a media query you can do `{"@media screen and
      // (min-width: 400px)": {...}}`.

      /***/

    },

    /***/
    "tFVh":
    /*!************************************************************!*\
      !*** ./node_modules/@codemirror/basic-setup/dist/index.js ***!
      \************************************************************/

    /*! exports provided: EditorView, EditorState, basicSetup */

    /***/
    function tFVh(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "basicSetup", function () {
        return basicSetup;
      });
      /* harmony import */


      var _codemirror_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @codemirror/view */
      "AtEE");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "EditorView", function () {
        return _codemirror_view__WEBPACK_IMPORTED_MODULE_0__["EditorView"];
      });
      /* harmony import */


      var _codemirror_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @codemirror/state */
      "4eob");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "EditorState", function () {
        return _codemirror_state__WEBPACK_IMPORTED_MODULE_1__["EditorState"];
      });
      /* harmony import */


      var _codemirror_history__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @codemirror/history */
      "ljhz");
      /* harmony import */


      var _codemirror_fold__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @codemirror/fold */
      "Wzyh");
      /* harmony import */


      var _codemirror_language__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @codemirror/language */
      "yqQ+");
      /* harmony import */


      var _codemirror_gutter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @codemirror/gutter */
      "h5Ab");
      /* harmony import */


      var _codemirror_commands__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @codemirror/commands */
      "L4B9");
      /* harmony import */


      var _codemirror_matchbrackets__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @codemirror/matchbrackets */
      "WYGy");
      /* harmony import */


      var _codemirror_closebrackets__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! @codemirror/closebrackets */
      "XBHj");
      /* harmony import */


      var _codemirror_search__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! @codemirror/search */
      "mvyY");
      /* harmony import */


      var _codemirror_autocomplete__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! @codemirror/autocomplete */
      "1FcE");
      /* harmony import */


      var _codemirror_comment__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! @codemirror/comment */
      "OZn6");
      /* harmony import */


      var _codemirror_rectangular_selection__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
      /*! @codemirror/rectangular-selection */
      "8DFY");
      /* harmony import */


      var _codemirror_highlight__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
      /*! @codemirror/highlight */
      "ubVE");
      /* harmony import */


      var _codemirror_lint__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
      /*! @codemirror/lint */
      "QpUv");
      /**
      This is an extension value that just pulls together a whole lot of
      extensions that you might want in a basic editor. It is meant as a
      convenient helper to quickly set up CodeMirror without installing
      and importing a lot of packages.
      
      Specifically, it includes...
      
       - [the default command bindings](https://codemirror.net/6/docs/ref/#commands.defaultKeymap)
       - [line numbers](https://codemirror.net/6/docs/ref/#gutter.lineNumbers)
       - [special character highlighting](https://codemirror.net/6/docs/ref/#view.highlightSpecialChars)
       - [the undo history](https://codemirror.net/6/docs/ref/#history.history)
       - [a fold gutter](https://codemirror.net/6/docs/ref/#fold.foldGutter)
       - [custom selection drawing](https://codemirror.net/6/docs/ref/#view.drawSelection)
       - [multiple selections](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)
       - [reindentation on input](https://codemirror.net/6/docs/ref/#language.indentOnInput)
       - [the default highlight style](https://codemirror.net/6/docs/ref/#highlight.defaultHighlightStyle) (as fallback)
       - [bracket matching](https://codemirror.net/6/docs/ref/#matchbrackets.bracketMatching)
       - [bracket closing](https://codemirror.net/6/docs/ref/#closebrackets.closeBrackets)
       - [autocompletion](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion)
       - [rectangular selection](https://codemirror.net/6/docs/ref/#rectangular-selection.rectangularSelection)
       - [active line highlighting](https://codemirror.net/6/docs/ref/#view.highlightActiveLine)
       - [active line gutter highlighting](https://codemirror.net/6/docs/ref/#gutter.highlightActiveLineGutter)
       - [selection match highlighting](https://codemirror.net/6/docs/ref/#search.highlightSelectionMatches)
       - [search](https://codemirror.net/6/docs/ref/#search.searchKeymap)
       - [commenting](https://codemirror.net/6/docs/ref/#comment.commentKeymap)
       - [linting](https://codemirror.net/6/docs/ref/#lint.lintKeymap)
      
      (You'll probably want to add some language package to your setup
      too.)
      
      This package does not allow customization. The idea is that, once
      you decide you want to configure your editor more precisely, you
      take this package's source (which is just a bunch of imports and
      an array literal), copy it into your own code, and adjust it as
      desired.
      */


      var basicSetup = [/*@__PURE__*/Object(_codemirror_gutter__WEBPACK_IMPORTED_MODULE_5__["lineNumbers"])(), /*@__PURE__*/Object(_codemirror_gutter__WEBPACK_IMPORTED_MODULE_5__["highlightActiveLineGutter"])(), /*@__PURE__*/Object(_codemirror_view__WEBPACK_IMPORTED_MODULE_0__["highlightSpecialChars"])(), /*@__PURE__*/Object(_codemirror_history__WEBPACK_IMPORTED_MODULE_2__["history"])(), /*@__PURE__*/Object(_codemirror_fold__WEBPACK_IMPORTED_MODULE_3__["foldGutter"])(), /*@__PURE__*/Object(_codemirror_view__WEBPACK_IMPORTED_MODULE_0__["drawSelection"])(), /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__["EditorState"].allowMultipleSelections.of(true), /*@__PURE__*/Object(_codemirror_language__WEBPACK_IMPORTED_MODULE_4__["indentOnInput"])(), _codemirror_highlight__WEBPACK_IMPORTED_MODULE_13__["defaultHighlightStyle"].fallback, /*@__PURE__*/Object(_codemirror_matchbrackets__WEBPACK_IMPORTED_MODULE_7__["bracketMatching"])(), /*@__PURE__*/Object(_codemirror_closebrackets__WEBPACK_IMPORTED_MODULE_8__["closeBrackets"])(), /*@__PURE__*/Object(_codemirror_autocomplete__WEBPACK_IMPORTED_MODULE_10__["autocompletion"])(), /*@__PURE__*/Object(_codemirror_rectangular_selection__WEBPACK_IMPORTED_MODULE_12__["rectangularSelection"])(), /*@__PURE__*/Object(_codemirror_view__WEBPACK_IMPORTED_MODULE_0__["highlightActiveLine"])(), /*@__PURE__*/Object(_codemirror_search__WEBPACK_IMPORTED_MODULE_9__["highlightSelectionMatches"])(), /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_0__["keymap"].of([].concat(_toConsumableArray(_codemirror_closebrackets__WEBPACK_IMPORTED_MODULE_8__["closeBracketsKeymap"]), _toConsumableArray(_codemirror_commands__WEBPACK_IMPORTED_MODULE_6__["defaultKeymap"]), _toConsumableArray(_codemirror_search__WEBPACK_IMPORTED_MODULE_9__["searchKeymap"]), _toConsumableArray(_codemirror_history__WEBPACK_IMPORTED_MODULE_2__["historyKeymap"]), _toConsumableArray(_codemirror_fold__WEBPACK_IMPORTED_MODULE_3__["foldKeymap"]), _toConsumableArray(_codemirror_comment__WEBPACK_IMPORTED_MODULE_11__["commentKeymap"]), _toConsumableArray(_codemirror_autocomplete__WEBPACK_IMPORTED_MODULE_10__["completionKeymap"]), _toConsumableArray(_codemirror_lint__WEBPACK_IMPORTED_MODULE_14__["lintKeymap"])))];
      /***/
    },

    /***/
    "tzg4":
    /*!****************************************************************!*\
      !*** ./node_modules/@codemirror/lang-javascript/dist/index.js ***!
      \****************************************************************/

    /*! exports provided: esLint, javascript, javascriptLanguage, jsxLanguage, snippets, tsxLanguage, typescriptLanguage */

    /***/
    function tzg4(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "esLint", function () {
        return esLint;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "javascript", function () {
        return javascript;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "javascriptLanguage", function () {
        return javascriptLanguage;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "jsxLanguage", function () {
        return jsxLanguage;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "snippets", function () {
        return snippets;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "tsxLanguage", function () {
        return tsxLanguage;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "typescriptLanguage", function () {
        return typescriptLanguage;
      });
      /* harmony import */


      var _lezer_javascript__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @lezer/javascript */
      "I8yF");
      /* harmony import */


      var _codemirror_language__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @codemirror/language */
      "yqQ+");
      /* harmony import */


      var _codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @codemirror/highlight */
      "ubVE");
      /* harmony import */


      var _codemirror_autocomplete__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @codemirror/autocomplete */
      "1FcE");
      /**
      A collection of JavaScript-related
      [snippets](https://codemirror.net/6/docs/ref/#autocomplete.snippet).
      */


      var snippets = [/*@__PURE__*/Object(_codemirror_autocomplete__WEBPACK_IMPORTED_MODULE_3__["snippetCompletion"])("function ${name}(${params}) {\n\t${}\n}", {
        label: "function",
        detail: "definition",
        type: "keyword"
      }), /*@__PURE__*/Object(_codemirror_autocomplete__WEBPACK_IMPORTED_MODULE_3__["snippetCompletion"])("for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\n\t${}\n}", {
        label: "for",
        detail: "loop",
        type: "keyword"
      }), /*@__PURE__*/Object(_codemirror_autocomplete__WEBPACK_IMPORTED_MODULE_3__["snippetCompletion"])("for (let ${name} of ${collection}) {\n\t${}\n}", {
        label: "for",
        detail: "of loop",
        type: "keyword"
      }), /*@__PURE__*/Object(_codemirror_autocomplete__WEBPACK_IMPORTED_MODULE_3__["snippetCompletion"])("try {\n\t${}\n} catch (${error}) {\n\t${}\n}", {
        label: "try",
        detail: "block",
        type: "keyword"
      }), /*@__PURE__*/Object(_codemirror_autocomplete__WEBPACK_IMPORTED_MODULE_3__["snippetCompletion"])("class ${name} {\n\tconstructor(${params}) {\n\t\t${}\n\t}\n}", {
        label: "class",
        detail: "definition",
        type: "keyword"
      }), /*@__PURE__*/Object(_codemirror_autocomplete__WEBPACK_IMPORTED_MODULE_3__["snippetCompletion"])("import {${names}} from \"${module}\"\n${}", {
        label: "import",
        detail: "named",
        type: "keyword"
      }), /*@__PURE__*/Object(_codemirror_autocomplete__WEBPACK_IMPORTED_MODULE_3__["snippetCompletion"])("import ${name} from \"${module}\"\n${}", {
        label: "import",
        detail: "default",
        type: "keyword"
      })];
      /**
      A language provider based on the [Lezer JavaScript
      parser](https://github.com/lezer-parser/javascript), extended with
      highlighting and indentation information.
      */

      var javascriptLanguage = /*@__PURE__*/_codemirror_language__WEBPACK_IMPORTED_MODULE_1__["LRLanguage"].define({
        parser: /*@__PURE__*/_lezer_javascript__WEBPACK_IMPORTED_MODULE_0__["parser"].configure({
          props: [/*@__PURE__*/_codemirror_language__WEBPACK_IMPORTED_MODULE_1__["indentNodeProp"].add({
            IfStatement: /*@__PURE__*/Object(_codemirror_language__WEBPACK_IMPORTED_MODULE_1__["continuedIndent"])({
              except: /^\s*({|else\b)/
            }),
            TryStatement: /*@__PURE__*/Object(_codemirror_language__WEBPACK_IMPORTED_MODULE_1__["continuedIndent"])({
              except: /^\s*({|catch|finally)\b/
            }),
            LabeledStatement: _codemirror_language__WEBPACK_IMPORTED_MODULE_1__["flatIndent"],
            SwitchBody: function SwitchBody(context) {
              var after = context.textAfter,
                  closed = /^\s*\}/.test(after),
                  isCase = /^\s*(case|default)\b/.test(after);
              return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;
            },
            Block: /*@__PURE__*/Object(_codemirror_language__WEBPACK_IMPORTED_MODULE_1__["delimitedIndent"])({
              closing: "}"
            }),
            ArrowFunction: function ArrowFunction(cx) {
              return cx.baseIndent + cx.unit;
            },
            "TemplateString BlockComment": function TemplateStringBlockComment() {
              return -1;
            },
            "Statement Property": /*@__PURE__*/Object(_codemirror_language__WEBPACK_IMPORTED_MODULE_1__["continuedIndent"])({
              except: /^{/
            }),
            JSXElement: function JSXElement(context) {
              var closed = /^\s*<\//.test(context.textAfter);
              return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);
            },
            JSXEscape: function JSXEscape(context) {
              var closed = /\s*\}/.test(context.textAfter);
              return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);
            },
            "JSXOpenTag JSXSelfClosingTag": function JSXOpenTagJSXSelfClosingTag(context) {
              return context.column(context.node.from) + context.unit;
            }
          }), /*@__PURE__*/_codemirror_language__WEBPACK_IMPORTED_MODULE_1__["foldNodeProp"].add({
            "Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression": _codemirror_language__WEBPACK_IMPORTED_MODULE_1__["foldInside"],
            BlockComment: function BlockComment(tree) {
              return {
                from: tree.from + 2,
                to: tree.to - 2
              };
            }
          }), /*@__PURE__*/Object(_codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["styleTags"])({
            "get set async static": _codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].modifier,
            "for while do if else switch try catch finally return throw break continue default case": _codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].controlKeyword,
            "in of await yield void typeof delete instanceof": _codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].operatorKeyword,
            "export import let var const function class extends": _codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].definitionKeyword,
            "with debugger from as new": _codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].keyword,
            TemplateString: /*@__PURE__*/_codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].special(_codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].string),
            Super: _codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].atom,
            BooleanLiteral: _codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].bool,
            "this": _codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].self,
            "null": _codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"]["null"],
            Star: _codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].modifier,
            VariableName: _codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].variableName,
            "CallExpression/VariableName": /*@__PURE__*/_codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"]["function"](_codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].variableName),
            VariableDefinition: /*@__PURE__*/_codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].definition(_codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].variableName),
            Label: _codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].labelName,
            PropertyName: _codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].propertyName,
            "CallExpression/MemberExpression/PropertyName": /*@__PURE__*/_codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"]["function"](_codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].propertyName),
            "FunctionDeclaration/VariableDefinition": /*@__PURE__*/_codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"]["function"]( /*@__PURE__*/_codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].definition(_codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].variableName)),
            "ClassDeclaration/VariableDefinition": /*@__PURE__*/_codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].definition(_codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].className),
            PropertyNameDefinition: /*@__PURE__*/_codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].definition(_codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].propertyName),
            UpdateOp: _codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].updateOperator,
            LineComment: _codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].lineComment,
            BlockComment: _codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].blockComment,
            Number: _codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].number,
            String: _codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].string,
            ArithOp: _codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].arithmeticOperator,
            LogicOp: _codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].logicOperator,
            BitOp: _codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].bitwiseOperator,
            CompareOp: _codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].compareOperator,
            RegExp: _codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].regexp,
            Equals: _codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].definitionOperator,
            "Arrow : Spread": _codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].punctuation,
            "( )": _codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].paren,
            "[ ]": _codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].squareBracket,
            "{ }": _codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].brace,
            ".": _codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].derefOperator,
            ", ;": _codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].separator,
            TypeName: _codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].typeName,
            TypeDefinition: /*@__PURE__*/_codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].definition(_codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].typeName),
            "type enum interface implements namespace module declare": _codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].definitionKeyword,
            "abstract global privacy readonly": _codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].modifier,
            "is keyof unique infer": _codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].operatorKeyword,
            JSXAttributeValue: _codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].string,
            JSXText: _codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].content,
            "JSXStartTag JSXStartCloseTag JSXSelfCloseEndTag JSXEndTag": _codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].angleBracket,
            "JSXIdentifier JSXNameSpacedName": _codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].tagName,
            "JSXAttribute/JSXIdentifier JSXAttribute/JSXNameSpacedName": _codemirror_highlight__WEBPACK_IMPORTED_MODULE_2__["tags"].propertyName
          })]
        }),
        languageData: {
          closeBrackets: {
            brackets: ["(", "[", "{", "'", '"', "`"]
          },
          commentTokens: {
            line: "//",
            block: {
              open: "/*",
              close: "*/"
            }
          },
          indentOnInput: /^\s*(?:case |default:|\{|\}|<\/)$/,
          wordChars: "$"
        }
      });
      /**
      A language provider for TypeScript.
      */


      var typescriptLanguage = /*@__PURE__*/javascriptLanguage.configure({
        dialect: "ts"
      });
      /**
      Language provider for JSX.
      */

      var jsxLanguage = /*@__PURE__*/javascriptLanguage.configure({
        dialect: "jsx"
      });
      /**
      Language provider for JSX + TypeScript.
      */

      var tsxLanguage = /*@__PURE__*/javascriptLanguage.configure({
        dialect: "jsx ts"
      });
      /**
      JavaScript support. Includes [snippet](https://codemirror.net/6/docs/ref/#lang-javascript.snippets)
      completion.
      */

      function javascript() {
        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var lang = config.jsx ? config.typescript ? tsxLanguage : jsxLanguage : config.typescript ? typescriptLanguage : javascriptLanguage;
        return new _codemirror_language__WEBPACK_IMPORTED_MODULE_1__["LanguageSupport"](lang, javascriptLanguage.data.of({
          autocomplete: Object(_codemirror_autocomplete__WEBPACK_IMPORTED_MODULE_3__["ifNotIn"])(["LineComment", "BlockComment", "String"], Object(_codemirror_autocomplete__WEBPACK_IMPORTED_MODULE_3__["completeFromList"])(snippets))
        }));
      }
      /**
      Connects an [ESLint](https://eslint.org/) linter to CodeMirror's
      [lint](https://codemirror.net/6/docs/ref/#lint) integration. `eslint` should be an instance of the
      [`Linter`](https://eslint.org/docs/developer-guide/nodejs-api#linter)
      class, and `config` an optional ESLint configuration. The return
      value of this function can be passed to [`linter`](https://codemirror.net/6/docs/ref/#lint.linter)
      to create a JavaScript linting extension.
      
      Note that ESLint targets node, and is tricky to run in the
      browser. The [eslint4b](https://github.com/mysticatea/eslint4b)
      and
      [eslint4b-prebuilt](https://github.com/marijnh/eslint4b-prebuilt/)
      packages may help with that.
      */


      function esLint(eslint, config) {
        if (!config) {
          config = {
            parserOptions: {
              ecmaVersion: 2019,
              sourceType: "module"
            },
            env: {
              browser: true,
              node: true,
              es6: true,
              es2015: true,
              es2017: true,
              es2020: true
            },
            rules: {}
          };
          eslint.getRules().forEach(function (desc, name) {
            if (desc.meta.docs.recommended) config.rules[name] = 2;
          });
        }

        return function (view) {
          var state = view.state,
              found = [];

          var _iterator261 = _createForOfIteratorHelper(javascriptLanguage.findRegions(state)),
              _step261;

          try {
            for (_iterator261.s(); !(_step261 = _iterator261.n()).done;) {
              var _step261$value = _step261.value,
                  from = _step261$value.from,
                  to = _step261$value.to;
              var fromLine = state.doc.lineAt(from),
                  offset = {
                line: fromLine.number - 1,
                col: from - fromLine.from,
                pos: from
              };

              var _iterator262 = _createForOfIteratorHelper(eslint.verify(state.sliceDoc(from, to), config)),
                  _step262;

              try {
                for (_iterator262.s(); !(_step262 = _iterator262.n()).done;) {
                  var d = _step262.value;
                  found.push(translateDiagnostic(d, state.doc, offset));
                }
              } catch (err) {
                _iterator262.e(err);
              } finally {
                _iterator262.f();
              }
            }
          } catch (err) {
            _iterator261.e(err);
          } finally {
            _iterator261.f();
          }

          return found;
        };
      }

      function mapPos(line, col, doc, offset) {
        return doc.line(line + offset.line).from + col + (line == 1 ? offset.col - 1 : -1);
      }

      function translateDiagnostic(input, doc, offset) {
        var start = mapPos(input.line, input.column, doc, offset);
        var result = {
          from: start,
          to: input.endLine != null && input.endColumn != 1 ? mapPos(input.endLine, input.endColumn, doc, offset) : start,
          message: input.message,
          source: input.ruleId ? "jshint:" + input.ruleId : "jshint",
          severity: input.severity == 1 ? "warning" : "error"
        };

        if (input.fix) {
          var _input$fix = input.fix,
              range = _input$fix.range,
              _text3 = _input$fix.text,
              from = range[0] + offset.pos - start,
              to = range[1] + offset.pos - start;
          result.actions = [{
            name: "fix",
            apply: function apply(view, start) {
              view.dispatch({
                changes: {
                  from: start + from,
                  to: start + to,
                  insert: _text3
                },
                scrollIntoView: true
              });
            }
          }];
        }

        return result;
      }
      /***/

    },

    /***/
    "u4Pf":
    /*!************************************************************************************!*\
      !*** ./apps/demo/src/app/examples/codemirror-example/codemirror-example.module.ts ***!
      \************************************************************************************/

    /*! exports provided: CodemirrorExampleModule */

    /***/
    function u4Pf(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CodemirrorExampleModule", function () {
        return CodemirrorExampleModule;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      "fXoL");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/common */
      "ofXK");
      /* harmony import */


      var _codemirror_example_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./codemirror-example.component */
      "NlmI");
      /* harmony import */


      var _angular_material_tabs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/material/tabs */
      "wZkO");
      /* harmony import */


      var _gewd_components_highlight_editor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @gewd/components/highlight-editor */
      "W81V");
      /* harmony import */


      var _gewd_markdown__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @gewd/markdown */
      "PbxA");
      /* harmony import */


      var _gewd_components_codemirror__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @gewd/components/codemirror */
      "6O8Z");

      var CodemirrorExampleModule = /*#__PURE__*/function () {
        function CodemirrorExampleModule() {
          _classCallCheck(this, CodemirrorExampleModule);
        }

        _createClass(CodemirrorExampleModule, [{
          key: "getComponents",
          value: function getComponents() {
            return [{
              name: 'CodeMirrorExample',
              componentType: _codemirror_example_component__WEBPACK_IMPORTED_MODULE_3__["CodemirrorExampleComponent"]
            }];
          }
        }]);

        return CodemirrorExampleModule;
      }();

      CodemirrorExampleModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        declarations: [_codemirror_example_component__WEBPACK_IMPORTED_MODULE_3__["CodemirrorExampleComponent"]],
        imports: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"], _angular_material_tabs__WEBPACK_IMPORTED_MODULE_4__["MatTabsModule"], _gewd_components_highlight_editor__WEBPACK_IMPORTED_MODULE_5__["HighlightEditorModule"], _gewd_markdown__WEBPACK_IMPORTED_MODULE_6__["MarkdownModule"], _gewd_components_codemirror__WEBPACK_IMPORTED_MODULE_7__["CodemirrorModule"]]
      })], CodemirrorExampleModule);
      /***/
    },

    /***/
    "uZp5":
    /*!*****************************************************!*\
      !*** ./node_modules/@codemirror/text/dist/index.js ***!
      \*****************************************************/

    /*! exports provided: Line, Text, codePointAt, codePointSize, countColumn, findClusterBreak, findColumn, fromCodePoint */

    /***/
    function uZp5(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Line", function () {
        return Line;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Text", function () {
        return Text;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "codePointAt", function () {
        return codePointAt;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "codePointSize", function () {
        return codePointSize;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "countColumn", function () {
        return countColumn;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "findClusterBreak", function () {
        return findClusterBreak;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "findColumn", function () {
        return findColumn;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "fromCodePoint", function () {
        return fromCodePoint;
      }); // Compressed representation of the Grapheme_Cluster_Break=Extend
      // information from
      // http://www.unicode.org/Public/13.0.0/ucd/auxiliary/GraphemeBreakProperty.txt.
      // Each pair of elements represents a range, as an offet from the
      // previous range and a length. Numbers are in base-36, with the empty
      // string being a shorthand for 1.


      var extend = /*@__PURE__*/"lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map(function (s) {
        return s ? parseInt(s, 36) : 1;
      }); // Convert offsets into absolute values

      for (var _i214 = 1; _i214 < extend.length; _i214++) {
        extend[_i214] += extend[_i214 - 1];
      }

      function isExtendingChar(code) {
        for (var _i215 = 1; _i215 < extend.length; _i215 += 2) {
          if (extend[_i215] > code) return extend[_i215 - 1] <= code;
        }

        return false;
      }

      function isRegionalIndicator(code) {
        return code >= 0x1F1E6 && code <= 0x1F1FF;
      }

      var ZWJ = 0x200d;
      /**
      Returns a next grapheme cluster break _after_ (not equal to)
      `pos`, if `forward` is true, or before otherwise. Returns `pos`
      itself if no further cluster break is available in the string.
      Moves across surrogate pairs, extending characters, characters
      joined with zero-width joiners, and flag emoji.
      */

      function findClusterBreak(str, pos) {
        var forward = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        return (forward ? nextClusterBreak : prevClusterBreak)(str, pos);
      }

      function nextClusterBreak(str, pos) {
        if (pos == str.length) return pos; // If pos is in the middle of a surrogate pair, move to its start

        if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1))) pos--;
        var prev = codePointAt(str, pos);
        pos += codePointSize(prev);

        while (pos < str.length) {
          var next = codePointAt(str, pos);

          if (prev == ZWJ || next == ZWJ || isExtendingChar(next)) {
            pos += codePointSize(next);
            prev = next;
          } else if (isRegionalIndicator(next)) {
            var countBefore = 0,
                _i216 = pos - 2;

            while (_i216 >= 0 && isRegionalIndicator(codePointAt(str, _i216))) {
              countBefore++;
              _i216 -= 2;
            }

            if (countBefore % 2 == 0) break;else pos += 2;
          } else {
            break;
          }
        }

        return pos;
      }

      function prevClusterBreak(str, pos) {
        while (pos > 0) {
          var found = nextClusterBreak(str, pos - 2);
          if (found < pos) return found;
          pos--;
        }

        return 0;
      }

      function surrogateLow(ch) {
        return ch >= 0xDC00 && ch < 0xE000;
      }

      function surrogateHigh(ch) {
        return ch >= 0xD800 && ch < 0xDC00;
      }
      /**
      Find the code point at the given position in a string (like the
      [`codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)
      string method).
      */


      function codePointAt(str, pos) {
        var code0 = str.charCodeAt(pos);
        if (!surrogateHigh(code0) || pos + 1 == str.length) return code0;
        var code1 = str.charCodeAt(pos + 1);
        if (!surrogateLow(code1)) return code0;
        return (code0 - 0xd800 << 10) + (code1 - 0xdc00) + 0x10000;
      }
      /**
      Given a Unicode codepoint, return the JavaScript string that
      respresents it (like
      [`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)).
      */


      function fromCodePoint(code) {
        if (code <= 0xffff) return String.fromCharCode(code);
        code -= 0x10000;
        return String.fromCharCode((code >> 10) + 0xd800, (code & 1023) + 0xdc00);
      }
      /**
      The first character that takes up two positions in a JavaScript
      string. It is often useful to compare with this after calling
      `codePointAt`, to figure out whether your character takes up 1 or
      2 index positions.
      */


      function codePointSize(code) {
        return code < 0x10000 ? 1 : 2;
      }
      /**
      Count the column position at the given offset into the string,
      taking extending characters and tab size into account.
      */


      function countColumn(string, tabSize) {
        var to = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : string.length;
        var n = 0;

        for (var _i217 = 0; _i217 < to;) {
          if (string.charCodeAt(_i217) == 9) {
            n += tabSize - n % tabSize;
            _i217++;
          } else {
            n++;
            _i217 = findClusterBreak(string, _i217);
          }
        }

        return n;
      }
      /**
      Find the offset that corresponds to the given column position in a
      string, taking extending characters and tab size into account. By
      default, the string length is returned when it is too short to
      reach the column. Pass `strict` true to make it return -1 in that
      situation.
      */


      function findColumn(string, col, tabSize, strict) {
        for (var _i218 = 0, n = 0;;) {
          if (n >= col) return _i218;
          if (_i218 == string.length) break;
          n += string.charCodeAt(_i218) == 9 ? tabSize - n % tabSize : 1;
          _i218 = findClusterBreak(string, _i218);
        }

        return strict === true ? -1 : string.length;
      }
      /**
      The data structure for documents.
      */


      var Text = /*#__PURE__*/function () {
        /**
        @internal
        */
        function Text() {
          _classCallCheck(this, Text);
        }
        /**
        Get the line description around the given position.
        */


        _createClass(Text, [{
          key: "lineAt",
          value: function lineAt(pos) {
            if (pos < 0 || pos > this.length) throw new RangeError("Invalid position ".concat(pos, " in document of length ").concat(this.length));
            return this.lineInner(pos, false, 1, 0);
          }
          /**
          Get the description for the given (1-based) line number.
          */

        }, {
          key: "line",
          value: function line(n) {
            if (n < 1 || n > this.lines) throw new RangeError("Invalid line number ".concat(n, " in ").concat(this.lines, "-line document"));
            return this.lineInner(n, true, 1, 0);
          }
          /**
          Replace a range of the text with the given content.
          */

        }, {
          key: "replace",
          value: function replace(from, to, text) {
            var parts = [];
            this.decompose(0, from, parts, 2
            /* To */
            );
            if (text.length) text.decompose(0, text.length, parts, 1
            /* From */
            | 2
            /* To */
            );
            this.decompose(to, this.length, parts, 1
            /* From */
            );
            return TextNode.from(parts, this.length - (to - from) + text.length);
          }
          /**
          Append another document to this one.
          */

        }, {
          key: "append",
          value: function append(other) {
            return this.replace(this.length, this.length, other);
          }
          /**
          Retrieve the text between the given points.
          */

        }, {
          key: "slice",
          value: function slice(from) {
            var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.length;
            var parts = [];
            this.decompose(from, to, parts, 0);
            return TextNode.from(parts, to - from);
          }
          /**
          Test whether this text is equal to another instance.
          */

        }, {
          key: "eq",
          value: function eq(other) {
            if (other == this) return true;
            if (other.length != this.length || other.lines != this.lines) return false;
            var start = this.scanIdentical(other, 1),
                end = this.length - this.scanIdentical(other, -1);
            var a = new RawTextCursor(this),
                b = new RawTextCursor(other);

            for (var skip = start, pos = start;;) {
              a.next(skip);
              b.next(skip);
              skip = 0;
              if (a.lineBreak != b.lineBreak || a.done != b.done || a.value != b.value) return false;
              pos += a.value.length;
              if (a.done || pos >= end) return true;
            }
          }
          /**
          Iterate over the text. When `dir` is `-1`, iteration happens
          from end to start. This will return lines and the breaks between
          them as separate strings, and for long lines, might split lines
          themselves into multiple chunks as well.
          */

        }, {
          key: "iter",
          value: function iter() {
            var dir = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
            return new RawTextCursor(this, dir);
          }
          /**
          Iterate over a range of the text. When `from` > `to`, the
          iterator will run in reverse.
          */

        }, {
          key: "iterRange",
          value: function iterRange(from) {
            var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.length;
            return new PartialTextCursor(this, from, to);
          }
          /**
          Return a cursor that iterates over the given range of lines,
          _without_ returning the line breaks between, and yielding empty
          strings for empty lines.
          
          When `from` and `to` are given, they should be 1-based line numbers.
          */

        }, {
          key: "iterLines",
          value: function iterLines(from, to) {
            var inner;

            if (from == null) {
              inner = this.iter();
            } else {
              if (to == null) to = this.lines + 1;
              var start = this.line(from).from;
              inner = this.iterRange(start, Math.max(start, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));
            }

            return new LineCursor(inner);
          }
          /**
          @internal
          */

        }, {
          key: "toString",
          value: function toString() {
            return this.sliceString(0);
          }
          /**
          Convert the document to an array of lines (which can be
          deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#text.Text^of)).
          */

        }, {
          key: "toJSON",
          value: function toJSON() {
            var lines = [];
            this.flatten(lines);
            return lines;
          }
          /**
          Create a `Text` instance for the given array of lines.
          */

        }], [{
          key: "of",
          value: function of(text) {
            if (text.length == 0) throw new RangeError("A document must have at least one line");
            if (text.length == 1 && !text[0]) return Text.empty;
            return text.length <= 32
            /* Branch */
            ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));
          }
        }]);

        return Text;
      }(); // Leaves store an array of line strings. There are always line breaks
      // between these strings. Leaves are limited in size and have to be
      // contained in TextNode instances for bigger documents.


      var TextLeaf = /*#__PURE__*/function (_Text) {
        _inherits(TextLeaf, _Text);

        var _super62 = _createSuper(TextLeaf);

        function TextLeaf(text) {
          var _this133;

          var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : textLength(text);

          _classCallCheck(this, TextLeaf);

          _this133 = _super62.call(this);
          _this133.text = text;
          _this133.length = length;
          return _this133;
        }

        _createClass(TextLeaf, [{
          key: "lines",
          get: function get() {
            return this.text.length;
          }
        }, {
          key: "children",
          get: function get() {
            return null;
          }
        }, {
          key: "lineInner",
          value: function lineInner(target, isLine, line, offset) {
            for (var _i219 = 0;; _i219++) {
              var string = this.text[_i219],
                  end = offset + string.length;
              if ((isLine ? line : end) >= target) return new Line(offset, end, line, string);
              offset = end + 1;
              line++;
            }
          }
        }, {
          key: "decompose",
          value: function decompose(from, to, target, open) {
            var text = from <= 0 && to >= this.length ? this : new TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));

            if (open & 1
            /* From */
            ) {
              var prev = target.pop();
              var joined = appendText(text.text, prev.text.slice(), 0, text.length);

              if (joined.length <= 32
              /* Branch */
              ) {
                target.push(new TextLeaf(joined, prev.length + text.length));
              } else {
                var mid = joined.length >> 1;
                target.push(new TextLeaf(joined.slice(0, mid)), new TextLeaf(joined.slice(mid)));
              }
            } else {
              target.push(text);
            }
          }
        }, {
          key: "replace",
          value: function replace(from, to, text) {
            if (!(text instanceof TextLeaf)) return _get(_getPrototypeOf(TextLeaf.prototype), "replace", this).call(this, from, to, text);
            var lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to);
            var newLen = this.length + text.length - (to - from);
            if (lines.length <= 32
            /* Branch */
            ) return new TextLeaf(lines, newLen);
            return TextNode.from(TextLeaf.split(lines, []), newLen);
          }
        }, {
          key: "sliceString",
          value: function sliceString(from) {
            var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.length;
            var lineSep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "\n";
            var result = "";

            for (var pos = 0, _i220 = 0; pos <= to && _i220 < this.text.length; _i220++) {
              var line = this.text[_i220],
                  end = pos + line.length;
              if (pos > from && _i220) result += lineSep;
              if (from < end && to > pos) result += line.slice(Math.max(0, from - pos), to - pos);
              pos = end + 1;
            }

            return result;
          }
        }, {
          key: "flatten",
          value: function flatten(target) {
            var _iterator263 = _createForOfIteratorHelper(this.text),
                _step263;

            try {
              for (_iterator263.s(); !(_step263 = _iterator263.n()).done;) {
                var line = _step263.value;
                target.push(line);
              }
            } catch (err) {
              _iterator263.e(err);
            } finally {
              _iterator263.f();
            }
          }
        }, {
          key: "scanIdentical",
          value: function scanIdentical() {
            return 0;
          }
        }], [{
          key: "split",
          value: function split(text, target) {
            var part = [],
                len = -1;

            var _iterator264 = _createForOfIteratorHelper(text),
                _step264;

            try {
              for (_iterator264.s(); !(_step264 = _iterator264.n()).done;) {
                var line = _step264.value;
                part.push(line);
                len += line.length + 1;

                if (part.length == 32
                /* Branch */
                ) {
                  target.push(new TextLeaf(part, len));
                  part = [];
                  len = -1;
                }
              }
            } catch (err) {
              _iterator264.e(err);
            } finally {
              _iterator264.f();
            }

            if (len > -1) target.push(new TextLeaf(part, len));
            return target;
          }
        }]);

        return TextLeaf;
      }(Text); // Nodes provide the tree structure of the `Text` type. They store a
      // number of other nodes or leaves, taking care to balance themselves
      // on changes. There are implied line breaks _between_ the children of
      // a node (but not before the first or after the last child).


      var TextNode = /*#__PURE__*/function (_Text2) {
        _inherits(TextNode, _Text2);

        var _super63 = _createSuper(TextNode);

        function TextNode(children, length) {
          var _this134;

          _classCallCheck(this, TextNode);

          _this134 = _super63.call(this);
          _this134.children = children;
          _this134.length = length;
          _this134.lines = 0;

          var _iterator265 = _createForOfIteratorHelper(children),
              _step265;

          try {
            for (_iterator265.s(); !(_step265 = _iterator265.n()).done;) {
              var child = _step265.value;
              _this134.lines += child.lines;
            }
          } catch (err) {
            _iterator265.e(err);
          } finally {
            _iterator265.f();
          }

          return _this134;
        }

        _createClass(TextNode, [{
          key: "lineInner",
          value: function lineInner(target, isLine, line, offset) {
            for (var _i221 = 0;; _i221++) {
              var child = this.children[_i221],
                  end = offset + child.length,
                  endLine = line + child.lines - 1;
              if ((isLine ? endLine : end) >= target) return child.lineInner(target, isLine, line, offset);
              offset = end + 1;
              line = endLine + 1;
            }
          }
        }, {
          key: "decompose",
          value: function decompose(from, to, target, open) {
            for (var _i222 = 0, pos = 0; pos <= to && _i222 < this.children.length; _i222++) {
              var child = this.children[_i222],
                  end = pos + child.length;

              if (from <= end && to >= pos) {
                var childOpen = open & ((pos <= from ? 1
                /* From */
                : 0) | (end >= to ? 2
                /* To */
                : 0));
                if (pos >= from && end <= to && !childOpen) target.push(child);else child.decompose(from - pos, to - pos, target, childOpen);
              }

              pos = end + 1;
            }
          }
        }, {
          key: "replace",
          value: function replace(from, to, text) {
            if (text.lines < this.lines) for (var _i223 = 0, pos = 0; _i223 < this.children.length; _i223++) {
              var child = this.children[_i223],
                  end = pos + child.length; // Fast path: if the change only affects one child and the
              // child's size remains in the acceptable range, only update
              // that child

              if (from >= pos && to <= end) {
                var updated = child.replace(from - pos, to - pos, text);
                var totalLines = this.lines - child.lines + updated.lines;

                if (updated.lines < totalLines >> 5
                /* BranchShift */
                - 1 && updated.lines > totalLines >> 5
                /* BranchShift */
                + 1) {
                  var copy = this.children.slice();
                  copy[_i223] = updated;
                  return new TextNode(copy, this.length - (to - from) + text.length);
                }

                return _get(_getPrototypeOf(TextNode.prototype), "replace", this).call(this, pos, end, updated);
              }

              pos = end + 1;
            }
            return _get(_getPrototypeOf(TextNode.prototype), "replace", this).call(this, from, to, text);
          }
        }, {
          key: "sliceString",
          value: function sliceString(from) {
            var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.length;
            var lineSep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "\n";
            var result = "";

            for (var _i224 = 0, pos = 0; _i224 < this.children.length && pos <= to; _i224++) {
              var child = this.children[_i224],
                  end = pos + child.length;
              if (pos > from && _i224) result += lineSep;
              if (from < end && to > pos) result += child.sliceString(from - pos, to - pos, lineSep);
              pos = end + 1;
            }

            return result;
          }
        }, {
          key: "flatten",
          value: function flatten(target) {
            var _iterator266 = _createForOfIteratorHelper(this.children),
                _step266;

            try {
              for (_iterator266.s(); !(_step266 = _iterator266.n()).done;) {
                var child = _step266.value;
                child.flatten(target);
              }
            } catch (err) {
              _iterator266.e(err);
            } finally {
              _iterator266.f();
            }
          }
        }, {
          key: "scanIdentical",
          value: function scanIdentical(other, dir) {
            if (!(other instanceof TextNode)) return 0;
            var length = 0;

            var _ref83 = dir > 0 ? [0, 0, this.children.length, other.children.length] : [this.children.length - 1, other.children.length - 1, -1, -1],
                _ref84 = _slicedToArray(_ref83, 4),
                iA = _ref84[0],
                iB = _ref84[1],
                eA = _ref84[2],
                eB = _ref84[3];

            for (;; iA += dir, iB += dir) {
              if (iA == eA || iB == eB) return length;
              var chA = this.children[iA],
                  chB = other.children[iB];
              if (chA != chB) return length + chA.scanIdentical(chB, dir);
              length += chA.length + 1;
            }
          }
        }], [{
          key: "from",
          value: function from(children) {
            var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : children.reduce(function (l, ch) {
              return l + ch.length + 1;
            }, -1);
            var lines = 0;

            var _iterator267 = _createForOfIteratorHelper(children),
                _step267;

            try {
              for (_iterator267.s(); !(_step267 = _iterator267.n()).done;) {
                var _ch = _step267.value;
                lines += _ch.lines;
              }
            } catch (err) {
              _iterator267.e(err);
            } finally {
              _iterator267.f();
            }

            if (lines < 32
            /* Branch */
            ) {
              var flat = [];

              var _iterator268 = _createForOfIteratorHelper(children),
                  _step268;

              try {
                for (_iterator268.s(); !(_step268 = _iterator268.n()).done;) {
                  var ch = _step268.value;
                  ch.flatten(flat);
                }
              } catch (err) {
                _iterator268.e(err);
              } finally {
                _iterator268.f();
              }

              return new TextLeaf(flat, length);
            }

            var chunk = Math.max(32
            /* Branch */
            , lines >> 5
            /* BranchShift */
            ),
                maxChunk = chunk << 1,
                minChunk = chunk >> 1;
            var chunked = [],
                currentLines = 0,
                currentLen = -1,
                currentChunk = [];

            function add(child) {
              var last;

              if (child.lines > maxChunk && child instanceof TextNode) {
                var _iterator269 = _createForOfIteratorHelper(child.children),
                    _step269;

                try {
                  for (_iterator269.s(); !(_step269 = _iterator269.n()).done;) {
                    var node = _step269.value;
                    add(node);
                  }
                } catch (err) {
                  _iterator269.e(err);
                } finally {
                  _iterator269.f();
                }
              } else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {
                flush();
                chunked.push(child);
              } else if (child instanceof TextLeaf && currentLines && (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf && child.lines + last.lines <= 32
              /* Branch */
              ) {
                currentLines += child.lines;
                currentLen += child.length + 1;
                currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);
              } else {
                if (currentLines + child.lines > chunk) flush();
                currentLines += child.lines;
                currentLen += child.length + 1;
                currentChunk.push(child);
              }
            }

            function flush() {
              if (currentLines == 0) return;
              chunked.push(currentChunk.length == 1 ? currentChunk[0] : TextNode.from(currentChunk, currentLen));
              currentLen = -1;
              currentLines = currentChunk.length = 0;
            }

            var _iterator270 = _createForOfIteratorHelper(children),
                _step270;

            try {
              for (_iterator270.s(); !(_step270 = _iterator270.n()).done;) {
                var child = _step270.value;
                add(child);
              }
            } catch (err) {
              _iterator270.e(err);
            } finally {
              _iterator270.f();
            }

            flush();
            return chunked.length == 1 ? chunked[0] : new TextNode(chunked, length);
          }
        }]);

        return TextNode;
      }(Text);

      Text.empty = /*@__PURE__*/new TextLeaf([""], 0);

      function textLength(text) {
        var length = -1;

        var _iterator271 = _createForOfIteratorHelper(text),
            _step271;

        try {
          for (_iterator271.s(); !(_step271 = _iterator271.n()).done;) {
            var line = _step271.value;
            length += line.length + 1;
          }
        } catch (err) {
          _iterator271.e(err);
        } finally {
          _iterator271.f();
        }

        return length;
      }

      function appendText(text, target) {
        var from = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var to = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1e9;

        for (var pos = 0, _i225 = 0, first = true; _i225 < text.length && pos <= to; _i225++) {
          var line = text[_i225],
              end = pos + line.length;

          if (end >= from) {
            if (end > to) line = line.slice(0, to - pos);
            if (pos < from) line = line.slice(from - pos);

            if (first) {
              target[target.length - 1] += line;
              first = false;
            } else target.push(line);
          }

          pos = end + 1;
        }

        return target;
      }

      function sliceText(text, from, to) {
        return appendText(text, [""], from, to);
      }

      var RawTextCursor = /*#__PURE__*/function () {
        function RawTextCursor(text) {
          var dir = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

          _classCallCheck(this, RawTextCursor);

          this.dir = dir;
          this.done = false;
          this.lineBreak = false;
          this.value = "";
          this.nodes = [text];
          this.offsets = [dir > 0 ? 1 : (text instanceof TextLeaf ? text.text.length : text.children.length) << 1];
        }

        _createClass(RawTextCursor, [{
          key: "nextInner",
          value: function nextInner(skip, dir) {
            this.done = this.lineBreak = false;

            for (;;) {
              var last = this.nodes.length - 1;
              var top = this.nodes[last],
                  offsetValue = this.offsets[last],
                  offset = offsetValue >> 1;
              var size = top instanceof TextLeaf ? top.text.length : top.children.length;

              if (offset == (dir > 0 ? size : 0)) {
                if (last == 0) {
                  this.done = true;
                  this.value = "";
                  return this;
                }

                if (dir > 0) this.offsets[last - 1]++;
                this.nodes.pop();
                this.offsets.pop();
              } else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {
                this.offsets[last] += dir;

                if (skip == 0) {
                  this.lineBreak = true;
                  this.value = "\n";
                  return this;
                }

                skip--;
              } else if (top instanceof TextLeaf) {
                // Move to the next string
                var next = top.text[offset + (dir < 0 ? -1 : 0)];
                this.offsets[last] += dir;

                if (next.length > Math.max(0, skip)) {
                  this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);
                  return this;
                }

                skip -= next.length;
              } else {
                var _next6 = top.children[offset + (dir < 0 ? -1 : 0)];

                if (skip > _next6.length) {
                  skip -= _next6.length;
                  this.offsets[last] += dir;
                } else {
                  if (dir < 0) this.offsets[last]--;
                  this.nodes.push(_next6);
                  this.offsets.push(dir > 0 ? 1 : (_next6 instanceof TextLeaf ? _next6.text.length : _next6.children.length) << 1);
                }
              }
            }
          }
        }, {
          key: "next",
          value: function next() {
            var skip = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

            if (skip < 0) {
              this.nextInner(-skip, -this.dir);
              skip = this.value.length;
            }

            return this.nextInner(skip, this.dir);
          }
        }]);

        return RawTextCursor;
      }();

      var PartialTextCursor = /*#__PURE__*/function () {
        function PartialTextCursor(text, start, end) {
          _classCallCheck(this, PartialTextCursor);

          this.value = "";
          this.done = false;
          this.cursor = new RawTextCursor(text, start > end ? -1 : 1);
          this.pos = start > end ? text.length : 0;
          this.from = Math.min(start, end);
          this.to = Math.max(start, end);
        }

        _createClass(PartialTextCursor, [{
          key: "nextInner",
          value: function nextInner(skip, dir) {
            if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {
              this.value = "";
              this.done = true;
              return this;
            }

            skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);
            var limit = dir < 0 ? this.pos - this.from : this.to - this.pos;
            if (skip > limit) skip = limit;
            limit -= skip;

            var _this$cursor$next3 = this.cursor.next(skip),
                value = _this$cursor$next3.value;

            this.pos += (value.length + skip) * dir;
            this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);
            this.done = !this.value;
            return this;
          }
        }, {
          key: "next",
          value: function next() {
            var skip = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
            if (skip < 0) skip = Math.max(skip, this.from - this.pos);else if (skip > 0) skip = Math.min(skip, this.to - this.pos);
            return this.nextInner(skip, this.cursor.dir);
          }
        }, {
          key: "lineBreak",
          get: function get() {
            return this.cursor.lineBreak && this.value != "";
          }
        }]);

        return PartialTextCursor;
      }();

      var LineCursor = /*#__PURE__*/function () {
        function LineCursor(inner) {
          _classCallCheck(this, LineCursor);

          this.inner = inner;
          this.afterBreak = true;
          this.value = "";
          this.done = false;
        }

        _createClass(LineCursor, [{
          key: "next",
          value: function next() {
            var skip = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

            var _this$inner$next = this.inner.next(skip),
                done = _this$inner$next.done,
                lineBreak = _this$inner$next.lineBreak,
                value = _this$inner$next.value;

            if (done) {
              this.done = true;
              this.value = "";
            } else if (lineBreak) {
              if (this.afterBreak) {
                this.value = "";
              } else {
                this.afterBreak = true;
                this.next();
              }
            } else {
              this.value = value;
              this.afterBreak = false;
            }

            return this;
          }
        }, {
          key: "lineBreak",
          get: function get() {
            return false;
          }
        }]);

        return LineCursor;
      }();

      if (typeof Symbol != "undefined") {
        Text.prototype[Symbol.iterator] = function () {
          return this.iter();
        };

        RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] = LineCursor.prototype[Symbol.iterator] = function () {
          return this;
        };
      }
      /**
      This type describes a line in the document. It is created
      on-demand when lines are [queried](https://codemirror.net/6/docs/ref/#text.Text.lineAt).
      */


      var Line = /*#__PURE__*/function () {
        /**
        @internal
        */
        function Line(
        /**
        The position of the start of the line.
        */
        from,
        /**
        The position at the end of the line (_before_ the line break,
        or at the end of document for the last line).
        */
        to,
        /**
        This line's line number (1-based).
        */
        number,
        /**
        The line's content.
        */
        text) {
          _classCallCheck(this, Line);

          this.from = from;
          this.to = to;
          this.number = number;
          this.text = text;
        }
        /**
        The length of the line (not including any line break after it).
        */


        _createClass(Line, [{
          key: "length",
          get: function get() {
            return this.to - this.from;
          }
        }]);

        return Line;
      }();
      /***/

    },

    /***/
    "ubVE":
    /*!**********************************************************!*\
      !*** ./node_modules/@codemirror/highlight/dist/index.js ***!
      \**********************************************************/

    /*! exports provided: HighlightStyle, Tag, classHighlightStyle, defaultHighlightStyle, highlightTree, styleTags, tags */

    /***/
    function ubVE(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "HighlightStyle", function () {
        return HighlightStyle;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Tag", function () {
        return Tag;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "classHighlightStyle", function () {
        return classHighlightStyle;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "defaultHighlightStyle", function () {
        return defaultHighlightStyle;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "highlightTree", function () {
        return highlightTree;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "styleTags", function () {
        return styleTags;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "tags", function () {
        return tags;
      });
      /* harmony import */


      var _lezer_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @lezer/common */
      "lmln");
      /* harmony import */


      var style_mod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! style-mod */
      "rknV");
      /* harmony import */


      var _codemirror_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @codemirror/view */
      "AtEE");
      /* harmony import */


      var _codemirror_state__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @codemirror/state */
      "4eob");
      /* harmony import */


      var _codemirror_language__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @codemirror/language */
      "yqQ+");
      /* harmony import */


      var _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @codemirror/rangeset */
      "wG49");

      var nextTagID = 0;
      /**
      Highlighting tags are markers that denote a highlighting category.
      They are [associated](https://codemirror.net/6/docs/ref/#highlight.styleTags) with parts of a syntax
      tree by a language mode, and then mapped to an actual CSS style by
      a [highlight style](https://codemirror.net/6/docs/ref/#highlight.HighlightStyle).
      
      Because syntax tree node types and highlight styles have to be
      able to talk the same language, CodeMirror uses a mostly _closed_
      [vocabulary](https://codemirror.net/6/docs/ref/#highlight.tags) of syntax tags (as opposed to
      traditional open string-based systems, which make it hard for
      highlighting themes to cover all the tokens produced by the
      various languages).
      
      It _is_ possible to [define](https://codemirror.net/6/docs/ref/#highlight.Tag^define) your own
      highlighting tags for system-internal use (where you control both
      the language package and the highlighter), but such tags will not
      be picked up by regular highlighters (though you can derive them
      from standard tags to allow highlighters to fall back to those).
      */

      var Tag = /*#__PURE__*/function () {
        /**
        @internal
        */
        function Tag(
        /**
        The set of tags that match this tag, starting with this one
        itself, sorted in order of decreasing specificity. @internal
        */
        set,
        /**
        The base unmodified tag that this one is based on, if it's
        modified @internal
        */
        base,
        /**
        The modifiers applied to this.base @internal
        */
        modified) {
          _classCallCheck(this, Tag);

          this.set = set;
          this.base = base;
          this.modified = modified;
          /**
          @internal
          */

          this.id = nextTagID++;
        }
        /**
        Define a new tag. If `parent` is given, the tag is treated as a
        sub-tag of that parent, and [highlight
        styles](https://codemirror.net/6/docs/ref/#highlight.HighlightStyle) that don't mention this tag
        will try to fall back to the parent tag (or grandparent tag,
        etc).
        */


        _createClass(Tag, null, [{
          key: "define",
          value: function define(parent) {
            if (parent === null || parent === void 0 ? void 0 : parent.base) throw new Error("Can not derive from a modified tag");
            var tag = new Tag([], null, []);
            tag.set.push(tag);

            if (parent) {
              var _iterator272 = _createForOfIteratorHelper(parent.set),
                  _step272;

              try {
                for (_iterator272.s(); !(_step272 = _iterator272.n()).done;) {
                  var _t4 = _step272.value;
                  tag.set.push(_t4);
                }
              } catch (err) {
                _iterator272.e(err);
              } finally {
                _iterator272.f();
              }
            }

            return tag;
          }
          /**
          Define a tag _modifier_, which is a function that, given a tag,
          will return a tag that is a subtag of the original. Applying the
          same modifier to a twice tag will return the same value (`m1(t1)
          == m1(t1)`) and applying multiple modifiers will, regardless or
          order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
          
          When multiple modifiers are applied to a given base tag, each
          smaller set of modifiers is registered as a parent, so that for
          example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
          `m1(m3(t1)`, and so on.
          */

        }, {
          key: "defineModifier",
          value: function defineModifier() {
            var mod = new Modifier();
            return function (tag) {
              if (tag.modified.indexOf(mod) > -1) return tag;
              return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort(function (a, b) {
                return a.id - b.id;
              }));
            };
          }
        }]);

        return Tag;
      }();

      var nextModifierID = 0;

      var Modifier = /*#__PURE__*/function () {
        function Modifier() {
          _classCallCheck(this, Modifier);

          this.instances = [];
          this.id = nextModifierID++;
        }

        _createClass(Modifier, null, [{
          key: "get",
          value: function get(base, mods) {
            if (!mods.length) return base;
            var exists = mods[0].instances.find(function (t) {
              return t.base == base && sameArray(mods, t.modified);
            });
            if (exists) return exists;
            var set = [],
                tag = new Tag(set, base, mods);

            var _iterator273 = _createForOfIteratorHelper(mods),
                _step273;

            try {
              for (_iterator273.s(); !(_step273 = _iterator273.n()).done;) {
                var m = _step273.value;
                m.instances.push(tag);
              }
            } catch (err) {
              _iterator273.e(err);
            } finally {
              _iterator273.f();
            }

            var configs = permute(mods);

            var _iterator274 = _createForOfIteratorHelper(base.set),
                _step274;

            try {
              for (_iterator274.s(); !(_step274 = _iterator274.n()).done;) {
                var parent = _step274.value;

                var _iterator275 = _createForOfIteratorHelper(configs),
                    _step275;

                try {
                  for (_iterator275.s(); !(_step275 = _iterator275.n()).done;) {
                    var config = _step275.value;
                    set.push(Modifier.get(parent, config));
                  }
                } catch (err) {
                  _iterator275.e(err);
                } finally {
                  _iterator275.f();
                }
              }
            } catch (err) {
              _iterator274.e(err);
            } finally {
              _iterator274.f();
            }

            return tag;
          }
        }]);

        return Modifier;
      }();

      function sameArray(a, b) {
        return a.length == b.length && a.every(function (x, i) {
          return x == b[i];
        });
      }

      function permute(array) {
        var result = [array];

        for (var _i226 = 0; _i226 < array.length; _i226++) {
          var _iterator276 = _createForOfIteratorHelper(permute(array.slice(0, _i226).concat(array.slice(_i226 + 1)))),
              _step276;

          try {
            for (_iterator276.s(); !(_step276 = _iterator276.n()).done;) {
              var a = _step276.value;
              result.push(a);
            }
          } catch (err) {
            _iterator276.e(err);
          } finally {
            _iterator276.f();
          }
        }

        return result;
      }
      /**
      This function is used to add a set of tags to a language syntax
      via
      [`LRParser.configure`](https://lezer.codemirror.net/docs/ref#lr.LRParser.configure).
      
      The argument object maps node selectors to [highlighting
      tags](https://codemirror.net/6/docs/ref/#highlight.Tag) or arrays of tags.
      
      Node selectors may hold one or more (space-separated) node paths.
      Such a path can be a [node
      name](https://lezer.codemirror.net/docs/ref#common.NodeType.name),
      or multiple node names (or `*` wildcards) separated by slash
      characters, as in `"Block/Declaration/VariableName"`. Such a path
      matches the final node but only if its direct parent nodes are the
      other nodes mentioned. A `*` in such a path matches any parent,
      but only a single level—wildcards that match multiple parents
      aren't supported, both for efficiency reasons and because Lezer
      trees make it rather hard to reason about what they would match.)
      
      A path can be ended with `/...` to indicate that the tag assigned
      to the node should also apply to all child nodes, even if they
      match their own style (by default, only the innermost style is
      used).
      
      When a path ends in `!`, as in `Attribute!`, no further matching
      happens for the node's child nodes, and the entire node gets the
      given style.
      
      In this notation, node names that contain `/`, `!`, `*`, or `...`
      must be quoted as JSON strings.
      
      For example:
      
      ```javascript
      parser.withProps(
        styleTags({
          // Style Number and BigNumber nodes
          "Number BigNumber": tags.number,
          // Style Escape nodes whose parent is String
          "String/Escape": tags.escape,
          // Style anything inside Attributes nodes
          "Attributes!": tags.meta,
          // Add a style to all content inside Italic nodes
          "Italic/...": tags.emphasis,
          // Style InvalidString nodes as both `string` and `invalid`
          "InvalidString": [tags.string, tags.invalid],
          // Style the node named "/" as punctuation
          '"/"': tags.punctuation
        })
      )
      ```
      */


      function styleTags(spec) {
        var byName = Object.create(null);

        for (var prop in spec) {
          var _tags = spec[prop];
          if (!Array.isArray(_tags)) _tags = [_tags];

          var _iterator277 = _createForOfIteratorHelper(prop.split(" ")),
              _step277;

          try {
            for (_iterator277.s(); !(_step277 = _iterator277.n()).done;) {
              var part = _step277.value;

              if (part) {
                var pieces = [],
                    mode = 2
                /* Normal */
                ,
                    rest = part;

                for (var pos = 0;;) {
                  if (rest == "..." && pos > 0 && pos + 3 == part.length) {
                    mode = 1
                    /* Inherit */
                    ;
                    break;
                  }

                  var m = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(rest);
                  if (!m) throw new RangeError("Invalid path: " + part);
                  pieces.push(m[0] == "*" ? null : m[0][0] == '"' ? JSON.parse(m[0]) : m[0]);
                  pos += m[0].length;
                  if (pos == part.length) break;
                  var next = part[pos++];

                  if (pos == part.length && next == "!") {
                    mode = 0
                    /* Opaque */
                    ;
                    break;
                  }

                  if (next != "/") throw new RangeError("Invalid path: " + part);
                  rest = part.slice(pos);
                }

                var last = pieces.length - 1,
                    inner = pieces[last];
                if (!inner) throw new RangeError("Invalid path: " + part);
                var rule = new Rule(_tags, mode, last > 0 ? pieces.slice(0, last) : null);
                byName[inner] = rule.sort(byName[inner]);
              }
            }
          } catch (err) {
            _iterator277.e(err);
          } finally {
            _iterator277.f();
          }
        }

        return ruleNodeProp.add(byName);
      }

      var ruleNodeProp = /*@__PURE__*/new _lezer_common__WEBPACK_IMPORTED_MODULE_0__["NodeProp"]();

      var highlightStyle = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_3__["Facet"].define({
        combine: function combine(stylings) {
          return stylings.length ? HighlightStyle.combinedMatch(stylings) : null;
        }
      });

      var fallbackHighlightStyle = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_3__["Facet"].define({
        combine: function combine(values) {
          return values.length ? values[0].match : null;
        }
      });

      function getHighlightStyle(state) {
        return state.facet(highlightStyle) || state.facet(fallbackHighlightStyle);
      }

      var Rule = /*#__PURE__*/function () {
        function Rule(tags, mode, context, next) {
          _classCallCheck(this, Rule);

          this.tags = tags;
          this.mode = mode;
          this.context = context;
          this.next = next;
        }

        _createClass(Rule, [{
          key: "sort",
          value: function sort(other) {
            if (!other || other.depth < this.depth) {
              this.next = other;
              return this;
            }

            other.next = this.sort(other.next);
            return other;
          }
        }, {
          key: "depth",
          get: function get() {
            return this.context ? this.context.length : 0;
          }
        }]);

        return Rule;
      }();
      /**
      A highlight style associates CSS styles with higlighting
      [tags](https://codemirror.net/6/docs/ref/#highlight.Tag).
      */


      var HighlightStyle = /*#__PURE__*/function () {
        function HighlightStyle(spec, options) {
          _classCallCheck(this, HighlightStyle);

          this.map = Object.create(null);
          var modSpec;

          function def(spec) {
            var cls = style_mod__WEBPACK_IMPORTED_MODULE_1__["StyleModule"].newName();
            (modSpec || (modSpec = Object.create(null)))["." + cls] = spec;
            return cls;
          }

          this.all = typeof options.all == "string" ? options.all : options.all ? def(options.all) : null;

          var _iterator278 = _createForOfIteratorHelper(spec),
              _step278;

          try {
            for (_iterator278.s(); !(_step278 = _iterator278.n()).done;) {
              var style = _step278.value;
              var cls = (style["class"] || def(Object.assign({}, style, {
                tag: null
              }))) + (this.all ? " " + this.all : "");
              var _tags2 = style.tag;
              if (!Array.isArray(_tags2)) this.map[_tags2.id] = cls;else {
                var _iterator279 = _createForOfIteratorHelper(_tags2),
                    _step279;

                try {
                  for (_iterator279.s(); !(_step279 = _iterator279.n()).done;) {
                    var tag = _step279.value;
                    this.map[tag.id] = cls;
                  }
                } catch (err) {
                  _iterator279.e(err);
                } finally {
                  _iterator279.f();
                }
              }
            }
          } catch (err) {
            _iterator278.e(err);
          } finally {
            _iterator278.f();
          }

          this.module = modSpec ? new style_mod__WEBPACK_IMPORTED_MODULE_1__["StyleModule"](modSpec) : null;
          this.scope = options.scope || null;
          this.match = this.match.bind(this);
          var ext = [treeHighlighter];
          if (this.module) ext.push(_codemirror_view__WEBPACK_IMPORTED_MODULE_2__["EditorView"].styleModule.of(this.module));
          this.extension = ext.concat(highlightStyle.of(this));
          this.fallback = ext.concat(fallbackHighlightStyle.of(this));
        }
        /**
        Returns the CSS class associated with the given tag, if any.
        This method is bound to the instance by the constructor.
        */


        _createClass(HighlightStyle, [{
          key: "match",
          value: function match(tag, scope) {
            if (this.scope && scope != this.scope) return null;

            var _iterator280 = _createForOfIteratorHelper(tag.set),
                _step280;

            try {
              for (_iterator280.s(); !(_step280 = _iterator280.n()).done;) {
                var _t5 = _step280.value;
                var match = this.map[_t5.id];

                if (match !== undefined) {
                  if (_t5 != tag) this.map[tag.id] = match;
                  return match;
                }
              }
            } catch (err) {
              _iterator280.e(err);
            } finally {
              _iterator280.f();
            }

            return this.map[tag.id] = this.all;
          }
          /**
          Combines an array of highlight styles into a single match
          function that returns all of the classes assigned by the styles
          for a given tag.
          */

        }], [{
          key: "combinedMatch",
          value: function combinedMatch(styles) {
            if (styles.length == 1) return styles[0].match;
            var cache = styles.some(function (s) {
              return s.scope;
            }) ? undefined : Object.create(null);
            return function (tag, scope) {
              var cached = cache && cache[tag.id];
              if (cached !== undefined) return cached;
              var result = null;

              var _iterator281 = _createForOfIteratorHelper(styles),
                  _step281;

              try {
                for (_iterator281.s(); !(_step281 = _iterator281.n()).done;) {
                  var style = _step281.value;
                  var value = style.match(tag, scope);
                  if (value) result = result ? result + " " + value : value;
                }
              } catch (err) {
                _iterator281.e(err);
              } finally {
                _iterator281.f();
              }

              if (cache) cache[tag.id] = result;
              return result;
            };
          }
          /**
          Create a highlighter style that associates the given styles to
          the given tags. The spec must be objects that hold a style tag
          or array of tags in their `tag` property, and either a single
          `class` property providing a static CSS class (for highlighters
          like [`classHighlightStyle`](https://codemirror.net/6/docs/ref/#highlight.classHighlightStyle)
          that rely on external styling), or a
          [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
          set of CSS properties (which define the styling for those tags).
          
          The CSS rules created for a highlighter will be emitted in the
          order of the spec's properties. That means that for elements that
          have multiple tags associated with them, styles defined further
          down in the list will have a higher CSS precedence than styles
          defined earlier.
          */

        }, {
          key: "define",
          value: function define(specs, options) {
            return new HighlightStyle(specs, options || {});
          }
          /**
          Returns the CSS classes (if any) that the highlight styles
          active in the given state would assign to the given a style
          [tag](https://codemirror.net/6/docs/ref/#highlight.Tag) and (optional) language
          [scope](https://codemirror.net/6/docs/ref/#highlight.HighlightStyle^define^options.scope).
          */

        }, {
          key: "get",
          value: function get(state, tag, scope) {
            var style = getHighlightStyle(state);
            return style && style(tag, scope || _lezer_common__WEBPACK_IMPORTED_MODULE_0__["NodeType"].none);
          }
        }]);

        return HighlightStyle;
      }();
      /**
      Run the tree highlighter over the given tree.
      */


      function highlightTree(tree,
      /**
      Get the CSS classes used to style a given [tag](https://codemirror.net/6/docs/ref/#highlight.Tag),
      or `null` if it isn't styled. (You'll often want to pass a
      highlight style's [`match`](https://codemirror.net/6/docs/ref/#highlight.HighlightStyle.match)
      method here.)
      */
      getStyle,
      /**
      Assign styling to a region of the text. Will be called, in order
      of position, for any ranges where more than zero classes apply.
      `classes` is a space separated string of CSS classes.
      */
      putStyle) {
        var from = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
        var to = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : tree.length;
        highlightTreeRange(tree, from, to, getStyle, putStyle);
      }

      var TreeHighlighter = /*#__PURE__*/function () {
        function TreeHighlighter(view) {
          _classCallCheck(this, TreeHighlighter);

          this.markCache = Object.create(null);
          this.tree = Object(_codemirror_language__WEBPACK_IMPORTED_MODULE_4__["syntaxTree"])(view.state);
          this.decorations = this.buildDeco(view, getHighlightStyle(view.state));
        }

        _createClass(TreeHighlighter, [{
          key: "update",
          value: function update(_update34) {
            var tree = Object(_codemirror_language__WEBPACK_IMPORTED_MODULE_4__["syntaxTree"])(_update34.state),
                style = getHighlightStyle(_update34.state);

            var styleChange = style != _update34.startState.facet(highlightStyle);

            if (tree.length < _update34.view.viewport.to && !styleChange && tree.type == this.tree.type) {
              this.decorations = this.decorations.map(_update34.changes);
            } else if (tree != this.tree || _update34.viewportChanged || styleChange) {
              this.tree = tree;
              this.decorations = this.buildDeco(_update34.view, style);
            }
          }
        }, {
          key: "buildDeco",
          value: function buildDeco(view, match) {
            var _this135 = this;

            if (!match || !this.tree.length) return _codemirror_view__WEBPACK_IMPORTED_MODULE_2__["Decoration"].none;
            var builder = new _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_5__["RangeSetBuilder"]();

            var _iterator282 = _createForOfIteratorHelper(view.visibleRanges),
                _step282;

            try {
              for (_iterator282.s(); !(_step282 = _iterator282.n()).done;) {
                var _step282$value = _step282.value,
                    from = _step282$value.from,
                    to = _step282$value.to;
                highlightTreeRange(this.tree, from, to, match, function (from, to, style) {
                  builder.add(from, to, _this135.markCache[style] || (_this135.markCache[style] = _codemirror_view__WEBPACK_IMPORTED_MODULE_2__["Decoration"].mark({
                    "class": style
                  })));
                });
              }
            } catch (err) {
              _iterator282.e(err);
            } finally {
              _iterator282.f();
            }

            return builder.finish();
          }
        }]);

        return TreeHighlighter;
      }(); // This extension installs a highlighter that highlights based on the
      // syntax tree and highlight style.


      var treeHighlighter = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_3__["Prec"].extend( /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_2__["ViewPlugin"].fromClass(TreeHighlighter, {
        decorations: function decorations(v) {
          return v.decorations;
        }
      }));

      var nodeStack = [""];

      var HighlightBuilder = /*#__PURE__*/function () {
        function HighlightBuilder(at, style, span) {
          _classCallCheck(this, HighlightBuilder);

          this.at = at;
          this.style = style;
          this.span = span;
          this["class"] = "";
        }

        _createClass(HighlightBuilder, [{
          key: "startSpan",
          value: function startSpan(at, cls) {
            if (cls != this["class"]) {
              this.flush(at);
              if (at > this.at) this.at = at;
              this["class"] = cls;
            }
          }
        }, {
          key: "flush",
          value: function flush(to) {
            if (to > this.at && this["class"]) this.span(this.at, to, this["class"]);
          }
        }, {
          key: "highlightRange",
          value: function highlightRange(cursor, from, to, inheritedClass, depth, scope) {
            var type = cursor.type,
                start = cursor.from,
                end = cursor.to;
            if (start >= to || end <= from) return;
            nodeStack[depth] = type.name;
            if (type.isTop) scope = type;
            var cls = inheritedClass;
            var rule = type.prop(ruleNodeProp),
                opaque = false;

            while (rule) {
              if (!rule.context || matchContext(rule.context, nodeStack, depth)) {
                var _iterator283 = _createForOfIteratorHelper(rule.tags),
                    _step283;

                try {
                  for (_iterator283.s(); !(_step283 = _iterator283.n()).done;) {
                    var tag = _step283.value;
                    var st = this.style(tag, scope);

                    if (st) {
                      if (cls) cls += " ";
                      cls += st;
                      if (rule.mode == 1
                      /* Inherit */
                      ) inheritedClass += (inheritedClass ? " " : "") + st;else if (rule.mode == 0
                      /* Opaque */
                      ) opaque = true;
                    }
                  }
                } catch (err) {
                  _iterator283.e(err);
                } finally {
                  _iterator283.f();
                }

                break;
              }

              rule = rule.next;
            }

            this.startSpan(cursor.from, cls);
            if (opaque) return;
            var mounted = cursor.tree && cursor.tree.prop(_lezer_common__WEBPACK_IMPORTED_MODULE_0__["NodeProp"].mounted);

            if (mounted && mounted.overlay) {
              var inner = cursor.node.enter(mounted.overlay[0].from + start, 1);
              var hasChild = cursor.firstChild();

              for (var _i227 = 0, pos = start;; _i227++) {
                var next = _i227 < mounted.overlay.length ? mounted.overlay[_i227] : null;
                var nextPos = next ? next.from + start : end;
                var rangeFrom = Math.max(from, pos),
                    rangeTo = Math.min(to, nextPos);

                if (rangeFrom < rangeTo && hasChild) {
                  while (cursor.from < rangeTo) {
                    this.highlightRange(cursor, rangeFrom, rangeTo, inheritedClass, depth + 1, scope);
                    this.startSpan(Math.min(to, cursor.to), cls);
                    if (cursor.to >= nextPos || !cursor.nextSibling()) break;
                  }
                }

                if (!next || nextPos > to) break;
                pos = next.to + start;

                if (pos > from) {
                  this.highlightRange(inner.cursor, Math.max(from, next.from + start), Math.min(to, pos), inheritedClass, depth, mounted.tree.type);
                  this.startSpan(pos, cls);
                }
              }

              if (hasChild) cursor.parent();
            } else if (cursor.firstChild()) {
              do {
                if (cursor.to <= from) continue;
                if (cursor.from >= to) break;
                this.highlightRange(cursor, from, to, inheritedClass, depth + 1, scope);
                this.startSpan(Math.min(to, cursor.to), cls);
              } while (cursor.nextSibling());

              cursor.parent();
            }
          }
        }]);

        return HighlightBuilder;
      }();

      function highlightTreeRange(tree, from, to, style, span) {
        var builder = new HighlightBuilder(from, style, span);
        builder.highlightRange(tree.cursor(), from, to, "", 0, tree.type);
        builder.flush(to);
      }

      function matchContext(context, stack, depth) {
        if (context.length > depth - 1) return false;

        for (var d = depth - 1, _i228 = context.length - 1; _i228 >= 0; _i228--, d--) {
          var check = context[_i228];
          if (check && check != stack[d]) return false;
        }

        return true;
      }

      var t = Tag.define;
      var comment = /*@__PURE__*/t(),
          name = /*@__PURE__*/t(),
          typeName = /*@__PURE__*/t(name),
          literal = /*@__PURE__*/t(),
          string = /*@__PURE__*/t(literal),
          number = /*@__PURE__*/t(literal),
          content = /*@__PURE__*/t(),
          heading = /*@__PURE__*/t(content),
          keyword = /*@__PURE__*/t(),
          operator = /*@__PURE__*/t(),
          punctuation = /*@__PURE__*/t(),
          bracket = /*@__PURE__*/t(punctuation),
          meta = /*@__PURE__*/t();
      /**
      The default set of highlighting [tags](https://codemirror.net/6/docs/ref/#highlight.Tag^define) used
      by regular language packages and themes.
      
      This collection is heavily biased towards programming languages,
      and necessarily incomplete. A full ontology of syntactic
      constructs would fill a stack of books, and be impractical to
      write themes for. So try to make do with this set. If all else
      fails, [open an
      issue](https://github.com/codemirror/codemirror.next) to propose a
      new tag, or [define](https://codemirror.net/6/docs/ref/#highlight.Tag^define) a local custom tag for
      your use case.
      
      Note that it is not obligatory to always attach the most specific
      tag possible to an element—if your grammar can't easily
      distinguish a certain type of element (such as a local variable),
      it is okay to style it as its more general variant (a variable).
      
      For tags that extend some parent tag, the documentation links to
      the parent.
      */

      var tags = {
        /**
        A comment.
        */
        comment: comment,

        /**
        A line [comment](https://codemirror.net/6/docs/ref/#highlight.tags.comment).
        */
        lineComment: /*@__PURE__*/t(comment),

        /**
        A block [comment](https://codemirror.net/6/docs/ref/#highlight.tags.comment).
        */
        blockComment: /*@__PURE__*/t(comment),

        /**
        A documentation [comment](https://codemirror.net/6/docs/ref/#highlight.tags.comment).
        */
        docComment: /*@__PURE__*/t(comment),

        /**
        Any kind of identifier.
        */
        name: name,

        /**
        The [name](https://codemirror.net/6/docs/ref/#highlight.tags.name) of a variable.
        */
        variableName: /*@__PURE__*/t(name),

        /**
        A type [name](https://codemirror.net/6/docs/ref/#highlight.tags.name).
        */
        typeName: typeName,

        /**
        A tag name (subtag of [`typeName`](https://codemirror.net/6/docs/ref/#highlight.tags.typeName)).
        */
        tagName: /*@__PURE__*/t(typeName),

        /**
        A property, field, or attribute [name](https://codemirror.net/6/docs/ref/#highlight.tags.name).
        */
        propertyName: /*@__PURE__*/t(name),

        /**
        The [name](https://codemirror.net/6/docs/ref/#highlight.tags.name) of a class.
        */
        className: /*@__PURE__*/t(name),

        /**
        A label [name](https://codemirror.net/6/docs/ref/#highlight.tags.name).
        */
        labelName: /*@__PURE__*/t(name),

        /**
        A namespace [name](https://codemirror.net/6/docs/ref/#highlight.tags.name).
        */
        namespace: /*@__PURE__*/t(name),

        /**
        The [name](https://codemirror.net/6/docs/ref/#highlight.tags.name) of a macro.
        */
        macroName: /*@__PURE__*/t(name),

        /**
        A literal value.
        */
        literal: literal,

        /**
        A string [literal](https://codemirror.net/6/docs/ref/#highlight.tags.literal).
        */
        string: string,

        /**
        A documentation [string](https://codemirror.net/6/docs/ref/#highlight.tags.string).
        */
        docString: /*@__PURE__*/t(string),

        /**
        A character literal (subtag of [string](https://codemirror.net/6/docs/ref/#highlight.tags.string)).
        */
        character: /*@__PURE__*/t(string),

        /**
        A number [literal](https://codemirror.net/6/docs/ref/#highlight.tags.literal).
        */
        number: number,

        /**
        An integer [number](https://codemirror.net/6/docs/ref/#highlight.tags.number) literal.
        */
        integer: /*@__PURE__*/t(number),

        /**
        A floating-point [number](https://codemirror.net/6/docs/ref/#highlight.tags.number) literal.
        */
        "float": /*@__PURE__*/t(number),

        /**
        A boolean [literal](https://codemirror.net/6/docs/ref/#highlight.tags.literal).
        */
        bool: /*@__PURE__*/t(literal),

        /**
        Regular expression [literal](https://codemirror.net/6/docs/ref/#highlight.tags.literal).
        */
        regexp: /*@__PURE__*/t(literal),

        /**
        An escape [literal](https://codemirror.net/6/docs/ref/#highlight.tags.literal), for example a
        backslash escape in a string.
        */
        escape: /*@__PURE__*/t(literal),

        /**
        A color [literal](https://codemirror.net/6/docs/ref/#highlight.tags.literal).
        */
        color: /*@__PURE__*/t(literal),

        /**
        A URL [literal](https://codemirror.net/6/docs/ref/#highlight.tags.literal).
        */
        url: /*@__PURE__*/t(literal),

        /**
        A language keyword.
        */
        keyword: keyword,

        /**
        The [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword) for the self or this
        object.
        */
        self: /*@__PURE__*/t(keyword),

        /**
        The [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword) for null.
        */
        "null": /*@__PURE__*/t(keyword),

        /**
        A [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword) denoting some atomic value.
        */
        atom: /*@__PURE__*/t(keyword),

        /**
        A [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword) that represents a unit.
        */
        unit: /*@__PURE__*/t(keyword),

        /**
        A modifier [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword).
        */
        modifier: /*@__PURE__*/t(keyword),

        /**
        A [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword) that acts as an operator.
        */
        operatorKeyword: /*@__PURE__*/t(keyword),

        /**
        A control-flow related [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword).
        */
        controlKeyword: /*@__PURE__*/t(keyword),

        /**
        A [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword) that defines something.
        */
        definitionKeyword: /*@__PURE__*/t(keyword),

        /**
        An operator.
        */
        operator: operator,

        /**
        An [operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator) that defines something.
        */
        derefOperator: /*@__PURE__*/t(operator),

        /**
        Arithmetic-related [operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator).
        */
        arithmeticOperator: /*@__PURE__*/t(operator),

        /**
        Logical [operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator).
        */
        logicOperator: /*@__PURE__*/t(operator),

        /**
        Bit [operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator).
        */
        bitwiseOperator: /*@__PURE__*/t(operator),

        /**
        Comparison [operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator).
        */
        compareOperator: /*@__PURE__*/t(operator),

        /**
        [Operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator) that updates its operand.
        */
        updateOperator: /*@__PURE__*/t(operator),

        /**
        [Operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator) that defines something.
        */
        definitionOperator: /*@__PURE__*/t(operator),

        /**
        Type-related [operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator).
        */
        typeOperator: /*@__PURE__*/t(operator),

        /**
        Control-flow [operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator).
        */
        controlOperator: /*@__PURE__*/t(operator),

        /**
        Program or markup punctuation.
        */
        punctuation: punctuation,

        /**
        [Punctuation](https://codemirror.net/6/docs/ref/#highlight.tags.punctuation) that separates
        things.
        */
        separator: /*@__PURE__*/t(punctuation),

        /**
        Bracket-style [punctuation](https://codemirror.net/6/docs/ref/#highlight.tags.punctuation).
        */
        bracket: bracket,

        /**
        Angle [brackets](https://codemirror.net/6/docs/ref/#highlight.tags.bracket) (usually `<` and `>`
        tokens).
        */
        angleBracket: /*@__PURE__*/t(bracket),

        /**
        Square [brackets](https://codemirror.net/6/docs/ref/#highlight.tags.bracket) (usually `[` and `]`
        tokens).
        */
        squareBracket: /*@__PURE__*/t(bracket),

        /**
        Parentheses (usually `(` and `)` tokens). Subtag of
        [bracket](https://codemirror.net/6/docs/ref/#highlight.tags.bracket).
        */
        paren: /*@__PURE__*/t(bracket),

        /**
        Braces (usually `{` and `}` tokens). Subtag of
        [bracket](https://codemirror.net/6/docs/ref/#highlight.tags.bracket).
        */
        brace: /*@__PURE__*/t(bracket),

        /**
        Content, for example plain text in XML or markup documents.
        */
        content: content,

        /**
        [Content](https://codemirror.net/6/docs/ref/#highlight.tags.content) that represents a heading.
        */
        heading: heading,

        /**
        A level 1 [heading](https://codemirror.net/6/docs/ref/#highlight.tags.heading).
        */
        heading1: /*@__PURE__*/t(heading),

        /**
        A level 2 [heading](https://codemirror.net/6/docs/ref/#highlight.tags.heading).
        */
        heading2: /*@__PURE__*/t(heading),

        /**
        A level 3 [heading](https://codemirror.net/6/docs/ref/#highlight.tags.heading).
        */
        heading3: /*@__PURE__*/t(heading),

        /**
        A level 4 [heading](https://codemirror.net/6/docs/ref/#highlight.tags.heading).
        */
        heading4: /*@__PURE__*/t(heading),

        /**
        A level 5 [heading](https://codemirror.net/6/docs/ref/#highlight.tags.heading).
        */
        heading5: /*@__PURE__*/t(heading),

        /**
        A level 6 [heading](https://codemirror.net/6/docs/ref/#highlight.tags.heading).
        */
        heading6: /*@__PURE__*/t(heading),

        /**
        A prose separator (such as a horizontal rule).
        */
        contentSeparator: /*@__PURE__*/t(content),

        /**
        [Content](https://codemirror.net/6/docs/ref/#highlight.tags.content) that represents a list.
        */
        list: /*@__PURE__*/t(content),

        /**
        [Content](https://codemirror.net/6/docs/ref/#highlight.tags.content) that represents a quote.
        */
        quote: /*@__PURE__*/t(content),

        /**
        [Content](https://codemirror.net/6/docs/ref/#highlight.tags.content) that is emphasized.
        */
        emphasis: /*@__PURE__*/t(content),

        /**
        [Content](https://codemirror.net/6/docs/ref/#highlight.tags.content) that is styled strong.
        */
        strong: /*@__PURE__*/t(content),

        /**
        [Content](https://codemirror.net/6/docs/ref/#highlight.tags.content) that is part of a link.
        */
        link: /*@__PURE__*/t(content),

        /**
        [Content](https://codemirror.net/6/docs/ref/#highlight.tags.content) that is styled as code or
        monospace.
        */
        monospace: /*@__PURE__*/t(content),

        /**
        [Content](https://codemirror.net/6/docs/ref/#highlight.tags.content) that has a strike-through
        style.
        */
        strikethrough: /*@__PURE__*/t(content),

        /**
        Inserted text in a change-tracking format.
        */
        inserted: /*@__PURE__*/t(),

        /**
        Deleted text.
        */
        deleted: /*@__PURE__*/t(),

        /**
        Changed text.
        */
        changed: /*@__PURE__*/t(),

        /**
        An invalid or unsyntactic element.
        */
        invalid: /*@__PURE__*/t(),

        /**
        Metadata or meta-instruction.
        */
        meta: meta,

        /**
        [Metadata](https://codemirror.net/6/docs/ref/#highlight.tags.meta) that applies to the entire
        document.
        */
        documentMeta: /*@__PURE__*/t(meta),

        /**
        [Metadata](https://codemirror.net/6/docs/ref/#highlight.tags.meta) that annotates or adds
        attributes to a given syntactic element.
        */
        annotation: /*@__PURE__*/t(meta),

        /**
        Processing instruction or preprocessor directive. Subtag of
        [meta](https://codemirror.net/6/docs/ref/#highlight.tags.meta).
        */
        processingInstruction: /*@__PURE__*/t(meta),

        /**
        [Modifier](https://codemirror.net/6/docs/ref/#highlight.Tag^defineModifier) that indicates that a
        given element is being defined. Expected to be used with the
        various [name](https://codemirror.net/6/docs/ref/#highlight.tags.name) tags.
        */
        definition: /*@__PURE__*/Tag.defineModifier(),

        /**
        [Modifier](https://codemirror.net/6/docs/ref/#highlight.Tag^defineModifier) that indicates that
        something is constant. Mostly expected to be used with
        [variable names](https://codemirror.net/6/docs/ref/#highlight.tags.variableName).
        */
        constant: /*@__PURE__*/Tag.defineModifier(),

        /**
        [Modifier](https://codemirror.net/6/docs/ref/#highlight.Tag^defineModifier) used to indicate that
        a [variable](https://codemirror.net/6/docs/ref/#highlight.tags.variableName) or [property
        name](https://codemirror.net/6/docs/ref/#highlight.tags.propertyName) is being called or defined
        as a function.
        */
        "function": /*@__PURE__*/Tag.defineModifier(),

        /**
        [Modifier](https://codemirror.net/6/docs/ref/#highlight.Tag^defineModifier) that can be applied to
        [names](https://codemirror.net/6/docs/ref/#highlight.tags.name) to indicate that they belong to
        the language's standard environment.
        */
        standard: /*@__PURE__*/Tag.defineModifier(),

        /**
        [Modifier](https://codemirror.net/6/docs/ref/#highlight.Tag^defineModifier) that indicates a given
        [names](https://codemirror.net/6/docs/ref/#highlight.tags.name) is local to some scope.
        */
        local: /*@__PURE__*/Tag.defineModifier(),

        /**
        A generic variant [modifier](https://codemirror.net/6/docs/ref/#highlight.Tag^defineModifier) that
        can be used to tag language-specific alternative variants of
        some common tag. It is recommended for themes to define special
        forms of at least the [string](https://codemirror.net/6/docs/ref/#highlight.tags.string) and
        [variable name](https://codemirror.net/6/docs/ref/#highlight.tags.variableName) tags, since those
        come up a lot.
        */
        special: /*@__PURE__*/Tag.defineModifier()
      };
      /**
      A default highlight style (works well with light themes).
      */

      var defaultHighlightStyle = /*@__PURE__*/HighlightStyle.define([{
        tag: tags.link,
        textDecoration: "underline"
      }, {
        tag: tags.heading,
        textDecoration: "underline",
        fontWeight: "bold"
      }, {
        tag: tags.emphasis,
        fontStyle: "italic"
      }, {
        tag: tags.strong,
        fontWeight: "bold"
      }, {
        tag: tags.strikethrough,
        textDecoration: "line-through"
      }, {
        tag: tags.keyword,
        color: "#708"
      }, {
        tag: [tags.atom, tags.bool, tags.url, tags.contentSeparator, tags.labelName],
        color: "#219"
      }, {
        tag: [tags.literal, tags.inserted],
        color: "#164"
      }, {
        tag: [tags.string, tags.deleted],
        color: "#a11"
      }, {
        tag: [tags.regexp, tags.escape, /*@__PURE__*/tags.special(tags.string)],
        color: "#e40"
      }, {
        tag: /*@__PURE__*/tags.definition(tags.variableName),
        color: "#00f"
      }, {
        tag: /*@__PURE__*/tags.local(tags.variableName),
        color: "#30a"
      }, {
        tag: [tags.typeName, tags.namespace],
        color: "#085"
      }, {
        tag: tags.className,
        color: "#167"
      }, {
        tag: [/*@__PURE__*/tags.special(tags.variableName), tags.macroName],
        color: "#256"
      }, {
        tag: /*@__PURE__*/tags.definition(tags.propertyName),
        color: "#00c"
      }, {
        tag: tags.comment,
        color: "#940"
      }, {
        tag: tags.meta,
        color: "#7a757a"
      }, {
        tag: tags.invalid,
        color: "#f00"
      }]);
      /**
      This is a highlight style that adds stable, predictable classes to
      tokens, for styling with external CSS.
      
      These tags are mapped to their name prefixed with `"cmt-"` (for
      example `"cmt-comment"`):
      
      * [`link`](https://codemirror.net/6/docs/ref/#highlight.tags.link)
      * [`heading`](https://codemirror.net/6/docs/ref/#highlight.tags.heading)
      * [`emphasis`](https://codemirror.net/6/docs/ref/#highlight.tags.emphasis)
      * [`strong`](https://codemirror.net/6/docs/ref/#highlight.tags.strong)
      * [`keyword`](https://codemirror.net/6/docs/ref/#highlight.tags.keyword)
      * [`atom`](https://codemirror.net/6/docs/ref/#highlight.tags.atom) [`bool`](https://codemirror.net/6/docs/ref/#highlight.tags.bool)
      * [`url`](https://codemirror.net/6/docs/ref/#highlight.tags.url)
      * [`labelName`](https://codemirror.net/6/docs/ref/#highlight.tags.labelName)
      * [`inserted`](https://codemirror.net/6/docs/ref/#highlight.tags.inserted)
      * [`deleted`](https://codemirror.net/6/docs/ref/#highlight.tags.deleted)
      * [`literal`](https://codemirror.net/6/docs/ref/#highlight.tags.literal)
      * [`string`](https://codemirror.net/6/docs/ref/#highlight.tags.string)
      * [`number`](https://codemirror.net/6/docs/ref/#highlight.tags.number)
      * [`variableName`](https://codemirror.net/6/docs/ref/#highlight.tags.variableName)
      * [`typeName`](https://codemirror.net/6/docs/ref/#highlight.tags.typeName)
      * [`namespace`](https://codemirror.net/6/docs/ref/#highlight.tags.namespace)
      * [`macroName`](https://codemirror.net/6/docs/ref/#highlight.tags.macroName)
      * [`propertyName`](https://codemirror.net/6/docs/ref/#highlight.tags.propertyName)
      * [`operator`](https://codemirror.net/6/docs/ref/#highlight.tags.operator)
      * [`comment`](https://codemirror.net/6/docs/ref/#highlight.tags.comment)
      * [`meta`](https://codemirror.net/6/docs/ref/#highlight.tags.meta)
      * [`punctuation`](https://codemirror.net/6/docs/ref/#highlight.tags.puncutation)
      * [`invalid`](https://codemirror.net/6/docs/ref/#highlight.tags.invalid)
      
      In addition, these mappings are provided:
      
      * [`regexp`](https://codemirror.net/6/docs/ref/#highlight.tags.regexp),
        [`escape`](https://codemirror.net/6/docs/ref/#highlight.tags.escape), and
        [`special`](https://codemirror.net/6/docs/ref/#highlight.tags.special)[`(string)`](https://codemirror.net/6/docs/ref/#highlight.tags.string)
        are mapped to `"cmt-string2"`
      * [`special`](https://codemirror.net/6/docs/ref/#highlight.tags.special)[`(variableName)`](https://codemirror.net/6/docs/ref/#highlight.tags.variableName)
        to `"cmt-variableName2"`
      * [`local`](https://codemirror.net/6/docs/ref/#highlight.tags.local)[`(variableName)`](https://codemirror.net/6/docs/ref/#highlight.tags.variableName)
        to `"cmt-variableName cmt-local"`
      * [`definition`](https://codemirror.net/6/docs/ref/#highlight.tags.definition)[`(variableName)`](https://codemirror.net/6/docs/ref/#highlight.tags.variableName)
        to `"cmt-variableName cmt-definition"`
      */

      var classHighlightStyle = /*@__PURE__*/HighlightStyle.define([{
        tag: tags.link,
        "class": "cmt-link"
      }, {
        tag: tags.heading,
        "class": "cmt-heading"
      }, {
        tag: tags.emphasis,
        "class": "cmt-emphasis"
      }, {
        tag: tags.strong,
        "class": "cmt-strong"
      }, {
        tag: tags.keyword,
        "class": "cmt-keyword"
      }, {
        tag: tags.atom,
        "class": "cmt-atom"
      }, {
        tag: tags.bool,
        "class": "cmt-bool"
      }, {
        tag: tags.url,
        "class": "cmt-url"
      }, {
        tag: tags.labelName,
        "class": "cmt-labelName"
      }, {
        tag: tags.inserted,
        "class": "cmt-inserted"
      }, {
        tag: tags.deleted,
        "class": "cmt-deleted"
      }, {
        tag: tags.literal,
        "class": "cmt-literal"
      }, {
        tag: tags.string,
        "class": "cmt-string"
      }, {
        tag: tags.number,
        "class": "cmt-number"
      }, {
        tag: [tags.regexp, tags.escape, /*@__PURE__*/tags.special(tags.string)],
        "class": "cmt-string2"
      }, {
        tag: tags.variableName,
        "class": "cmt-variableName"
      }, {
        tag: /*@__PURE__*/tags.local(tags.variableName),
        "class": "cmt-variableName cmt-local"
      }, {
        tag: /*@__PURE__*/tags.definition(tags.variableName),
        "class": "cmt-variableName cmt-definition"
      }, {
        tag: /*@__PURE__*/tags.special(tags.variableName),
        "class": "cmt-variableName2"
      }, {
        tag: tags.typeName,
        "class": "cmt-typeName"
      }, {
        tag: tags.namespace,
        "class": "cmt-namespace"
      }, {
        tag: tags.macroName,
        "class": "cmt-macroName"
      }, {
        tag: tags.propertyName,
        "class": "cmt-propertyName"
      }, {
        tag: tags.operator,
        "class": "cmt-operator"
      }, {
        tag: tags.comment,
        "class": "cmt-comment"
      }, {
        tag: tags.meta,
        "class": "cmt-meta"
      }, {
        tag: tags.invalid,
        "class": "cmt-invalid"
      }, {
        tag: tags.punctuation,
        "class": "cmt-punctuation"
      }]);
      /***/
    },

    /***/
    "wG49":
    /*!*********************************************************!*\
      !*** ./node_modules/@codemirror/rangeset/dist/index.js ***!
      \*********************************************************/

    /*! exports provided: Range, RangeSet, RangeSetBuilder, RangeValue */

    /***/
    function wG49(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Range", function () {
        return Range;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "RangeSet", function () {
        return RangeSet;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "RangeSetBuilder", function () {
        return RangeSetBuilder;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "RangeValue", function () {
        return RangeValue;
      });
      /* harmony import */


      var _codemirror_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @codemirror/state */
      "4eob");
      /**
      Each range is associated with a value, which must inherit from
      this class.
      */


      var RangeValue = /*#__PURE__*/function () {
        function RangeValue() {
          _classCallCheck(this, RangeValue);
        }

        _createClass(RangeValue, [{
          key: "eq",
          value:
          /**
          Compare this value with another value. The default
          implementation compares by identity.
          */
          function eq(other) {
            return this == other;
          }
          /**
          Create a [range](https://codemirror.net/6/docs/ref/#rangeset.Range) with this value.
          */

        }, {
          key: "range",
          value: function range(from) {
            var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;
            return new Range(from, to, this);
          }
        }]);

        return RangeValue;
      }();

      RangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;
      RangeValue.prototype.point = false;
      RangeValue.prototype.mapMode = _codemirror_state__WEBPACK_IMPORTED_MODULE_0__["MapMode"].TrackDel;
      /**
      A range associates a value with a range of positions.
      */

      var Range = /*#__PURE__*/_createClass(
      /**
      @internal
      */
      function Range(
      /**
      The range's start position.
      */
      from,
      /**
      Its end position.
      */
      to,
      /**
      The value associated with this range.
      */
      value) {
        _classCallCheck(this, Range);

        this.from = from;
        this.to = to;
        this.value = value;
      });

      function cmpRange(a, b) {
        return a.from - b.from || a.value.startSide - b.value.startSide;
      }

      var Chunk = /*#__PURE__*/function () {
        function Chunk(from, to, value, // Chunks are marked with the largest point that occurs
        // in them (or -1 for no points), so that scans that are
        // only interested in points (such as the
        // heightmap-related logic) can skip range-only chunks.
        maxPoint) {
          _classCallCheck(this, Chunk);

          this.from = from;
          this.to = to;
          this.value = value;
          this.maxPoint = maxPoint;
        }

        _createClass(Chunk, [{
          key: "length",
          get: function get() {
            return this.to[this.to.length - 1];
          } // Find the index of the given position and side. Use the ranges'
          // `from` pos when `end == false`, `to` when `end == true`.

        }, {
          key: "findIndex",
          value: function findIndex(pos, side, end) {
            var startAt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
            var arr = end ? this.to : this.from;

            for (var lo = startAt, hi = arr.length;;) {
              if (lo == hi) return lo;
              var mid = lo + hi >> 1;
              var diff = arr[mid] - pos || (end ? this.value[mid].endSide : this.value[mid].startSide) - side;
              if (mid == lo) return diff >= 0 ? lo : hi;
              if (diff >= 0) hi = mid;else lo = mid + 1;
            }
          }
        }, {
          key: "between",
          value: function between(offset, from, to, f) {
            for (var _i229 = this.findIndex(from, -1000000000
            /* Far */
            , true), e = this.findIndex(to, 1000000000
            /* Far */
            , false, _i229); _i229 < e; _i229++) {
              if (f(this.from[_i229] + offset, this.to[_i229] + offset, this.value[_i229]) === false) return false;
            }
          }
        }, {
          key: "map",
          value: function map(offset, changes) {
            var value = [],
                from = [],
                to = [],
                newPos = -1,
                maxPoint = -1;

            for (var _i230 = 0; _i230 < this.value.length; _i230++) {
              var val = this.value[_i230],
                  curFrom = this.from[_i230] + offset,
                  curTo = this.to[_i230] + offset,
                  newFrom = void 0,
                  newTo = void 0;

              if (curFrom == curTo) {
                var mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);
                if (mapped == null) continue;
                newFrom = newTo = mapped;
              } else {
                newFrom = changes.mapPos(curFrom, val.startSide);
                newTo = changes.mapPos(curTo, val.endSide);
                if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0) continue;
              }

              if ((newTo - newFrom || val.endSide - val.startSide) < 0) continue;
              if (newPos < 0) newPos = newFrom;
              if (val.point) maxPoint = Math.max(maxPoint, newTo - newFrom);
              value.push(val);
              from.push(newFrom - newPos);
              to.push(newTo - newPos);
            }

            return {
              mapped: value.length ? new Chunk(from, to, value, maxPoint) : null,
              pos: newPos
            };
          }
        }]);

        return Chunk;
      }();
      /**
      A range set stores a collection of [ranges](https://codemirror.net/6/docs/ref/#rangeset.Range) in a
      way that makes them efficient to [map](https://codemirror.net/6/docs/ref/#rangeset.RangeSet.map) and
      [update](https://codemirror.net/6/docs/ref/#rangeset.RangeSet.update). This is an immutable data
      structure.
      */


      var RangeSet = /*#__PURE__*/function () {
        /**
        @internal
        */
        function RangeSet(
        /**
        @internal
        */
        chunkPos,
        /**
        @internal
        */
        chunk) {
          var nextLayer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : RangeSet.empty;
          var
          /**
          @internal
          */
          maxPoint = arguments.length > 3 ? arguments[3] : undefined;

          _classCallCheck(this, RangeSet);

          this.chunkPos = chunkPos;
          this.chunk = chunk;
          this.nextLayer = nextLayer;
          this.maxPoint = maxPoint;
        }
        /**
        @internal
        */


        _createClass(RangeSet, [{
          key: "length",
          get: function get() {
            var last = this.chunk.length - 1;
            return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);
          }
          /**
          The number of ranges in the set.
          */

        }, {
          key: "size",
          get: function get() {
            if (this.isEmpty) return 0;
            var size = this.nextLayer.size;

            var _iterator284 = _createForOfIteratorHelper(this.chunk),
                _step284;

            try {
              for (_iterator284.s(); !(_step284 = _iterator284.n()).done;) {
                var chunk = _step284.value;
                size += chunk.value.length;
              }
            } catch (err) {
              _iterator284.e(err);
            } finally {
              _iterator284.f();
            }

            return size;
          }
          /**
          @internal
          */

        }, {
          key: "chunkEnd",
          value: function chunkEnd(index) {
            return this.chunkPos[index] + this.chunk[index].length;
          }
          /**
          Update the range set, optionally adding new ranges or filtering
          out existing ones.
          
          (The extra type parameter is just there as a kludge to work
          around TypeScript variance issues that prevented `RangeSet<X>`
          from being a subtype of `RangeSet<Y>` when `X` is a subtype of
          `Y`.)
          */

        }, {
          key: "update",
          value: function update(updateSpec) {
            var _updateSpec$add = updateSpec.add,
                add = _updateSpec$add === void 0 ? [] : _updateSpec$add,
                _updateSpec$sort = updateSpec.sort,
                sort = _updateSpec$sort === void 0 ? false : _updateSpec$sort,
                _updateSpec$filterFro = updateSpec.filterFrom,
                filterFrom = _updateSpec$filterFro === void 0 ? 0 : _updateSpec$filterFro,
                _updateSpec$filterTo = updateSpec.filterTo,
                filterTo = _updateSpec$filterTo === void 0 ? this.length : _updateSpec$filterTo;
            var filter = updateSpec.filter;
            if (add.length == 0 && !filter) return this;
            if (sort) add.slice().sort(cmpRange);
            if (this.isEmpty) return add.length ? RangeSet.of(add) : this;
            var cur = new LayerCursor(this, null, -1)["goto"](0),
                i = 0,
                spill = [];
            var builder = new RangeSetBuilder();

            while (cur.value || i < add.length) {
              if (i < add.length && (cur.from - add[i].from || cur.startSide - add[i].value.startSide) >= 0) {
                var range = add[i++];
                if (!builder.addInner(range.from, range.to, range.value)) spill.push(range);
              } else if (cur.rangeIndex == 1 && cur.chunkIndex < this.chunk.length && (i == add.length || this.chunkEnd(cur.chunkIndex) < add[i].from) && (!filter || filterFrom > this.chunkEnd(cur.chunkIndex) || filterTo < this.chunkPos[cur.chunkIndex]) && builder.addChunk(this.chunkPos[cur.chunkIndex], this.chunk[cur.chunkIndex])) {
                cur.nextChunk();
              } else {
                if (!filter || filterFrom > cur.to || filterTo < cur.from || filter(cur.from, cur.to, cur.value)) {
                  if (!builder.addInner(cur.from, cur.to, cur.value)) spill.push(new Range(cur.from, cur.to, cur.value));
                }

                cur.next();
              }
            }

            return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? RangeSet.empty : this.nextLayer.update({
              add: spill,
              filter: filter,
              filterFrom: filterFrom,
              filterTo: filterTo
            }));
          }
          /**
          Map this range set through a set of changes, return the new set.
          */

        }, {
          key: "map",
          value: function map(changes) {
            if (changes.length == 0 || this.isEmpty) return this;
            var chunks = [],
                chunkPos = [],
                maxPoint = -1;

            for (var _i231 = 0; _i231 < this.chunk.length; _i231++) {
              var start = this.chunkPos[_i231],
                  chunk = this.chunk[_i231];
              var touch = changes.touchesRange(start, start + chunk.length);

              if (touch === false) {
                maxPoint = Math.max(maxPoint, chunk.maxPoint);
                chunks.push(chunk);
                chunkPos.push(changes.mapPos(start));
              } else if (touch === true) {
                var _chunk$map = chunk.map(start, changes),
                    mapped = _chunk$map.mapped,
                    pos = _chunk$map.pos;

                if (mapped) {
                  maxPoint = Math.max(maxPoint, mapped.maxPoint);
                  chunks.push(mapped);
                  chunkPos.push(pos);
                }
              }
            }

            var next = this.nextLayer.map(changes);
            return chunks.length == 0 ? next : new RangeSet(chunkPos, chunks, next, maxPoint);
          }
          /**
          Iterate over the ranges that touch the region `from` to `to`,
          calling `f` for each. There is no guarantee that the ranges will
          be reported in any specific order. When the callback returns
          `false`, iteration stops.
          */

        }, {
          key: "between",
          value: function between(from, to, f) {
            if (this.isEmpty) return;

            for (var _i232 = 0; _i232 < this.chunk.length; _i232++) {
              var start = this.chunkPos[_i232],
                  chunk = this.chunk[_i232];
              if (to >= start && from <= start + chunk.length && chunk.between(start, from - start, to - start, f) === false) return;
            }

            this.nextLayer.between(from, to, f);
          }
          /**
          Iterate over the ranges in this set, in order, including all
          ranges that end at or after `from`.
          */

        }, {
          key: "iter",
          value: function iter() {
            var from = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
            return HeapCursor.from([this])["goto"](from);
          }
          /**
          @internal
          */

        }, {
          key: "isEmpty",
          get: function get() {
            return this.nextLayer == this;
          }
          /**
          Iterate over the ranges in a collection of sets, in order,
          starting from `from`.
          */

        }], [{
          key: "iter",
          value: function iter(sets) {
            var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            return HeapCursor.from(sets)["goto"](from);
          }
          /**
          Iterate over two groups of sets, calling methods on `comparator`
          to notify it of possible differences.
          */

        }, {
          key: "compare",
          value: function compare(oldSets, newSets,
          /**
          This indicates how the underlying data changed between these
          ranges, and is needed to synchronize the iteration. `from` and
          `to` are coordinates in the _new_ space, after these changes.
          */
          textDiff, comparator) {
            var minPointSize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;
            var a = oldSets.filter(function (set) {
              return set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize;
            });
            var b = newSets.filter(function (set) {
              return set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize;
            });
            var sharedChunks = findSharedChunks(a, b, textDiff);
            var sideA = new SpanCursor(a, sharedChunks, minPointSize);
            var sideB = new SpanCursor(b, sharedChunks, minPointSize);
            textDiff.iterGaps(function (fromA, fromB, length) {
              return _compare(sideA, fromA, sideB, fromB, length, comparator);
            });
            if (textDiff.empty && textDiff.length == 0) _compare(sideA, 0, sideB, 0, 0, comparator);
          }
          /**
          Compare the contents of two groups of range sets, returning true
          if they are equivalent in the given range.
          */

        }, {
          key: "eq",
          value: function eq(oldSets, newSets) {
            var from = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
            var to = arguments.length > 3 ? arguments[3] : undefined;
            if (to == null) to = 1000000000
            /* Far */
            ;
            var a = oldSets.filter(function (set) {
              return !set.isEmpty && newSets.indexOf(set) < 0;
            });
            var b = newSets.filter(function (set) {
              return !set.isEmpty && oldSets.indexOf(set) < 0;
            });
            if (a.length != b.length) return false;
            if (!a.length) return true;
            var sharedChunks = findSharedChunks(a, b);
            var sideA = new SpanCursor(a, sharedChunks, 0)["goto"](from),
                sideB = new SpanCursor(b, sharedChunks, 0)["goto"](from);

            for (;;) {
              if (sideA.to != sideB.to || !sameValues(sideA.active, sideB.active) || sideA.point && (!sideB.point || !sideA.point.eq(sideB.point))) return false;
              if (sideA.to > to) return true;
              sideA.next();
              sideB.next();
            }
          }
          /**
          Iterate over a group of range sets at the same time, notifying
          the iterator about the ranges covering every given piece of
          content. Returns the open count (see
          [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#rangeset.SpanIterator.span)) at the end
          of the iteration.
          */

        }, {
          key: "spans",
          value: function spans(sets, from, to, iterator) {
            var minPointSize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;

            var _a;

            var cursor = new SpanCursor(sets, null, minPointSize, (_a = iterator.filterPoint) === null || _a === void 0 ? void 0 : _a.bind(iterator))["goto"](from),
                pos = from;
            var open = cursor.openStart;

            for (;;) {
              var curTo = Math.min(cursor.to, to);

              if (cursor.point) {
                iterator.point(pos, curTo, cursor.point, cursor.activeForPoint(cursor.to), open);
                open = cursor.openEnd(curTo) + (cursor.to > curTo ? 1 : 0);
              } else if (curTo > pos) {
                iterator.span(pos, curTo, cursor.active, open);
                open = cursor.openEnd(curTo);
              }

              if (cursor.to > to) break;
              pos = cursor.to;
              cursor.next();
            }

            return open;
          }
          /**
          Create a range set for the given range or array of ranges. By
          default, this expects the ranges to be _sorted_ (by start
          position and, if two start at the same position,
          `value.startSide`). You can pass `true` as second argument to
          cause the method to sort them.
          */

        }, {
          key: "of",
          value: function of(ranges) {
            var sort = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            var build = new RangeSetBuilder();

            var _iterator285 = _createForOfIteratorHelper(ranges instanceof Range ? [ranges] : sort ? lazySort(ranges) : ranges),
                _step285;

            try {
              for (_iterator285.s(); !(_step285 = _iterator285.n()).done;) {
                var range = _step285.value;
                build.add(range.from, range.to, range.value);
              }
            } catch (err) {
              _iterator285.e(err);
            } finally {
              _iterator285.f();
            }

            return build.finish();
          }
        }]);

        return RangeSet;
      }();
      /**
      The empty set of ranges.
      */


      RangeSet.empty = /*@__PURE__*/new RangeSet([], [], null, -1);

      function lazySort(ranges) {
        if (ranges.length > 1) for (var prev = ranges[0], _i233 = 1; _i233 < ranges.length; _i233++) {
          var cur = ranges[_i233];
          if (cmpRange(prev, cur) > 0) return ranges.slice().sort(cmpRange);
          prev = cur;
        }
        return ranges;
      }

      RangeSet.empty.nextLayer = RangeSet.empty;
      /**
      A range set builder is a data structure that helps build up a
      [range set](https://codemirror.net/6/docs/ref/#rangeset.RangeSet) directly, without first allocating
      an array of [`Range`](https://codemirror.net/6/docs/ref/#rangeset.Range) objects.
      */

      var RangeSetBuilder = /*#__PURE__*/function () {
        /**
        Create an empty builder.
        */
        function RangeSetBuilder() {
          _classCallCheck(this, RangeSetBuilder);

          this.chunks = [];
          this.chunkPos = [];
          this.chunkStart = -1;
          this.last = null;
          this.lastFrom = -1000000000
          /* Far */
          ;
          this.lastTo = -1000000000
          /* Far */
          ;
          this.from = [];
          this.to = [];
          this.value = [];
          this.maxPoint = -1;
          this.setMaxPoint = -1;
          this.nextLayer = null;
        }

        _createClass(RangeSetBuilder, [{
          key: "finishChunk",
          value: function finishChunk(newArrays) {
            this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));
            this.chunkPos.push(this.chunkStart);
            this.chunkStart = -1;
            this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);
            this.maxPoint = -1;

            if (newArrays) {
              this.from = [];
              this.to = [];
              this.value = [];
            }
          }
          /**
          Add a range. Ranges should be added in sorted (by `from` and
          `value.startSide`) order.
          */

        }, {
          key: "add",
          value: function add(from, to, value) {
            if (!this.addInner(from, to, value)) (this.nextLayer || (this.nextLayer = new RangeSetBuilder())).add(from, to, value);
          }
          /**
          @internal
          */

        }, {
          key: "addInner",
          value: function addInner(from, to, value) {
            var diff = from - this.lastTo || value.startSide - this.last.endSide;
            if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0) throw new Error("Ranges must be added sorted by `from` position and `startSide`");
            if (diff < 0) return false;
            if (this.from.length == 250
            /* ChunkSize */
            ) this.finishChunk(true);
            if (this.chunkStart < 0) this.chunkStart = from;
            this.from.push(from - this.chunkStart);
            this.to.push(to - this.chunkStart);
            this.last = value;
            this.lastFrom = from;
            this.lastTo = to;
            this.value.push(value);
            if (value.point) this.maxPoint = Math.max(this.maxPoint, to - from);
            return true;
          }
          /**
          @internal
          */

        }, {
          key: "addChunk",
          value: function addChunk(from, chunk) {
            if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0) return false;
            if (this.from.length) this.finishChunk(true);
            this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);
            this.chunks.push(chunk);
            this.chunkPos.push(from);
            var last = chunk.value.length - 1;
            this.last = chunk.value[last];
            this.lastFrom = chunk.from[last] + from;
            this.lastTo = chunk.to[last] + from;
            return true;
          }
          /**
          Finish the range set. Returns the new set. The builder can't be
          used anymore after this has been called.
          */

        }, {
          key: "finish",
          value: function finish() {
            return this.finishInner(RangeSet.empty);
          }
          /**
          @internal
          */

        }, {
          key: "finishInner",
          value: function finishInner(next) {
            if (this.from.length) this.finishChunk(false);
            if (this.chunks.length == 0) return next;
            var result = new RangeSet(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);
            this.from = null; // Make sure further `add` calls produce errors

            return result;
          }
        }]);

        return RangeSetBuilder;
      }();

      function findSharedChunks(a, b, textDiff) {
        var inA = new Map();

        var _iterator286 = _createForOfIteratorHelper(a),
            _step286;

        try {
          for (_iterator286.s(); !(_step286 = _iterator286.n()).done;) {
            var set = _step286.value;

            for (var _i234 = 0; _i234 < set.chunk.length; _i234++) {
              if (set.chunk[_i234].maxPoint <= 0) inA.set(set.chunk[_i234], set.chunkPos[_i234]);
            }
          }
        } catch (err) {
          _iterator286.e(err);
        } finally {
          _iterator286.f();
        }

        var shared = new Set();

        var _iterator287 = _createForOfIteratorHelper(b),
            _step287;

        try {
          for (_iterator287.s(); !(_step287 = _iterator287.n()).done;) {
            var _set = _step287.value;

            for (var _i235 = 0; _i235 < _set.chunk.length; _i235++) {
              var known = inA.get(_set.chunk[_i235]);
              if (known != null && (textDiff ? textDiff.mapPos(known) : known) == _set.chunkPos[_i235]) shared.add(_set.chunk[_i235]);
            }
          }
        } catch (err) {
          _iterator287.e(err);
        } finally {
          _iterator287.f();
        }

        return shared;
      }

      var LayerCursor = /*#__PURE__*/function () {
        function LayerCursor(layer, skip, minPoint) {
          var rank = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

          _classCallCheck(this, LayerCursor);

          this.layer = layer;
          this.skip = skip;
          this.minPoint = minPoint;
          this.rank = rank;
        }

        _createClass(LayerCursor, [{
          key: "startSide",
          get: function get() {
            return this.value ? this.value.startSide : 0;
          }
        }, {
          key: "endSide",
          get: function get() {
            return this.value ? this.value.endSide : 0;
          }
        }, {
          key: "goto",
          value: function goto(pos) {
            var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1000000000;
            this.chunkIndex = this.rangeIndex = 0;
            this.gotoInner(pos, side, false);
            return this;
          }
        }, {
          key: "gotoInner",
          value: function gotoInner(pos, side, forward) {
            while (this.chunkIndex < this.layer.chunk.length) {
              var next = this.layer.chunk[this.chunkIndex];
              if (!(this.skip && this.skip.has(next) || this.layer.chunkEnd(this.chunkIndex) < pos || next.maxPoint < this.minPoint)) break;
              this.chunkIndex++;
              forward = false;
            }

            if (this.chunkIndex < this.layer.chunk.length) {
              var rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);
              if (!forward || this.rangeIndex < rangeIndex) this.setRangeIndex(rangeIndex);
            }

            this.next();
          }
        }, {
          key: "forward",
          value: function forward(pos, side) {
            if ((this.to - pos || this.endSide - side) < 0) this.gotoInner(pos, side, true);
          }
        }, {
          key: "next",
          value: function next() {
            for (;;) {
              if (this.chunkIndex == this.layer.chunk.length) {
                this.from = this.to = 1000000000
                /* Far */
                ;
                this.value = null;
                break;
              } else {
                var chunkPos = this.layer.chunkPos[this.chunkIndex],
                    chunk = this.layer.chunk[this.chunkIndex];
                var from = chunkPos + chunk.from[this.rangeIndex];
                this.from = from;
                this.to = chunkPos + chunk.to[this.rangeIndex];
                this.value = chunk.value[this.rangeIndex];
                this.setRangeIndex(this.rangeIndex + 1);
                if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint) break;
              }
            }
          }
        }, {
          key: "setRangeIndex",
          value: function setRangeIndex(index) {
            if (index == this.layer.chunk[this.chunkIndex].value.length) {
              this.chunkIndex++;

              if (this.skip) {
                while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex])) {
                  this.chunkIndex++;
                }
              }

              this.rangeIndex = 0;
            } else {
              this.rangeIndex = index;
            }
          }
        }, {
          key: "nextChunk",
          value: function nextChunk() {
            this.chunkIndex++;
            this.rangeIndex = 0;
            this.next();
          }
        }, {
          key: "compare",
          value: function compare(other) {
            return this.from - other.from || this.startSide - other.startSide || this.to - other.to || this.endSide - other.endSide;
          }
        }]);

        return LayerCursor;
      }();

      var HeapCursor = /*#__PURE__*/function () {
        function HeapCursor(heap) {
          _classCallCheck(this, HeapCursor);

          this.heap = heap;
        }

        _createClass(HeapCursor, [{
          key: "startSide",
          get: function get() {
            return this.value ? this.value.startSide : 0;
          }
        }, {
          key: "goto",
          value: function goto(pos) {
            var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1000000000;

            var _iterator288 = _createForOfIteratorHelper(this.heap),
                _step288;

            try {
              for (_iterator288.s(); !(_step288 = _iterator288.n()).done;) {
                var cur = _step288.value;
                cur["goto"](pos, side);
              }
            } catch (err) {
              _iterator288.e(err);
            } finally {
              _iterator288.f();
            }

            for (var _i236 = this.heap.length >> 1; _i236 >= 0; _i236--) {
              heapBubble(this.heap, _i236);
            }

            this.next();
            return this;
          }
        }, {
          key: "forward",
          value: function forward(pos, side) {
            var _iterator289 = _createForOfIteratorHelper(this.heap),
                _step289;

            try {
              for (_iterator289.s(); !(_step289 = _iterator289.n()).done;) {
                var cur = _step289.value;
                cur.forward(pos, side);
              }
            } catch (err) {
              _iterator289.e(err);
            } finally {
              _iterator289.f();
            }

            for (var _i237 = this.heap.length >> 1; _i237 >= 0; _i237--) {
              heapBubble(this.heap, _i237);
            }

            if ((this.to - pos || this.value.endSide - side) < 0) this.next();
          }
        }, {
          key: "next",
          value: function next() {
            if (this.heap.length == 0) {
              this.from = this.to = 1000000000
              /* Far */
              ;
              this.value = null;
              this.rank = -1;
            } else {
              var top = this.heap[0];
              this.from = top.from;
              this.to = top.to;
              this.value = top.value;
              this.rank = top.rank;
              if (top.value) top.next();
              heapBubble(this.heap, 0);
            }
          }
        }], [{
          key: "from",
          value: function from(sets) {
            var skip = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            var minPoint = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
            var heap = [];

            for (var _i238 = 0; _i238 < sets.length; _i238++) {
              for (var cur = sets[_i238]; !cur.isEmpty; cur = cur.nextLayer) {
                if (cur.maxPoint >= minPoint) heap.push(new LayerCursor(cur, skip, minPoint, _i238));
              }
            }

            return heap.length == 1 ? heap[0] : new HeapCursor(heap);
          }
        }]);

        return HeapCursor;
      }();

      function heapBubble(heap, index) {
        for (var cur = heap[index];;) {
          var childIndex = (index << 1) + 1;
          if (childIndex >= heap.length) break;
          var child = heap[childIndex];

          if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {
            child = heap[childIndex + 1];
            childIndex++;
          }

          if (cur.compare(child) < 0) break;
          heap[childIndex] = cur;
          heap[index] = child;
          index = childIndex;
        }
      }

      var SpanCursor = /*#__PURE__*/function () {
        function SpanCursor(sets, skip, minPoint) {
          var filterPoint = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {
            return true;
          };

          _classCallCheck(this, SpanCursor);

          this.minPoint = minPoint;
          this.filterPoint = filterPoint;
          this.active = [];
          this.activeTo = [];
          this.activeRank = [];
          this.minActive = -1; // A currently active point range, if any

          this.point = null;
          this.pointFrom = 0;
          this.pointRank = 0;
          this.to = -1000000000
          /* Far */
          ;
          this.endSide = 0;
          this.openStart = -1;
          this.cursor = HeapCursor.from(sets, skip, minPoint);
        }

        _createClass(SpanCursor, [{
          key: "goto",
          value: function goto(pos) {
            var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1000000000;
            this.cursor["goto"](pos, side);
            this.active.length = this.activeTo.length = this.activeRank.length = 0;
            this.minActive = -1;
            this.to = pos;
            this.endSide = side;
            this.openStart = -1;
            this.next();
            return this;
          }
        }, {
          key: "forward",
          value: function forward(pos, side) {
            while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0) {
              this.removeActive(this.minActive);
            }

            this.cursor.forward(pos, side);
          }
        }, {
          key: "removeActive",
          value: function removeActive(index) {
            remove(this.active, index);
            remove(this.activeTo, index);
            remove(this.activeRank, index);
            this.minActive = findMinIndex(this.active, this.activeTo);
          }
        }, {
          key: "addActive",
          value: function addActive(trackOpen) {
            var i = 0,
                _this$cursor = this.cursor,
                value = _this$cursor.value,
                to = _this$cursor.to,
                rank = _this$cursor.rank;

            while (i < this.activeRank.length && this.activeRank[i] <= rank) {
              i++;
            }

            insert(this.active, i, value);
            insert(this.activeTo, i, to);
            insert(this.activeRank, i, rank);
            if (trackOpen) insert(trackOpen, i, this.cursor.from);
            this.minActive = findMinIndex(this.active, this.activeTo);
          } // After calling this, if `this.point` != null, the next range is a
          // point. Otherwise, it's a regular range, covered by `this.active`.

        }, {
          key: "next",
          value: function next() {
            var from = this.to,
                wasPoint = this.point;
            this.point = null;
            var trackOpen = this.openStart < 0 ? [] : null,
                trackExtra = 0;

            for (;;) {
              var a = this.minActive;

              if (a > -1 && (this.activeTo[a] - this.cursor.from || this.active[a].endSide - this.cursor.startSide) < 0) {
                if (this.activeTo[a] > from) {
                  this.to = this.activeTo[a];
                  this.endSide = this.active[a].endSide;
                  break;
                }

                this.removeActive(a);
                if (trackOpen) remove(trackOpen, a);
              } else if (!this.cursor.value) {
                this.to = this.endSide = 1000000000
                /* Far */
                ;
                break;
              } else if (this.cursor.from > from) {
                this.to = this.cursor.from;
                this.endSide = this.cursor.startSide;
                break;
              } else {
                var nextVal = this.cursor.value;

                if (!nextVal.point) {
                  // Opening a range
                  this.addActive(trackOpen);
                  this.cursor.next();
                } else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to) {
                  // Ignore any non-empty points that end precisely at the end of the prev point
                  this.cursor.next();
                } else if (!this.filterPoint(this.cursor.from, this.cursor.to, this.cursor.value, this.cursor.rank)) {
                  this.cursor.next();
                } else {
                  // New point
                  this.point = nextVal;
                  this.pointFrom = this.cursor.from;
                  this.pointRank = this.cursor.rank;
                  this.to = this.cursor.to;
                  this.endSide = nextVal.endSide;
                  if (this.cursor.from < from) trackExtra = 1;
                  this.cursor.next();
                  if (this.to > from) this.forward(this.to, this.endSide);
                  break;
                }
              }
            }

            if (trackOpen) {
              var openStart = 0;

              while (openStart < trackOpen.length && trackOpen[openStart] < from) {
                openStart++;
              }

              this.openStart = openStart + trackExtra;
            }
          }
        }, {
          key: "activeForPoint",
          value: function activeForPoint(to) {
            if (!this.active.length) return this.active;
            var active = [];

            for (var _i239 = this.active.length - 1; _i239 >= 0; _i239--) {
              if (this.activeRank[_i239] < this.pointRank) break;
              if (this.activeTo[_i239] > to || this.activeTo[_i239] == to && this.active[_i239].endSide >= this.point.endSide) active.push(this.active[_i239]);
            }

            return active.reverse();
          }
        }, {
          key: "openEnd",
          value: function openEnd(to) {
            var open = 0;

            for (var _i240 = this.activeTo.length - 1; _i240 >= 0 && this.activeTo[_i240] > to; _i240--) {
              open++;
            }

            return open;
          }
        }]);

        return SpanCursor;
      }();

      function _compare(a, startA, b, startB, length, comparator) {
        a["goto"](startA);
        b["goto"](startB);
        var endB = startB + length;
        var pos = startB,
            dPos = startB - startA;

        for (;;) {
          var diff = a.to + dPos - b.to || a.endSide - b.endSide;
          var end = diff < 0 ? a.to + dPos : b.to,
              clipEnd = Math.min(end, endB);

          if (a.point || b.point) {
            if (!(a.point && b.point && (a.point == b.point || a.point.eq(b.point)) && sameValues(a.activeForPoint(a.to + dPos), b.activeForPoint(b.to)))) comparator.comparePoint(pos, clipEnd, a.point, b.point);
          } else {
            if (clipEnd > pos && !sameValues(a.active, b.active)) comparator.compareRange(pos, clipEnd, a.active, b.active);
          }

          if (end > endB) break;
          pos = end;
          if (diff <= 0) a.next();
          if (diff >= 0) b.next();
        }
      }

      function sameValues(a, b) {
        if (a.length != b.length) return false;

        for (var _i241 = 0; _i241 < a.length; _i241++) {
          if (a[_i241] != b[_i241] && !a[_i241].eq(b[_i241])) return false;
        }

        return true;
      }

      function remove(array, index) {
        for (var _i242 = index, e = array.length - 1; _i242 < e; _i242++) {
          array[_i242] = array[_i242 + 1];
        }

        array.pop();
      }

      function insert(array, index, value) {
        for (var _i243 = array.length - 1; _i243 >= index; _i243--) {
          array[_i243 + 1] = array[_i243];
        }

        array[index] = value;
      }

      function findMinIndex(value, array) {
        var found = -1,
            foundPos = 1000000000
        /* Far */
        ;

        for (var _i244 = 0; _i244 < array.length; _i244++) {
          if ((array[_i244] - foundPos || value[_i244].endSide - value[found].endSide) < 0) {
            found = _i244;
            foundPos = array[_i244];
          }
        }

        return found;
      }
      /***/

    },

    /***/
    "yqQ+":
    /*!*********************************************************!*\
      !*** ./node_modules/@codemirror/language/dist/index.js ***!
      \*********************************************************/

    /*! exports provided: IndentContext, LRLanguage, Language, LanguageDescription, LanguageSupport, ParseContext, TreeIndentContext, continuedIndent, defineLanguageFacet, delimitedIndent, ensureSyntaxTree, flatIndent, foldInside, foldNodeProp, foldService, foldable, getIndentUnit, getIndentation, indentNodeProp, indentOnInput, indentService, indentString, indentUnit, language, languageDataProp, syntaxTree */

    /***/
    function yqQ(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "IndentContext", function () {
        return IndentContext;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "LRLanguage", function () {
        return LRLanguage;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Language", function () {
        return Language;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "LanguageDescription", function () {
        return LanguageDescription;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "LanguageSupport", function () {
        return LanguageSupport;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ParseContext", function () {
        return ParseContext;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TreeIndentContext", function () {
        return TreeIndentContext;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "continuedIndent", function () {
        return continuedIndent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "defineLanguageFacet", function () {
        return defineLanguageFacet;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "delimitedIndent", function () {
        return delimitedIndent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ensureSyntaxTree", function () {
        return ensureSyntaxTree;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "flatIndent", function () {
        return flatIndent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "foldInside", function () {
        return foldInside;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "foldNodeProp", function () {
        return foldNodeProp;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "foldService", function () {
        return foldService;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "foldable", function () {
        return foldable;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getIndentUnit", function () {
        return getIndentUnit;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getIndentation", function () {
        return getIndentation;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "indentNodeProp", function () {
        return indentNodeProp;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "indentOnInput", function () {
        return indentOnInput;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "indentService", function () {
        return indentService;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "indentString", function () {
        return indentString;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "indentUnit", function () {
        return indentUnit;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "language", function () {
        return language;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "languageDataProp", function () {
        return languageDataProp;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "syntaxTree", function () {
        return syntaxTree;
      });
      /* harmony import */


      var _lezer_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @lezer/common */
      "lmln");
      /* harmony import */


      var _codemirror_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @codemirror/state */
      "4eob");
      /* harmony import */


      var _codemirror_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @codemirror/view */
      "AtEE");
      /* harmony import */


      var _codemirror_text__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @codemirror/text */
      "uZp5");
      /**
      Node prop stored in a grammar's top syntax node to provide the
      facet that stores language data for that language.
      */


      var languageDataProp = /*@__PURE__*/new _lezer_common__WEBPACK_IMPORTED_MODULE_0__["NodeProp"]();
      /**
      Helper function to define a facet (to be added to the top syntax
      node(s) for a language via
      [`languageDataProp`](https://codemirror.net/6/docs/ref/#language.languageDataProp)), that will be
      used to associate language data with the language. You
      probably only need this when subclassing
      [`Language`](https://codemirror.net/6/docs/ref/#language.Language).
      */

      function defineLanguageFacet(baseData) {
        return _codemirror_state__WEBPACK_IMPORTED_MODULE_1__["Facet"].define({
          combine: baseData ? function (values) {
            return values.concat(baseData);
          } : undefined
        });
      }
      /**
      A language object manages parsing and per-language
      [metadata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt). Parse data is
      managed as a [Lezer](https://lezer.codemirror.net) tree. You'll
      want to subclass this class for custom parsers, or use the
      [`LRLanguage`](https://codemirror.net/6/docs/ref/#language.LRLanguage) or
      [`StreamLanguage`](https://codemirror.net/6/docs/ref/#stream-parser.StreamLanguage) abstractions for
      [Lezer](https://lezer.codemirror.net/) or stream parsers.
      */


      var Language = /*#__PURE__*/function () {
        /**
        Construct a language object. You usually don't need to invoke
        this directly. But when you do, make sure you use
        [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet) to create
        the first argument.
        */
        function Language(
        /**
        The [language data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) data
        facet used for this language.
        */
        data, parser,
        /**
        The node type of the top node of trees produced by this parser.
        */
        topNode) {
          var extraExtensions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

          _classCallCheck(this, Language);

          this.data = data;
          this.topNode = topNode; // Kludge to define EditorState.tree as a debugging helper,
          // without the EditorState package actually knowing about
          // languages and lezer trees.

          if (!_codemirror_state__WEBPACK_IMPORTED_MODULE_1__["EditorState"].prototype.hasOwnProperty("tree")) Object.defineProperty(_codemirror_state__WEBPACK_IMPORTED_MODULE_1__["EditorState"].prototype, "tree", {
            get: function get() {
              return syntaxTree(this);
            }
          });
          this.parser = parser;
          this.extension = [language.of(this), _codemirror_state__WEBPACK_IMPORTED_MODULE_1__["EditorState"].languageData.of(function (state, pos, side) {
            return state.facet(languageDataFacetAt(state, pos, side));
          })].concat(extraExtensions);
        }
        /**
        Query whether this language is active at the given position.
        */


        _createClass(Language, [{
          key: "isActiveAt",
          value: function isActiveAt(state, pos) {
            var side = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
            return languageDataFacetAt(state, pos, side) == this.data;
          }
          /**
          Find the document regions that were parsed using this language.
          The returned regions will _include_ any nested languages rooted
          in this language, when those exist.
          */

        }, {
          key: "findRegions",
          value: function findRegions(state) {
            var _this136 = this;

            var lang = state.facet(language);
            if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data) return [{
              from: 0,
              to: state.doc.length
            }];
            if (!lang || !lang.allowsNesting) return [];
            var result = [];

            var explore = function explore(tree, from) {
              if (tree.prop(languageDataProp) == _this136.data) {
                result.push({
                  from: from,
                  to: from + tree.length
                });
                return;
              }

              var mount = tree.prop(_lezer_common__WEBPACK_IMPORTED_MODULE_0__["NodeProp"].mounted);

              if (mount) {
                if (mount.tree.prop(languageDataProp) == _this136.data) {
                  if (mount.overlay) {
                    var _iterator290 = _createForOfIteratorHelper(mount.overlay),
                        _step290;

                    try {
                      for (_iterator290.s(); !(_step290 = _iterator290.n()).done;) {
                        var r = _step290.value;
                        result.push({
                          from: r.from + from,
                          to: r.to + from
                        });
                      }
                    } catch (err) {
                      _iterator290.e(err);
                    } finally {
                      _iterator290.f();
                    }
                  } else result.push({
                    from: from,
                    to: from + tree.length
                  });

                  return;
                } else if (mount.overlay) {
                  var size = result.length;
                  explore(mount.tree, mount.overlay[0].from + from);
                  if (result.length > size) return;
                }
              }

              for (var _i245 = 0; _i245 < tree.children.length; _i245++) {
                var ch = tree.children[_i245];
                if (ch instanceof _lezer_common__WEBPACK_IMPORTED_MODULE_0__["Tree"]) explore(ch, tree.positions[_i245] + from);
              }
            };

            explore(syntaxTree(state), 0);
            return result;
          }
          /**
          Indicates whether this language allows nested languages. The
          default implementation returns true.
          */

        }, {
          key: "allowsNesting",
          get: function get() {
            return true;
          }
        }]);

        return Language;
      }();
      /**
      @internal
      */


      Language.setState = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__["StateEffect"].define();

      function languageDataFacetAt(state, pos, side) {
        var topLang = state.facet(language);
        if (!topLang) return null;
        var facet = topLang.data;

        if (topLang.allowsNesting) {
          for (var node = syntaxTree(state).topNode; node; node = node.enter(pos, side, true, false)) {
            facet = node.type.prop(languageDataProp) || facet;
          }
        }

        return facet;
      }
      /**
      A subclass of [`Language`](https://codemirror.net/6/docs/ref/#language.Language) for use with Lezer
      [LR parsers](https://lezer.codemirror.net/docs/ref#lr.LRParser)
      parsers.
      */


      var LRLanguage = /*#__PURE__*/function (_Language) {
        _inherits(LRLanguage, _Language);

        var _super64 = _createSuper(LRLanguage);

        function LRLanguage(data, parser) {
          var _this137;

          _classCallCheck(this, LRLanguage);

          _this137 = _super64.call(this, data, parser, parser.topNode);
          _this137.parser = parser;
          return _this137;
        }
        /**
        Define a language from a parser.
        */


        _createClass(LRLanguage, [{
          key: "configure",
          value:
          /**
          Create a new instance of this language with a reconfigured
          version of its parser.
          */
          function configure(options) {
            return new LRLanguage(this.data, this.parser.configure(options));
          }
        }, {
          key: "allowsNesting",
          get: function get() {
            return this.parser.wrappers.length > 0;
          } // FIXME

        }], [{
          key: "define",
          value: function define(spec) {
            var data = defineLanguageFacet(spec.languageData);
            return new LRLanguage(data, spec.parser.configure({
              props: [languageDataProp.add(function (type) {
                return type.isTop ? data : undefined;
              })]
            }));
          }
        }]);

        return LRLanguage;
      }(Language);
      /**
      Get the syntax tree for a state, which is the current (possibly
      incomplete) parse tree of active [language](https://codemirror.net/6/docs/ref/#language.Language),
      or the empty tree if there is no language available.
      */


      function syntaxTree(state) {
        var field = state.field(Language.state, false);
        return field ? field.tree : _lezer_common__WEBPACK_IMPORTED_MODULE_0__["Tree"].empty;
      }
      /**
      Try to get a parse tree that spans at least up to `upto`. The
      method will do at most `timeout` milliseconds of work to parse
      up to that point if the tree isn't already available.
      */


      function ensureSyntaxTree(state, upto) {
        var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 50;

        var _a;

        var parse = (_a = state.field(Language.state, false)) === null || _a === void 0 ? void 0 : _a.context;
        return !parse ? null : parse.treeLen >= upto || parse.work(timeout, upto) ? parse.tree : null;
      } // Lezer-style Input object for a Text document.


      var DocInput = /*#__PURE__*/function () {
        function DocInput(doc) {
          var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : doc.length;

          _classCallCheck(this, DocInput);

          this.doc = doc;
          this.length = length;
          this.cursorPos = 0;
          this.string = "";
          this.cursor = doc.iter();
        }

        _createClass(DocInput, [{
          key: "syncTo",
          value: function syncTo(pos) {
            this.string = this.cursor.next(pos - this.cursorPos).value;
            this.cursorPos = pos + this.string.length;
            return this.cursorPos - this.string.length;
          }
        }, {
          key: "chunk",
          value: function chunk(pos) {
            this.syncTo(pos);
            return this.string;
          }
        }, {
          key: "lineChunks",
          get: function get() {
            return true;
          }
        }, {
          key: "read",
          value: function read(from, to) {
            var stringStart = this.cursorPos - this.string.length;
            if (from < stringStart || to >= this.cursorPos) return this.doc.sliceString(from, to);else return this.string.slice(from - stringStart, to - stringStart);
          }
        }]);

        return DocInput;
      }();

      var currentContext = null;
      /**
      A parse context provided to parsers working on the editor content.
      */

      var ParseContext = /*#__PURE__*/function () {
        /**
        @internal
        */
        function ParseContext(parser,
        /**
        The current editor state.
        */
        state) {
          var fragments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
          var
          /**
          @internal
          */
          tree = arguments.length > 3 ? arguments[3] : undefined;
          var treeLen = arguments.length > 4 ? arguments[4] : undefined;
          var
          /**
          The current editor viewport (or some overapproximation
          thereof). Intended to be used for opportunistically avoiding
          work (in which case
          [`skipUntilInView`](https://codemirror.net/6/docs/ref/#language.ParseContext.skipUntilInView)
          should be called to make sure the parser is restarted when the
          skipped region becomes visible).
          */
          viewport = arguments.length > 5 ? arguments[5] : undefined;
          var
          /**
          @internal
          */
          skipped = arguments.length > 6 ? arguments[6] : undefined;
          var
          /**
          This is where skipping parsers can register a promise that,
          when resolved, will schedule a new parse. It is cleared when
          the parse worker picks up the promise. @internal
          */
          scheduleOn = arguments.length > 7 ? arguments[7] : undefined;

          _classCallCheck(this, ParseContext);

          this.parser = parser;
          this.state = state;
          this.fragments = fragments;
          this.tree = tree;
          this.treeLen = treeLen;
          this.viewport = viewport;
          this.skipped = skipped;
          this.scheduleOn = scheduleOn;
          this.parse = null;
          /**
          @internal
          */

          this.tempSkipped = [];
        }

        _createClass(ParseContext, [{
          key: "startParse",
          value: function startParse() {
            return this.parser.startParse(new DocInput(this.state.doc), this.fragments);
          }
          /**
          @internal
          */

        }, {
          key: "work",
          value: function work(time, upto) {
            var _this138 = this;

            if (upto != null && upto >= this.state.doc.length) upto = undefined;

            if (this.tree != _lezer_common__WEBPACK_IMPORTED_MODULE_0__["Tree"].empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {
              this.takeTree();
              return true;
            }

            return this.withContext(function () {
              var _a;

              if (!_this138.parse) _this138.parse = _this138.startParse();
              if (upto != null && (_this138.parse.stoppedAt == null || _this138.parse.stoppedAt > upto) && upto < _this138.state.doc.length) _this138.parse.stopAt(upto);
              var endTime = Date.now() + time;

              for (;;) {
                var done = _this138.parse.advance();

                if (done) {
                  _this138.fragments = _this138.withoutTempSkipped(_lezer_common__WEBPACK_IMPORTED_MODULE_0__["TreeFragment"].addTree(done, _this138.fragments, _this138.parse.stoppedAt != null));
                  _this138.treeLen = (_a = _this138.parse.stoppedAt) !== null && _a !== void 0 ? _a : _this138.state.doc.length;
                  _this138.tree = done;
                  _this138.parse = null;
                  if (_this138.treeLen < (upto !== null && upto !== void 0 ? upto : _this138.state.doc.length)) _this138.parse = _this138.startParse();else return true;
                }

                if (Date.now() > endTime) return false;
              }
            });
          }
          /**
          @internal
          */

        }, {
          key: "takeTree",
          value: function takeTree() {
            var _this139 = this;

            var pos, tree;

            if (this.parse && (pos = this.parse.parsedPos) > this.treeLen) {
              if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos) this.parse.stopAt(pos);
              this.withContext(function () {
                while (!(tree = _this139.parse.advance())) {}
              });
              this.tree = tree;
              this.fragments = this.withoutTempSkipped(_lezer_common__WEBPACK_IMPORTED_MODULE_0__["TreeFragment"].addTree(this.tree, this.fragments, true));
              this.parse = null;
            }
          }
        }, {
          key: "withContext",
          value: function withContext(f) {
            var prev = currentContext;
            currentContext = this;

            try {
              return f();
            } finally {
              currentContext = prev;
            }
          }
        }, {
          key: "withoutTempSkipped",
          value: function withoutTempSkipped(fragments) {
            for (var r; r = this.tempSkipped.pop();) {
              fragments = cutFragments(fragments, r.from, r.to);
            }

            return fragments;
          }
          /**
          @internal
          */

        }, {
          key: "changes",
          value: function changes(_changes2, newState) {
            var fragments = this.fragments,
                tree = this.tree,
                treeLen = this.treeLen,
                viewport = this.viewport,
                skipped = this.skipped;
            this.takeTree();

            if (!_changes2.empty) {
              var ranges = [];

              _changes2.iterChangedRanges(function (fromA, toA, fromB, toB) {
                return ranges.push({
                  fromA: fromA,
                  toA: toA,
                  fromB: fromB,
                  toB: toB
                });
              });

              fragments = _lezer_common__WEBPACK_IMPORTED_MODULE_0__["TreeFragment"].applyChanges(fragments, ranges);
              tree = _lezer_common__WEBPACK_IMPORTED_MODULE_0__["Tree"].empty;
              treeLen = 0;
              viewport = {
                from: _changes2.mapPos(viewport.from, -1),
                to: _changes2.mapPos(viewport.to, 1)
              };

              if (this.skipped.length) {
                skipped = [];

                var _iterator291 = _createForOfIteratorHelper(this.skipped),
                    _step291;

                try {
                  for (_iterator291.s(); !(_step291 = _iterator291.n()).done;) {
                    var r = _step291.value;

                    var from = _changes2.mapPos(r.from, 1),
                        to = _changes2.mapPos(r.to, -1);

                    if (from < to) skipped.push({
                      from: from,
                      to: to
                    });
                  }
                } catch (err) {
                  _iterator291.e(err);
                } finally {
                  _iterator291.f();
                }
              }
            }

            return new ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);
          }
          /**
          @internal
          */

        }, {
          key: "updateViewport",
          value: function updateViewport(viewport) {
            if (this.viewport.from == viewport.from && this.viewport.to == viewport.to) return false;
            this.viewport = viewport;
            var startLen = this.skipped.length;

            for (var _i246 = 0; _i246 < this.skipped.length; _i246++) {
              var _this$skipped$_i = this.skipped[_i246],
                  from = _this$skipped$_i.from,
                  to = _this$skipped$_i.to;

              if (from < viewport.to && to > viewport.from) {
                this.fragments = cutFragments(this.fragments, from, to);
                this.skipped.splice(_i246--, 1);
              }
            }

            if (this.skipped.length >= startLen) return false;
            this.reset();
            return true;
          }
          /**
          @internal
          */

        }, {
          key: "reset",
          value: function reset() {
            if (this.parse) {
              this.takeTree();
              this.parse = null;
            }
          }
          /**
          Notify the parse scheduler that the given region was skipped
          because it wasn't in view, and the parse should be restarted
          when it comes into view.
          */

        }, {
          key: "skipUntilInView",
          value: function skipUntilInView(from, to) {
            this.skipped.push({
              from: from,
              to: to
            });
          }
          /**
          Returns a parser intended to be used as placeholder when
          asynchronously loading a nested parser. It'll skip its input and
          mark it as not-really-parsed, so that the next update will parse
          it again.
          
          When `until` is given, a reparse will be scheduled when that
          promise resolves.
          */

        }, {
          key: "movedPast",
          value:
          /**
          @internal
          */
          function movedPast(pos) {
            return this.treeLen < pos && this.parse && this.parse.parsedPos >= pos;
          }
          /**
          @internal
          */

        }, {
          key: "isDone",
          value: function isDone(upto) {
            var frags = this.fragments;
            return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;
          }
          /**
          Get the context for the current parse, or `null` if no editor
          parse is in progress.
          */

        }], [{
          key: "getSkippingParser",
          value: function getSkippingParser(until) {
            return new ( /*#__PURE__*/function (_lezer_common__WEBPAC2) {
              _inherits(_class24, _lezer_common__WEBPAC2);

              var _super65 = _createSuper(_class24);

              function _class24() {
                _classCallCheck(this, _class24);

                return _super65.apply(this, arguments);
              }

              _createClass(_class24, [{
                key: "createParse",
                value: function createParse(input, fragments, ranges) {
                  var from = ranges[0].from,
                      to = ranges[ranges.length - 1].to;
                  var parser = {
                    parsedPos: from,
                    advance: function advance() {
                      var cx = currentContext;

                      if (cx) {
                        var _iterator292 = _createForOfIteratorHelper(ranges),
                            _step292;

                        try {
                          for (_iterator292.s(); !(_step292 = _iterator292.n()).done;) {
                            var r = _step292.value;
                            cx.tempSkipped.push(r);
                          }
                        } catch (err) {
                          _iterator292.e(err);
                        } finally {
                          _iterator292.f();
                        }

                        if (until) cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;
                      }

                      this.parsedPos = to;
                      return new _lezer_common__WEBPACK_IMPORTED_MODULE_0__["Tree"](_lezer_common__WEBPACK_IMPORTED_MODULE_0__["NodeType"].none, [], [], to - from);
                    },
                    stoppedAt: null,
                    stopAt: function stopAt() {}
                  };
                  return parser;
                }
              }]);

              return _class24;
            }(_lezer_common__WEBPACK_IMPORTED_MODULE_0__["Parser"]))();
          }
        }, {
          key: "get",
          value: function get() {
            return currentContext;
          }
        }]);

        return ParseContext;
      }();

      function cutFragments(fragments, from, to) {
        return _lezer_common__WEBPACK_IMPORTED_MODULE_0__["TreeFragment"].applyChanges(fragments, [{
          fromA: from,
          toA: to,
          fromB: from,
          toB: to
        }]);
      }

      var LanguageState = /*#__PURE__*/function () {
        function LanguageState( // A mutable parse state that is used to preserve work done during
        // the lifetime of a state when moving to the next state.
        context) {
          _classCallCheck(this, LanguageState);

          this.context = context;
          this.tree = context.tree;
        }

        _createClass(LanguageState, [{
          key: "apply",
          value: function apply(tr) {
            if (!tr.docChanged) return this;
            var newCx = this.context.changes(tr.changes, tr.state); // If the previous parse wasn't done, go forward only up to its
            // end position or the end of the viewport, to avoid slowing down
            // state updates with parse work beyond the viewport.

            var upto = this.context.treeLen == tr.startState.doc.length ? undefined : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);
            if (!newCx.work(25
            /* Apply */
            , upto)) newCx.takeTree();
            return new LanguageState(newCx);
          }
        }], [{
          key: "init",
          value: function init(state) {
            var parseState = new ParseContext(state.facet(language).parser, state, [], _lezer_common__WEBPACK_IMPORTED_MODULE_0__["Tree"].empty, 0, {
              from: 0,
              to: state.doc.length
            }, [], null);
            if (!parseState.work(25
            /* Apply */
            )) parseState.takeTree();
            return new LanguageState(parseState);
          }
        }]);

        return LanguageState;
      }();

      Language.state = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__["StateField"].define({
        create: LanguageState.init,
        update: function update(value, tr) {
          var _iterator293 = _createForOfIteratorHelper(tr.effects),
              _step293;

          try {
            for (_iterator293.s(); !(_step293 = _iterator293.n()).done;) {
              var e = _step293.value;
              if (e.is(Language.setState)) return e.value;
            }
          } catch (err) {
            _iterator293.e(err);
          } finally {
            _iterator293.f();
          }

          if (tr.startState.facet(language) != tr.state.facet(language)) return LanguageState.init(tr.state);
          return value.apply(tr);
        }
      });

      var requestIdle = typeof window != "undefined" && window.requestIdleCallback || function (callback, _ref85) {
        var timeout = _ref85.timeout;
        return setTimeout(callback, timeout);
      };

      var cancelIdle = typeof window != "undefined" && window.cancelIdleCallback || clearTimeout;

      var parseWorker = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_2__["ViewPlugin"].fromClass( /*#__PURE__*/function () {
        function ParseWorker(view) {
          _classCallCheck(this, ParseWorker);

          this.view = view;
          this.working = -1; // End of the current time chunk

          this.chunkEnd = -1; // Milliseconds of budget left for this chunk

          this.chunkBudget = -1;
          this.work = this.work.bind(this);
          this.scheduleWork();
        }

        _createClass(ParseWorker, [{
          key: "update",
          value: function update(_update35) {
            var cx = this.view.state.field(Language.state).context;
            if (cx.updateViewport(_update35.view.viewport) || this.view.viewport.to > cx.treeLen) this.scheduleWork();

            if (_update35.docChanged) {
              if (this.view.hasFocus) this.chunkBudget += 50
              /* ChangeBonus */
              ;
              this.scheduleWork();
            }

            this.checkAsyncSchedule(cx);
          }
        }, {
          key: "scheduleWork",
          value: function scheduleWork() {
            if (this.working > -1) return;
            var state = this.view.state,
                field = state.field(Language.state);
            if (field.tree != field.context.tree || !field.context.isDone(state.doc.length)) this.working = requestIdle(this.work, {
              timeout: 500
              /* Pause */

            });
          }
        }, {
          key: "work",
          value: function work(deadline) {
            this.working = -1;
            var now = Date.now();

            if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) {
              // Start a new chunk
              this.chunkEnd = now + 30000
              /* ChunkTime */
              ;
              this.chunkBudget = 3000
              /* ChunkBudget */
              ;
            }

            if (this.chunkBudget <= 0) return; // No more budget

            var _this$view = this.view,
                state = _this$view.state,
                vpTo = _this$view.viewport.to,
                field = state.field(Language.state);
            if (field.tree == field.context.tree && field.context.treeLen >= vpTo + 1000000
            /* MaxParseAhead */
            ) return;
            var time = Math.min(this.chunkBudget, deadline ? Math.max(25
            /* MinSlice */
            , deadline.timeRemaining()) : 100
            /* Slice */
            );
            var done = field.context.work(time, vpTo + 1000000
            /* MaxParseAhead */
            );
            this.chunkBudget -= Date.now() - now;

            if (done || this.chunkBudget <= 0 || field.context.movedPast(vpTo)) {
              field.context.takeTree();
              this.view.dispatch({
                effects: Language.setState.of(new LanguageState(field.context))
              });
            }

            if (!done && this.chunkBudget > 0) this.scheduleWork();
            this.checkAsyncSchedule(field.context);
          }
        }, {
          key: "checkAsyncSchedule",
          value: function checkAsyncSchedule(cx) {
            var _this140 = this;

            if (cx.scheduleOn) {
              cx.scheduleOn.then(function () {
                return _this140.scheduleWork();
              });
              cx.scheduleOn = null;
            }
          }
        }, {
          key: "destroy",
          value: function destroy() {
            if (this.working >= 0) cancelIdle(this.working);
          }
        }]);

        return ParseWorker;
      }(), {
        eventHandlers: {
          focus: function focus() {
            this.scheduleWork();
          }
        }
      });
      /**
      The facet used to associate a language with an editor state.
      */


      var language = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__["Facet"].define({
        combine: function combine(languages) {
          return languages.length ? languages[0] : null;
        },
        enables: [Language.state, parseWorker]
      });
      /**
      This class bundles a [language object](https://codemirror.net/6/docs/ref/#language.Language) with an
      optional set of supporting extensions. Language packages are
      encouraged to export a function that optionally takes a
      configuration object and returns a `LanguageSupport` instance, as
      the main way for client code to use the package.
      */


      var LanguageSupport = /*#__PURE__*/_createClass(
      /**
      Create a support object.
      */
      function LanguageSupport(
      /**
      The language object.
      */
      language) {
        var support = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

        _classCallCheck(this, LanguageSupport);

        this.language = language;
        this.support = support;
        this.extension = [language, support];
      });
      /**
      Language descriptions are used to store metadata about languages
      and to dynamically load them. Their main role is finding the
      appropriate language for a filename or dynamically loading nested
      parsers.
      */


      var LanguageDescription = /*#__PURE__*/function () {
        function LanguageDescription(
        /**
        The name of this language.
        */
        name,
        /**
        Alternative names for the mode (lowercased, includes `this.name`).
        */
        alias,
        /**
        File extensions associated with this language.
        */
        extensions,
        /**
        Optional filename pattern that should be associated with this
        language.
        */
        filename, loadFunc) {
          _classCallCheck(this, LanguageDescription);

          this.name = name;
          this.alias = alias;
          this.extensions = extensions;
          this.filename = filename;
          this.loadFunc = loadFunc;
          /**
          If the language has been loaded, this will hold its value.
          */

          this.support = undefined;
          this.loading = null;
        }
        /**
        Start loading the the language. Will return a promise that
        resolves to a [`LanguageSupport`](https://codemirror.net/6/docs/ref/#language.LanguageSupport)
        object when the language successfully loads.
        */


        _createClass(LanguageDescription, [{
          key: "load",
          value: function load() {
            var _this141 = this;

            return this.loading || (this.loading = this.loadFunc().then(function (support) {
              return _this141.support = support;
            }, function (err) {
              _this141.loading = null;
              throw err;
            }));
          }
          /**
          Create a language description.
          */

        }], [{
          key: "of",
          value: function of(spec) {
            return new LanguageDescription(spec.name, (spec.alias || []).concat(spec.name).map(function (s) {
              return s.toLowerCase();
            }), spec.extensions || [], spec.filename, spec.load);
          }
          /**
          Look for a language in the given array of descriptions that
          matches the filename. Will first match
          [`filename`](https://codemirror.net/6/docs/ref/#language.LanguageDescription.filename) patterns,
          and then [extensions](https://codemirror.net/6/docs/ref/#language.LanguageDescription.extensions),
          and return the first language that matches.
          */

        }, {
          key: "matchFilename",
          value: function matchFilename(descs, filename) {
            var _iterator294 = _createForOfIteratorHelper(descs),
                _step294;

            try {
              for (_iterator294.s(); !(_step294 = _iterator294.n()).done;) {
                var _d2 = _step294.value;
                if (_d2.filename && _d2.filename.test(filename)) return _d2;
              }
            } catch (err) {
              _iterator294.e(err);
            } finally {
              _iterator294.f();
            }

            var ext = /\.([^.]+)$/.exec(filename);

            if (ext) {
              var _iterator295 = _createForOfIteratorHelper(descs),
                  _step295;

              try {
                for (_iterator295.s(); !(_step295 = _iterator295.n()).done;) {
                  var d = _step295.value;
                  if (d.extensions.indexOf(ext[1]) > -1) return d;
                }
              } catch (err) {
                _iterator295.e(err);
              } finally {
                _iterator295.f();
              }
            }

            return null;
          }
          /**
          Look for a language whose name or alias matches the the given
          name (case-insensitively). If `fuzzy` is true, and no direct
          matchs is found, this'll also search for a language whose name
          or alias occurs in the string (for names shorter than three
          characters, only when surrounded by non-word characters).
          */

        }, {
          key: "matchLanguageName",
          value: function matchLanguageName(descs, name) {
            var fuzzy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
            name = name.toLowerCase();

            var _iterator296 = _createForOfIteratorHelper(descs),
                _step296;

            try {
              for (_iterator296.s(); !(_step296 = _iterator296.n()).done;) {
                var _d3 = _step296.value;
                if (_d3.alias.some(function (a) {
                  return a == name;
                })) return _d3;
              }
            } catch (err) {
              _iterator296.e(err);
            } finally {
              _iterator296.f();
            }

            if (fuzzy) {
              var _iterator297 = _createForOfIteratorHelper(descs),
                  _step297;

              try {
                for (_iterator297.s(); !(_step297 = _iterator297.n()).done;) {
                  var d = _step297.value;

                  var _iterator298 = _createForOfIteratorHelper(d.alias),
                      _step298;

                  try {
                    for (_iterator298.s(); !(_step298 = _iterator298.n()).done;) {
                      var a = _step298.value;
                      var found = name.indexOf(a);
                      if (found > -1 && (a.length > 2 || !/\w/.test(name[found - 1]) && !/\w/.test(name[found + a.length]))) return d;
                    }
                  } catch (err) {
                    _iterator298.e(err);
                  } finally {
                    _iterator298.f();
                  }
                }
              } catch (err) {
                _iterator297.e(err);
              } finally {
                _iterator297.f();
              }
            }

            return null;
          }
        }]);

        return LanguageDescription;
      }();
      /**
      Facet that defines a way to provide a function that computes the
      appropriate indentation depth at the start of a given line, or
      `null` to indicate no appropriate indentation could be determined.
      */


      var indentService = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__["Facet"].define();
      /**
      Facet for overriding the unit by which indentation happens.
      Should be a string consisting either entirely of spaces or
      entirely of tabs. When not set, this defaults to 2 spaces.
      */


      var indentUnit = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__["Facet"].define({
        combine: function combine(values) {
          if (!values.length) return "  ";
          if (!/^(?: +|\t+)$/.test(values[0])) throw new Error("Invalid indent unit: " + JSON.stringify(values[0]));
          return values[0];
        }
      });
      /**
      Return the _column width_ of an indent unit in the state.
      Determined by the [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit)
      facet, and [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) when that
      contains tabs.
      */


      function getIndentUnit(state) {
        var unit = state.facet(indentUnit);
        return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;
      }
      /**
      Create an indentation string that covers columns 0 to `cols`.
      Will use tabs for as much of the columns as possible when the
      [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit) facet contains
      tabs.
      */


      function indentString(state, cols) {
        var result = "",
            ts = state.tabSize;
        if (state.facet(indentUnit).charCodeAt(0) == 9) while (cols >= ts) {
          result += "\t";
          cols -= ts;
        }

        for (var _i247 = 0; _i247 < cols; _i247++) {
          result += " ";
        }

        return result;
      }
      /**
      Get the indentation at the given position. Will first consult any
      [indent services](https://codemirror.net/6/docs/ref/#language.indentService) that are registered,
      and if none of those return an indentation, this will check the
      syntax tree for the [indent node prop](https://codemirror.net/6/docs/ref/#language.indentNodeProp)
      and use that if found. Returns a number when an indentation could
      be determined, and null otherwise.
      */


      function getIndentation(context, pos) {
        if (context instanceof _codemirror_state__WEBPACK_IMPORTED_MODULE_1__["EditorState"]) context = new IndentContext(context);

        var _iterator299 = _createForOfIteratorHelper(context.state.facet(indentService)),
            _step299;

        try {
          for (_iterator299.s(); !(_step299 = _iterator299.n()).done;) {
            var service = _step299.value;
            var result = service(context, pos);
            if (result != null) return result;
          }
        } catch (err) {
          _iterator299.e(err);
        } finally {
          _iterator299.f();
        }

        var tree = syntaxTree(context.state);
        return tree ? syntaxIndentation(context, tree, pos) : null;
      }
      /**
      Indentation contexts are used when calling [indentation
      services](https://codemirror.net/6/docs/ref/#language.indentService). They provide helper utilities
      useful in indentation logic, and can selectively override the
      indentation reported for some lines.
      */


      var IndentContext = /*#__PURE__*/function () {
        /**
        Create an indent context.
        */
        function IndentContext(
        /**
        The editor state.
        */
        state) {
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

          _classCallCheck(this, IndentContext);

          this.state = state;
          this.options = options;
          this.unit = getIndentUnit(state);
        }
        /**
        Get a description of the line at the given position, taking
        [simulated line
        breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
        into account. If there is such a break at `pos`, the `bias`
        argument determines whether the part of the line line before or
        after the break is used.
        */


        _createClass(IndentContext, [{
          key: "lineAt",
          value: function lineAt(pos) {
            var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
            var line = this.state.doc.lineAt(pos);
            var simulateBreak = this.options.simulateBreak;

            if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {
              if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos) return {
                text: line.text.slice(simulateBreak - line.from),
                from: simulateBreak
              };else return {
                text: line.text.slice(0, simulateBreak - line.from),
                from: line.from
              };
            }

            return line;
          }
          /**
          Get the text directly after `pos`, either the entire line
          or the next 100 characters, whichever is shorter.
          */

        }, {
          key: "textAfterPos",
          value: function textAfterPos(pos) {
            var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
            if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak) return "";

            var _this$lineAt = this.lineAt(pos, bias),
                text = _this$lineAt.text,
                from = _this$lineAt.from;

            return text.slice(pos - from, Math.min(text.length, pos + 100 - from));
          }
          /**
          Find the column for the given position.
          */

        }, {
          key: "column",
          value: function column(pos) {
            var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

            var _this$lineAt2 = this.lineAt(pos, bias),
                text = _this$lineAt2.text,
                from = _this$lineAt2.from;

            var result = this.countColumn(text, pos - from);
            var override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;
            if (override > -1) result += override - this.countColumn(text, text.search(/\S|$/));
            return result;
          }
          /**
          Find the column position (taking tabs into account) of the given
          position in the given string.
          */

        }, {
          key: "countColumn",
          value: function countColumn(line) {
            var pos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : line.length;
            return Object(_codemirror_text__WEBPACK_IMPORTED_MODULE_3__["countColumn"])(line, this.state.tabSize, pos);
          }
          /**
          Find the indentation column of the line at the given point.
          */

        }, {
          key: "lineIndent",
          value: function lineIndent(pos) {
            var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

            var _this$lineAt3 = this.lineAt(pos, bias),
                text = _this$lineAt3.text,
                from = _this$lineAt3.from;

            var override = this.options.overrideIndentation;

            if (override) {
              var overriden = override(from);
              if (overriden > -1) return overriden;
            }

            return this.countColumn(text, text.search(/\S|$/));
          }
          /**
          Returns the [simulated line
          break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
          for this context, if any.
          */

        }, {
          key: "simulatedBreak",
          get: function get() {
            return this.options.simulateBreak || null;
          }
        }]);

        return IndentContext;
      }();
      /**
      A syntax tree node prop used to associate indentation strategies
      with node types. Such a strategy is a function from an indentation
      context to a column number or null, where null indicates that no
      definitive indentation can be determined.
      */


      var indentNodeProp = /*@__PURE__*/new _lezer_common__WEBPACK_IMPORTED_MODULE_0__["NodeProp"](); // Compute the indentation for a given position from the syntax tree.

      function syntaxIndentation(cx, ast, pos) {
        return indentFrom(ast.resolveInner(pos).enterUnfinishedNodesBefore(pos), pos, cx);
      }

      function ignoreClosed(cx) {
        return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;
      }

      function indentStrategy(tree) {
        var strategy = tree.type.prop(indentNodeProp);
        if (strategy) return strategy;
        var first = tree.firstChild,
            close;

        if (first && (close = first.type.prop(_lezer_common__WEBPACK_IMPORTED_MODULE_0__["NodeProp"].closedBy))) {
          var last = tree.lastChild,
              closed = last && close.indexOf(last.name) > -1;
          return function (cx) {
            return delimitedStrategy(cx, true, 1, undefined, closed && !ignoreClosed(cx) ? last.from : undefined);
          };
        }

        return tree.parent == null ? topIndent : null;
      }

      function indentFrom(node, pos, base) {
        for (; node; node = node.parent) {
          var strategy = indentStrategy(node);
          if (strategy) return strategy(new TreeIndentContext(base, pos, node));
        }

        return null;
      }

      function topIndent() {
        return 0;
      }
      /**
      Objects of this type provide context information and helper
      methods to indentation functions.
      */


      var TreeIndentContext = /*#__PURE__*/function (_IndentContext) {
        _inherits(TreeIndentContext, _IndentContext);

        var _super66 = _createSuper(TreeIndentContext);

        /**
        @internal
        */
        function TreeIndentContext(base,
        /**
        The position at which indentation is being computed.
        */
        pos,
        /**
        The syntax tree node to which the indentation strategy
        applies.
        */
        node) {
          var _this142;

          _classCallCheck(this, TreeIndentContext);

          _this142 = _super66.call(this, base.state, base.options);
          _this142.base = base;
          _this142.pos = pos;
          _this142.node = node;
          return _this142;
        }
        /**
        Get the text directly after `this.pos`, either the entire line
        or the next 100 characters, whichever is shorter.
        */


        _createClass(TreeIndentContext, [{
          key: "textAfter",
          get: function get() {
            return this.textAfterPos(this.pos);
          }
          /**
          Get the indentation at the reference line for `this.node`, which
          is the line on which it starts, unless there is a node that is
          _not_ a parent of this node covering the start of that line. If
          so, the line at the start of that node is tried, again skipping
          on if it is covered by another such node.
          */

        }, {
          key: "baseIndent",
          get: function get() {
            var line = this.state.doc.lineAt(this.node.from); // Skip line starts that are covered by a sibling (or cousin, etc)

            for (;;) {
              var atBreak = this.node.resolve(line.from);

              while (atBreak.parent && atBreak.parent.from == atBreak.from) {
                atBreak = atBreak.parent;
              }

              if (isParent(atBreak, this.node)) break;
              line = this.state.doc.lineAt(atBreak.from);
            }

            return this.lineIndent(line.from);
          }
          /**
          Continue looking for indentations in the node's parent nodes,
          and return the result of that.
          */

        }, {
          key: "continue",
          value: function _continue() {
            var parent = this.node.parent;
            return parent ? indentFrom(parent, this.pos, this.base) : 0;
          }
        }]);

        return TreeIndentContext;
      }(IndentContext);

      function isParent(parent, of) {
        for (var cur = of; cur; cur = cur.parent) {
          if (parent == cur) return true;
        }

        return false;
      } // Check whether a delimited node is aligned (meaning there are
      // non-skipped nodes on the same line as the opening delimiter). And
      // if so, return the opening token.


      function bracketedAligned(context) {
        var tree = context.node;
        var openToken = tree.childAfter(tree.from),
            last = tree.lastChild;
        if (!openToken) return null;
        var sim = context.options.simulateBreak;
        var openLine = context.state.doc.lineAt(openToken.from);
        var lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);

        for (var pos = openToken.to;;) {
          var next = tree.childAfter(pos);
          if (!next || next == last) return null;
          if (!next.type.isSkipped) return next.from < lineEnd ? openToken : null;
          pos = next.to;
        }
      }
      /**
      An indentation strategy for delimited (usually bracketed) nodes.
      Will, by default, indent one unit more than the parent's base
      indent unless the line starts with a closing token. When `align`
      is true and there are non-skipped nodes on the node's opening
      line, the content of the node will be aligned with the end of the
      opening node, like this:
      
          foo(bar,
              baz)
      */


      function delimitedIndent(_ref86) {
        var closing = _ref86.closing,
            _ref86$align = _ref86.align,
            align = _ref86$align === void 0 ? true : _ref86$align,
            _ref86$units = _ref86.units,
            units = _ref86$units === void 0 ? 1 : _ref86$units;
        return function (context) {
          return delimitedStrategy(context, align, units, closing);
        };
      }

      function delimitedStrategy(context, align, units, closing, closedAt) {
        var after = context.textAfter,
            space = after.match(/^\s*/)[0].length;
        var closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;
        var aligned = align ? bracketedAligned(context) : null;
        if (aligned) return closed ? context.column(aligned.from) : context.column(aligned.to);
        return context.baseIndent + (closed ? 0 : context.unit * units);
      }
      /**
      An indentation strategy that aligns a node's content to its base
      indentation.
      */


      var flatIndent = function flatIndent(context) {
        return context.baseIndent;
      };
      /**
      Creates an indentation strategy that, by default, indents
      continued lines one unit more than the node's base indentation.
      You can provide `except` to prevent indentation of lines that
      match a pattern (for example `/^else\b/` in `if`/`else`
      constructs), and you can change the amount of units used with the
      `units` option.
      */


      function continuedIndent() {
        var _ref87 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            except = _ref87.except,
            _ref87$units = _ref87.units,
            units = _ref87$units === void 0 ? 1 : _ref87$units;

        return function (context) {
          var matchExcept = except && except.test(context.textAfter);
          return context.baseIndent + (matchExcept ? 0 : units * context.unit);
        };
      }

      var DontIndentBeyond = 200;
      /**
      Enables reindentation on input. When a language defines an
      `indentOnInput` field in its [language
      data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt), which must hold a regular
      expression, the line at the cursor will be reindented whenever new
      text is typed and the input from the start of the line up to the
      cursor matches that regexp.
      
      To avoid unneccesary reindents, it is recommended to start the
      regexp with `^` (usually followed by `\s*`), and end it with `$`.
      For example, `/^\s*\}$/` will reindent when a closing brace is
      added at the start of a line.
      */

      function indentOnInput() {
        return _codemirror_state__WEBPACK_IMPORTED_MODULE_1__["EditorState"].transactionFilter.of(function (tr) {
          if (!tr.docChanged || !tr.isUserEvent("input.type")) return tr;
          var rules = tr.startState.languageDataAt("indentOnInput", tr.startState.selection.main.head);
          if (!rules.length) return tr;
          var doc = tr.newDoc,
              head = tr.newSelection.main.head,
              line = doc.lineAt(head);
          if (head > line.from + DontIndentBeyond) return tr;
          var lineStart = doc.sliceString(line.from, head);
          if (!rules.some(function (r) {
            return r.test(lineStart);
          })) return tr;
          var state = tr.state,
              last = -1,
              changes = [];

          var _iterator300 = _createForOfIteratorHelper(state.selection.ranges),
              _step300;

          try {
            for (_iterator300.s(); !(_step300 = _iterator300.n()).done;) {
              var _head = _step300.value.head;

              var _line6 = state.doc.lineAt(_head);

              if (_line6.from == last) continue;
              last = _line6.from;
              var indent = getIndentation(state, _line6.from);
              if (indent == null) continue;
              var cur = /^\s*/.exec(_line6.text)[0];
              var norm = indentString(state, indent);
              if (cur != norm) changes.push({
                from: _line6.from,
                to: _line6.from + cur.length,
                insert: norm
              });
            }
          } catch (err) {
            _iterator300.e(err);
          } finally {
            _iterator300.f();
          }

          return changes.length ? [tr, {
            changes: changes,
            sequential: true
          }] : tr;
        });
      }
      /**
      A facet that registers a code folding service. When called with
      the extent of a line, such a function should return a foldable
      range that starts on that line (but continues beyond it), if one
      can be found.
      */


      var foldService = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__["Facet"].define();
      /**
      This node prop is used to associate folding information with
      syntax node types. Given a syntax node, it should check whether
      that tree is foldable and return the range that can be collapsed
      when it is.
      */


      var foldNodeProp = /*@__PURE__*/new _lezer_common__WEBPACK_IMPORTED_MODULE_0__["NodeProp"]();
      /**
      [Fold](https://codemirror.net/6/docs/ref/#language.foldNodeProp) function that folds everything but
      the first and the last child of a syntax node. Useful for nodes
      that start and end with delimiters.
      */

      function foldInside(node) {
        var first = node.firstChild,
            last = node.lastChild;
        return first && first.to < last.from ? {
          from: first.to,
          to: last.type.isError ? node.to : last.from
        } : null;
      }

      function syntaxFolding(state, start, end) {
        var tree = syntaxTree(state);
        if (tree.length == 0) return null;
        var inner = tree.resolveInner(end);
        var found = null;

        for (var cur = inner; cur; cur = cur.parent) {
          if (cur.to <= end || cur.from > end) continue;
          if (found && cur.from < start) break;
          var prop = cur.type.prop(foldNodeProp);

          if (prop) {
            var value = prop(cur, state);
            if (value && value.from <= end && value.from >= start && value.to > end) found = value;
          }
        }

        return found;
      }
      /**
      Check whether the given line is foldable. First asks any fold
      services registered through
      [`foldService`](https://codemirror.net/6/docs/ref/#language.foldService), and if none of them return
      a result, tries to query the [fold node
      prop](https://codemirror.net/6/docs/ref/#language.foldNodeProp) of syntax nodes that cover the end
      of the line.
      */


      function foldable(state, lineStart, lineEnd) {
        var _iterator301 = _createForOfIteratorHelper(state.facet(foldService)),
            _step301;

        try {
          for (_iterator301.s(); !(_step301 = _iterator301.n()).done;) {
            var service = _step301.value;
            var result = service(state, lineStart, lineEnd);
            if (result) return result;
          }
        } catch (err) {
          _iterator301.e(err);
        } finally {
          _iterator301.f();
        }

        return syntaxFolding(state, lineStart, lineEnd);
      }
      /***/

    }
  }]);
})();
//# sourceMappingURL=codemirror-example-module-es5.js.map